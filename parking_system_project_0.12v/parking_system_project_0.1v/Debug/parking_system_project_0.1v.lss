
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000011fe  00001292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  00800198  00800198  0000132a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002165  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0e  00000000  00000000  000036dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010cc  00000000  00000000  000045eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  000056b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093e  00000000  00000000  00005bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129b  00000000  00000000  0000652e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000077c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5c c2       	rjmp	.+1208   	; 0x4f6 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	df c4       	rjmp	.+2494   	; 0xa10 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ef       	ldi	r30, 0xFE	; 254
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 39       	cpi	r26, 0x98	; 152
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 e9       	ldi	r26, 0x98	; 152
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3c       	cpi	r26, 0xC9	; 201
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ee d0       	rcall	.+476    	; 0x2a0 <main>
      c4:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_30>:
	TICK.tick_1ms++;
	buzz_play(); //
}

ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	u8 buff=UDR1;
      f0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff);
      f4:	e0 d4       	rcall	.+2496   	; 0xab6 <uart0_tx_char>
	
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <mfrc_print_serial>:
	

}

void mfrc_print_serial(int _type)
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
	switch(_type)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	91 05       	cpc	r25, r1
     128:	91 f0       	breq	.+36     	; 0x14e <mfrc_print_serial+0x32>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	91 05       	cpc	r25, r1
     12e:	f1 f0       	breq	.+60     	; 0x16c <mfrc_print_serial+0x50>
     130:	89 2b       	or	r24, r25
     132:	49 f5       	brne	.+82     	; 0x186 <mfrc_print_serial+0x6a>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	c2 d4       	rcall	.+2436   	; 0xabe <uart0_tx_string>
     13a:	c1 eb       	ldi	r28, 0xB1	; 177
     13c:	d2 e0       	ldi	r29, 0x02	; 2
     13e:	05 eb       	ldi	r16, 0xB5	; 181
     140:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			uart0_tx_char(rfid_uid[i]);
     142:	89 91       	ld	r24, Y+
     144:	b8 d4       	rcall	.+2416   	; 0xab6 <uart0_tx_char>
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     146:	0c 17       	cp	r16, r28
     148:	1d 07       	cpc	r17, r29
     14a:	d9 f7       	brne	.-10     	; 0x142 <mfrc_print_serial+0x26>
     14c:	1c c0       	rjmp	.+56     	; 0x186 <mfrc_print_serial+0x6a>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     14e:	8b e0       	ldi	r24, 0x0B	; 11
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	b5 d4       	rcall	.+2410   	; 0xabe <uart0_tx_string>
     154:	c1 eb       	ldi	r28, 0xB1	; 177
     156:	d2 e0       	ldi	r29, 0x02	; 2
     158:	05 eb       	ldi	r16, 0xB5	; 181
     15a:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(IntToString(rfid_uid[i]));
     15c:	89 91       	ld	r24, Y+
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	db d4       	rcall	.+2486   	; 0xb18 <IntToString>
     162:	ad d4       	rcall	.+2394   	; 0xabe <uart0_tx_string>
     164:	c0 17       	cp	r28, r16
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     166:	d1 07       	cpc	r29, r17
     168:	c9 f7       	brne	.-14     	; 0x15c <mfrc_print_serial+0x40>
     16a:	0d c0       	rjmp	.+26     	; 0x186 <mfrc_print_serial+0x6a>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     16c:	83 e1       	ldi	r24, 0x13	; 19
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	a6 d4       	rcall	.+2380   	; 0xabe <uart0_tx_string>
     172:	c1 eb       	ldi	r28, 0xB1	; 177
     174:	d2 e0       	ldi	r29, 0x02	; 2
     176:	05 eb       	ldi	r16, 0xB5	; 181
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(HexToString(rfid_uid[i]));
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	89 91       	ld	r24, Y+
     17c:	fc d4       	rcall	.+2552   	; 0xb76 <HexToString>
     17e:	9f d4       	rcall	.+2366   	; 0xabe <uart0_tx_string>
     180:	c0 17       	cp	r28, r16
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     182:	d1 07       	cpc	r29, r17
     184:	d1 f7       	brne	.-12     	; 0x17a <mfrc_print_serial+0x5e>
     186:	df 91       	pop	r29
		
		break;
		
	}
	
}
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <mfrc_check_and_data_receive>:
     190:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <noise_flag.2340>
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     194:	81 11       	cpse	r24, r1
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <mfrc_check_and_data_receive+0x16>
		byte = mfrc522_request(PICC_REQALL,rfid_uid);
     198:	61 eb       	ldi	r22, 0xB1	; 177
     19a:	72 e0       	ldi	r23, 0x02	; 2
     19c:	82 e5       	ldi	r24, 0x52	; 82
     19e:	49 d3       	rcall	.+1682   	; 0x832 <mfrc522_request>
     1a0:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <byte>
     1a4:	19 c0       	rjmp	.+50     	; 0x1d8 <mfrc_check_and_data_receive+0x48>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid); //이상한 데이터 가져올 때
     1a6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     1aa:	88 23       	and	r24, r24
     1ac:	29 f0       	breq	.+10     	; 0x1b8 <mfrc_check_and_data_receive+0x28>
     1ae:	61 eb       	ldi	r22, 0xB1	; 177
     1b0:	72 e0       	ldi	r23, 0x02	; 2
     1b2:	82 e5       	ldi	r24, 0x52	; 82
     1b4:	3e d3       	rcall	.+1660   	; 0x832 <mfrc522_request>
     1b6:	0a c0       	rjmp	.+20     	; 0x1cc <mfrc_check_and_data_receive+0x3c>
		else{ //정상적인 데이터 가져올 때
			byte=mfrc522_request(PICC_REQALL,rfid_uid);
     1b8:	61 eb       	ldi	r22, 0xB1	; 177
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	82 e5       	ldi	r24, 0x52	; 82
     1be:	39 d3       	rcall	.+1650   	; 0x832 <mfrc522_request>
     1c0:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <byte>
			if(byte==ERROR) noise_flag=0;
     1c4:	83 30       	cpi	r24, 0x03	; 3
     1c6:	11 f4       	brne	.+4      	; 0x1cc <mfrc_check_and_data_receive+0x3c>
     1c8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <noise_flag.2340>
		}
			
		toggle_flag^=0x01;
     1cc:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <__data_end>
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	89 27       	eor	r24, r25
     1d4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     1d8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <byte>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	29 f0       	breq	.+10     	; 0x1ea <mfrc_check_and_data_receive+0x5a>
	{
		//여기서 release해주지 말고, 타이머라던가, 문이 다시 닫혔을 때 등등 이런 경우에서 풀어주자.
		detected_flag=NON_DETECTED;  
     1e0:	88 e5       	ldi	r24, 0x58	; 88
     1e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return RECEIVE_NONE;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	08 95       	ret
	}
	else if((byte==CARD_FOUND)&&(detected_flag==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1ee:	88 35       	cpi	r24, 0x58	; 88
     1f0:	21 f5       	brne	.+72     	; 0x23a <mfrc_check_and_data_receive+0xaa>
	{
		detected_flag=DETECED;
     1f2:	8f e4       	ldi	r24, 0x4F	; 79
     1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		noise_flag=1; //얘가 첫 순간임.
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <noise_flag.2340>
		toggle_flag=1;
     1fe:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
		byte=mfrc522_get_card_serial(rfid_uid);
     202:	81 eb       	ldi	r24, 0xB1	; 177
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	47 d3       	rcall	.+1678   	; 0x896 <mfrc522_get_card_serial>
     208:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <byte>
		if(byte==CARD_FOUND){
     20c:	81 30       	cpi	r24, 0x01	; 1
	///////////////////////////////////////////////////

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			uart0_tx_string("[CHECK UID]: ");
     20e:	81 f4       	brne	.+32     	; 0x230 <mfrc_check_and_data_receive+0xa0>
     210:	8b e1       	ldi	r24, 0x1B	; 27
     212:	91 e0       	ldi	r25, 0x01	; 1
			mfrc_print_serial(ASCII_TYPE);
     214:	54 d4       	rcall	.+2216   	; 0xabe <uart0_tx_string>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
			mfrc_print_serial(DECIMAL_TYPE);
     21a:	80 df       	rcall	.-256    	; 0x11c <mfrc_print_serial>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
			mfrc_print_serial(HEXDECIMAL_TYPE);
     220:	7d df       	rcall	.-262    	; 0x11c <mfrc_print_serial>
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	90 e0       	ldi	r25, 0x00	; 0
			uart0_tx_char('\n');
     226:	7a df       	rcall	.-268    	; 0x11c <mfrc_print_serial>
     228:	8a e0       	ldi	r24, 0x0A	; 10
     22a:	45 d4       	rcall	.+2186   	; 0xab6 <uart0_tx_char>
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
		}
		else {
			//dummy code
			//setSoundClip(BUZZ_FAIL);
			uart0_tx_string("\nerror\n");
     230:	89 e2       	ldi	r24, 0x29	; 41
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	44 d4       	rcall	.+2184   	; 0xabe <uart0_tx_string>
     236:	8f ef       	ldi	r24, 0xFF	; 255
			////////////////////////////
			
			return RECEIVE_FAIL;
     238:	08 95       	ret
     23a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     23c:	08 95       	ret

0000023e <setSoundClip>:
	}
	

}
     23e:	82 30       	cpi	r24, 0x02	; 2
	
}

void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 switch(clip)
     240:	69 f0       	breq	.+26     	; 0x25c <setSoundClip+0x1e>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	c1 f0       	breq	.+48     	; 0x276 <setSoundClip+0x38>
     246:	81 11       	cpse	r24, r1
     248:	22 c0       	rjmp	.+68     	; 0x28e <setSoundClip+0x50>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     24a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <music_flag>
     24e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <music_flag+0x1>
     252:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <music_flag+0x2>
     256:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <music_flag+0x3>
     25a:	19 c0       	rjmp	.+50     	; 0x28e <setSoundClip+0x50>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <music_flag>
     268:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <music_flag+0x1>
     26c:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <music_flag+0x2>
     270:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <music_flag+0x3>
     274:	0c c0       	rjmp	.+24     	; 0x28e <setSoundClip+0x50>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <music_flag>
     282:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <music_flag+0x1>
     286:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <music_flag+0x2>
     28a:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <music_flag+0x3>
// 		 case BUZZ_BEEP: music_flag=BUZZ_BEEP; break;
// 		 case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
// 		 case BUZZ_POWERON: music_flag=BUZZ_POWERON; break;
// 		 case BUZZ_DOOR_OPEN: music_flag=BUZZ_DOOR_OPEN; break;
	 }
	 TICK.buzz_1ms=0;
     28e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <TICK+0x4>
     292:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <TICK+0x5>
     296:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <TICK+0x6>
     29a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <TICK+0x7>
     29e:	08 95       	ret

000002a0 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     2a0:	78 94       	sei
	DDRA|=0x03; //test Port
     2a2:	8a b3       	in	r24, 0x1a	; 26
     2a4:	83 60       	ori	r24, 0x03	; 3
     2a6:	8a bb       	out	0x1a, r24	; 26
	
	
	//사용하는 기능들 초기화 작업
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
     2a8:	1f 92       	push	r1
     2aa:	1f 92       	push	r1
     2ac:	1f 92       	push	r1
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	8f 93       	push	r24
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	8f 93       	push	r24
     2b6:	25 d3       	rcall	.+1610   	; 0x902 <spi_init>
	//spi_master_tx(0x67);
	mfrc522_init();
     2b8:	74 d1       	rcall	.+744    	; 0x5a2 <mfrc522_init>
     2ba:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(0,9600);
     2bc:	75 e2       	ldi	r23, 0x25	; 37
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	cd d3       	rcall	.+1946   	; 0xa5e <uart_init>
     2c4:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(1,9600);//esp8266() : Rx:PD2, Tx:PD3
     2c6:	75 e2       	ldi	r23, 0x25	; 37
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c8 d3       	rcall	.+1936   	; 0xa5e <uart_init>
     2ce:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d0:	89 e6       	ldi	r24, 0x69	; 105
     2d2:	98 e1       	ldi	r25, 0x18	; 24
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	80 40       	sbci	r24, 0x00	; 0
     2d8:	90 40       	sbci	r25, 0x00	; 0
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x34>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x3e>
	
	_delay_ms(500);
	mfrc522_version_check();
     2de:	00 00       	nop
	mfrc522_IRQ_enable();
     2e0:	7f d1       	rcall	.+766    	; 0x5e0 <mfrc522_version_check>
// 	byte=mfrc522_read(ComIEnReg);
// 	mfrc522_write(ComIEnReg,byte|0x20); //RxInterrupt Enable
// 	byte=mfrc522_read(DivIEnReg);
// 	mfrc522_write(DivIEnReg,byte|0x80); //IRQPushPull
	cli();
     2e2:	a0 d1       	rcall	.+832    	; 0x624 <mfrc522_IRQ_enable>
	setSoundClip(BUZZ_ON);
     2e4:	f8 94       	cli
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	aa df       	rcall	.-172    	; 0x23e <setSoundClip>
	timer0_init();
     2ea:	57 d3       	rcall	.+1710   	; 0x99a <timer0_init>
     2ec:	5f d3       	rcall	.+1726   	; 0x9ac <timer3_init>
	timer3_init();
     2ee:	78 94       	sei
     2f0:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <TICK>
	sei();
	 TICK.tick_1ms=0;
     2f4:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <TICK+0x1>
     2f8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <TICK+0x2>
     2fc:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <TICK+0x3>
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	83 ed       	ldi	r24, 0xD3	; 211
     304:	90 e3       	ldi	r25, 0x30	; 48
     306:	21 50       	subi	r18, 0x01	; 1
     308:	80 40       	sbci	r24, 0x00	; 0
     30a:	90 40       	sbci	r25, 0x00	; 0
     30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x66>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x70>
     310:	00 00       	nop
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	2f ef       	ldi	r18, 0xFF	; 255
     31e:	81 ee       	ldi	r24, 0xE1	; 225
     320:	94 e0       	ldi	r25, 0x04	; 4
     322:	21 50       	subi	r18, 0x01	; 1
     324:	80 40       	sbci	r24, 0x00	; 0
     326:	90 40       	sbci	r25, 0x00	; 0
     328:	e1 f7       	brne	.-8      	; 0x322 <main+0x82>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x8c>
     32c:	00 00       	nop
		//PORTA^=0x01;
		
		_delay_ms(100);
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		char received_state = mfrc_check_and_data_receive(); 
     32e:	30 df       	rcall	.-416    	; 0x190 <mfrc_check_and_data_receive>
     330:	81 30       	cpi	r24, 0x01	; 1
		if(received_state==RECEIVE_NONE);
		else if(received_state==RECEIVE_SUCCESS){//받은 데이터 처리 루틴
     332:	a1 f7       	brne	.-24     	; 0x31c <main+0x7c>
     334:	82 e0       	ldi	r24, 0x02	; 2
			//esp8266 전송
			/*
			if(esp수신데이터)
			else if(esp 수신 데이터)
			*/
			setSoundClip(BUZZ_SUCCESS);
     336:	83 df       	rcall	.-250    	; 0x23e <setSoundClip>
     338:	f1 cf       	rjmp	.-30     	; 0x31c <main+0x7c>

0000033a <buzz_MUTE>:
     33a:	eb e8       	ldi	r30, 0x8B	; 139
     33c:	f0 e0       	ldi	r31, 0x00	; 0
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     33e:	80 81       	ld	r24, Z
     340:	8f 7b       	andi	r24, 0xBF	; 191
     342:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     344:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <music_flag>
     348:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <music_flag+0x1>
     34c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <music_flag+0x2>
     350:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <music_flag+0x3>
     354:	08 95       	ret

00000356 <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     356:	00 97       	sbiw	r24, 0x00	; 0
     358:	39 f0       	breq	.+14     	; 0x368 <setSoundNote+0x12>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     35a:	eb e8       	ldi	r30, 0x8B	; 139
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	20 81       	ld	r18, Z
     360:	20 64       	ori	r18, 0x40	; 64
     362:	20 83       	st	Z, r18
     364:	33 c3       	rjmp	.+1638   	; 0x9cc <setICR3>
     366:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     368:	eb e8       	ldi	r30, 0x8B	; 139
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	8f 7b       	andi	r24, 0xBF	; 191
     370:	80 83       	st	Z, r24
     372:	08 95       	ret

00000374 <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     374:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <music_flag>
     378:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <music_flag+0x1>
     37c:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <music_flag+0x2>
     380:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <music_flag+0x3>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	91 05       	cpc	r25, r1
     388:	a1 05       	cpc	r26, r1
     38a:	b1 05       	cpc	r27, r1
     38c:	69 f0       	breq	.+26     	; 0x3a8 <buzz_play+0x34>
     38e:	83 30       	cpi	r24, 0x03	; 3
     390:	91 05       	cpc	r25, r1
     392:	a1 05       	cpc	r26, r1
     394:	b1 05       	cpc	r27, r1
     396:	09 f4       	brne	.+2      	; 0x39a <buzz_play+0x26>
     398:	6c c0       	rjmp	.+216    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     39a:	89 2b       	or	r24, r25
     39c:	8a 2b       	or	r24, r26
     39e:	8b 2b       	or	r24, r27
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <buzz_play+0x30>
     3a2:	a8 c0       	rjmp	.+336    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     3a4:	ca cf       	rjmp	.-108    	; 0x33a <buzz_MUTE>
     3a6:	08 95       	ret
		  
		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     3a8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     3ac:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     3b0:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     3b4:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     3b8:	88 3c       	cpi	r24, 0xC8	; 200
     3ba:	91 05       	cpc	r25, r1
     3bc:	a1 05       	cpc	r26, r1
     3be:	b1 05       	cpc	r27, r1
     3c0:	20 f4       	brcc	.+8      	; 0x3ca <buzz_play+0x56>
     3c2:	8b e9       	ldi	r24, 0x9B	; 155
     3c4:	96 e0       	ldi	r25, 0x06	; 6
     3c6:	c7 cf       	rjmp	.-114    	; 0x356 <setSoundNote>
     3c8:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     3ca:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     3ce:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     3d2:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     3d6:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     3da:	82 3d       	cpi	r24, 0xD2	; 210
     3dc:	91 05       	cpc	r25, r1
     3de:	a1 05       	cpc	r26, r1
     3e0:	b1 05       	cpc	r27, r1
     3e2:	21 f4       	brne	.+8      	; 0x3ec <buzz_play+0x78>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	b6 cf       	rjmp	.-148    	; 0x356 <setSoundNote>
     3ea:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     3ec:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     3f0:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     3f4:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     3f8:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     3fc:	8c 3d       	cpi	r24, 0xDC	; 220
     3fe:	91 05       	cpc	r25, r1
     400:	a1 05       	cpc	r26, r1
     402:	b1 05       	cpc	r27, r1
     404:	21 f4       	brne	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	87 ee       	ldi	r24, 0xE7	; 231
     408:	95 e0       	ldi	r25, 0x05	; 5
     40a:	a5 cf       	rjmp	.-182    	; 0x356 <setSoundNote>
     40c:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     40e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     412:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     416:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     41a:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     41e:	80 39       	cpi	r24, 0x90	; 144
     420:	91 40       	sbci	r25, 0x01	; 1
     422:	a1 05       	cpc	r26, r1
     424:	b1 05       	cpc	r27, r1
     426:	21 f4       	brne	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	94 cf       	rjmp	.-216    	; 0x356 <setSoundNote>
     42e:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     430:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     434:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     438:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     43c:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     440:	8e 3a       	cpi	r24, 0xAE	; 174
     442:	91 40       	sbci	r25, 0x01	; 1
     444:	a1 05       	cpc	r26, r1
     446:	b1 05       	cpc	r27, r1
     448:	21 f4       	brne	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     44a:	85 e6       	ldi	r24, 0x65	; 101
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	83 cf       	rjmp	.-250    	; 0x356 <setSoundNote>
     450:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     452:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     456:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     45a:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     45e:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     462:	88 35       	cpi	r24, 0x58	; 88
     464:	92 40       	sbci	r25, 0x02	; 2
     466:	a1 05       	cpc	r26, r1
     468:	b1 05       	cpc	r27, r1
     46a:	09 f0       	breq	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46c:	43 c0       	rjmp	.+134    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     46e:	65 cf       	rjmp	.-310    	; 0x33a <buzz_MUTE>
     470:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     472:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     476:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     47a:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     47e:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     482:	84 36       	cpi	r24, 0x64	; 100
     484:	91 05       	cpc	r25, r1
     486:	a1 05       	cpc	r26, r1
     488:	b1 05       	cpc	r27, r1
     48a:	20 f4       	brcc	.+8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     48c:	82 e1       	ldi	r24, 0x12	; 18
     48e:	94 e0       	ldi	r25, 0x04	; 4
     490:	62 cf       	rjmp	.-316    	; 0x356 <setSoundNote>
     492:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     494:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     498:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     49c:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     4a0:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     4a4:	88 3c       	cpi	r24, 0xC8	; 200
     4a6:	91 05       	cpc	r25, r1
     4a8:	a1 05       	cpc	r26, r1
     4aa:	b1 05       	cpc	r27, r1
     4ac:	20 f4       	brcc	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	51 cf       	rjmp	.-350    	; 0x356 <setSoundNote>
     4b4:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     4b6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     4ba:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     4be:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     4c2:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     4c6:	8c 32       	cpi	r24, 0x2C	; 44
     4c8:	91 40       	sbci	r25, 0x01	; 1
     4ca:	a1 05       	cpc	r26, r1
     4cc:	b1 05       	cpc	r27, r1
     4ce:	20 f4       	brcc	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d0:	82 e1       	ldi	r24, 0x12	; 18
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	40 cf       	rjmp	.-384    	; 0x356 <setSoundNote>
     4d6:	08 95       	ret
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     4d8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <TICK+0x4>
     4dc:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <TICK+0x5>
     4e0:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <TICK+0x6>
     4e4:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <TICK+0x7>
     4e8:	82 3c       	cpi	r24, 0xC2	; 194
     4ea:	91 40       	sbci	r25, 0x01	; 1
     4ec:	a1 05       	cpc	r26, r1
     4ee:	b1 05       	cpc	r27, r1
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	23 cf       	rjmp	.-442    	; 0x33a <buzz_MUTE>
     4f4:	08 95       	ret

000004f6 <__vector_15>:
void buzz_play();
void buzz_MUTE();
void setSoundNote(int note);

ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     4f6:	1f 92       	push	r1
     4f8:	0f 92       	push	r0
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	0f 92       	push	r0
     4fe:	11 24       	eor	r1, r1
     500:	0b b6       	in	r0, 0x3b	; 59
     502:	0f 92       	push	r0
     504:	2f 93       	push	r18
     506:	3f 93       	push	r19
     508:	4f 93       	push	r20
     50a:	5f 93       	push	r21
     50c:	6f 93       	push	r22
     50e:	7f 93       	push	r23
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
     518:	ef 93       	push	r30
     51a:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     51c:	e1 ec       	ldi	r30, 0xC1	; 193
     51e:	f2 e0       	ldi	r31, 0x02	; 2
     520:	84 81       	ldd	r24, Z+4	; 0x04
     522:	95 81       	ldd	r25, Z+5	; 0x05
     524:	a6 81       	ldd	r26, Z+6	; 0x06
     526:	b7 81       	ldd	r27, Z+7	; 0x07
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	a1 1d       	adc	r26, r1
     52c:	b1 1d       	adc	r27, r1
     52e:	84 83       	std	Z+4, r24	; 0x04
     530:	95 83       	std	Z+5, r25	; 0x05
     532:	a6 83       	std	Z+6, r26	; 0x06
     534:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     536:	80 81       	ld	r24, Z
     538:	91 81       	ldd	r25, Z+1	; 0x01
     53a:	a2 81       	ldd	r26, Z+2	; 0x02
     53c:	b3 81       	ldd	r27, Z+3	; 0x03
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	a1 1d       	adc	r26, r1
     542:	b1 1d       	adc	r27, r1
     544:	80 83       	st	Z, r24
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	a2 83       	std	Z+2, r26	; 0x02
     54a:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     54c:	13 df       	rcall	.-474    	; 0x374 <buzz_play>
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value)
{
     574:	cf 93       	push	r28
     576:	c6 2f       	mov	r28, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
     578:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
     57a:	88 0f       	add	r24, r24
     57c:	8e 77       	andi	r24, 0x7E	; 126
     57e:	04 d2       	rcall	.+1032   	; 0x988 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
     580:	8c 2f       	mov	r24, r28
     582:	02 d2       	rcall	.+1028   	; 0x988 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
     584:	a8 9a       	sbi	0x15, 0	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <mfrc522_reset>:


void mfrc522_reset(){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset); // 0x01<<1 , 0x0F	
     58a:	6f e0       	ldi	r22, 0x0F	; 15
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	f2 cf       	rjmp	.-28     	; 0x574 <mfrc522_write>
     590:	08 95       	ret

00000592 <mfrc522_read>:


unsigned char mfrc522_read(unsigned char reg){
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
     592:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
     594:	88 0f       	add	r24, r24
     596:	8e 77       	andi	r24, 0x7E	; 126
     598:	80 68       	ori	r24, 0x80	; 128
     59a:	f6 d1       	rcall	.+1004   	; 0x988 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
     59c:	f9 d1       	rcall	.+1010   	; 0x990 <spi_master_rx>
     59e:	a8 9a       	sbi	0x15, 0	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
     5a0:	08 95       	ret

000005a2 <mfrc522_init>:
	
	return value;
}
     5a2:	a0 9a       	sbi	0x14, 0	; 20
void mfrc522_init()
{
	unsigned char byte;
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=0x01; // C포트 0번핀을 SS핀으로 사용
	SS_PORT|=0x01; //Default HIGH
     5a4:	a8 9a       	sbi	0x15, 0	; 21
	mfrc522_reset();
     5a6:	f1 df       	rcall	.-30     	; 0x58a <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D); //Timer setting and prescalingH
     5a8:	6d e8       	ldi	r22, 0x8D	; 141
     5aa:	8a e2       	ldi	r24, 0x2A	; 42
     5ac:	e3 df       	rcall	.-58     	; 0x574 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E); //prescalingL  ==> pre:0xD3E=3390
     5ae:	6e e3       	ldi	r22, 0x3E	; 62
     5b0:	8b e2       	ldi	r24, 0x2B	; 43
     5b2:	e0 df       	rcall	.-64     	; 0x574 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30); //16-bit timer reload value high.
     5b4:	6e e1       	ldi	r22, 0x1E	; 30
     5b6:	8c e2       	ldi	r24, 0x2C	; 44
     5b8:	dd df       	rcall	.-70     	; 0x574 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	8d e2       	ldi	r24, 0x2D	; 45
     5be:	da df       	rcall	.-76     	; 0x574 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40); //Controls transmit modulation settings. (Force100ASK)
     5c0:	60 e4       	ldi	r22, 0x40	; 64
     5c2:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D); //Defines general mode settings for transmitting and receiving.
     5c4:	d7 df       	rcall	.-82     	; 0x574 <mfrc522_write>
     5c6:	6d e3       	ldi	r22, 0x3D	; 61
     5c8:	81 e1       	ldi	r24, 0x11	; 17
     5ca:	d4 df       	rcall	.-88     	; 0x574 <mfrc522_write>
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg);
     5cc:	84 e1       	ldi	r24, 0x14	; 20
     5ce:	e1 df       	rcall	.-62     	; 0x592 <mfrc522_read>
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
     5d0:	98 2f       	mov	r25, r24
     5d2:	93 70       	andi	r25, 0x03	; 3
     5d4:	21 f4       	brne	.+8      	; 0x5de <mfrc522_init+0x3c>
	{
		mfrc522_write(TxControlReg,byte|0x03);
     5d6:	68 2f       	mov	r22, r24
     5d8:	63 60       	ori	r22, 0x03	; 3
     5da:	84 e1       	ldi	r24, 0x14	; 20
     5dc:	cb cf       	rjmp	.-106    	; 0x574 <mfrc522_write>
     5de:	08 95       	ret

000005e0 <mfrc522_version_check>:
     5e0:	cf 93       	push	r28

void mfrc522_version_check(){
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg);
     5e2:	87 e3       	ldi	r24, 0x37	; 55
     5e4:	d6 df       	rcall	.-84     	; 0x592 <mfrc522_read>
     5e6:	c8 2f       	mov	r28, r24
	uart0_tx_string_IT(IntToString(byte));
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	96 d2       	rcall	.+1324   	; 0xb18 <IntToString>
     5ec:	76 d2       	rcall	.+1260   	; 0xada <uart0_tx_string_IT>
     5ee:	2f ef       	ldi	r18, 0xFF	; 255
     5f0:	89 ef       	ldi	r24, 0xF9	; 249
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	21 50       	subi	r18, 0x01	; 1
     5f6:	80 40       	sbci	r24, 0x00	; 0
     5f8:	90 40       	sbci	r25, 0x00	; 0
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <mfrc522_version_check+0x14>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <mfrc522_version_check+0x1e>
     5fe:	00 00       	nop
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(byte == 0x92)
     600:	c2 39       	cpi	r28, 0x92	; 146
	{
		uart0_tx_string("\n[Detected Version]: MIFARE RC522v2\n");
     602:	21 f4       	brne	.+8      	; 0x60c <mfrc522_version_check+0x2c>
     604:	81 e3       	ldi	r24, 0x31	; 49
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	5a d2       	rcall	.+1204   	; 0xabe <uart0_tx_string>
     60a:	0a c0       	rjmp	.+20     	; 0x620 <mfrc522_version_check+0x40>
		
	}else if(byte == 0x91 || byte==0x90)
     60c:	c0 59       	subi	r28, 0x90	; 144
     60e:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string("\n[Detected Version]: MIFARE RC522v1\n");
     610:	20 f4       	brcc	.+8      	; 0x61a <mfrc522_version_check+0x3a>
     612:	86 e5       	ldi	r24, 0x56	; 86
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	53 d2       	rcall	.+1190   	; 0xabe <uart0_tx_string>
	}else
	{
		uart0_tx_string("\nNo reader found\n");
     618:	03 c0       	rjmp	.+6      	; 0x620 <mfrc522_version_check+0x40>
     61a:	8b e7       	ldi	r24, 0x7B	; 123
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	4f d2       	rcall	.+1182   	; 0xabe <uart0_tx_string>
	}
	
}
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable()
{
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg);
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	b5 df       	rcall	.-150    	; 0x592 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20); //RxInterrupt Enable
     628:	68 2f       	mov	r22, r24
     62a:	60 62       	ori	r22, 0x20	; 32
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	a2 df       	rcall	.-188    	; 0x574 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg);
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	af df       	rcall	.-162    	; 0x592 <mfrc522_read>
     634:	68 2f       	mov	r22, r24
	mfrc522_write(DivIEnReg,byte|0x80); //IRQPushPull
     636:	60 68       	ori	r22, 0x80	; 128
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	9c cf       	rjmp	.-200    	; 0x574 <mfrc522_write>
     63c:	08 95       	ret

0000063e <mfrc522_to_card>:
     63e:	3f 92       	push	r3
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
     640:	4f 92       	push	r4
     642:	5f 92       	push	r5
     644:	6f 92       	push	r6
     646:	7f 92       	push	r7
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	98 2e       	mov	r9, r24
     662:	e6 2e       	mov	r14, r22
     664:	f7 2e       	mov	r15, r23
     666:	44 2e       	mov	r4, r20
     668:	82 2e       	mov	r8, r18
     66a:	33 2e       	mov	r3, r19
     66c:	58 01       	movw	r10, r16
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
     66e:	8c e0       	ldi	r24, 0x0C	; 12
     670:	98 16       	cp	r9, r24
     672:	31 f0       	breq	.+12     	; 0x680 <mfrc522_to_card+0x42>
     674:	ee e0       	ldi	r30, 0x0E	; 14
     676:	9e 12       	cpse	r9, r30
     678:	06 c0       	rjmp	.+12     	; 0x686 <mfrc522_to_card+0x48>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     67a:	10 e1       	ldi	r17, 0x10	; 16

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
     67c:	02 e1       	ldi	r16, 0x12	; 18
     67e:	05 c0       	rjmp	.+10     	; 0x68a <mfrc522_to_card+0x4c>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     680:	10 e3       	ldi	r17, 0x30	; 48
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
     682:	07 e7       	ldi	r16, 0x77	; 119
			waitIRq = 0x30;
			break;
     684:	02 c0       	rjmp	.+4      	; 0x68a <mfrc522_to_card+0x4c>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
     686:	10 e0       	ldi	r17, 0x00	; 0
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
     688:	00 e0       	ldi	r16, 0x00	; 0
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
     68a:	60 2f       	mov	r22, r16
     68c:	60 68       	ori	r22, 0x80	; 128
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	71 df       	rcall	.-286    	; 0x574 <mfrc522_write>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	7e df       	rcall	.-260    	; 0x592 <mfrc522_read>
	n=mfrc522_read(FIFOLevelReg);
     696:	68 2f       	mov	r22, r24
     698:	6f 77       	andi	r22, 0x7F	; 127
     69a:	84 e0       	ldi	r24, 0x04	; 4
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     69c:	6b df       	rcall	.-298    	; 0x574 <mfrc522_write>
     69e:	8a e0       	ldi	r24, 0x0A	; 10
	
     6a0:	78 df       	rcall	.-272    	; 0x592 <mfrc522_read>
     6a2:	68 2f       	mov	r22, r24
     6a4:	60 68       	ori	r22, 0x80	; 128
     6a6:	8a e0       	ldi	r24, 0x0A	; 10
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

     6a8:	65 df       	rcall	.-310    	; 0x574 <mfrc522_write>
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	62 df       	rcall	.-316    	; 0x574 <mfrc522_write>
	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
     6b0:	51 2c       	mov	r5, r1
     6b2:	61 2c       	mov	r6, r1
     6b4:	71 2c       	mov	r7, r1
     6b6:	41 14       	cp	r4, r1
     6b8:	51 04       	cpc	r5, r1
     6ba:	61 04       	cpc	r6, r1
     6bc:	71 04       	cpc	r7, r1
     6be:	91 f0       	breq	.+36     	; 0x6e4 <mfrc522_to_card+0xa6>
     6c0:	ce 2d       	mov	r28, r14
     6c2:	df 2d       	mov	r29, r15
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1
		mfrc522_write(FIFODataReg, send_data[i]);
	}
     6c8:	76 01       	movw	r14, r12
     6ca:	69 91       	ld	r22, Y+
     6cc:	89 e0       	ldi	r24, 0x09	; 9
     6ce:	52 df       	rcall	.-348    	; 0x574 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
     6d0:	ff ef       	ldi	r31, 0xFF	; 255
     6d2:	cf 1a       	sub	r12, r31
     6d4:	df 0a       	sbc	r13, r31
     6d6:	ef 0a       	sbc	r14, r31
     6d8:	ff 0a       	sbc	r15, r31
     6da:	c4 14       	cp	r12, r4
     6dc:	d5 04       	cpc	r13, r5
     6de:	e6 04       	cpc	r14, r6
     6e0:	f7 04       	cpc	r15, r7
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
	if (cmd == MFRC522_CMD_Transceive)
     6e2:	98 f3       	brcs	.-26     	; 0x6ca <mfrc522_to_card+0x8c>
     6e4:	69 2d       	mov	r22, r9
     6e6:	81 e0       	ldi	r24, 0x01	; 1
	{
     6e8:	45 df       	rcall	.-374    	; 0x574 <mfrc522_write>
     6ea:	8c e0       	ldi	r24, 0x0C	; 12
		n=mfrc522_read(BitFramingReg);
		mfrc522_write(BitFramingReg,n|0x80);
     6ec:	98 12       	cpse	r9, r24
     6ee:	06 c0       	rjmp	.+12     	; 0x6fc <mfrc522_to_card+0xbe>
     6f0:	8d e0       	ldi	r24, 0x0D	; 13
	}
     6f2:	4f df       	rcall	.-354    	; 0x592 <mfrc522_read>
     6f4:	68 2f       	mov	r22, r24
     6f6:	60 68       	ori	r22, 0x80	; 128
     6f8:	8d e0       	ldi	r24, 0x0D	; 13
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
		i--;
     6fa:	3c df       	rcall	.-392    	; 0x574 <mfrc522_write>
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	49 df       	rcall	.-366    	; 0x592 <mfrc522_read>
     700:	f8 2e       	mov	r15, r24
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	d0 e0       	ldi	r29, 0x00	; 0
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

     706:	11 60       	ori	r17, 0x01	; 1
     708:	09 c0       	rjmp	.+18     	; 0x71c <mfrc522_to_card+0xde>
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
		i--;
     70a:	84 e0       	ldi	r24, 0x04	; 4
     70c:	42 df       	rcall	.-380    	; 0x592 <mfrc522_read>
     70e:	f8 2e       	mov	r15, r24
     710:	21 96       	adiw	r28, 0x01	; 1
     712:	cf 3c       	cpi	r28, 0xCF	; 207
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

     714:	e7 e0       	ldi	r30, 0x07	; 7
     716:	de 07       	cpc	r29, r30
     718:	09 f4       	brne	.+2      	; 0x71c <mfrc522_to_card+0xde>
     71a:	64 c0       	rjmp	.+200    	; 0x7e4 <mfrc522_to_card+0x1a6>
     71c:	81 2f       	mov	r24, r17
     71e:	8f 21       	and	r24, r15
     720:	a1 f3       	breq	.-24     	; 0x70a <mfrc522_to_card+0xcc>
     722:	68 c0       	rjmp	.+208    	; 0x7f4 <mfrc522_to_card+0x1b6>
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
     724:	01 70       	andi	r16, 0x01	; 1
     726:	f0 22       	and	r15, r16
				status = CARD_NOT_FOUND;			//??
			}
     728:	11 f0       	breq	.+4      	; 0x72e <mfrc522_to_card+0xf0>
     72a:	c2 e0       	ldi	r28, 0x02	; 2
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
     72c:	01 c0       	rjmp	.+2      	; 0x730 <mfrc522_to_card+0xf2>
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
     72e:	c1 e0       	ldi	r28, 0x01	; 1
     730:	fc e0       	ldi	r31, 0x0C	; 12
     732:	9f 12       	cpse	r9, r31
				n = mfrc522_read(FIFOLevelReg);
				lastBits = mfrc522_read(ControlReg) & 0x07;
     734:	6b c0       	rjmp	.+214    	; 0x80c <mfrc522_to_card+0x1ce>
     736:	8a e0       	ldi	r24, 0x0A	; 10
     738:	2c df       	rcall	.-424    	; 0x592 <mfrc522_read>
     73a:	48 2e       	mov	r4, r24
				if (lastBits)
     73c:	8c e0       	ldi	r24, 0x0C	; 12
     73e:	29 df       	rcall	.-430    	; 0x592 <mfrc522_read>
     740:	28 2f       	mov	r18, r24
     742:	27 70       	andi	r18, 0x07	; 7
     744:	a9 f0       	breq	.+42     	; 0x770 <mfrc522_to_card+0x132>
				{
     746:	84 2d       	mov	r24, r4
					*back_data_len = (n-1)*8 + lastBits;
				}
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	82 0f       	add	r24, r18
     75a:	91 1d       	adc	r25, r1
     75c:	09 2e       	mov	r0, r25
     75e:	00 0c       	add	r0, r0
     760:	aa 0b       	sbc	r26, r26
     762:	bb 0b       	sbc	r27, r27
     764:	f5 01       	movw	r30, r10
     766:	80 83       	st	Z, r24
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	a2 83       	std	Z+2, r26	; 0x02
     76c:	b3 83       	std	Z+3, r27	; 0x03
     76e:	11 c0       	rjmp	.+34     	; 0x792 <mfrc522_to_card+0x154>
     770:	84 2d       	mov	r24, r4
				else
				{
					*back_data_len = n*8;
				}
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	09 2e       	mov	r0, r25
     782:	00 0c       	add	r0, r0
     784:	aa 0b       	sbc	r26, r26
     786:	bb 0b       	sbc	r27, r27
     788:	f5 01       	movw	r30, r10
     78a:	80 83       	st	Z, r24
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	a2 83       	std	Z+2, r26	; 0x02
     790:	b3 83       	std	Z+3, r27	; 0x03
     792:	44 20       	and	r4, r4

				if (n == 0)
				{
     794:	71 f0       	breq	.+28     	; 0x7b2 <mfrc522_to_card+0x174>
     796:	84 2d       	mov	r24, r4
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
				{
     798:	81 31       	cpi	r24, 0x11	; 17
     79a:	08 f0       	brcs	.+2      	; 0x79e <mfrc522_to_card+0x160>
     79c:	80 e1       	ldi	r24, 0x10	; 16
     79e:	48 2e       	mov	r4, r24
     7a0:	51 2c       	mov	r5, r1
     7a2:	61 2c       	mov	r6, r1
     7a4:	71 2c       	mov	r7, r1
     7a6:	41 14       	cp	r4, r1
     7a8:	51 04       	cpc	r5, r1
     7aa:	61 04       	cpc	r6, r1
     7ac:	71 04       	cpc	r7, r1
     7ae:	29 f4       	brne	.+10     	; 0x7ba <mfrc522_to_card+0x17c>
     7b0:	2d c0       	rjmp	.+90     	; 0x80c <mfrc522_to_card+0x1ce>
     7b2:	41 2c       	mov	r4, r1
     7b4:	51 2c       	mov	r5, r1
     7b6:	32 01       	movw	r6, r4
     7b8:	43 94       	inc	r4
     7ba:	08 2d       	mov	r16, r8
     7bc:	13 2d       	mov	r17, r3
     7be:	c1 2c       	mov	r12, r1
     7c0:	d1 2c       	mov	r13, r1
     7c2:	76 01       	movw	r14, r12
					back_data[i] = mfrc522_read(FIFODataReg);
				}
     7c4:	89 e0       	ldi	r24, 0x09	; 9
     7c6:	e5 de       	rcall	.-566    	; 0x592 <mfrc522_read>
     7c8:	f8 01       	movw	r30, r16
     7ca:	81 93       	st	Z+, r24
     7cc:	8f 01       	movw	r16, r30
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
				{
     7ce:	ff ef       	ldi	r31, 0xFF	; 255
     7d0:	cf 1a       	sub	r12, r31
     7d2:	df 0a       	sbc	r13, r31
     7d4:	ef 0a       	sbc	r14, r31
     7d6:	ff 0a       	sbc	r15, r31
     7d8:	c4 14       	cp	r12, r4
     7da:	d5 04       	cpc	r13, r5
     7dc:	e6 04       	cpc	r14, r6
     7de:	f7 04       	cpc	r15, r7
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     7e0:	88 f3       	brcs	.-30     	; 0x7c4 <mfrc522_to_card+0x186>
     7e2:	14 c0       	rjmp	.+40     	; 0x80c <mfrc522_to_card+0x1ce>
	
     7e4:	8d e0       	ldi	r24, 0x0D	; 13
     7e6:	d5 de       	rcall	.-598    	; 0x592 <mfrc522_read>
     7e8:	68 2f       	mov	r22, r24
     7ea:	6f 77       	andi	r22, 0x7F	; 127
     7ec:	8d e0       	ldi	r24, 0x0D	; 13
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     7ee:	c2 de       	rcall	.-636    	; 0x574 <mfrc522_write>
     7f0:	c3 e0       	ldi	r28, 0x03	; 3
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     7f2:	0c c0       	rjmp	.+24     	; 0x80c <mfrc522_to_card+0x1ce>
     7f4:	8d e0       	ldi	r24, 0x0D	; 13
     7f6:	cd de       	rcall	.-614    	; 0x592 <mfrc522_read>
	
     7f8:	68 2f       	mov	r22, r24
     7fa:	6f 77       	andi	r22, 0x7F	; 127
     7fc:	8d e0       	ldi	r24, 0x0D	; 13
     7fe:	ba de       	rcall	.-652    	; 0x574 <mfrc522_write>
     800:	86 e0       	ldi	r24, 0x06	; 6
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
     802:	c7 de       	rcall	.-626    	; 0x592 <mfrc522_read>
     804:	8b 71       	andi	r24, 0x1B	; 27
     806:	09 f4       	brne	.+2      	; 0x80a <mfrc522_to_card+0x1cc>
     808:	8d cf       	rjmp	.-230    	; 0x724 <mfrc522_to_card+0xe6>
     80a:	c3 e0       	ldi	r28, 0x03	; 3
     80c:	8c 2f       	mov	r24, r28
			}
		}
		else
		{
			status = ERROR;
		}
     80e:	df 91       	pop	r29
// 	SetBitMask(ControlReg,0x80);           //timer stops
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}

     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	bf 90       	pop	r11
     820:	af 90       	pop	r10
     822:	9f 90       	pop	r9
     824:	8f 90       	pop	r8
     826:	7f 90       	pop	r7
     828:	6f 90       	pop	r6
     82a:	5f 90       	pop	r5
     82c:	4f 90       	pop	r4
     82e:	3f 90       	pop	r3
     830:	08 95       	ret

00000832 <mfrc522_request>:
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
	mfrc522_write(DivIEnReg,byte|0x80); //IRQPushPull
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type)
{
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	00 d0       	rcall	.+0      	; 0x840 <mfrc522_request+0xe>
     840:	00 d0       	rcall	.+0      	; 0x842 <mfrc522_request+0x10>
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	18 2f       	mov	r17, r24
     848:	7b 01       	movw	r14, r22
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     84a:	67 e0       	ldi	r22, 0x07	; 7
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	92 de       	rcall	.-732    	; 0x574 <mfrc522_write>
	
	tag_type[0] = req_mode;
     850:	f7 01       	movw	r30, r14
     852:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits);
     854:	8e 01       	movw	r16, r28
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	97 01       	movw	r18, r14
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	b7 01       	movw	r22, r14
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	ed de       	rcall	.-550    	; 0x63e <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	59 f4       	brne	.+22     	; 0x87e <mfrc522_request+0x4c>
     868:	49 81       	ldd	r20, Y+1	; 0x01
     86a:	5a 81       	ldd	r21, Y+2	; 0x02
     86c:	6b 81       	ldd	r22, Y+3	; 0x03
     86e:	7c 81       	ldd	r23, Y+4	; 0x04
     870:	40 31       	cpi	r20, 0x10	; 16
     872:	51 05       	cpc	r21, r1
     874:	61 05       	cpc	r22, r1
     876:	71 05       	cpc	r23, r1
     878:	19 f0       	breq	.+6      	; 0x880 <mfrc522_request+0x4e>
	{
		status = ERROR;
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	01 c0       	rjmp	.+2      	; 0x880 <mfrc522_request+0x4e>
     87e:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <mfrc522_get_card_serial>:
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out)
{
	uint8_t status;
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <mfrc522_get_card_serial+0xe>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <mfrc522_get_card_serial+0x10>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	7c 01       	movw	r14, r24
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
	
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	8d e0       	ldi	r24, 0x0D	; 13
     8b0:	61 de       	rcall	.-830    	; 0x574 <mfrc522_write>
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
     8b2:	83 e9       	ldi	r24, 0x93	; 147
     8b4:	f7 01       	movw	r30, r14
     8b6:	80 83       	st	Z, r24
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen);
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	81 83       	std	Z+1, r24	; 0x01

     8bc:	8e 01       	movw	r16, r28
     8be:	0f 5f       	subi	r16, 0xFF	; 255
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	97 01       	movw	r18, r14
     8c4:	42 e0       	ldi	r20, 0x02	; 2
     8c6:	b7 01       	movw	r22, r14
     8c8:	8c e0       	ldi	r24, 0x0C	; 12
     8ca:	b9 de       	rcall	.-654    	; 0x63e <mfrc522_to_card>
	if (status == CARD_FOUND)
	{
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	71 f4       	brne	.+28     	; 0x8ec <mfrc522_get_card_serial+0x56>
     8d0:	f7 01       	movw	r30, r14
     8d2:	a7 01       	movw	r20, r14
     8d4:	4c 5f       	subi	r20, 0xFC	; 252
     8d6:	5f 4f       	sbci	r21, 0xFF	; 255
     8d8:	90 e0       	ldi	r25, 0x00	; 0
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
     8da:	21 91       	ld	r18, Z+
     8dc:	92 27       	eor	r25, r18

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
     8de:	4e 17       	cp	r20, r30
     8e0:	5f 07       	cpc	r21, r31
     8e2:	d9 f7       	brne	.-10     	; 0x8da <mfrc522_get_card_serial+0x44>
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
     8e4:	f7 01       	movw	r30, r14
     8e6:	24 81       	ldd	r18, Z+4	; 0x04
     8e8:	92 13       	cpse	r25, r18
			status = ERROR;
		}
     8ea:	83 e0       	ldi	r24, 0x03	; 3
	}
	return status;
}

     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	08 95       	ret

00000902 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(unsigned char spi_mode, ...){
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	00 d0       	rcall	.+0      	; 0x908 <spi_init+0x6>
     908:	1f 92       	push	r1
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	21 f1       	breq	.+72     	; 0x95c <spi_init+0x5a>
     914:	81 11       	cpse	r24, r1
     916:	32 c0       	rjmp	.+100    	; 0x97c <spi_init+0x7a>
     918:	29 c0       	rjmp	.+82     	; 0x96c <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
     91a:	9c 91       	ld	r25, X
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
     920:	e2 17       	cp	r30, r18
     922:	f3 07       	cpc	r31, r19
     924:	d1 f7       	brne	.-12     	; 0x91a <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	92 30       	cpi	r25, 0x02	; 2
     92a:	20 f1       	brcs	.+72     	; 0x974 <spi_init+0x72>
     92c:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
     92e:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	71 f4       	brne	.+28     	; 0x950 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
     934:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
     936:	87 b3       	in	r24, 0x17	; 23
     938:	87 60       	ori	r24, 0x07	; 7
     93a:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	89 2b       	or	r24, r25
     942:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
     944:	2e b1       	in	r18, 0x0e	; 14
     946:	9b 81       	ldd	r25, Y+3	; 0x03
     948:	92 2b       	or	r25, r18
     94a:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
     94c:	8d b9       	out	0x0d, r24	; 13
     94e:	16 c0       	rjmp	.+44     	; 0x97c <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
     950:	81 11       	cpse	r24, r1
     952:	14 c0       	rjmp	.+40     	; 0x97c <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
     954:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
     956:	80 e4       	ldi	r24, 0x40	; 64
     958:	8d b9       	out	0x0d, r24	; 13
     95a:	10 c0       	rjmp	.+32     	; 0x97c <spi_init+0x7a>
     95c:	de 01       	movw	r26, r28
     95e:	19 96       	adiw	r26, 0x09	; 9
     960:	fe 01       	movw	r30, r28
     962:	31 96       	adiw	r30, 0x01	; 1
     964:	9e 01       	movw	r18, r28
     966:	2c 5f       	subi	r18, 0xFC	; 252
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	d7 cf       	rjmp	.-82     	; 0x91a <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
     96c:	9b 81       	ldd	r25, Y+3	; 0x03
     96e:	92 30       	cpi	r25, 0x02	; 2
     970:	e8 f6       	brcc	.-70     	; 0x92c <spi_init+0x2a>
     972:	02 c0       	rjmp	.+4      	; 0x978 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
     974:	1d b8       	out	0x0d, r1	; 13
     976:	de cf       	rjmp	.-68     	; 0x934 <spi_init+0x32>
     978:	1d b8       	out	0x0d, r1	; 13
     97a:	ec cf       	rjmp	.-40     	; 0x954 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
     988:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
     98a:	77 9b       	sbis	0x0e, 7	; 14
     98c:	fe cf       	rjmp	.-4      	; 0x98a <spi_master_tx+0x2>
}
     98e:	08 95       	ret

00000990 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
     990:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
     992:	77 9b       	sbis	0x0e, 7	; 14
     994:	fe cf       	rjmp	.-4      	; 0x992 <spi_master_rx+0x2>
	
	return SPDR;
     996:	8f b1       	in	r24, 0x0f	; 15
}
     998:	08 95       	ret

0000099a <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
     99a:	bc 9a       	sbi	0x17, 4	; 23
     99c:	8c e0       	ldi	r24, 0x0C	; 12
     99e:	83 bf       	out	0x33, r24	; 51
     9a0:	8a ef       	ldi	r24, 0xFA	; 250
     9a2:	81 bf       	out	0x31, r24	; 49
     9a4:	87 b7       	in	r24, 0x37	; 55
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	87 bf       	out	0x37, r24	; 55
     9aa:	08 95       	ret

000009ac <timer3_init>:
     9ac:	13 9a       	sbi	0x02, 3	; 2
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     9b4:	8a e1       	ldi	r24, 0x1A	; 26
     9b6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     9ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9be:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     9c2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     9c6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     9ca:	08 95       	ret

000009cc <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
     9cc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
     9d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     9d4:	08 95       	ret

000009d6 <_uart_tx_string_in_isr>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
     9d6:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <uart0+0x64>
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	e2 56       	subi	r30, 0x62	; 98
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	80 81       	ld	r24, Z
     9e2:	81 11       	cpse	r24, r1
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <_uart_tx_string_in_isr+0x22>
     9e6:	56 98       	cbi	0x0a, 6	; 10
     9e8:	84 e6       	ldi	r24, 0x64	; 100
     9ea:	ee e9       	ldi	r30, 0x9E	; 158
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	df 01       	movw	r26, r30
     9f0:	1d 92       	st	X+, r1
     9f2:	8a 95       	dec	r24
     9f4:	e9 f7       	brne	.-6      	; 0x9f0 <_uart_tx_string_in_isr+0x1a>
     9f6:	08 95       	ret
     9f8:	a2 e0       	ldi	r26, 0x02	; 2
     9fa:	b2 e0       	ldi	r27, 0x02	; 2
     9fc:	ec 91       	ld	r30, X
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	8e 0f       	add	r24, r30
     a02:	8c 93       	st	X, r24
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	e2 56       	subi	r30, 0x62	; 98
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	80 81       	ld	r24, Z
     a0c:	8c b9       	out	0x0c, r24	; 12
     a0e:	08 95       	ret

00000a10 <__vector_20>:
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	0b b6       	in	r0, 0x3b	; 59
     a1c:	0f 92       	push	r0
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
     a36:	cf df       	rcall	.-98     	; 0x9d6 <_uart_tx_string_in_isr>
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0b be       	out	0x3b, r0	; 59
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <uart_init>:
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	9b 01       	movw	r18, r22
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	60 e4       	ldi	r22, 0x40	; 64
     a6c:	72 e4       	ldi	r23, 0x42	; 66
     a6e:	8f e0       	ldi	r24, 0x0F	; 15
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	b0 d0       	rcall	.+352    	; 0xbd4 <__udivmodsi4>
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	31 09       	sbc	r19, r1
     a78:	20 97       	sbiw	r28, 0x00	; 0
     a7a:	51 f4       	brne	.+20     	; 0xa90 <uart_init+0x32>
     a7c:	10 98       	cbi	0x02, 0	; 2
     a7e:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     a82:	29 b9       	out	0x09, r18	; 9
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	8a b9       	out	0x0a, r24	; 10
     a88:	86 e0       	ldi	r24, 0x06	; 6
     a8a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     a8e:	10 c0       	rjmp	.+32     	; 0xab0 <uart_init+0x52>
     a90:	21 97       	sbiw	r28, 0x01	; 1
     a92:	71 f4       	brne	.+28     	; 0xab0 <uart_init+0x52>
     a94:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     a98:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     a9c:	ea e9       	ldi	r30, 0x9A	; 154
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	88 e1       	ldi	r24, 0x18	; 24
     aa2:	80 83       	st	Z, r24
     aa4:	80 81       	ld	r24, Z
     aa6:	80 68       	ori	r24, 0x80	; 128
     aa8:	80 83       	st	Z, r24
     aaa:	86 e0       	ldi	r24, 0x06	; 6
     aac:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <uart0_tx_char>:
     ab6:	5d 9b       	sbis	0x0b, 5	; 11
     ab8:	fe cf       	rjmp	.-4      	; 0xab6 <uart0_tx_char>
     aba:	8c b9       	out	0x0c, r24	; 12
     abc:	08 95       	ret

00000abe <uart0_tx_string>:
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	88 81       	ld	r24, Y
     ac6:	88 23       	and	r24, r24
     ac8:	29 f0       	breq	.+10     	; 0xad4 <uart0_tx_string+0x16>
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	f4 df       	rcall	.-24     	; 0xab6 <uart0_tx_char>
     ace:	89 91       	ld	r24, Y+
     ad0:	81 11       	cpse	r24, r1
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <uart0_tx_string+0xe>
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <uart0_tx_string_IT>:
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	fc 01       	movw	r30, r24
     ae0:	01 90       	ld	r0, Z+
     ae2:	00 20       	and	r0, r0
     ae4:	e9 f7       	brne	.-6      	; 0xae0 <uart0_tx_string_IT+0x6>
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	ef 01       	movw	r28, r30
     aea:	c8 1b       	sub	r28, r24
     aec:	d9 0b       	sbc	r29, r25
     aee:	ae 01       	movw	r20, r28
     af0:	bc 01       	movw	r22, r24
     af2:	8e e9       	ldi	r24, 0x9E	; 158
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	97 d0       	rcall	.+302    	; 0xc26 <strncpy>
     af8:	5d 9b       	sbis	0x0b, 5	; 11
     afa:	fe cf       	rjmp	.-4      	; 0xaf8 <uart0_tx_string_IT+0x1e>
     afc:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <uart0>
     b00:	8c b9       	out	0x0c, r24	; 12
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <uart0+0x64>
     b08:	ec 2f       	mov	r30, r28
     b0a:	ef 5f       	subi	r30, 0xFF	; 255
     b0c:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <uart0+0x65>
     b10:	56 9a       	sbi	0x0a, 6	; 10
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <IntToString>:

char * IntToString(int num)
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	64 97       	sbiw	r28, 0x14	; 20
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d,",num); //고유 자릿값
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	8d e8       	ldi	r24, 0x8D	; 141
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	8e 01       	movw	r16, r28
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	1f 93       	push	r17
     b44:	0f 93       	push	r16
     b46:	7e d0       	rcall	.+252    	; 0xc44 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
     b48:	b8 01       	movw	r22, r16
     b4a:	8a e6       	ldi	r24, 0x6A	; 106
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	64 d0       	rcall	.+200    	; 0xc18 <strcpy>
	
	return (buff.itos_buff);
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
}
     b5c:	8a e6       	ldi	r24, 0x6A	; 106
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	64 96       	adiw	r28, 0x14	; 20
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <HexToString>:
 
 char * HexToString(char num)
 {
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	64 97       	sbiw	r28, 0x14	; 20
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"0x%x,",num); //고유 자릿값
     b8e:	1f 92       	push	r1
     b90:	8f 93       	push	r24
     b92:	81 e9       	ldi	r24, 0x91	; 145
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	8e 01       	movw	r16, r28
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	1f 93       	push	r17
     ba2:	0f 93       	push	r16
     ba4:	4f d0       	rcall	.+158    	; 0xc44 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
     ba6:	b8 01       	movw	r22, r16
     ba8:	8a e6       	ldi	r24, 0x6A	; 106
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	35 d0       	rcall	.+106    	; 0xc18 <strcpy>
	 
	 return (buff.itos_buff);
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
 }
     bba:	8a e6       	ldi	r24, 0x6A	; 106
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	64 96       	adiw	r28, 0x14	; 20
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	08 95       	ret

00000bd4 <__udivmodsi4>:
     bd4:	a1 e2       	ldi	r26, 0x21	; 33
     bd6:	1a 2e       	mov	r1, r26
     bd8:	aa 1b       	sub	r26, r26
     bda:	bb 1b       	sub	r27, r27
     bdc:	fd 01       	movw	r30, r26
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__udivmodsi4_ep>

00000be0 <__udivmodsi4_loop>:
     be0:	aa 1f       	adc	r26, r26
     be2:	bb 1f       	adc	r27, r27
     be4:	ee 1f       	adc	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	a2 17       	cp	r26, r18
     bea:	b3 07       	cpc	r27, r19
     bec:	e4 07       	cpc	r30, r20
     bee:	f5 07       	cpc	r31, r21
     bf0:	20 f0       	brcs	.+8      	; 0xbfa <__udivmodsi4_ep>
     bf2:	a2 1b       	sub	r26, r18
     bf4:	b3 0b       	sbc	r27, r19
     bf6:	e4 0b       	sbc	r30, r20
     bf8:	f5 0b       	sbc	r31, r21

00000bfa <__udivmodsi4_ep>:
     bfa:	66 1f       	adc	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	88 1f       	adc	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	1a 94       	dec	r1
     c04:	69 f7       	brne	.-38     	; 0xbe0 <__udivmodsi4_loop>
     c06:	60 95       	com	r22
     c08:	70 95       	com	r23
     c0a:	80 95       	com	r24
     c0c:	90 95       	com	r25
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	bd 01       	movw	r22, r26
     c14:	cf 01       	movw	r24, r30
     c16:	08 95       	ret

00000c18 <strcpy>:
     c18:	fb 01       	movw	r30, r22
     c1a:	dc 01       	movw	r26, r24
     c1c:	01 90       	ld	r0, Z+
     c1e:	0d 92       	st	X+, r0
     c20:	00 20       	and	r0, r0
     c22:	e1 f7       	brne	.-8      	; 0xc1c <strcpy+0x4>
     c24:	08 95       	ret

00000c26 <strncpy>:
     c26:	fb 01       	movw	r30, r22
     c28:	dc 01       	movw	r26, r24
     c2a:	41 50       	subi	r20, 0x01	; 1
     c2c:	50 40       	sbci	r21, 0x00	; 0
     c2e:	48 f0       	brcs	.+18     	; 0xc42 <strncpy+0x1c>
     c30:	01 90       	ld	r0, Z+
     c32:	0d 92       	st	X+, r0
     c34:	00 20       	and	r0, r0
     c36:	c9 f7       	brne	.-14     	; 0xc2a <strncpy+0x4>
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <strncpy+0x16>
     c3a:	1d 92       	st	X+, r1
     c3c:	41 50       	subi	r20, 0x01	; 1
     c3e:	50 40       	sbci	r21, 0x00	; 0
     c40:	e0 f7       	brcc	.-8      	; 0xc3a <strncpy+0x14>
     c42:	08 95       	ret

00000c44 <sprintf>:
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	2e 97       	sbiw	r28, 0x0e	; 14
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	0d 89       	ldd	r16, Y+21	; 0x15
     c5e:	1e 89       	ldd	r17, Y+22	; 0x16
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	8c 83       	std	Y+4, r24	; 0x04
     c64:	1a 83       	std	Y+2, r17	; 0x02
     c66:	09 83       	std	Y+1, r16	; 0x01
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f e7       	ldi	r25, 0x7F	; 127
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	ae 01       	movw	r20, r28
     c72:	47 5e       	subi	r20, 0xE7	; 231
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	6f 89       	ldd	r22, Y+23	; 0x17
     c78:	78 8d       	ldd	r23, Y+24	; 0x18
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	10 d0       	rcall	.+32     	; 0xca0 <vfprintf>
     c80:	ef 81       	ldd	r30, Y+7	; 0x07
     c82:	f8 85       	ldd	r31, Y+8	; 0x08
     c84:	e0 0f       	add	r30, r16
     c86:	f1 1f       	adc	r31, r17
     c88:	10 82       	st	Z, r1
     c8a:	2e 96       	adiw	r28, 0x0e	; 14
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <vfprintf>:
     ca0:	2f 92       	push	r2
     ca2:	3f 92       	push	r3
     ca4:	4f 92       	push	r4
     ca6:	5f 92       	push	r5
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	8f 92       	push	r8
     cae:	9f 92       	push	r9
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	2b 97       	sbiw	r28, 0x0b	; 11
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	6c 01       	movw	r12, r24
     cd6:	7b 01       	movw	r14, r22
     cd8:	8a 01       	movw	r16, r20
     cda:	fc 01       	movw	r30, r24
     cdc:	17 82       	std	Z+7, r1	; 0x07
     cde:	16 82       	std	Z+6, r1	; 0x06
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	81 ff       	sbrs	r24, 1
     ce4:	bf c1       	rjmp	.+894    	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	3c 01       	movw	r6, r24
     cec:	f6 01       	movw	r30, r12
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	f7 01       	movw	r30, r14
     cf2:	93 fd       	sbrc	r25, 3
     cf4:	85 91       	lpm	r24, Z+
     cf6:	93 ff       	sbrs	r25, 3
     cf8:	81 91       	ld	r24, Z+
     cfa:	7f 01       	movw	r14, r30
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <vfprintf+0x62>
     d00:	ad c1       	rjmp	.+858    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
     d02:	85 32       	cpi	r24, 0x25	; 37
     d04:	39 f4       	brne	.+14     	; 0xd14 <vfprintf+0x74>
     d06:	93 fd       	sbrc	r25, 3
     d08:	85 91       	lpm	r24, Z+
     d0a:	93 ff       	sbrs	r25, 3
     d0c:	81 91       	ld	r24, Z+
     d0e:	7f 01       	movw	r14, r30
     d10:	85 32       	cpi	r24, 0x25	; 37
     d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0x7c>
     d14:	b6 01       	movw	r22, r12
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	d6 d1       	rcall	.+940    	; 0x10c6 <fputc>
     d1a:	e8 cf       	rjmp	.-48     	; 0xcec <vfprintf+0x4c>
     d1c:	91 2c       	mov	r9, r1
     d1e:	21 2c       	mov	r2, r1
     d20:	31 2c       	mov	r3, r1
     d22:	ff e1       	ldi	r31, 0x1F	; 31
     d24:	f3 15       	cp	r31, r3
     d26:	d8 f0       	brcs	.+54     	; 0xd5e <vfprintf+0xbe>
     d28:	8b 32       	cpi	r24, 0x2B	; 43
     d2a:	79 f0       	breq	.+30     	; 0xd4a <vfprintf+0xaa>
     d2c:	38 f4       	brcc	.+14     	; 0xd3c <vfprintf+0x9c>
     d2e:	80 32       	cpi	r24, 0x20	; 32
     d30:	79 f0       	breq	.+30     	; 0xd50 <vfprintf+0xb0>
     d32:	83 32       	cpi	r24, 0x23	; 35
     d34:	a1 f4       	brne	.+40     	; 0xd5e <vfprintf+0xbe>
     d36:	23 2d       	mov	r18, r3
     d38:	20 61       	ori	r18, 0x10	; 16
     d3a:	1d c0       	rjmp	.+58     	; 0xd76 <vfprintf+0xd6>
     d3c:	8d 32       	cpi	r24, 0x2D	; 45
     d3e:	61 f0       	breq	.+24     	; 0xd58 <vfprintf+0xb8>
     d40:	80 33       	cpi	r24, 0x30	; 48
     d42:	69 f4       	brne	.+26     	; 0xd5e <vfprintf+0xbe>
     d44:	23 2d       	mov	r18, r3
     d46:	21 60       	ori	r18, 0x01	; 1
     d48:	16 c0       	rjmp	.+44     	; 0xd76 <vfprintf+0xd6>
     d4a:	83 2d       	mov	r24, r3
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	38 2e       	mov	r3, r24
     d50:	e3 2d       	mov	r30, r3
     d52:	e4 60       	ori	r30, 0x04	; 4
     d54:	3e 2e       	mov	r3, r30
     d56:	2a c0       	rjmp	.+84     	; 0xdac <vfprintf+0x10c>
     d58:	f3 2d       	mov	r31, r3
     d5a:	f8 60       	ori	r31, 0x08	; 8
     d5c:	1d c0       	rjmp	.+58     	; 0xd98 <vfprintf+0xf8>
     d5e:	37 fc       	sbrc	r3, 7
     d60:	2d c0       	rjmp	.+90     	; 0xdbc <vfprintf+0x11c>
     d62:	20 ed       	ldi	r18, 0xD0	; 208
     d64:	28 0f       	add	r18, r24
     d66:	2a 30       	cpi	r18, 0x0A	; 10
     d68:	40 f0       	brcs	.+16     	; 0xd7a <vfprintf+0xda>
     d6a:	8e 32       	cpi	r24, 0x2E	; 46
     d6c:	b9 f4       	brne	.+46     	; 0xd9c <vfprintf+0xfc>
     d6e:	36 fc       	sbrc	r3, 6
     d70:	75 c1       	rjmp	.+746    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
     d72:	23 2d       	mov	r18, r3
     d74:	20 64       	ori	r18, 0x40	; 64
     d76:	32 2e       	mov	r3, r18
     d78:	19 c0       	rjmp	.+50     	; 0xdac <vfprintf+0x10c>
     d7a:	36 fe       	sbrs	r3, 6
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <vfprintf+0xea>
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
     d80:	98 9e       	mul	r9, r24
     d82:	20 0d       	add	r18, r0
     d84:	11 24       	eor	r1, r1
     d86:	92 2e       	mov	r9, r18
     d88:	11 c0       	rjmp	.+34     	; 0xdac <vfprintf+0x10c>
     d8a:	ea e0       	ldi	r30, 0x0A	; 10
     d8c:	2e 9e       	mul	r2, r30
     d8e:	20 0d       	add	r18, r0
     d90:	11 24       	eor	r1, r1
     d92:	22 2e       	mov	r2, r18
     d94:	f3 2d       	mov	r31, r3
     d96:	f0 62       	ori	r31, 0x20	; 32
     d98:	3f 2e       	mov	r3, r31
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <vfprintf+0x10c>
     d9c:	8c 36       	cpi	r24, 0x6C	; 108
     d9e:	21 f4       	brne	.+8      	; 0xda8 <vfprintf+0x108>
     da0:	83 2d       	mov	r24, r3
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	38 2e       	mov	r3, r24
     da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x10c>
     da8:	88 36       	cpi	r24, 0x68	; 104
     daa:	41 f4       	brne	.+16     	; 0xdbc <vfprintf+0x11c>
     dac:	f7 01       	movw	r30, r14
     dae:	93 fd       	sbrc	r25, 3
     db0:	85 91       	lpm	r24, Z+
     db2:	93 ff       	sbrs	r25, 3
     db4:	81 91       	ld	r24, Z+
     db6:	7f 01       	movw	r14, r30
     db8:	81 11       	cpse	r24, r1
     dba:	b3 cf       	rjmp	.-154    	; 0xd22 <vfprintf+0x82>
     dbc:	98 2f       	mov	r25, r24
     dbe:	9f 7d       	andi	r25, 0xDF	; 223
     dc0:	95 54       	subi	r25, 0x45	; 69
     dc2:	93 30       	cpi	r25, 0x03	; 3
     dc4:	28 f4       	brcc	.+10     	; 0xdd0 <vfprintf+0x130>
     dc6:	0c 5f       	subi	r16, 0xFC	; 252
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	9f e3       	ldi	r25, 0x3F	; 63
     dcc:	99 83       	std	Y+1, r25	; 0x01
     dce:	0d c0       	rjmp	.+26     	; 0xdea <vfprintf+0x14a>
     dd0:	83 36       	cpi	r24, 0x63	; 99
     dd2:	31 f0       	breq	.+12     	; 0xde0 <vfprintf+0x140>
     dd4:	83 37       	cpi	r24, 0x73	; 115
     dd6:	71 f0       	breq	.+28     	; 0xdf4 <vfprintf+0x154>
     dd8:	83 35       	cpi	r24, 0x53	; 83
     dda:	09 f0       	breq	.+2      	; 0xdde <vfprintf+0x13e>
     ddc:	55 c0       	rjmp	.+170    	; 0xe88 <vfprintf+0x1e8>
     dde:	20 c0       	rjmp	.+64     	; 0xe20 <vfprintf+0x180>
     de0:	f8 01       	movw	r30, r16
     de2:	80 81       	ld	r24, Z
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	0e 5f       	subi	r16, 0xFE	; 254
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	88 24       	eor	r8, r8
     dec:	83 94       	inc	r8
     dee:	91 2c       	mov	r9, r1
     df0:	53 01       	movw	r10, r6
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <vfprintf+0x178>
     df4:	28 01       	movw	r4, r16
     df6:	f2 e0       	ldi	r31, 0x02	; 2
     df8:	4f 0e       	add	r4, r31
     dfa:	51 1c       	adc	r5, r1
     dfc:	f8 01       	movw	r30, r16
     dfe:	a0 80       	ld	r10, Z
     e00:	b1 80       	ldd	r11, Z+1	; 0x01
     e02:	36 fe       	sbrs	r3, 6
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <vfprintf+0x16c>
     e06:	69 2d       	mov	r22, r9
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x170>
     e0c:	6f ef       	ldi	r22, 0xFF	; 255
     e0e:	7f ef       	ldi	r23, 0xFF	; 255
     e10:	c5 01       	movw	r24, r10
     e12:	4e d1       	rcall	.+668    	; 0x10b0 <strnlen>
     e14:	4c 01       	movw	r8, r24
     e16:	82 01       	movw	r16, r4
     e18:	f3 2d       	mov	r31, r3
     e1a:	ff 77       	andi	r31, 0x7F	; 127
     e1c:	3f 2e       	mov	r3, r31
     e1e:	15 c0       	rjmp	.+42     	; 0xe4a <vfprintf+0x1aa>
     e20:	28 01       	movw	r4, r16
     e22:	22 e0       	ldi	r18, 0x02	; 2
     e24:	42 0e       	add	r4, r18
     e26:	51 1c       	adc	r5, r1
     e28:	f8 01       	movw	r30, r16
     e2a:	a0 80       	ld	r10, Z
     e2c:	b1 80       	ldd	r11, Z+1	; 0x01
     e2e:	36 fe       	sbrs	r3, 6
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <vfprintf+0x198>
     e32:	69 2d       	mov	r22, r9
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x19c>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	c5 01       	movw	r24, r10
     e3e:	2d d1       	rcall	.+602    	; 0x109a <strnlen_P>
     e40:	4c 01       	movw	r8, r24
     e42:	f3 2d       	mov	r31, r3
     e44:	f0 68       	ori	r31, 0x80	; 128
     e46:	3f 2e       	mov	r3, r31
     e48:	82 01       	movw	r16, r4
     e4a:	33 fc       	sbrc	r3, 3
     e4c:	19 c0       	rjmp	.+50     	; 0xe80 <vfprintf+0x1e0>
     e4e:	82 2d       	mov	r24, r2
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 16       	cp	r8, r24
     e54:	99 06       	cpc	r9, r25
     e56:	a0 f4       	brcc	.+40     	; 0xe80 <vfprintf+0x1e0>
     e58:	b6 01       	movw	r22, r12
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	33 d1       	rcall	.+614    	; 0x10c6 <fputc>
     e60:	2a 94       	dec	r2
     e62:	f5 cf       	rjmp	.-22     	; 0xe4e <vfprintf+0x1ae>
     e64:	f5 01       	movw	r30, r10
     e66:	37 fc       	sbrc	r3, 7
     e68:	85 91       	lpm	r24, Z+
     e6a:	37 fe       	sbrs	r3, 7
     e6c:	81 91       	ld	r24, Z+
     e6e:	5f 01       	movw	r10, r30
     e70:	b6 01       	movw	r22, r12
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	28 d1       	rcall	.+592    	; 0x10c6 <fputc>
     e76:	21 10       	cpse	r2, r1
     e78:	2a 94       	dec	r2
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	82 1a       	sub	r8, r18
     e7e:	91 08       	sbc	r9, r1
     e80:	81 14       	cp	r8, r1
     e82:	91 04       	cpc	r9, r1
     e84:	79 f7       	brne	.-34     	; 0xe64 <vfprintf+0x1c4>
     e86:	e1 c0       	rjmp	.+450    	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
     e88:	84 36       	cpi	r24, 0x64	; 100
     e8a:	11 f0       	breq	.+4      	; 0xe90 <vfprintf+0x1f0>
     e8c:	89 36       	cpi	r24, 0x69	; 105
     e8e:	39 f5       	brne	.+78     	; 0xede <vfprintf+0x23e>
     e90:	f8 01       	movw	r30, r16
     e92:	37 fe       	sbrs	r3, 7
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <vfprintf+0x204>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	0c 5f       	subi	r16, 0xFC	; 252
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <vfprintf+0x214>
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	07 2e       	mov	r0, r23
     eaa:	00 0c       	add	r0, r0
     eac:	88 0b       	sbc	r24, r24
     eae:	99 0b       	sbc	r25, r25
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	f3 2d       	mov	r31, r3
     eb6:	ff 76       	andi	r31, 0x6F	; 111
     eb8:	3f 2e       	mov	r3, r31
     eba:	97 ff       	sbrs	r25, 7
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <vfprintf+0x230>
     ebe:	90 95       	com	r25
     ec0:	80 95       	com	r24
     ec2:	70 95       	com	r23
     ec4:	61 95       	neg	r22
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	f0 68       	ori	r31, 0x80	; 128
     ece:	3f 2e       	mov	r3, r31
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	a3 01       	movw	r20, r6
     ed6:	33 d1       	rcall	.+614    	; 0x113e <__ultoa_invert>
     ed8:	88 2e       	mov	r8, r24
     eda:	86 18       	sub	r8, r6
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <vfprintf+0x2c6>
     ede:	85 37       	cpi	r24, 0x75	; 117
     ee0:	31 f4       	brne	.+12     	; 0xeee <vfprintf+0x24e>
     ee2:	23 2d       	mov	r18, r3
     ee4:	2f 7e       	andi	r18, 0xEF	; 239
     ee6:	b2 2e       	mov	r11, r18
     ee8:	2a e0       	ldi	r18, 0x0A	; 10
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	25 c0       	rjmp	.+74     	; 0xf38 <vfprintf+0x298>
     eee:	93 2d       	mov	r25, r3
     ef0:	99 7f       	andi	r25, 0xF9	; 249
     ef2:	b9 2e       	mov	r11, r25
     ef4:	8f 36       	cpi	r24, 0x6F	; 111
     ef6:	c1 f0       	breq	.+48     	; 0xf28 <vfprintf+0x288>
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <vfprintf+0x260>
     efa:	88 35       	cpi	r24, 0x58	; 88
     efc:	79 f0       	breq	.+30     	; 0xf1c <vfprintf+0x27c>
     efe:	ae c0       	rjmp	.+348    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
     f00:	80 37       	cpi	r24, 0x70	; 112
     f02:	19 f0       	breq	.+6      	; 0xf0a <vfprintf+0x26a>
     f04:	88 37       	cpi	r24, 0x78	; 120
     f06:	21 f0       	breq	.+8      	; 0xf10 <vfprintf+0x270>
     f08:	a9 c0       	rjmp	.+338    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
     f0a:	e9 2f       	mov	r30, r25
     f0c:	e0 61       	ori	r30, 0x10	; 16
     f0e:	be 2e       	mov	r11, r30
     f10:	b4 fe       	sbrs	r11, 4
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <vfprintf+0x28e>
     f14:	fb 2d       	mov	r31, r11
     f16:	f4 60       	ori	r31, 0x04	; 4
     f18:	bf 2e       	mov	r11, r31
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <vfprintf+0x28e>
     f1c:	34 fe       	sbrs	r3, 4
     f1e:	0a c0       	rjmp	.+20     	; 0xf34 <vfprintf+0x294>
     f20:	29 2f       	mov	r18, r25
     f22:	26 60       	ori	r18, 0x06	; 6
     f24:	b2 2e       	mov	r11, r18
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <vfprintf+0x294>
     f28:	28 e0       	ldi	r18, 0x08	; 8
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <vfprintf+0x298>
     f2e:	20 e1       	ldi	r18, 0x10	; 16
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vfprintf+0x298>
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	32 e0       	ldi	r19, 0x02	; 2
     f38:	f8 01       	movw	r30, r16
     f3a:	b7 fe       	sbrs	r11, 7
     f3c:	07 c0       	rjmp	.+14     	; 0xf4c <vfprintf+0x2ac>
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	0c 5f       	subi	r16, 0xFC	; 252
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	06 c0       	rjmp	.+12     	; 0xf58 <vfprintf+0x2b8>
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 5f       	subi	r16, 0xFE	; 254
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
     f58:	a3 01       	movw	r20, r6
     f5a:	f1 d0       	rcall	.+482    	; 0x113e <__ultoa_invert>
     f5c:	88 2e       	mov	r8, r24
     f5e:	86 18       	sub	r8, r6
     f60:	fb 2d       	mov	r31, r11
     f62:	ff 77       	andi	r31, 0x7F	; 127
     f64:	3f 2e       	mov	r3, r31
     f66:	36 fe       	sbrs	r3, 6
     f68:	0d c0       	rjmp	.+26     	; 0xf84 <vfprintf+0x2e4>
     f6a:	23 2d       	mov	r18, r3
     f6c:	2e 7f       	andi	r18, 0xFE	; 254
     f6e:	a2 2e       	mov	r10, r18
     f70:	89 14       	cp	r8, r9
     f72:	58 f4       	brcc	.+22     	; 0xf8a <vfprintf+0x2ea>
     f74:	34 fe       	sbrs	r3, 4
     f76:	0b c0       	rjmp	.+22     	; 0xf8e <vfprintf+0x2ee>
     f78:	32 fc       	sbrc	r3, 2
     f7a:	09 c0       	rjmp	.+18     	; 0xf8e <vfprintf+0x2ee>
     f7c:	83 2d       	mov	r24, r3
     f7e:	8e 7e       	andi	r24, 0xEE	; 238
     f80:	a8 2e       	mov	r10, r24
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <vfprintf+0x2ee>
     f84:	b8 2c       	mov	r11, r8
     f86:	a3 2c       	mov	r10, r3
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <vfprintf+0x2f0>
     f8a:	b8 2c       	mov	r11, r8
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <vfprintf+0x2f0>
     f8e:	b9 2c       	mov	r11, r9
     f90:	a4 fe       	sbrs	r10, 4
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <vfprintf+0x312>
     f94:	fe 01       	movw	r30, r28
     f96:	e8 0d       	add	r30, r8
     f98:	f1 1d       	adc	r31, r1
     f9a:	80 81       	ld	r24, Z
     f9c:	80 33       	cpi	r24, 0x30	; 48
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <vfprintf+0x308>
     fa0:	9a 2d       	mov	r25, r10
     fa2:	99 7e       	andi	r25, 0xE9	; 233
     fa4:	a9 2e       	mov	r10, r25
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <vfprintf+0x31a>
     fa8:	a2 fe       	sbrs	r10, 2
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <vfprintf+0x318>
     fac:	b3 94       	inc	r11
     fae:	b3 94       	inc	r11
     fb0:	04 c0       	rjmp	.+8      	; 0xfba <vfprintf+0x31a>
     fb2:	8a 2d       	mov	r24, r10
     fb4:	86 78       	andi	r24, 0x86	; 134
     fb6:	09 f0       	breq	.+2      	; 0xfba <vfprintf+0x31a>
     fb8:	b3 94       	inc	r11
     fba:	a3 fc       	sbrc	r10, 3
     fbc:	10 c0       	rjmp	.+32     	; 0xfde <vfprintf+0x33e>
     fbe:	a0 fe       	sbrs	r10, 0
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <vfprintf+0x32e>
     fc2:	b2 14       	cp	r11, r2
     fc4:	80 f4       	brcc	.+32     	; 0xfe6 <vfprintf+0x346>
     fc6:	28 0c       	add	r2, r8
     fc8:	92 2c       	mov	r9, r2
     fca:	9b 18       	sub	r9, r11
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x348>
     fce:	b2 14       	cp	r11, r2
     fd0:	58 f4       	brcc	.+22     	; 0xfe8 <vfprintf+0x348>
     fd2:	b6 01       	movw	r22, r12
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	76 d0       	rcall	.+236    	; 0x10c6 <fputc>
     fda:	b3 94       	inc	r11
     fdc:	f8 cf       	rjmp	.-16     	; 0xfce <vfprintf+0x32e>
     fde:	b2 14       	cp	r11, r2
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <vfprintf+0x348>
     fe2:	2b 18       	sub	r2, r11
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x34a>
     fe6:	98 2c       	mov	r9, r8
     fe8:	21 2c       	mov	r2, r1
     fea:	a4 fe       	sbrs	r10, 4
     fec:	0f c0       	rjmp	.+30     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     fee:	b6 01       	movw	r22, r12
     ff0:	80 e3       	ldi	r24, 0x30	; 48
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	68 d0       	rcall	.+208    	; 0x10c6 <fputc>
     ff6:	a2 fe       	sbrs	r10, 2
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
     ffa:	a1 fc       	sbrc	r10, 1
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     ffe:	88 e7       	ldi	r24, 0x78	; 120
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1004:	88 e5       	ldi	r24, 0x58	; 88
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	b6 01       	movw	r22, r12
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    100c:	8a 2d       	mov	r24, r10
    100e:	86 78       	andi	r24, 0x86	; 134
    1010:	51 f0       	breq	.+20     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1012:	a1 fe       	sbrs	r10, 1
    1014:	02 c0       	rjmp	.+4      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1016:	8b e2       	ldi	r24, 0x2B	; 43
    1018:	01 c0       	rjmp	.+2      	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
    101a:	80 e2       	ldi	r24, 0x20	; 32
    101c:	a7 fc       	sbrc	r10, 7
    101e:	8d e2       	ldi	r24, 0x2D	; 45
    1020:	b6 01       	movw	r22, r12
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	50 d0       	rcall	.+160    	; 0x10c6 <fputc>
    1026:	89 14       	cp	r8, r9
    1028:	30 f4       	brcc	.+12     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    102a:	b6 01       	movw	r22, r12
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	4a d0       	rcall	.+148    	; 0x10c6 <fputc>
    1032:	9a 94       	dec	r9
    1034:	f8 cf       	rjmp	.-16     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1036:	8a 94       	dec	r8
    1038:	f3 01       	movw	r30, r6
    103a:	e8 0d       	add	r30, r8
    103c:	f1 1d       	adc	r31, r1
    103e:	80 81       	ld	r24, Z
    1040:	b6 01       	movw	r22, r12
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	40 d0       	rcall	.+128    	; 0x10c6 <fputc>
    1046:	81 10       	cpse	r8, r1
    1048:	f6 cf       	rjmp	.-20     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    104a:	22 20       	and	r2, r2
    104c:	09 f4       	brne	.+2      	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
    104e:	4e ce       	rjmp	.-868    	; 0xcec <vfprintf+0x4c>
    1050:	b6 01       	movw	r22, r12
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	37 d0       	rcall	.+110    	; 0x10c6 <fputc>
    1058:	2a 94       	dec	r2
    105a:	f7 cf       	rjmp	.-18     	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
    105c:	f6 01       	movw	r30, r12
    105e:	86 81       	ldd	r24, Z+6	; 0x06
    1060:	97 81       	ldd	r25, Z+7	; 0x07
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	2b 96       	adiw	r28, 0x0b	; 11
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	08 95       	ret

0000109a <strnlen_P>:
    109a:	fc 01       	movw	r30, r24
    109c:	05 90       	lpm	r0, Z+
    109e:	61 50       	subi	r22, 0x01	; 1
    10a0:	70 40       	sbci	r23, 0x00	; 0
    10a2:	01 10       	cpse	r0, r1
    10a4:	d8 f7       	brcc	.-10     	; 0x109c <strnlen_P+0x2>
    10a6:	80 95       	com	r24
    10a8:	90 95       	com	r25
    10aa:	8e 0f       	add	r24, r30
    10ac:	9f 1f       	adc	r25, r31
    10ae:	08 95       	ret

000010b0 <strnlen>:
    10b0:	fc 01       	movw	r30, r24
    10b2:	61 50       	subi	r22, 0x01	; 1
    10b4:	70 40       	sbci	r23, 0x00	; 0
    10b6:	01 90       	ld	r0, Z+
    10b8:	01 10       	cpse	r0, r1
    10ba:	d8 f7       	brcc	.-10     	; 0x10b2 <strnlen+0x2>
    10bc:	80 95       	com	r24
    10be:	90 95       	com	r25
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	08 95       	ret

000010c6 <fputc>:
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	fb 01       	movw	r30, r22
    10d0:	23 81       	ldd	r18, Z+3	; 0x03
    10d2:	21 fd       	sbrc	r18, 1
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <fputc+0x16>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	2c c0       	rjmp	.+88     	; 0x1134 <__stack+0x35>
    10dc:	22 ff       	sbrs	r18, 2
    10de:	16 c0       	rjmp	.+44     	; 0x110c <__stack+0xd>
    10e0:	46 81       	ldd	r20, Z+6	; 0x06
    10e2:	57 81       	ldd	r21, Z+7	; 0x07
    10e4:	24 81       	ldd	r18, Z+4	; 0x04
    10e6:	35 81       	ldd	r19, Z+5	; 0x05
    10e8:	42 17       	cp	r20, r18
    10ea:	53 07       	cpc	r21, r19
    10ec:	44 f4       	brge	.+16     	; 0x10fe <fputc+0x38>
    10ee:	a0 81       	ld	r26, Z
    10f0:	b1 81       	ldd	r27, Z+1	; 0x01
    10f2:	9d 01       	movw	r18, r26
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	31 83       	std	Z+1, r19	; 0x01
    10fa:	20 83       	st	Z, r18
    10fc:	8c 93       	st	X, r24
    10fe:	26 81       	ldd	r18, Z+6	; 0x06
    1100:	37 81       	ldd	r19, Z+7	; 0x07
    1102:	2f 5f       	subi	r18, 0xFF	; 255
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	37 83       	std	Z+7, r19	; 0x07
    1108:	26 83       	std	Z+6, r18	; 0x06
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <__stack+0x35>
    110c:	8b 01       	movw	r16, r22
    110e:	ec 01       	movw	r28, r24
    1110:	fb 01       	movw	r30, r22
    1112:	00 84       	ldd	r0, Z+8	; 0x08
    1114:	f1 85       	ldd	r31, Z+9	; 0x09
    1116:	e0 2d       	mov	r30, r0
    1118:	09 95       	icall
    111a:	89 2b       	or	r24, r25
    111c:	e1 f6       	brne	.-72     	; 0x10d6 <fputc+0x10>
    111e:	d8 01       	movw	r26, r16
    1120:	16 96       	adiw	r26, 0x06	; 6
    1122:	8d 91       	ld	r24, X+
    1124:	9c 91       	ld	r25, X
    1126:	17 97       	sbiw	r26, 0x07	; 7
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	17 96       	adiw	r26, 0x07	; 7
    112c:	9c 93       	st	X, r25
    112e:	8e 93       	st	-X, r24
    1130:	16 97       	sbiw	r26, 0x06	; 6
    1132:	ce 01       	movw	r24, r28
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <__ultoa_invert>:
    113e:	fa 01       	movw	r30, r20
    1140:	aa 27       	eor	r26, r26
    1142:	28 30       	cpi	r18, 0x08	; 8
    1144:	51 f1       	breq	.+84     	; 0x119a <__ultoa_invert+0x5c>
    1146:	20 31       	cpi	r18, 0x10	; 16
    1148:	81 f1       	breq	.+96     	; 0x11aa <__ultoa_invert+0x6c>
    114a:	e8 94       	clt
    114c:	6f 93       	push	r22
    114e:	6e 7f       	andi	r22, 0xFE	; 254
    1150:	6e 5f       	subi	r22, 0xFE	; 254
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	af 4f       	sbci	r26, 0xFF	; 255
    115a:	b1 e0       	ldi	r27, 0x01	; 1
    115c:	3e d0       	rcall	.+124    	; 0x11da <__ultoa_invert+0x9c>
    115e:	b4 e0       	ldi	r27, 0x04	; 4
    1160:	3c d0       	rcall	.+120    	; 0x11da <__ultoa_invert+0x9c>
    1162:	67 0f       	add	r22, r23
    1164:	78 1f       	adc	r23, r24
    1166:	89 1f       	adc	r24, r25
    1168:	9a 1f       	adc	r25, r26
    116a:	a1 1d       	adc	r26, r1
    116c:	68 0f       	add	r22, r24
    116e:	79 1f       	adc	r23, r25
    1170:	8a 1f       	adc	r24, r26
    1172:	91 1d       	adc	r25, r1
    1174:	a1 1d       	adc	r26, r1
    1176:	6a 0f       	add	r22, r26
    1178:	71 1d       	adc	r23, r1
    117a:	81 1d       	adc	r24, r1
    117c:	91 1d       	adc	r25, r1
    117e:	a1 1d       	adc	r26, r1
    1180:	20 d0       	rcall	.+64     	; 0x11c2 <__ultoa_invert+0x84>
    1182:	09 f4       	brne	.+2      	; 0x1186 <__ultoa_invert+0x48>
    1184:	68 94       	set
    1186:	3f 91       	pop	r19
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	26 9f       	mul	r18, r22
    118c:	11 24       	eor	r1, r1
    118e:	30 19       	sub	r19, r0
    1190:	30 5d       	subi	r19, 0xD0	; 208
    1192:	31 93       	st	Z+, r19
    1194:	de f6       	brtc	.-74     	; 0x114c <__ultoa_invert+0xe>
    1196:	cf 01       	movw	r24, r30
    1198:	08 95       	ret
    119a:	46 2f       	mov	r20, r22
    119c:	47 70       	andi	r20, 0x07	; 7
    119e:	40 5d       	subi	r20, 0xD0	; 208
    11a0:	41 93       	st	Z+, r20
    11a2:	b3 e0       	ldi	r27, 0x03	; 3
    11a4:	0f d0       	rcall	.+30     	; 0x11c4 <__ultoa_invert+0x86>
    11a6:	c9 f7       	brne	.-14     	; 0x119a <__ultoa_invert+0x5c>
    11a8:	f6 cf       	rjmp	.-20     	; 0x1196 <__ultoa_invert+0x58>
    11aa:	46 2f       	mov	r20, r22
    11ac:	4f 70       	andi	r20, 0x0F	; 15
    11ae:	40 5d       	subi	r20, 0xD0	; 208
    11b0:	4a 33       	cpi	r20, 0x3A	; 58
    11b2:	18 f0       	brcs	.+6      	; 0x11ba <__ultoa_invert+0x7c>
    11b4:	49 5d       	subi	r20, 0xD9	; 217
    11b6:	31 fd       	sbrc	r19, 1
    11b8:	40 52       	subi	r20, 0x20	; 32
    11ba:	41 93       	st	Z+, r20
    11bc:	02 d0       	rcall	.+4      	; 0x11c2 <__ultoa_invert+0x84>
    11be:	a9 f7       	brne	.-22     	; 0x11aa <__ultoa_invert+0x6c>
    11c0:	ea cf       	rjmp	.-44     	; 0x1196 <__ultoa_invert+0x58>
    11c2:	b4 e0       	ldi	r27, 0x04	; 4
    11c4:	a6 95       	lsr	r26
    11c6:	97 95       	ror	r25
    11c8:	87 95       	ror	r24
    11ca:	77 95       	ror	r23
    11cc:	67 95       	ror	r22
    11ce:	ba 95       	dec	r27
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__ultoa_invert+0x86>
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	61 05       	cpc	r22, r1
    11d6:	71 05       	cpc	r23, r1
    11d8:	08 95       	ret
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	0a 2e       	mov	r0, r26
    11e0:	06 94       	lsr	r0
    11e2:	57 95       	ror	r21
    11e4:	47 95       	ror	r20
    11e6:	37 95       	ror	r19
    11e8:	27 95       	ror	r18
    11ea:	ba 95       	dec	r27
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <__ultoa_invert+0xa2>
    11ee:	62 0f       	add	r22, r18
    11f0:	73 1f       	adc	r23, r19
    11f2:	84 1f       	adc	r24, r20
    11f4:	95 1f       	adc	r25, r21
    11f6:	a0 1d       	adc	r26, r0
    11f8:	08 95       	ret

000011fa <_exit>:
    11fa:	f8 94       	cli

000011fc <__stop_program>:
    11fc:	ff cf       	rjmp	.-2      	; 0x11fc <__stop_program>
