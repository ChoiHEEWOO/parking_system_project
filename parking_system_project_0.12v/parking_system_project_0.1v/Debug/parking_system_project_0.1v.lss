
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  0000153c  000015d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000153c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  008001c0  008001c0  00001690  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002606  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f21  00000000  00000000  00003eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129c  00000000  00000000  00004e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  000060a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097b  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015fe  00000000  00000000  00006fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000085c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c3       	rjmp	.+1910   	; 0x7b4 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ac c6       	rjmp	.+3416   	; 0xdaa <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3c       	cpi	r26, 0xC0	; 192
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a0 ec       	ldi	r26, 0xC0	; 192
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 30       	cpi	r26, 0x07	; 7
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ae d1       	rcall	.+860    	; 0x420 <main>
      c4:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_30>:
	TICK.tick_1ms++;
	buzz_play(); //
}

ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	u8 buff=UDR1;
      f0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff);
      f4:	ad d6       	rcall	.+3418   	; 0xe50 <uart0_tx_char>
	
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <mfrc_print_serial>:
	

}

void mfrc_print_serial(int _type, unsigned char ch)
{
     11c:	cf 92       	push	r12
     11e:	df 92       	push	r13
     120:	ef 92       	push	r14
     122:	ff 92       	push	r15
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	c6 2f       	mov	r28, r22
	switch(_type)
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	91 05       	cpc	r25, r1
     130:	51 f1       	breq	.+84     	; 0x186 <mfrc_print_serial+0x6a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	91 05       	cpc	r25, r1
     136:	09 f4       	brne	.+2      	; 0x13a <mfrc_print_serial+0x1e>
     138:	4d c0       	rjmp	.+154    	; 0x1d4 <mfrc_print_serial+0xb8>
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <mfrc_print_serial+0x24>
     13e:	6e c0       	rjmp	.+220    	; 0x21c <mfrc_print_serial+0x100>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	89 d6       	rcall	.+3346   	; 0xe58 <uart0_tx_string>
     146:	0d ed       	ldi	r16, 0xDD	; 221
     148:	12 e0       	ldi	r17, 0x02	; 2
     14a:	0f 2e       	mov	r0, r31
     14c:	ff ee       	ldi	r31, 0xEF	; 239
     14e:	ef 2e       	mov	r14, r31
     150:	f2 e0       	ldi	r31, 0x02	; 2
     152:	ff 2e       	mov	r15, r31
     154:	f0 2d       	mov	r31, r0
     156:	0f 2e       	mov	r0, r31
     158:	f1 ee       	ldi	r31, 0xE1	; 225
     15a:	cf 2e       	mov	r12, r31
     15c:	f2 e0       	ldi	r31, 0x02	; 2
     15e:	df 2e       	mov	r13, r31
     160:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     162:	c1 11       	cpse	r28, r1
     164:	04 c0       	rjmp	.+8      	; 0x16e <mfrc_print_serial+0x52>
     166:	f8 01       	movw	r30, r16
     168:	80 81       	ld	r24, Z
     16a:	72 d6       	rcall	.+3300   	; 0xe50 <uart0_tx_char>
     16c:	03 c0       	rjmp	.+6      	; 0x174 <mfrc_print_serial+0x58>
			else uart0_tx_char(rfid_uid_ch1[i]);
     16e:	f7 01       	movw	r30, r14
     170:	80 81       	ld	r24, Z
     172:	6e d6       	rcall	.+3292   	; 0xe50 <uart0_tx_char>
     174:	0f 5f       	subi	r16, 0xFF	; 255
     176:	1f 4f       	sbci	r17, 0xFF	; 255
     178:	ff ef       	ldi	r31, 0xFF	; 255
     17a:	ef 1a       	sub	r14, r31
     17c:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     17e:	0c 15       	cp	r16, r12
     180:	1d 05       	cpc	r17, r13
     182:	79 f7       	brne	.-34     	; 0x162 <mfrc_print_serial+0x46>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     184:	4b c0       	rjmp	.+150    	; 0x21c <mfrc_print_serial+0x100>
     186:	8c e0       	ldi	r24, 0x0C	; 12
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	66 d6       	rcall	.+3276   	; 0xe58 <uart0_tx_string>
     18c:	0d ed       	ldi	r16, 0xDD	; 221
     18e:	12 e0       	ldi	r17, 0x02	; 2
     190:	0f 2e       	mov	r0, r31
     192:	ff ee       	ldi	r31, 0xEF	; 239
     194:	ef 2e       	mov	r14, r31
     196:	f2 e0       	ldi	r31, 0x02	; 2
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	0f 2e       	mov	r0, r31
     19e:	f1 ee       	ldi	r31, 0xE1	; 225
     1a0:	cf 2e       	mov	r12, r31
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
     1a4:	df 2e       	mov	r13, r31
     1a6:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     1a8:	c1 11       	cpse	r28, r1
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <mfrc_print_serial+0x9c>
     1ac:	f8 01       	movw	r30, r16
     1ae:	80 81       	ld	r24, Z
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	60 d6       	rcall	.+3264   	; 0xe74 <IntToString>
     1b4:	51 d6       	rcall	.+3234   	; 0xe58 <uart0_tx_string>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <mfrc_print_serial+0xa6>
     1b8:	f7 01       	movw	r30, r14
     1ba:	80 81       	ld	r24, Z
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	5a d6       	rcall	.+3252   	; 0xe74 <IntToString>
     1c0:	4b d6       	rcall	.+3222   	; 0xe58 <uart0_tx_string>
     1c2:	0f 5f       	subi	r16, 0xFF	; 255
     1c4:	1f 4f       	sbci	r17, 0xFF	; 255
     1c6:	ff ef       	ldi	r31, 0xFF	; 255
     1c8:	ef 1a       	sub	r14, r31
     1ca:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     1cc:	0c 15       	cp	r16, r12
     1ce:	1d 05       	cpc	r17, r13
     1d0:	59 f7       	brne	.-42     	; 0x1a8 <mfrc_print_serial+0x8c>
     1d2:	24 c0       	rjmp	.+72     	; 0x21c <mfrc_print_serial+0x100>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     1d4:	84 e1       	ldi	r24, 0x14	; 20
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	3f d6       	rcall	.+3198   	; 0xe58 <uart0_tx_string>
     1da:	0d ed       	ldi	r16, 0xDD	; 221
     1dc:	12 e0       	ldi	r17, 0x02	; 2
     1de:	0f 2e       	mov	r0, r31
     1e0:	ff ee       	ldi	r31, 0xEF	; 239
     1e2:	ef 2e       	mov	r14, r31
     1e4:	f2 e0       	ldi	r31, 0x02	; 2
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f1 ee       	ldi	r31, 0xE1	; 225
     1ee:	cf 2e       	mov	r12, r31
     1f0:	f2 e0       	ldi	r31, 0x02	; 2
     1f2:	df 2e       	mov	r13, r31
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     1f4:	f0 2d       	mov	r31, r0
     1f6:	c1 11       	cpse	r28, r1
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <mfrc_print_serial+0xe8>
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 81       	ld	r24, Z
     1fe:	69 d6       	rcall	.+3282   	; 0xed2 <HexToString>
     200:	2b d6       	rcall	.+3158   	; 0xe58 <uart0_tx_string>
     202:	04 c0       	rjmp	.+8      	; 0x20c <mfrc_print_serial+0xf0>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     204:	f7 01       	movw	r30, r14
     206:	80 81       	ld	r24, Z
     208:	64 d6       	rcall	.+3272   	; 0xed2 <HexToString>
     20a:	26 d6       	rcall	.+3148   	; 0xe58 <uart0_tx_string>
     20c:	0f 5f       	subi	r16, 0xFF	; 255
     20e:	1f 4f       	sbci	r17, 0xFF	; 255
     210:	ff ef       	ldi	r31, 0xFF	; 255
     212:	ef 1a       	sub	r14, r31
     214:	ff 0a       	sbc	r15, r31
     216:	0c 15       	cp	r16, r12
     218:	1d 05       	cpc	r17, r13
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     21a:	69 f7       	brne	.-38     	; 0x1f6 <mfrc_print_serial+0xda>
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
		
		break;
		
	}
	
}
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	08 95       	ret

0000022c <mfrc_check_and_data_receive_ch0>:
     22c:	cf 93       	push	r28
     22e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <noise_flag.2355>
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     232:	81 11       	cpse	r24, r1
     234:	08 c0       	rjmp	.+16     	; 0x246 <mfrc_check_and_data_receive_ch0+0x1a>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	6d ed       	ldi	r22, 0xDD	; 221
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	82 e5       	ldi	r24, 0x52	; 82
     23e:	bf d4       	rcall	.+2430   	; 0xbbe <mfrc522_request>
     240:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_byte.2357>
     244:	1b c0       	rjmp	.+54     	; 0x27c <mfrc_check_and_data_receive_ch0+0x50>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     246:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <toggle_flag.2356>
     24a:	88 23       	and	r24, r24
     24c:	31 f0       	breq	.+12     	; 0x25a <mfrc_check_and_data_receive_ch0+0x2e>
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	6d ed       	ldi	r22, 0xDD	; 221
     252:	72 e0       	ldi	r23, 0x02	; 2
     254:	82 e5       	ldi	r24, 0x52	; 82
     256:	b3 d4       	rcall	.+2406   	; 0xbbe <mfrc522_request>
     258:	0b c0       	rjmp	.+22     	; 0x270 <mfrc_check_and_data_receive_ch0+0x44>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	6d ed       	ldi	r22, 0xDD	; 221
     25e:	72 e0       	ldi	r23, 0x02	; 2
     260:	82 e5       	ldi	r24, 0x52	; 82
     262:	ad d4       	rcall	.+2394   	; 0xbbe <mfrc522_request>
     264:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_byte.2357>
			if(_byte==ERROR) noise_flag=0;
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	11 f4       	brne	.+4      	; 0x270 <mfrc_check_and_data_receive_ch0+0x44>
     26c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <noise_flag.2355>
		}
			
		toggle_flag^=0x01;
     270:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <toggle_flag.2356>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	89 27       	eor	r24, r25
     278:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <toggle_flag.2356>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     27c:	c0 91 c4 01 	lds	r28, 0x01C4	; 0x8001c4 <_byte.2357>
     280:	c1 30       	cpi	r28, 0x01	; 1
     282:	29 f0       	breq	.+10     	; 0x28e <mfrc_check_and_data_receive_ch0+0x62>
	{
		//여기서 release해주지 말고, 타이머라던가, 문이 다시 닫혔을 때 등등 이런 경우에서 풀어주자.
		detected_flag_ch0=NON_DETECTED;  
     284:	88 e5       	ldi	r24, 0x58	; 88
     286:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <detected_flag_ch0>
		return RECEIVE_NONE;
     28a:	c0 e0       	ldi	r28, 0x00	; 0
     28c:	29 c0       	rjmp	.+82     	; 0x2e0 <mfrc_check_and_data_receive_ch0+0xb4>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     28e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <detected_flag_ch0>
     292:	88 35       	cpi	r24, 0x58	; 88
     294:	11 f5       	brne	.+68     	; 0x2da <mfrc_check_and_data_receive_ch0+0xae>
	{
		detected_flag_ch0=DETECED;
     296:	8f e4       	ldi	r24, 0x4F	; 79
     298:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <noise_flag.2355>
		toggle_flag=1;
     2a2:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <toggle_flag.2356>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	8d ed       	ldi	r24, 0xDD	; 221
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	bd d4       	rcall	.+2426   	; 0xc28 <mfrc522_get_card_serial>
     2ae:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_byte.2357>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     2b2:	81 30       	cpi	r24, 0x01	; 1
	///////////////////////////////////////////////////

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			uart0_tx_string("[CHECK UID(CH0)]: ");
     2b4:	a1 f4       	brne	.+40     	; 0x2de <mfrc_check_and_data_receive_ch0+0xb2>
     2b6:	8c e1       	ldi	r24, 0x1C	; 28
     2b8:	91 e0       	ldi	r25, 0x01	; 1
			mfrc_print_serial(ASCII_TYPE,CH0);
     2ba:	ce d5       	rcall	.+2972   	; 0xe58 <uart0_tx_string>
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
			mfrc_print_serial(DECIMAL_TYPE,CH0);
     2c2:	2c df       	rcall	.-424    	; 0x11c <mfrc_print_serial>
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
			mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	28 df       	rcall	.-432    	; 0x11c <mfrc_print_serial>
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	90 e0       	ldi	r25, 0x00	; 0
			uart0_tx_char('\n');
     2d2:	24 df       	rcall	.-440    	; 0x11c <mfrc_print_serial>
     2d4:	8a e0       	ldi	r24, 0x0A	; 10
     2d6:	bc d5       	rcall	.+2936   	; 0xe50 <uart0_tx_char>
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <mfrc_check_and_data_receive_ch0+0xb4>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <mfrc_check_and_data_receive_ch0+0xb4>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     2de:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     2e0:	8c 2f       	mov	r24, r28
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     2e6:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     2e8:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <noise_flag.2361>
     2ec:	81 11       	cpse	r24, r1
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <mfrc_check_and_data_receive_ch1+0x1a>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	6f ee       	ldi	r22, 0xEF	; 239
     2f4:	72 e0       	ldi	r23, 0x02	; 2
     2f6:	82 e5       	ldi	r24, 0x52	; 82
     2f8:	62 d4       	rcall	.+2244   	; 0xbbe <mfrc522_request>
     2fa:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <_byte.2363>
     2fe:	1b c0       	rjmp	.+54     	; 0x336 <mfrc_check_and_data_receive_ch1+0x50>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     300:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <mfrc_check_and_data_receive_ch1+0x2e>
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	6f ee       	ldi	r22, 0xEF	; 239
     30c:	72 e0       	ldi	r23, 0x02	; 2
     30e:	82 e5       	ldi	r24, 0x52	; 82
     310:	56 d4       	rcall	.+2220   	; 0xbbe <mfrc522_request>
     312:	0b c0       	rjmp	.+22     	; 0x32a <mfrc_check_and_data_receive_ch1+0x44>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	6f ee       	ldi	r22, 0xEF	; 239
     318:	72 e0       	ldi	r23, 0x02	; 2
     31a:	82 e5       	ldi	r24, 0x52	; 82
     31c:	50 d4       	rcall	.+2208   	; 0xbbe <mfrc522_request>
     31e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <_byte.2363>
			if(_byte==ERROR) noise_flag=0;
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	11 f4       	brne	.+4      	; 0x32a <mfrc_check_and_data_receive_ch1+0x44>
     326:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <noise_flag.2361>
		}
		toggle_flag^=0x01;
     32a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <__data_end>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	89 27       	eor	r24, r25
     332:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     336:	c0 91 c1 01 	lds	r28, 0x01C1	; 0x8001c1 <_byte.2363>
     33a:	c1 30       	cpi	r28, 0x01	; 1
     33c:	29 f0       	breq	.+10     	; 0x348 <mfrc_check_and_data_receive_ch1+0x62>
	{
		detected_flag_ch1=NON_DETECTED;  
     33e:	88 e5       	ldi	r24, 0x58	; 88
     340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return RECEIVE_NONE;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	29 c0       	rjmp	.+82     	; 0x39a <mfrc_check_and_data_receive_ch1+0xb4>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     34c:	88 35       	cpi	r24, 0x58	; 88
     34e:	11 f5       	brne	.+68     	; 0x394 <mfrc_check_and_data_receive_ch1+0xae>
	{
		detected_flag_ch1=DETECED;
     350:	8f e4       	ldi	r24, 0x4F	; 79
     352:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		noise_flag=1; //얘가 첫 순간임.
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <noise_flag.2361>
		toggle_flag=1;
     35c:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	8f ee       	ldi	r24, 0xEF	; 239
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	60 d4       	rcall	.+2240   	; 0xc28 <mfrc522_get_card_serial>
     368:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <_byte.2363>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     36c:	81 30       	cpi	r24, 0x01	; 1
						uart0_tx_string("[CHECK UID(CH1)]: ");
     36e:	a1 f4       	brne	.+40     	; 0x398 <mfrc_check_and_data_receive_ch1+0xb2>
     370:	8f e2       	ldi	r24, 0x2F	; 47
     372:	91 e0       	ldi	r25, 0x01	; 1
						mfrc_print_serial(ASCII_TYPE,CH1);
     374:	71 d5       	rcall	.+2786   	; 0xe58 <uart0_tx_string>
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     37c:	cf de       	rcall	.-610    	; 0x11c <mfrc_print_serial>
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	81 e0       	ldi	r24, 0x01	; 1
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	cb de       	rcall	.-618    	; 0x11c <mfrc_print_serial>
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	90 e0       	ldi	r25, 0x00	; 0
						uart0_tx_char('\n');
     38c:	c7 de       	rcall	.-626    	; 0x11c <mfrc_print_serial>
     38e:	8a e0       	ldi	r24, 0x0A	; 10
     390:	5f d5       	rcall	.+2750   	; 0xe50 <uart0_tx_char>

			return RECEIVE_SUCCESS;
     392:	03 c0       	rjmp	.+6      	; 0x39a <mfrc_check_and_data_receive_ch1+0xb4>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     394:	c0 e0       	ldi	r28, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <mfrc_check_and_data_receive_ch1+0xb4>
						uart0_tx_char('\n');

			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     398:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     39a:	8c 2f       	mov	r24, r28
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <setSoundClip>:
	
}

void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 switch(clip)
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	79 f0       	breq	.+30     	; 0x3c2 <setSoundClip+0x22>
     3a4:	28 f0       	brcs	.+10     	; 0x3b0 <setSoundClip+0x10>
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	c9 f0       	breq	.+50     	; 0x3dc <setSoundClip+0x3c>
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	21 f1       	breq	.+72     	; 0x3f6 <setSoundClip+0x56>
     3ae:	2f c0       	rjmp	.+94     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     3b0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <music_flag>
     3b4:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <music_flag+0x1>
     3b8:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <music_flag+0x2>
     3bc:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <music_flag+0x3>
     3c0:	26 c0       	rjmp	.+76     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e0       	ldi	r26, 0x00	; 0
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <music_flag>
     3ce:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <music_flag+0x1>
     3d2:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <music_flag+0x2>
     3d6:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <music_flag+0x3>
     3da:	19 c0       	rjmp	.+50     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <music_flag>
     3e8:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <music_flag+0x1>
     3ec:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <music_flag+0x2>
     3f0:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <music_flag+0x3>
     3f4:	0c c0       	rjmp	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <music_flag>
     402:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <music_flag+0x1>
     406:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <music_flag+0x2>
     40a:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <music_flag+0x3>
// 		 case BUZZ_BEEP: music_flag=BUZZ_BEEP; break;
// 		 case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
// 		 case BUZZ_POWERON: music_flag=BUZZ_POWERON; break;
// 		 case BUZZ_DOOR_OPEN: music_flag=BUZZ_DOOR_OPEN; break;
	 }
	 TICK.buzz_1ms=0;
     40e:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <TICK+0x4>
     412:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <TICK+0x5>
     416:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <TICK+0x6>
     41a:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <TICK+0x7>
     41e:	08 95       	ret

00000420 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     420:	78 94       	sei
	DDRA|=0x03; //test Port
     422:	8a b3       	in	r24, 0x1a	; 26
     424:	83 60       	ori	r24, 0x03	; 3
     426:	8a bb       	out	0x1a, r24	; 26
	
	
	//사용하는 기능들 초기화 작업
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
     428:	1f 92       	push	r1
     42a:	1f 92       	push	r1
     42c:	1f 92       	push	r1
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	8f 93       	push	r24
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	8f 93       	push	r24
     436:	32 d4       	rcall	.+2148   	; 0xc9c <spi_init>
	//spi_master_tx(0x67);
	mfrc522_init(CH0);
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	35 d2       	rcall	.+1130   	; 0x8a6 <mfrc522_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	2f ef       	ldi	r18, 0xFF	; 255
     43e:	81 ee       	ldi	r24, 0xE1	; 225
     440:	94 e0       	ldi	r25, 0x04	; 4
     442:	21 50       	subi	r18, 0x01	; 1
     444:	80 40       	sbci	r24, 0x00	; 0
     446:	90 40       	sbci	r25, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <main+0x22>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <main+0x2c>
	_delay_ms(100);
	mfrc522_init(CH1);
     44c:	00 00       	nop
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	2a d2       	rcall	.+1108   	; 0x8a6 <mfrc522_init>
	uart_init(0,9600);
     452:	60 e8       	ldi	r22, 0x80	; 128
     454:	75 e2       	ldi	r23, 0x25	; 37
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ce d4       	rcall	.+2460   	; 0xdf8 <uart_init>
	uart_init(1,9600);//esp8266() : Rx:PD2, Tx:PD3
     45c:	60 e8       	ldi	r22, 0x80	; 128
     45e:	75 e2       	ldi	r23, 0x25	; 37
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	c9 d4       	rcall	.+2450   	; 0xdf8 <uart_init>
     466:	2f ef       	ldi	r18, 0xFF	; 255
     468:	85 ea       	ldi	r24, 0xA5	; 165
     46a:	9e e0       	ldi	r25, 0x0E	; 14
     46c:	21 50       	subi	r18, 0x01	; 1
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	90 40       	sbci	r25, 0x00	; 0
     472:	e1 f7       	brne	.-8      	; 0x46c <main+0x4c>
	
	_delay_ms(300);
	mfrc522_version_check(CH0);
     474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x56>
     476:	00 00       	nop
     478:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
     47a:	44 d2       	rcall	.+1160   	; 0x904 <mfrc522_version_check>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	6e d2       	rcall	.+1244   	; 0x95c <mfrc522_IRQ_enable>
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	85 ea       	ldi	r24, 0xA5	; 165
     484:	9e e0       	ldi	r25, 0x0E	; 14
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <main+0x66>
	_delay_ms(300);
	mfrc522_version_check(CH1);
     48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x70>
	mfrc522_IRQ_enable(CH1);
     490:	00 00       	nop
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	37 d2       	rcall	.+1134   	; 0x904 <mfrc522_version_check>

// 	byte=mfrc522_read(ComIEnReg);
// 	mfrc522_write(ComIEnReg,byte|0x20); //RxInterrupt Enable
// 	byte=mfrc522_read(DivIEnReg);
// 	mfrc522_write(DivIEnReg,byte|0x80); //IRQPushPull
	cli();
     496:	81 e0       	ldi	r24, 0x01	; 1
	setSoundClip(BUZZ_ON);
     498:	61 d2       	rcall	.+1218   	; 0x95c <mfrc522_IRQ_enable>
     49a:	f8 94       	cli
     49c:	81 e0       	ldi	r24, 0x01	; 1
	timer0_init();
     49e:	80 df       	rcall	.-256    	; 0x3a0 <setSoundClip>
     4a0:	49 d4       	rcall	.+2194   	; 0xd34 <timer0_init>
	timer3_init();
     4a2:	51 d4       	rcall	.+2210   	; 0xd46 <timer3_init>
     4a4:	78 94       	sei
	sei();
     4a6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <TICK>
	 TICK.tick_1ms=0;
     4aa:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <TICK+0x1>
     4ae:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <TICK+0x2>
     4b2:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <TICK+0x3>
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	81 e1       	ldi	r24, 0x11	; 17
     4ba:	9a e7       	ldi	r25, 0x7A	; 122
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0x9c>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <main+0xa6>
     4c6:	00 00       	nop
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	cf ef       	ldi	r28, 0xFF	; 255
		
		//_delay_ms(100);
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		if((TICK.tick_1ms % 100) ==0) {
     4d4:	d2 e0       	ldi	r29, 0x02	; 2
     4d6:	0f 2e       	mov	r0, r31
     4d8:	f4 e6       	ldi	r31, 0x64	; 100
     4da:	cf 2e       	mov	r12, r31
     4dc:	d1 2c       	mov	r13, r1
     4de:	e1 2c       	mov	r14, r1
     4e0:	f1 2c       	mov	r15, r1
     4e2:	f0 2d       	mov	r31, r0
			toggle^=0x01; //start toggling
     4e4:	11 e0       	ldi	r17, 0x01	; 1
		
		//_delay_ms(100);
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		if((TICK.tick_1ms % 100) ==0) {
     4e6:	68 81       	ld	r22, Y
     4e8:	79 81       	ldd	r23, Y+1	; 0x01
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	9b 81       	ldd	r25, Y+3	; 0x03
     4ee:	a7 01       	movw	r20, r14
     4f0:	96 01       	movw	r18, r12
     4f2:	1e d5       	rcall	.+2620   	; 0xf30 <__udivmodsi4>
     4f4:	67 2b       	or	r22, r23
     4f6:	68 2b       	or	r22, r24
     4f8:	69 2b       	or	r22, r25
			toggle^=0x01; //start toggling
     4fa:	71 f4       	brne	.+28     	; 0x518 <main+0xf8>
     4fc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <toggle.2350>
     500:	81 27       	eor	r24, r17
     502:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <toggle.2350>
			if(toggle)received_state = mfrc_check_and_data_receive_ch1(); //RFID check and receive UID data per 100ms
     506:	88 23       	and	r24, r24
     508:	21 f0       	breq	.+8      	; 0x512 <main+0xf2>
     50a:	ed de       	rcall	.-550    	; 0x2e6 <mfrc_check_and_data_receive_ch1>
     50c:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <received_state>
			else received_state = mfrc_check_and_data_receive_ch0();  //UID values are in 'rfid_uid_chX[]'
     510:	03 c0       	rjmp	.+6      	; 0x518 <main+0xf8>
     512:	8c de       	rcall	.-744    	; 0x22c <mfrc_check_and_data_receive_ch0>
     514:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <received_state>
			
		}
		if(received_state==RECEIVE_NONE); //do nothing
		else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     518:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <received_state>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	11 f4       	brne	.+4      	; 0x524 <main+0x104>
			//send to esp8266 and receive result data.
			/*
			if(esp수신데이터)
			else if(esp 수신 데이터)
			*/
			setSoundClip(BUZZ_SUCCESS);
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	3e df       	rcall	.-388    	; 0x3a0 <setSoundClip>
     524:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <received_state>
		}
		else if(received_state==RECEIVE_FAIL){
			setSoundClip(BUZZ_FAIL);
		}
		received_state=RECEIVE_NONE;
     528:	de cf       	rjmp	.-68     	; 0x4e6 <main+0xc6>

0000052a <buzz_MUTE>:
		//dummy code
		//else if(received_state==RECEIVE_FAIL); 
		
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
     52a:	eb e8       	ldi	r30, 0x8B	; 139
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	8f 7b       	andi	r24, 0xBF	; 191
     532:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     534:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <music_flag>
     538:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <music_flag+0x1>
     53c:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <music_flag+0x2>
     540:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <music_flag+0x3>
     544:	08 95       	ret

00000546 <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	39 f0       	breq	.+14     	; 0x558 <setSoundNote+0x12>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     54a:	eb e8       	ldi	r30, 0x8B	; 139
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	20 81       	ld	r18, Z
     550:	20 64       	ori	r18, 0x40	; 64
     552:	20 83       	st	Z, r18
     554:	08 c4       	rjmp	.+2064   	; 0xd66 <setICR3>
     556:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     558:	eb e8       	ldi	r30, 0x8B	; 139
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	8f 7b       	andi	r24, 0xBF	; 191
     560:	80 83       	st	Z, r24
     562:	08 95       	ret

00000564 <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     564:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <music_flag>
     568:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <music_flag+0x1>
     56c:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <music_flag+0x2>
     570:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <music_flag+0x3>
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	91 05       	cpc	r25, r1
     578:	a1 05       	cpc	r26, r1
     57a:	b1 05       	cpc	r27, r1
     57c:	79 f0       	breq	.+30     	; 0x59c <buzz_play+0x38>
     57e:	60 f0       	brcs	.+24     	; 0x598 <buzz_play+0x34>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	91 05       	cpc	r25, r1
     584:	a1 05       	cpc	r26, r1
     586:	b1 05       	cpc	r27, r1
     588:	09 f4       	brne	.+2      	; 0x58c <buzz_play+0x28>
     58a:	6d c0       	rjmp	.+218    	; 0x666 <buzz_play+0x102>
     58c:	03 97       	sbiw	r24, 0x03	; 3
     58e:	a1 05       	cpc	r26, r1
     590:	b1 05       	cpc	r27, r1
     592:	09 f4       	brne	.+2      	; 0x596 <buzz_play+0x32>
     594:	cd c0       	rjmp	.+410    	; 0x730 <buzz_play+0x1cc>
     596:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     598:	c8 cf       	rjmp	.-112    	; 0x52a <buzz_MUTE>
     59a:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     59c:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     5a0:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     5a4:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     5a8:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     5ac:	88 3c       	cpi	r24, 0xC8	; 200
     5ae:	91 05       	cpc	r25, r1
     5b0:	a1 05       	cpc	r26, r1
     5b2:	b1 05       	cpc	r27, r1
     5b4:	20 f4       	brcc	.+8      	; 0x5be <buzz_play+0x5a>
     5b6:	8b e9       	ldi	r24, 0x9B	; 155
     5b8:	96 e0       	ldi	r25, 0x06	; 6
     5ba:	c5 cf       	rjmp	.-118    	; 0x546 <setSoundNote>
     5bc:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     5be:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     5c2:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     5c6:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     5ca:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     5ce:	88 3c       	cpi	r24, 0xC8	; 200
     5d0:	91 05       	cpc	r25, r1
     5d2:	a1 05       	cpc	r26, r1
     5d4:	b1 05       	cpc	r27, r1
     5d6:	21 f4       	brne	.+8      	; 0x5e0 <buzz_play+0x7c>
     5d8:	87 ee       	ldi	r24, 0xE7	; 231
     5da:	95 e0       	ldi	r25, 0x05	; 5
     5dc:	b4 cf       	rjmp	.-152    	; 0x546 <setSoundNote>
     5de:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     5e0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     5e4:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     5e8:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     5ec:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     5f0:	80 39       	cpi	r24, 0x90	; 144
     5f2:	91 40       	sbci	r25, 0x01	; 1
     5f4:	a1 05       	cpc	r26, r1
     5f6:	b1 05       	cpc	r27, r1
     5f8:	21 f4       	brne	.+8      	; 0x602 <buzz_play+0x9e>
     5fa:	85 e6       	ldi	r24, 0x65	; 101
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	a3 cf       	rjmp	.-186    	; 0x546 <setSoundNote>
     600:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     602:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     606:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     60a:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     60e:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     612:	88 35       	cpi	r24, 0x58	; 88
     614:	92 40       	sbci	r25, 0x02	; 2
     616:	a1 05       	cpc	r26, r1
     618:	b1 05       	cpc	r27, r1
     61a:	21 f4       	brne	.+8      	; 0x624 <buzz_play+0xc0>
     61c:	8d ef       	ldi	r24, 0xFD	; 253
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	92 cf       	rjmp	.-220    	; 0x546 <setSoundNote>
     622:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     624:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     628:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     62c:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     630:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     634:	80 32       	cpi	r24, 0x20	; 32
     636:	93 40       	sbci	r25, 0x03	; 3
     638:	a1 05       	cpc	r26, r1
     63a:	b1 05       	cpc	r27, r1
     63c:	21 f4       	brne	.+8      	; 0x646 <buzz_play+0xe2>
     63e:	88 ef       	ldi	r24, 0xF8	; 248
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	81 cf       	rjmp	.-254    	; 0x546 <setSoundNote>
     644:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     646:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     64a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     64e:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     652:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     656:	80 3b       	cpi	r24, 0xB0	; 176
     658:	94 40       	sbci	r25, 0x04	; 4
     65a:	a1 05       	cpc	r26, r1
     65c:	b1 05       	cpc	r27, r1
     65e:	09 f0       	breq	.+2      	; 0x662 <buzz_play+0xfe>
     660:	a8 c0       	rjmp	.+336    	; 0x7b2 <buzz_play+0x24e>
     662:	63 cf       	rjmp	.-314    	; 0x52a <buzz_MUTE>
     664:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     666:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     66a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     66e:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     672:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     676:	88 3c       	cpi	r24, 0xC8	; 200
     678:	91 05       	cpc	r25, r1
     67a:	a1 05       	cpc	r26, r1
     67c:	b1 05       	cpc	r27, r1
     67e:	20 f4       	brcc	.+8      	; 0x688 <buzz_play+0x124>
     680:	8b e9       	ldi	r24, 0x9B	; 155
     682:	96 e0       	ldi	r25, 0x06	; 6
     684:	60 cf       	rjmp	.-320    	; 0x546 <setSoundNote>
     686:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     688:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     68c:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     690:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     694:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     698:	82 3d       	cpi	r24, 0xD2	; 210
     69a:	91 05       	cpc	r25, r1
     69c:	a1 05       	cpc	r26, r1
     69e:	b1 05       	cpc	r27, r1
     6a0:	21 f4       	brne	.+8      	; 0x6aa <buzz_play+0x146>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	4f cf       	rjmp	.-354    	; 0x546 <setSoundNote>
     6a8:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     6aa:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     6ae:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     6b2:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     6b6:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     6ba:	8c 3d       	cpi	r24, 0xDC	; 220
     6bc:	91 05       	cpc	r25, r1
     6be:	a1 05       	cpc	r26, r1
     6c0:	b1 05       	cpc	r27, r1
     6c2:	21 f4       	brne	.+8      	; 0x6cc <buzz_play+0x168>
     6c4:	87 ee       	ldi	r24, 0xE7	; 231
     6c6:	95 e0       	ldi	r25, 0x05	; 5
     6c8:	3e cf       	rjmp	.-388    	; 0x546 <setSoundNote>
     6ca:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     6cc:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     6d0:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     6d4:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     6d8:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     6dc:	80 39       	cpi	r24, 0x90	; 144
     6de:	91 40       	sbci	r25, 0x01	; 1
     6e0:	a1 05       	cpc	r26, r1
     6e2:	b1 05       	cpc	r27, r1
     6e4:	21 f4       	brne	.+8      	; 0x6ee <buzz_play+0x18a>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	2d cf       	rjmp	.-422    	; 0x546 <setSoundNote>
     6ec:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     6ee:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     6f2:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     6f6:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     6fa:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     6fe:	8e 3a       	cpi	r24, 0xAE	; 174
     700:	91 40       	sbci	r25, 0x01	; 1
     702:	a1 05       	cpc	r26, r1
     704:	b1 05       	cpc	r27, r1
     706:	21 f4       	brne	.+8      	; 0x710 <buzz_play+0x1ac>
     708:	85 e6       	ldi	r24, 0x65	; 101
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	1c cf       	rjmp	.-456    	; 0x546 <setSoundNote>
     70e:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     710:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     714:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     718:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     71c:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     720:	88 35       	cpi	r24, 0x58	; 88
     722:	92 40       	sbci	r25, 0x02	; 2
     724:	a1 05       	cpc	r26, r1
     726:	b1 05       	cpc	r27, r1
     728:	09 f0       	breq	.+2      	; 0x72c <buzz_play+0x1c8>
     72a:	43 c0       	rjmp	.+134    	; 0x7b2 <buzz_play+0x24e>
     72c:	fe ce       	rjmp	.-516    	; 0x52a <buzz_MUTE>
     72e:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     730:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     734:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     738:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     73c:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     740:	84 36       	cpi	r24, 0x64	; 100
     742:	91 05       	cpc	r25, r1
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	20 f4       	brcc	.+8      	; 0x752 <buzz_play+0x1ee>
     74a:	82 e1       	ldi	r24, 0x12	; 18
     74c:	94 e0       	ldi	r25, 0x04	; 4
     74e:	fb ce       	rjmp	.-522    	; 0x546 <setSoundNote>
     750:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     752:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     756:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     75a:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     75e:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     762:	88 3c       	cpi	r24, 0xC8	; 200
     764:	91 05       	cpc	r25, r1
     766:	a1 05       	cpc	r26, r1
     768:	b1 05       	cpc	r27, r1
     76a:	20 f4       	brcc	.+8      	; 0x774 <buzz_play+0x210>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	ea ce       	rjmp	.-556    	; 0x546 <setSoundNote>
     772:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     774:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     778:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     77c:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     780:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     784:	8c 32       	cpi	r24, 0x2C	; 44
     786:	91 40       	sbci	r25, 0x01	; 1
     788:	a1 05       	cpc	r26, r1
     78a:	b1 05       	cpc	r27, r1
     78c:	20 f4       	brcc	.+8      	; 0x796 <buzz_play+0x232>
     78e:	82 e1       	ldi	r24, 0x12	; 18
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	d9 ce       	rjmp	.-590    	; 0x546 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     794:	08 95       	ret
     796:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <TICK+0x4>
     79a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <TICK+0x5>
     79e:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <TICK+0x6>
     7a2:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <TICK+0x7>
     7a6:	82 3c       	cpi	r24, 0xC2	; 194
     7a8:	91 40       	sbci	r25, 0x01	; 1
     7aa:	a1 05       	cpc	r26, r1
     7ac:	b1 05       	cpc	r27, r1
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <buzz_play+0x24e>
     7b0:	bc ce       	rjmp	.-648    	; 0x52a <buzz_MUTE>
     7b2:	08 95       	ret

000007b4 <__vector_15>:
void buzz_play();
void buzz_MUTE();
void setSoundNote(int note);

ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	0b b6       	in	r0, 0x3b	; 59
     7c0:	0f 92       	push	r0
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     7da:	ef ef       	ldi	r30, 0xFF	; 255
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	84 81       	ldd	r24, Z+4	; 0x04
     7e0:	95 81       	ldd	r25, Z+5	; 0x05
     7e2:	a6 81       	ldd	r26, Z+6	; 0x06
     7e4:	b7 81       	ldd	r27, Z+7	; 0x07
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	a1 1d       	adc	r26, r1
     7ea:	b1 1d       	adc	r27, r1
     7ec:	84 83       	std	Z+4, r24	; 0x04
     7ee:	95 83       	std	Z+5, r25	; 0x05
     7f0:	a6 83       	std	Z+6, r26	; 0x06
     7f2:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	a2 81       	ldd	r26, Z+2	; 0x02
     7fa:	b3 81       	ldd	r27, Z+3	; 0x03
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	a1 1d       	adc	r26, r1
     800:	b1 1d       	adc	r27, r1
     802:	80 83       	st	Z, r24
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	a2 83       	std	Z+2, r26	; 0x02
     808:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     80a:	ac de       	rcall	.-680    	; 0x564 <buzz_play>
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0b be       	out	0x3b, r0	; 59
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	16 2f       	mov	r17, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
     83a:	95 b3       	in	r25, 0x15	; 21
     83c:	c1 e0       	ldi	r28, 0x01	; 1
     83e:	d0 e0       	ldi	r29, 0x00	; 0
     840:	02 c0       	rjmp	.+4      	; 0x846 <mfrc522_write+0x14>
     842:	cc 0f       	add	r28, r28
     844:	dd 1f       	adc	r29, r29
     846:	4a 95       	dec	r20
     848:	e2 f7       	brpl	.-8      	; 0x842 <mfrc522_write+0x10>
     84a:	2c 2f       	mov	r18, r28
     84c:	20 95       	com	r18
     84e:	92 23       	and	r25, r18
     850:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
     852:	88 0f       	add	r24, r24
     854:	8e 77       	andi	r24, 0x7E	; 126
     856:	65 d2       	rcall	.+1226   	; 0xd22 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
     858:	81 2f       	mov	r24, r17
     85a:	63 d2       	rcall	.+1222   	; 0xd22 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
     85c:	85 b3       	in	r24, 0x15	; 21
     85e:	c8 2b       	or	r28, r24
     860:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	08 95       	ret

0000086a <mfrc522_reset>:


void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	
     86a:	48 2f       	mov	r20, r24
     86c:	6f e0       	ldi	r22, 0x0F	; 15
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	e0 cf       	rjmp	.-64     	; 0x832 <mfrc522_write>
     872:	08 95       	ret

00000874 <mfrc522_read>:
			
		
}


unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
     878:	95 b3       	in	r25, 0x15	; 21
     87a:	c1 e0       	ldi	r28, 0x01	; 1
     87c:	d0 e0       	ldi	r29, 0x00	; 0
     87e:	02 c0       	rjmp	.+4      	; 0x884 <mfrc522_read+0x10>
     880:	cc 0f       	add	r28, r28
     882:	dd 1f       	adc	r29, r29
     884:	6a 95       	dec	r22
     886:	e2 f7       	brpl	.-8      	; 0x880 <mfrc522_read+0xc>
     888:	2c 2f       	mov	r18, r28
     88a:	20 95       	com	r18
     88c:	92 23       	and	r25, r18
     88e:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
     890:	88 0f       	add	r24, r24
     892:	8e 77       	andi	r24, 0x7E	; 126
     894:	80 68       	ori	r24, 0x80	; 128
     896:	45 d2       	rcall	.+1162   	; 0xd22 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
     898:	48 d2       	rcall	.+1168   	; 0xd2a <spi_master_rx>
     89a:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
     89c:	c9 2b       	or	r28, r25
     89e:	c5 bb       	out	0x15, r28	; 21
     8a0:	df 91       	pop	r29
	
	return value;
}
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <mfrc522_init>:
     8a6:	cf 93       	push	r28
#include "uart_lib.h"
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
void mfrc522_init(unsigned char ch)
{
     8a8:	c8 2f       	mov	r28, r24
	unsigned char byte;
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
     8aa:	84 b3       	in	r24, 0x14	; 20
     8ac:	83 60       	ori	r24, 0x03	; 3
     8ae:	84 bb       	out	0x14, r24	; 20
	SS_PORT|=(0x03); //Default HIGH
     8b0:	85 b3       	in	r24, 0x15	; 21
     8b2:	83 60       	ori	r24, 0x03	; 3
     8b4:	85 bb       	out	0x15, r24	; 21
	mfrc522_reset(ch);
     8b6:	8c 2f       	mov	r24, r28
     8b8:	d8 df       	rcall	.-80     	; 0x86a <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
     8ba:	4c 2f       	mov	r20, r28
     8bc:	6d e8       	ldi	r22, 0x8D	; 141
     8be:	8a e2       	ldi	r24, 0x2A	; 42
     8c0:	b8 df       	rcall	.-144    	; 0x832 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
     8c2:	4c 2f       	mov	r20, r28
     8c4:	6e e3       	ldi	r22, 0x3E	; 62
     8c6:	8b e2       	ldi	r24, 0x2B	; 43
     8c8:	b4 df       	rcall	.-152    	; 0x832 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
     8ca:	4c 2f       	mov	r20, r28
     8cc:	6e e1       	ldi	r22, 0x1E	; 30
     8ce:	8c e2       	ldi	r24, 0x2C	; 44
     8d0:	b0 df       	rcall	.-160    	; 0x832 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
     8d2:	4c 2f       	mov	r20, r28
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	8d e2       	ldi	r24, 0x2D	; 45
     8d8:	ac df       	rcall	.-168    	; 0x832 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
     8da:	4c 2f       	mov	r20, r28
     8dc:	60 e4       	ldi	r22, 0x40	; 64
     8de:	85 e1       	ldi	r24, 0x15	; 21
     8e0:	a8 df       	rcall	.-176    	; 0x832 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
     8e2:	4c 2f       	mov	r20, r28
     8e4:	6d e3       	ldi	r22, 0x3D	; 61
     8e6:	81 e1       	ldi	r24, 0x11	; 17
     8e8:	a4 df       	rcall	.-184    	; 0x832 <mfrc522_write>
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
     8ea:	6c 2f       	mov	r22, r28
     8ec:	84 e1       	ldi	r24, 0x14	; 20
     8ee:	c2 df       	rcall	.-124    	; 0x874 <mfrc522_read>
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
     8f0:	98 2f       	mov	r25, r24
     8f2:	93 70       	andi	r25, 0x03	; 3
     8f4:	29 f4       	brne	.+10     	; 0x900 <mfrc522_init+0x5a>
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
     8f6:	68 2f       	mov	r22, r24
     8f8:	63 60       	ori	r22, 0x03	; 3
     8fa:	4c 2f       	mov	r20, r28
     8fc:	84 e1       	ldi	r24, 0x14	; 20
     8fe:	99 df       	rcall	.-206    	; 0x832 <mfrc522_write>
     900:	cf 91       	pop	r28
	}
}
     902:	08 95       	ret

00000904 <mfrc522_version_check>:
     904:	cf 93       	push	r28
	SS_PORT |= (1<<channel);
	
	return value;
}

void mfrc522_version_check(unsigned char ch){
     906:	df 93       	push	r29
     908:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
     90a:	68 2f       	mov	r22, r24
     90c:	87 e3       	ldi	r24, 0x37	; 55
     90e:	b2 df       	rcall	.-156    	; 0x874 <mfrc522_read>
     910:	c8 2f       	mov	r28, r24
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	89 ef       	ldi	r24, 0xF9	; 249
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	80 40       	sbci	r24, 0x00	; 0
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <mfrc522_version_check+0x14>
     920:	00 c0       	rjmp	.+0      	; 0x922 <mfrc522_version_check+0x1e>
     922:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
     924:	d1 11       	cpse	r29, r1
     926:	04 c0       	rjmp	.+8      	; 0x930 <mfrc522_version_check+0x2c>
     928:	82 e4       	ldi	r24, 0x42	; 66
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	95 d2       	rcall	.+1322   	; 0xe58 <uart0_tx_string>
     92e:	03 c0       	rjmp	.+6      	; 0x936 <mfrc522_version_check+0x32>
	else uart0_tx_string("\n[channel 1");
     930:	8e e4       	ldi	r24, 0x4E	; 78
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	91 d2       	rcall	.+1314   	; 0xe58 <uart0_tx_string>
	
	if(byte == 0x92)
     936:	c2 39       	cpi	r28, 0x92	; 146
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
     938:	21 f4       	brne	.+8      	; 0x942 <mfrc522_version_check+0x3e>
     93a:	8a e5       	ldi	r24, 0x5A	; 90
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	8c d2       	rcall	.+1304   	; 0xe58 <uart0_tx_string>
     940:	0a c0       	rjmp	.+20     	; 0x956 <mfrc522_version_check+0x52>
		
	}else if(byte == 0x91 || byte==0x90)
     942:	c0 59       	subi	r28, 0x90	; 144
     944:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
     946:	20 f4       	brcc	.+8      	; 0x950 <mfrc522_version_check+0x4c>
     948:	8e e7       	ldi	r24, 0x7E	; 126
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	85 d2       	rcall	.+1290   	; 0xe58 <uart0_tx_string>
	}else
	{
		uart0_tx_string(" No reader found]\n");
     94e:	03 c0       	rjmp	.+6      	; 0x956 <mfrc522_version_check+0x52>
     950:	82 ea       	ldi	r24, 0xA2	; 162
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	81 d2       	rcall	.+1282   	; 0xe58 <uart0_tx_string>
	}
	
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
     95c:	cf 93       	push	r28
     95e:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
     960:	68 2f       	mov	r22, r24
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	87 df       	rcall	.-242    	; 0x874 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
     966:	68 2f       	mov	r22, r24
     968:	60 62       	ori	r22, 0x20	; 32
     96a:	4c 2f       	mov	r20, r28
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	61 df       	rcall	.-318    	; 0x832 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
     970:	6c 2f       	mov	r22, r28
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	7f df       	rcall	.-258    	; 0x874 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
     976:	68 2f       	mov	r22, r24
     978:	60 68       	ori	r22, 0x80	; 128
     97a:	4c 2f       	mov	r20, r28
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	59 df       	rcall	.-334    	; 0x832 <mfrc522_write>
}
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
     984:	2f 92       	push	r2
     986:	3f 92       	push	r3
     988:	4f 92       	push	r4
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	f8 2e       	mov	r15, r24
     9aa:	a6 2e       	mov	r10, r22
     9ac:	b7 2e       	mov	r11, r23
     9ae:	44 2e       	mov	r4, r20
     9b0:	22 2e       	mov	r2, r18
     9b2:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
     9b4:	8c e0       	ldi	r24, 0x0C	; 12
     9b6:	f8 16       	cp	r15, r24
     9b8:	59 f0       	breq	.+22     	; 0x9d0 <mfrc522_to_card+0x4c>
     9ba:	ee e0       	ldi	r30, 0x0E	; 14
     9bc:	fe 12       	cpse	r15, r30
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     9c0:	68 94       	set
     9c2:	cc 24       	eor	r12, r12
     9c4:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
     9c6:	0f 2e       	mov	r0, r31
     9c8:	f2 e1       	ldi	r31, 0x12	; 18
     9ca:	3f 2e       	mov	r3, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f0 e3       	ldi	r31, 0x30	; 48
     9d4:	cf 2e       	mov	r12, r31
     9d6:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
     9d8:	0f 2e       	mov	r0, r31
     9da:	f7 e7       	ldi	r31, 0x77	; 119
     9dc:	3f 2e       	mov	r3, r31
     9de:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <mfrc522_to_card+0x62>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
     9e2:	c1 2c       	mov	r12, r1
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
     9e4:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
     9e6:	4e 2d       	mov	r20, r14
     9e8:	63 2d       	mov	r22, r3
     9ea:	60 68       	ori	r22, 0x80	; 128
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	21 df       	rcall	.-446    	; 0x832 <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
     9f0:	6e 2d       	mov	r22, r14
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	3f df       	rcall	.-386    	; 0x874 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
     9f6:	68 2f       	mov	r22, r24
     9f8:	6f 77       	andi	r22, 0x7F	; 127
     9fa:	4e 2d       	mov	r20, r14
     9fc:	84 e0       	ldi	r24, 0x04	; 4
     9fe:	19 df       	rcall	.-462    	; 0x832 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
     a00:	6e 2d       	mov	r22, r14
     a02:	8a e0       	ldi	r24, 0x0A	; 10
     a04:	37 df       	rcall	.-402    	; 0x874 <mfrc522_read>
     a06:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
     a08:	60 68       	ori	r22, 0x80	; 128
     a0a:	4e 2d       	mov	r20, r14
     a0c:	8a e0       	ldi	r24, 0x0A	; 10
     a0e:	11 df       	rcall	.-478    	; 0x832 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
     a10:	4e 2d       	mov	r20, r14
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	0d df       	rcall	.-486    	; 0x832 <mfrc522_write>
     a18:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     a1a:	61 2c       	mov	r6, r1
     a1c:	71 2c       	mov	r7, r1
     a1e:	41 14       	cp	r4, r1
     a20:	51 04       	cpc	r5, r1
     a22:	61 04       	cpc	r6, r1
     a24:	71 04       	cpc	r7, r1
     a26:	99 f0       	breq	.+38     	; 0xa4e <mfrc522_to_card+0xca>
     a28:	ca 2d       	mov	r28, r10
     a2a:	db 2d       	mov	r29, r11
     a2c:	81 2c       	mov	r8, r1
     a2e:	91 2c       	mov	r9, r1
     a30:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
     a32:	69 91       	ld	r22, Y+
     a34:	4e 2d       	mov	r20, r14
     a36:	89 e0       	ldi	r24, 0x09	; 9
     a38:	fc de       	rcall	.-520    	; 0x832 <mfrc522_write>
     a3a:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     a3c:	8f 1a       	sub	r8, r31
     a3e:	9f 0a       	sbc	r9, r31
     a40:	af 0a       	sbc	r10, r31
     a42:	bf 0a       	sbc	r11, r31
     a44:	84 14       	cp	r8, r4
     a46:	95 04       	cpc	r9, r5
     a48:	a6 04       	cpc	r10, r6
     a4a:	b7 04       	cpc	r11, r7
     a4c:	90 f3       	brcs	.-28     	; 0xa32 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
     a4e:	4e 2d       	mov	r20, r14
     a50:	6f 2d       	mov	r22, r15
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	ee de       	rcall	.-548    	; 0x832 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
     a56:	8c e0       	ldi	r24, 0x0C	; 12
     a58:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <mfrc522_to_card+0xe8>
     a5c:	6e 2d       	mov	r22, r14
     a5e:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
     a60:	09 df       	rcall	.-494    	; 0x874 <mfrc522_read>
     a62:	68 2f       	mov	r22, r24
     a64:	60 68       	ori	r22, 0x80	; 128
     a66:	4e 2d       	mov	r20, r14
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	e3 de       	rcall	.-570    	; 0x832 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
     a6c:	6e 2d       	mov	r22, r14
     a6e:	84 e0       	ldi	r24, 0x04	; 4
     a70:	01 df       	rcall	.-510    	; 0x874 <mfrc522_read>
     a72:	b8 2e       	mov	r11, r24
     a74:	c0 e0       	ldi	r28, 0x00	; 0
     a76:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     a78:	ec 2d       	mov	r30, r12
     a7a:	e1 60       	ori	r30, 0x01	; 1
     a7c:	ce 2e       	mov	r12, r30
     a7e:	0a c0       	rjmp	.+20     	; 0xa94 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
     a80:	6e 2d       	mov	r22, r14
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	f7 de       	rcall	.-530    	; 0x874 <mfrc522_read>
     a86:	b8 2e       	mov	r11, r24
     a88:	21 96       	adiw	r28, 0x01	; 1
     a8a:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     a8c:	f7 e0       	ldi	r31, 0x07	; 7
     a8e:	df 07       	cpc	r29, r31
     a90:	09 f4       	brne	.+2      	; 0xa94 <mfrc522_to_card+0x110>
     a92:	68 c0       	rjmp	.+208    	; 0xb64 <mfrc522_to_card+0x1e0>
     a94:	8c 2d       	mov	r24, r12
     a96:	8b 21       	and	r24, r11
     a98:	99 f3       	breq	.-26     	; 0xa80 <mfrc522_to_card+0xfc>
     a9a:	6e c0       	rjmp	.+220    	; 0xb78 <mfrc522_to_card+0x1f4>
     a9c:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
     a9e:	81 70       	andi	r24, 0x01	; 1
     aa0:	b8 22       	and	r11, r24
     aa2:	11 f0       	breq	.+4      	; 0xaa8 <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
     aa4:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
     aa8:	c1 e0       	ldi	r28, 0x01	; 1
     aaa:	8c e0       	ldi	r24, 0x0C	; 12
     aac:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
     aae:	73 c0       	rjmp	.+230    	; 0xb96 <mfrc522_to_card+0x212>
     ab0:	6e 2d       	mov	r22, r14
     ab2:	8a e0       	ldi	r24, 0x0A	; 10
     ab4:	df de       	rcall	.-578    	; 0x874 <mfrc522_read>
     ab6:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
     ab8:	6e 2d       	mov	r22, r14
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	db de       	rcall	.-586    	; 0x874 <mfrc522_read>
     abe:	28 2f       	mov	r18, r24
     ac0:	27 70       	andi	r18, 0x07	; 7
     ac2:	a9 f0       	breq	.+42     	; 0xaee <mfrc522_to_card+0x16a>
				if (lastBits)
     ac4:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	82 0f       	add	r24, r18
     ad8:	91 1d       	adc	r25, r1
     ada:	09 2e       	mov	r0, r25
     adc:	00 0c       	add	r0, r0
     ade:	aa 0b       	sbc	r26, r26
     ae0:	bb 0b       	sbc	r27, r27
     ae2:	f8 01       	movw	r30, r16
     ae4:	80 83       	st	Z, r24
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	a2 83       	std	Z+2, r26	; 0x02
     aea:	b3 83       	std	Z+3, r27	; 0x03
     aec:	11 c0       	rjmp	.+34     	; 0xb10 <mfrc522_to_card+0x18c>
     aee:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	09 2e       	mov	r0, r25
     b00:	00 0c       	add	r0, r0
     b02:	aa 0b       	sbc	r26, r26
     b04:	bb 0b       	sbc	r27, r27
     b06:	f8 01       	movw	r30, r16
     b08:	80 83       	st	Z, r24
     b0a:	91 83       	std	Z+1, r25	; 0x01
     b0c:	a2 83       	std	Z+2, r26	; 0x02
     b0e:	b3 83       	std	Z+3, r27	; 0x03
     b10:	88 20       	and	r8, r8
				}

				if (n == 0)
     b12:	71 f0       	breq	.+28     	; 0xb30 <mfrc522_to_card+0x1ac>
     b14:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     b16:	81 31       	cpi	r24, 0x11	; 17
     b18:	08 f0       	brcs	.+2      	; 0xb1c <mfrc522_to_card+0x198>
     b1a:	80 e1       	ldi	r24, 0x10	; 16
     b1c:	88 2e       	mov	r8, r24
     b1e:	91 2c       	mov	r9, r1
     b20:	a1 2c       	mov	r10, r1
     b22:	b1 2c       	mov	r11, r1
     b24:	81 14       	cp	r8, r1
     b26:	91 04       	cpc	r9, r1
     b28:	a1 04       	cpc	r10, r1
     b2a:	b1 04       	cpc	r11, r1
     b2c:	29 f4       	brne	.+10     	; 0xb38 <mfrc522_to_card+0x1b4>
     b2e:	33 c0       	rjmp	.+102    	; 0xb96 <mfrc522_to_card+0x212>
     b30:	81 2c       	mov	r8, r1
     b32:	91 2c       	mov	r9, r1
     b34:	54 01       	movw	r10, r8
     b36:	83 94       	inc	r8
     b38:	02 2d       	mov	r16, r2
     b3a:	1d 2d       	mov	r17, r13
     b3c:	41 2c       	mov	r4, r1
     b3e:	51 2c       	mov	r5, r1
     b40:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
     b42:	6e 2d       	mov	r22, r14
     b44:	89 e0       	ldi	r24, 0x09	; 9
     b46:	96 de       	rcall	.-724    	; 0x874 <mfrc522_read>
     b48:	f8 01       	movw	r30, r16
     b4a:	81 93       	st	Z+, r24
     b4c:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     b4e:	ff ef       	ldi	r31, 0xFF	; 255
     b50:	4f 1a       	sub	r4, r31
     b52:	5f 0a       	sbc	r5, r31
     b54:	6f 0a       	sbc	r6, r31
     b56:	7f 0a       	sbc	r7, r31
     b58:	48 14       	cp	r4, r8
     b5a:	59 04       	cpc	r5, r9
     b5c:	6a 04       	cpc	r6, r10
     b5e:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
     b60:	80 f3       	brcs	.-32     	; 0xb42 <mfrc522_to_card+0x1be>
     b62:	19 c0       	rjmp	.+50     	; 0xb96 <mfrc522_to_card+0x212>
     b64:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
     b66:	8d e0       	ldi	r24, 0x0D	; 13
     b68:	85 de       	rcall	.-758    	; 0x874 <mfrc522_read>
     b6a:	68 2f       	mov	r22, r24
     b6c:	6f 77       	andi	r22, 0x7F	; 127
     b6e:	4e 2d       	mov	r20, r14
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	5f de       	rcall	.-834    	; 0x832 <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
     b74:	c3 e0       	ldi	r28, 0x03	; 3
     b76:	0f c0       	rjmp	.+30     	; 0xb96 <mfrc522_to_card+0x212>
     b78:	6e 2d       	mov	r22, r14
     b7a:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
     b7c:	7b de       	rcall	.-778    	; 0x874 <mfrc522_read>
     b7e:	68 2f       	mov	r22, r24
     b80:	6f 77       	andi	r22, 0x7F	; 127
     b82:	4e 2d       	mov	r20, r14
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	55 de       	rcall	.-854    	; 0x832 <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     b88:	6e 2d       	mov	r22, r14
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	73 de       	rcall	.-794    	; 0x874 <mfrc522_read>
     b8e:	8b 71       	andi	r24, 0x1B	; 27
     b90:	09 f4       	brne	.+2      	; 0xb94 <mfrc522_to_card+0x210>
     b92:	84 cf       	rjmp	.-248    	; 0xa9c <mfrc522_to_card+0x118>
     b94:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
     b96:	8c 2f       	mov	r24, r28
	
// 	SetBitMask(ControlReg,0x80);           //timer stops
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	7f 90       	pop	r7
     bb2:	6f 90       	pop	r6
     bb4:	5f 90       	pop	r5
     bb6:	4f 90       	pop	r4
     bb8:	3f 90       	pop	r3
     bba:	2f 90       	pop	r2
     bbc:	08 95       	ret

00000bbe <mfrc522_request>:
     bbe:	cf 92       	push	r12
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
     bc0:	df 92       	push	r13
     bc2:	ef 92       	push	r14
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <mfrc522_request+0x10>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <mfrc522_request+0x12>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	18 2f       	mov	r17, r24
     bd6:	6b 01       	movw	r12, r22
     bd8:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
     bda:	67 e0       	ldi	r22, 0x07	; 7
     bdc:	8d e0       	ldi	r24, 0x0D	; 13
     bde:	29 de       	rcall	.-942    	; 0x832 <mfrc522_write>
	
	tag_type[0] = req_mode;
     be0:	f6 01       	movw	r30, r12
     be2:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
     be4:	8e 01       	movw	r16, r28
     be6:	0f 5f       	subi	r16, 0xFF	; 255
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	96 01       	movw	r18, r12
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	b6 01       	movw	r22, r12
     bf0:	8c e0       	ldi	r24, 0x0C	; 12
     bf2:	c8 de       	rcall	.-624    	; 0x984 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	59 f4       	brne	.+22     	; 0xc0e <mfrc522_request+0x50>
     bf8:	49 81       	ldd	r20, Y+1	; 0x01
     bfa:	5a 81       	ldd	r21, Y+2	; 0x02
     bfc:	6b 81       	ldd	r22, Y+3	; 0x03
     bfe:	7c 81       	ldd	r23, Y+4	; 0x04
     c00:	40 31       	cpi	r20, 0x10	; 16
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f0       	breq	.+6      	; 0xc10 <mfrc522_request+0x52>
	{
		status = ERROR;
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <mfrc522_request+0x52>
     c0e:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	08 95       	ret

00000c28 <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <mfrc522_get_card_serial+0x10>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <mfrc522_get_card_serial+0x12>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	6c 01       	movw	r12, r24
     c40:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
     c42:	46 2f       	mov	r20, r22
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	8d e0       	ldi	r24, 0x0D	; 13
     c48:	f4 dd       	rcall	.-1048   	; 0x832 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
     c4a:	83 e9       	ldi	r24, 0x93	; 147
     c4c:	f6 01       	movw	r30, r12
     c4e:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
     c50:	80 e2       	ldi	r24, 0x20	; 32
     c52:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
     c54:	8e 01       	movw	r16, r28
     c56:	0f 5f       	subi	r16, 0xFF	; 255
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
     c5a:	96 01       	movw	r18, r12
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	b6 01       	movw	r22, r12
     c60:	8c e0       	ldi	r24, 0x0C	; 12
     c62:	90 de       	rcall	.-736    	; 0x984 <mfrc522_to_card>

	if (status == CARD_FOUND)
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	71 f4       	brne	.+28     	; 0xc84 <mfrc522_get_card_serial+0x5c>
     c68:	f6 01       	movw	r30, r12
     c6a:	a6 01       	movw	r20, r12
     c6c:	4c 5f       	subi	r20, 0xFC	; 252
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
     c72:	21 91       	ld	r18, Z+
     c74:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     c76:	4e 17       	cp	r20, r30
     c78:	5f 07       	cpc	r21, r31
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     c7c:	f6 01       	movw	r30, r12
     c7e:	24 81       	ldd	r18, Z+4	; 0x04
     c80:	92 13       	cpse	r25, r18
		{
			status = ERROR;
     c82:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret

00000c9c <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(unsigned char spi_mode, ...){
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <spi_init+0x6>
     ca2:	1f 92       	push	r1
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	21 f1       	breq	.+72     	; 0xcf6 <spi_init+0x5a>
     cae:	81 11       	cpse	r24, r1
     cb0:	32 c0       	rjmp	.+100    	; 0xd16 <spi_init+0x7a>
     cb2:	29 c0       	rjmp	.+82     	; 0xd06 <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
     cb4:	9c 91       	ld	r25, X
     cb6:	12 96       	adiw	r26, 0x02	; 2
     cb8:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
     cba:	e2 17       	cp	r30, r18
     cbc:	f3 07       	cpc	r31, r19
     cbe:	d1 f7       	brne	.-12     	; 0xcb4 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	92 30       	cpi	r25, 0x02	; 2
     cc4:	20 f1       	brcs	.+72     	; 0xd0e <spi_init+0x72>
     cc6:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
     cc8:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	71 f4       	brne	.+28     	; 0xcea <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
     cce:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
     cd0:	87 b3       	in	r24, 0x17	; 23
     cd2:	87 60       	ori	r24, 0x07	; 7
     cd4:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
     cd6:	99 81       	ldd	r25, Y+1	; 0x01
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	89 2b       	or	r24, r25
     cdc:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
     cde:	2e b1       	in	r18, 0x0e	; 14
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	92 2b       	or	r25, r18
     ce4:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
     ce6:	8d b9       	out	0x0d, r24	; 13
     ce8:	16 c0       	rjmp	.+44     	; 0xd16 <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
     cea:	81 11       	cpse	r24, r1
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
     cee:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	8d b9       	out	0x0d, r24	; 13
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <spi_init+0x7a>
     cf6:	de 01       	movw	r26, r28
     cf8:	19 96       	adiw	r26, 0x09	; 9
     cfa:	fe 01       	movw	r30, r28
     cfc:	31 96       	adiw	r30, 0x01	; 1
     cfe:	9e 01       	movw	r18, r28
     d00:	2c 5f       	subi	r18, 0xFC	; 252
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	d7 cf       	rjmp	.-82     	; 0xcb4 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
     d06:	9b 81       	ldd	r25, Y+3	; 0x03
     d08:	92 30       	cpi	r25, 0x02	; 2
     d0a:	e8 f6       	brcc	.-70     	; 0xcc6 <spi_init+0x2a>
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
     d0e:	1d b8       	out	0x0d, r1	; 13
     d10:	de cf       	rjmp	.-68     	; 0xcce <spi_init+0x32>
     d12:	1d b8       	out	0x0d, r1	; 13
     d14:	ec cf       	rjmp	.-40     	; 0xcee <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
     d22:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
     d24:	77 9b       	sbis	0x0e, 7	; 14
     d26:	fe cf       	rjmp	.-4      	; 0xd24 <spi_master_tx+0x2>
}
     d28:	08 95       	ret

00000d2a <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
     d2a:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
     d2c:	77 9b       	sbis	0x0e, 7	; 14
     d2e:	fe cf       	rjmp	.-4      	; 0xd2c <spi_master_rx+0x2>
	
	return SPDR;
     d30:	8f b1       	in	r24, 0x0f	; 15
}
     d32:	08 95       	ret

00000d34 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
     d34:	bc 9a       	sbi	0x17, 4	; 23
     d36:	8c e0       	ldi	r24, 0x0C	; 12
     d38:	83 bf       	out	0x33, r24	; 51
     d3a:	8a ef       	ldi	r24, 0xFA	; 250
     d3c:	81 bf       	out	0x31, r24	; 49
     d3e:	87 b7       	in	r24, 0x37	; 55
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	87 bf       	out	0x37, r24	; 55
     d44:	08 95       	ret

00000d46 <timer3_init>:
     d46:	13 9a       	sbi	0x02, 3	; 2
     d48:	80 e4       	ldi	r24, 0x40	; 64
     d4a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d4e:	8a e1       	ldi	r24, 0x1A	; 26
     d50:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d54:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d58:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d5c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d60:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d64:	08 95       	ret

00000d66 <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
     d66:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
     d6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d6e:	08 95       	ret

00000d70 <_uart_tx_string_in_isr>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
     d70:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <uart0+0x64>
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	e5 53       	subi	r30, 0x35	; 53
     d78:	fe 4f       	sbci	r31, 0xFE	; 254
     d7a:	80 81       	ld	r24, Z
     d7c:	81 11       	cpse	r24, r1
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <_uart_tx_string_in_isr+0x22>
     d80:	56 98       	cbi	0x0a, 6	; 10
     d82:	84 e6       	ldi	r24, 0x64	; 100
     d84:	eb ec       	ldi	r30, 0xCB	; 203
     d86:	f1 e0       	ldi	r31, 0x01	; 1
     d88:	df 01       	movw	r26, r30
     d8a:	1d 92       	st	X+, r1
     d8c:	8a 95       	dec	r24
     d8e:	e9 f7       	brne	.-6      	; 0xd8a <_uart_tx_string_in_isr+0x1a>
     d90:	08 95       	ret
     d92:	af e2       	ldi	r26, 0x2F	; 47
     d94:	b2 e0       	ldi	r27, 0x02	; 2
     d96:	ec 91       	ld	r30, X
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8e 0f       	add	r24, r30
     d9c:	8c 93       	st	X, r24
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	e5 53       	subi	r30, 0x35	; 53
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	80 81       	ld	r24, Z
     da6:	8c b9       	out	0x0c, r24	; 12
     da8:	08 95       	ret

00000daa <__vector_20>:
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	0b b6       	in	r0, 0x3b	; 59
     db6:	0f 92       	push	r0
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
     dd0:	cf df       	rcall	.-98     	; 0xd70 <_uart_tx_string_in_isr>
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <uart_init>:
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	9b 01       	movw	r18, r22
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	60 e4       	ldi	r22, 0x40	; 64
     e06:	72 e4       	ldi	r23, 0x42	; 66
     e08:	8f e0       	ldi	r24, 0x0F	; 15
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	91 d0       	rcall	.+290    	; 0xf30 <__udivmodsi4>
     e0e:	21 50       	subi	r18, 0x01	; 1
     e10:	31 09       	sbc	r19, r1
     e12:	20 97       	sbiw	r28, 0x00	; 0
     e14:	51 f4       	brne	.+20     	; 0xe2a <uart_init+0x32>
     e16:	10 98       	cbi	0x02, 0	; 2
     e18:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     e1c:	29 b9       	out	0x09, r18	; 9
     e1e:	88 e0       	ldi	r24, 0x08	; 8
     e20:	8a b9       	out	0x0a, r24	; 10
     e22:	86 e0       	ldi	r24, 0x06	; 6
     e24:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     e28:	10 c0       	rjmp	.+32     	; 0xe4a <uart_init+0x52>
     e2a:	21 97       	sbiw	r28, 0x01	; 1
     e2c:	71 f4       	brne	.+28     	; 0xe4a <uart_init+0x52>
     e2e:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     e32:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e36:	ea e9       	ldi	r30, 0x9A	; 154
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	88 e1       	ldi	r24, 0x18	; 24
     e3c:	80 83       	st	Z, r24
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	80 83       	st	Z, r24
     e44:	86 e0       	ldi	r24, 0x06	; 6
     e46:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <uart0_tx_char>:
     e50:	5d 9b       	sbis	0x0b, 5	; 11
     e52:	fe cf       	rjmp	.-4      	; 0xe50 <uart0_tx_char>
     e54:	8c b9       	out	0x0c, r24	; 12
     e56:	08 95       	ret

00000e58 <uart0_tx_string>:
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
     e5e:	88 81       	ld	r24, Y
     e60:	88 23       	and	r24, r24
     e62:	29 f0       	breq	.+10     	; 0xe6e <uart0_tx_string+0x16>
     e64:	21 96       	adiw	r28, 0x01	; 1
     e66:	f4 df       	rcall	.-24     	; 0xe50 <uart0_tx_char>
     e68:	89 91       	ld	r24, Y+
     e6a:	81 11       	cpse	r24, r1
     e6c:	fc cf       	rjmp	.-8      	; 0xe66 <uart0_tx_string+0xe>
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	08 95       	ret

00000e74 <IntToString>:

char * IntToString(int num)
{
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	64 97       	sbiw	r28, 0x14	; 20
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d,",num); //고유 자릿값
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	85 eb       	ldi	r24, 0xB5	; 181
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	8e 01       	movw	r16, r28
     e9a:	0f 5f       	subi	r16, 0xFF	; 255
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	1f 93       	push	r17
     ea0:	0f 93       	push	r16
     ea2:	6f d0       	rcall	.+222    	; 0xf82 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
     ea4:	b8 01       	movw	r22, r16
     ea6:	87 e9       	ldi	r24, 0x97	; 151
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	64 d0       	rcall	.+200    	; 0xf74 <strcpy>
	
	return (buff.itos_buff);
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
}
     eb8:	87 e9       	ldi	r24, 0x97	; 151
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	64 96       	adiw	r28, 0x14	; 20
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <HexToString>:
 
 char * HexToString(char num)
 {
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	64 97       	sbiw	r28, 0x14	; 20
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"0x%x,",num); //고유 자릿값
     eea:	1f 92       	push	r1
     eec:	8f 93       	push	r24
     eee:	89 eb       	ldi	r24, 0xB9	; 185
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	8e 01       	movw	r16, r28
     ef8:	0f 5f       	subi	r16, 0xFF	; 255
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	1f 93       	push	r17
     efe:	0f 93       	push	r16
     f00:	40 d0       	rcall	.+128    	; 0xf82 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
     f02:	b8 01       	movw	r22, r16
     f04:	87 e9       	ldi	r24, 0x97	; 151
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	35 d0       	rcall	.+106    	; 0xf74 <strcpy>
	 
	 return (buff.itos_buff);
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
 }
     f16:	87 e9       	ldi	r24, 0x97	; 151
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	64 96       	adiw	r28, 0x14	; 20
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <__udivmodsi4>:
     f30:	a1 e2       	ldi	r26, 0x21	; 33
     f32:	1a 2e       	mov	r1, r26
     f34:	aa 1b       	sub	r26, r26
     f36:	bb 1b       	sub	r27, r27
     f38:	fd 01       	movw	r30, r26
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <__udivmodsi4_ep>

00000f3c <__udivmodsi4_loop>:
     f3c:	aa 1f       	adc	r26, r26
     f3e:	bb 1f       	adc	r27, r27
     f40:	ee 1f       	adc	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	a2 17       	cp	r26, r18
     f46:	b3 07       	cpc	r27, r19
     f48:	e4 07       	cpc	r30, r20
     f4a:	f5 07       	cpc	r31, r21
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__udivmodsi4_ep>
     f4e:	a2 1b       	sub	r26, r18
     f50:	b3 0b       	sbc	r27, r19
     f52:	e4 0b       	sbc	r30, r20
     f54:	f5 0b       	sbc	r31, r21

00000f56 <__udivmodsi4_ep>:
     f56:	66 1f       	adc	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	1a 94       	dec	r1
     f60:	69 f7       	brne	.-38     	; 0xf3c <__udivmodsi4_loop>
     f62:	60 95       	com	r22
     f64:	70 95       	com	r23
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	bd 01       	movw	r22, r26
     f70:	cf 01       	movw	r24, r30
     f72:	08 95       	ret

00000f74 <strcpy>:
     f74:	fb 01       	movw	r30, r22
     f76:	dc 01       	movw	r26, r24
     f78:	01 90       	ld	r0, Z+
     f7a:	0d 92       	st	X+, r0
     f7c:	00 20       	and	r0, r0
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <strcpy+0x4>
     f80:	08 95       	ret

00000f82 <sprintf>:
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	2e 97       	sbiw	r28, 0x0e	; 14
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	0d 89       	ldd	r16, Y+21	; 0x15
     f9c:	1e 89       	ldd	r17, Y+22	; 0x16
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	8c 83       	std	Y+4, r24	; 0x04
     fa2:	1a 83       	std	Y+2, r17	; 0x02
     fa4:	09 83       	std	Y+1, r16	; 0x01
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f e7       	ldi	r25, 0x7F	; 127
     faa:	9e 83       	std	Y+6, r25	; 0x06
     fac:	8d 83       	std	Y+5, r24	; 0x05
     fae:	ae 01       	movw	r20, r28
     fb0:	47 5e       	subi	r20, 0xE7	; 231
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	6f 89       	ldd	r22, Y+23	; 0x17
     fb6:	78 8d       	ldd	r23, Y+24	; 0x18
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	10 d0       	rcall	.+32     	; 0xfde <vfprintf>
     fbe:	ef 81       	ldd	r30, Y+7	; 0x07
     fc0:	f8 85       	ldd	r31, Y+8	; 0x08
     fc2:	e0 0f       	add	r30, r16
     fc4:	f1 1f       	adc	r31, r17
     fc6:	10 82       	st	Z, r1
     fc8:	2e 96       	adiw	r28, 0x0e	; 14
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <vfprintf>:
     fde:	2f 92       	push	r2
     fe0:	3f 92       	push	r3
     fe2:	4f 92       	push	r4
     fe4:	5f 92       	push	r5
     fe6:	6f 92       	push	r6
     fe8:	7f 92       	push	r7
     fea:	8f 92       	push	r8
     fec:	9f 92       	push	r9
     fee:	af 92       	push	r10
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2b 97       	sbiw	r28, 0x0b	; 11
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	6c 01       	movw	r12, r24
    1014:	7b 01       	movw	r14, r22
    1016:	8a 01       	movw	r16, r20
    1018:	fc 01       	movw	r30, r24
    101a:	17 82       	std	Z+7, r1	; 0x07
    101c:	16 82       	std	Z+6, r1	; 0x06
    101e:	83 81       	ldd	r24, Z+3	; 0x03
    1020:	81 ff       	sbrs	r24, 1
    1022:	bf c1       	rjmp	.+894    	; 0x13a2 <__stack+0x2a3>
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	3c 01       	movw	r6, r24
    102a:	f6 01       	movw	r30, r12
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	f7 01       	movw	r30, r14
    1030:	93 fd       	sbrc	r25, 3
    1032:	85 91       	lpm	r24, Z+
    1034:	93 ff       	sbrs	r25, 3
    1036:	81 91       	ld	r24, Z+
    1038:	7f 01       	movw	r14, r30
    103a:	88 23       	and	r24, r24
    103c:	09 f4       	brne	.+2      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    103e:	ad c1       	rjmp	.+858    	; 0x139a <__stack+0x29b>
    1040:	85 32       	cpi	r24, 0x25	; 37
    1042:	39 f4       	brne	.+14     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
    1044:	93 fd       	sbrc	r25, 3
    1046:	85 91       	lpm	r24, Z+
    1048:	93 ff       	sbrs	r25, 3
    104a:	81 91       	ld	r24, Z+
    104c:	7f 01       	movw	r14, r30
    104e:	85 32       	cpi	r24, 0x25	; 37
    1050:	21 f4       	brne	.+8      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1052:	b6 01       	movw	r22, r12
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	d6 d1       	rcall	.+940    	; 0x1404 <fputc>
    1058:	e8 cf       	rjmp	.-48     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    105a:	91 2c       	mov	r9, r1
    105c:	21 2c       	mov	r2, r1
    105e:	31 2c       	mov	r3, r1
    1060:	ff e1       	ldi	r31, 0x1F	; 31
    1062:	f3 15       	cp	r31, r3
    1064:	d8 f0       	brcs	.+54     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    1066:	8b 32       	cpi	r24, 0x2B	; 43
    1068:	79 f0       	breq	.+30     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    106a:	38 f4       	brcc	.+14     	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    106c:	80 32       	cpi	r24, 0x20	; 32
    106e:	79 f0       	breq	.+30     	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
    1070:	83 32       	cpi	r24, 0x23	; 35
    1072:	a1 f4       	brne	.+40     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    1074:	23 2d       	mov	r18, r3
    1076:	20 61       	ori	r18, 0x10	; 16
    1078:	1d c0       	rjmp	.+58     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    107a:	8d 32       	cpi	r24, 0x2D	; 45
    107c:	61 f0       	breq	.+24     	; 0x1096 <__DATA_REGION_LENGTH__+0x96>
    107e:	80 33       	cpi	r24, 0x30	; 48
    1080:	69 f4       	brne	.+26     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    1082:	23 2d       	mov	r18, r3
    1084:	21 60       	ori	r18, 0x01	; 1
    1086:	16 c0       	rjmp	.+44     	; 0x10b4 <__DATA_REGION_LENGTH__+0xb4>
    1088:	83 2d       	mov	r24, r3
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	38 2e       	mov	r3, r24
    108e:	e3 2d       	mov	r30, r3
    1090:	e4 60       	ori	r30, 0x04	; 4
    1092:	3e 2e       	mov	r3, r30
    1094:	2a c0       	rjmp	.+84     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    1096:	f3 2d       	mov	r31, r3
    1098:	f8 60       	ori	r31, 0x08	; 8
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    109c:	37 fc       	sbrc	r3, 7
    109e:	2d c0       	rjmp	.+90     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10a0:	20 ed       	ldi	r18, 0xD0	; 208
    10a2:	28 0f       	add	r18, r24
    10a4:	2a 30       	cpi	r18, 0x0A	; 10
    10a6:	40 f0       	brcs	.+16     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10a8:	8e 32       	cpi	r24, 0x2E	; 46
    10aa:	b9 f4       	brne	.+46     	; 0x10da <__DATA_REGION_LENGTH__+0xda>
    10ac:	36 fc       	sbrc	r3, 6
    10ae:	75 c1       	rjmp	.+746    	; 0x139a <__stack+0x29b>
    10b0:	23 2d       	mov	r18, r3
    10b2:	20 64       	ori	r18, 0x40	; 64
    10b4:	32 2e       	mov	r3, r18
    10b6:	19 c0       	rjmp	.+50     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10b8:	36 fe       	sbrs	r3, 6
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	98 9e       	mul	r9, r24
    10c0:	20 0d       	add	r18, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	92 2e       	mov	r9, r18
    10c6:	11 c0       	rjmp	.+34     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10c8:	ea e0       	ldi	r30, 0x0A	; 10
    10ca:	2e 9e       	mul	r2, r30
    10cc:	20 0d       	add	r18, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	22 2e       	mov	r2, r18
    10d2:	f3 2d       	mov	r31, r3
    10d4:	f0 62       	ori	r31, 0x20	; 32
    10d6:	3f 2e       	mov	r3, r31
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10da:	8c 36       	cpi	r24, 0x6C	; 108
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <__DATA_REGION_LENGTH__+0xe6>
    10de:	83 2d       	mov	r24, r3
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	38 2e       	mov	r3, r24
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <__DATA_REGION_LENGTH__+0xea>
    10e6:	88 36       	cpi	r24, 0x68	; 104
    10e8:	41 f4       	brne	.+16     	; 0x10fa <__DATA_REGION_LENGTH__+0xfa>
    10ea:	f7 01       	movw	r30, r14
    10ec:	93 fd       	sbrc	r25, 3
    10ee:	85 91       	lpm	r24, Z+
    10f0:	93 ff       	sbrs	r25, 3
    10f2:	81 91       	ld	r24, Z+
    10f4:	7f 01       	movw	r14, r30
    10f6:	81 11       	cpse	r24, r1
    10f8:	b3 cf       	rjmp	.-154    	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    10fa:	98 2f       	mov	r25, r24
    10fc:	9f 7d       	andi	r25, 0xDF	; 223
    10fe:	95 54       	subi	r25, 0x45	; 69
    1100:	93 30       	cpi	r25, 0x03	; 3
    1102:	28 f4       	brcc	.+10     	; 0x110e <__stack+0xf>
    1104:	0c 5f       	subi	r16, 0xFC	; 252
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	9f e3       	ldi	r25, 0x3F	; 63
    110a:	99 83       	std	Y+1, r25	; 0x01
    110c:	0d c0       	rjmp	.+26     	; 0x1128 <__stack+0x29>
    110e:	83 36       	cpi	r24, 0x63	; 99
    1110:	31 f0       	breq	.+12     	; 0x111e <__stack+0x1f>
    1112:	83 37       	cpi	r24, 0x73	; 115
    1114:	71 f0       	breq	.+28     	; 0x1132 <__stack+0x33>
    1116:	83 35       	cpi	r24, 0x53	; 83
    1118:	09 f0       	breq	.+2      	; 0x111c <__stack+0x1d>
    111a:	55 c0       	rjmp	.+170    	; 0x11c6 <__stack+0xc7>
    111c:	20 c0       	rjmp	.+64     	; 0x115e <__stack+0x5f>
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	0e 5f       	subi	r16, 0xFE	; 254
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	88 24       	eor	r8, r8
    112a:	83 94       	inc	r8
    112c:	91 2c       	mov	r9, r1
    112e:	53 01       	movw	r10, r6
    1130:	12 c0       	rjmp	.+36     	; 0x1156 <__stack+0x57>
    1132:	28 01       	movw	r4, r16
    1134:	f2 e0       	ldi	r31, 0x02	; 2
    1136:	4f 0e       	add	r4, r31
    1138:	51 1c       	adc	r5, r1
    113a:	f8 01       	movw	r30, r16
    113c:	a0 80       	ld	r10, Z
    113e:	b1 80       	ldd	r11, Z+1	; 0x01
    1140:	36 fe       	sbrs	r3, 6
    1142:	03 c0       	rjmp	.+6      	; 0x114a <__stack+0x4b>
    1144:	69 2d       	mov	r22, r9
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <__stack+0x4f>
    114a:	6f ef       	ldi	r22, 0xFF	; 255
    114c:	7f ef       	ldi	r23, 0xFF	; 255
    114e:	c5 01       	movw	r24, r10
    1150:	4e d1       	rcall	.+668    	; 0x13ee <strnlen>
    1152:	4c 01       	movw	r8, r24
    1154:	82 01       	movw	r16, r4
    1156:	f3 2d       	mov	r31, r3
    1158:	ff 77       	andi	r31, 0x7F	; 127
    115a:	3f 2e       	mov	r3, r31
    115c:	15 c0       	rjmp	.+42     	; 0x1188 <__stack+0x89>
    115e:	28 01       	movw	r4, r16
    1160:	22 e0       	ldi	r18, 0x02	; 2
    1162:	42 0e       	add	r4, r18
    1164:	51 1c       	adc	r5, r1
    1166:	f8 01       	movw	r30, r16
    1168:	a0 80       	ld	r10, Z
    116a:	b1 80       	ldd	r11, Z+1	; 0x01
    116c:	36 fe       	sbrs	r3, 6
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <__stack+0x77>
    1170:	69 2d       	mov	r22, r9
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__stack+0x7b>
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	c5 01       	movw	r24, r10
    117c:	2d d1       	rcall	.+602    	; 0x13d8 <strnlen_P>
    117e:	4c 01       	movw	r8, r24
    1180:	f3 2d       	mov	r31, r3
    1182:	f0 68       	ori	r31, 0x80	; 128
    1184:	3f 2e       	mov	r3, r31
    1186:	82 01       	movw	r16, r4
    1188:	33 fc       	sbrc	r3, 3
    118a:	19 c0       	rjmp	.+50     	; 0x11be <__stack+0xbf>
    118c:	82 2d       	mov	r24, r2
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	88 16       	cp	r8, r24
    1192:	99 06       	cpc	r9, r25
    1194:	a0 f4       	brcc	.+40     	; 0x11be <__stack+0xbf>
    1196:	b6 01       	movw	r22, r12
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	33 d1       	rcall	.+614    	; 0x1404 <fputc>
    119e:	2a 94       	dec	r2
    11a0:	f5 cf       	rjmp	.-22     	; 0x118c <__stack+0x8d>
    11a2:	f5 01       	movw	r30, r10
    11a4:	37 fc       	sbrc	r3, 7
    11a6:	85 91       	lpm	r24, Z+
    11a8:	37 fe       	sbrs	r3, 7
    11aa:	81 91       	ld	r24, Z+
    11ac:	5f 01       	movw	r10, r30
    11ae:	b6 01       	movw	r22, r12
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 d1       	rcall	.+592    	; 0x1404 <fputc>
    11b4:	21 10       	cpse	r2, r1
    11b6:	2a 94       	dec	r2
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	82 1a       	sub	r8, r18
    11bc:	91 08       	sbc	r9, r1
    11be:	81 14       	cp	r8, r1
    11c0:	91 04       	cpc	r9, r1
    11c2:	79 f7       	brne	.-34     	; 0x11a2 <__stack+0xa3>
    11c4:	e1 c0       	rjmp	.+450    	; 0x1388 <__stack+0x289>
    11c6:	84 36       	cpi	r24, 0x64	; 100
    11c8:	11 f0       	breq	.+4      	; 0x11ce <__stack+0xcf>
    11ca:	89 36       	cpi	r24, 0x69	; 105
    11cc:	39 f5       	brne	.+78     	; 0x121c <__stack+0x11d>
    11ce:	f8 01       	movw	r30, r16
    11d0:	37 fe       	sbrs	r3, 7
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <__stack+0xe3>
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0c 5f       	subi	r16, 0xFC	; 252
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <__stack+0xf3>
    11e2:	60 81       	ld	r22, Z
    11e4:	71 81       	ldd	r23, Z+1	; 0x01
    11e6:	07 2e       	mov	r0, r23
    11e8:	00 0c       	add	r0, r0
    11ea:	88 0b       	sbc	r24, r24
    11ec:	99 0b       	sbc	r25, r25
    11ee:	0e 5f       	subi	r16, 0xFE	; 254
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	f3 2d       	mov	r31, r3
    11f4:	ff 76       	andi	r31, 0x6F	; 111
    11f6:	3f 2e       	mov	r3, r31
    11f8:	97 ff       	sbrs	r25, 7
    11fa:	09 c0       	rjmp	.+18     	; 0x120e <__stack+0x10f>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	f0 68       	ori	r31, 0x80	; 128
    120c:	3f 2e       	mov	r3, r31
    120e:	2a e0       	ldi	r18, 0x0A	; 10
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	a3 01       	movw	r20, r6
    1214:	33 d1       	rcall	.+614    	; 0x147c <__ultoa_invert>
    1216:	88 2e       	mov	r8, r24
    1218:	86 18       	sub	r8, r6
    121a:	44 c0       	rjmp	.+136    	; 0x12a4 <__stack+0x1a5>
    121c:	85 37       	cpi	r24, 0x75	; 117
    121e:	31 f4       	brne	.+12     	; 0x122c <__stack+0x12d>
    1220:	23 2d       	mov	r18, r3
    1222:	2f 7e       	andi	r18, 0xEF	; 239
    1224:	b2 2e       	mov	r11, r18
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	25 c0       	rjmp	.+74     	; 0x1276 <__stack+0x177>
    122c:	93 2d       	mov	r25, r3
    122e:	99 7f       	andi	r25, 0xF9	; 249
    1230:	b9 2e       	mov	r11, r25
    1232:	8f 36       	cpi	r24, 0x6F	; 111
    1234:	c1 f0       	breq	.+48     	; 0x1266 <__stack+0x167>
    1236:	18 f4       	brcc	.+6      	; 0x123e <__stack+0x13f>
    1238:	88 35       	cpi	r24, 0x58	; 88
    123a:	79 f0       	breq	.+30     	; 0x125a <__stack+0x15b>
    123c:	ae c0       	rjmp	.+348    	; 0x139a <__stack+0x29b>
    123e:	80 37       	cpi	r24, 0x70	; 112
    1240:	19 f0       	breq	.+6      	; 0x1248 <__stack+0x149>
    1242:	88 37       	cpi	r24, 0x78	; 120
    1244:	21 f0       	breq	.+8      	; 0x124e <__stack+0x14f>
    1246:	a9 c0       	rjmp	.+338    	; 0x139a <__stack+0x29b>
    1248:	e9 2f       	mov	r30, r25
    124a:	e0 61       	ori	r30, 0x10	; 16
    124c:	be 2e       	mov	r11, r30
    124e:	b4 fe       	sbrs	r11, 4
    1250:	0d c0       	rjmp	.+26     	; 0x126c <__stack+0x16d>
    1252:	fb 2d       	mov	r31, r11
    1254:	f4 60       	ori	r31, 0x04	; 4
    1256:	bf 2e       	mov	r11, r31
    1258:	09 c0       	rjmp	.+18     	; 0x126c <__stack+0x16d>
    125a:	34 fe       	sbrs	r3, 4
    125c:	0a c0       	rjmp	.+20     	; 0x1272 <__stack+0x173>
    125e:	29 2f       	mov	r18, r25
    1260:	26 60       	ori	r18, 0x06	; 6
    1262:	b2 2e       	mov	r11, r18
    1264:	06 c0       	rjmp	.+12     	; 0x1272 <__stack+0x173>
    1266:	28 e0       	ldi	r18, 0x08	; 8
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <__stack+0x177>
    126c:	20 e1       	ldi	r18, 0x10	; 16
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <__stack+0x177>
    1272:	20 e1       	ldi	r18, 0x10	; 16
    1274:	32 e0       	ldi	r19, 0x02	; 2
    1276:	f8 01       	movw	r30, r16
    1278:	b7 fe       	sbrs	r11, 7
    127a:	07 c0       	rjmp	.+14     	; 0x128a <__stack+0x18b>
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	0c 5f       	subi	r16, 0xFC	; 252
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <__stack+0x197>
    128a:	60 81       	ld	r22, Z
    128c:	71 81       	ldd	r23, Z+1	; 0x01
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 5f       	subi	r16, 0xFE	; 254
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	a3 01       	movw	r20, r6
    1298:	f1 d0       	rcall	.+482    	; 0x147c <__ultoa_invert>
    129a:	88 2e       	mov	r8, r24
    129c:	86 18       	sub	r8, r6
    129e:	fb 2d       	mov	r31, r11
    12a0:	ff 77       	andi	r31, 0x7F	; 127
    12a2:	3f 2e       	mov	r3, r31
    12a4:	36 fe       	sbrs	r3, 6
    12a6:	0d c0       	rjmp	.+26     	; 0x12c2 <__stack+0x1c3>
    12a8:	23 2d       	mov	r18, r3
    12aa:	2e 7f       	andi	r18, 0xFE	; 254
    12ac:	a2 2e       	mov	r10, r18
    12ae:	89 14       	cp	r8, r9
    12b0:	58 f4       	brcc	.+22     	; 0x12c8 <__stack+0x1c9>
    12b2:	34 fe       	sbrs	r3, 4
    12b4:	0b c0       	rjmp	.+22     	; 0x12cc <__stack+0x1cd>
    12b6:	32 fc       	sbrc	r3, 2
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <__stack+0x1cd>
    12ba:	83 2d       	mov	r24, r3
    12bc:	8e 7e       	andi	r24, 0xEE	; 238
    12be:	a8 2e       	mov	r10, r24
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <__stack+0x1cd>
    12c2:	b8 2c       	mov	r11, r8
    12c4:	a3 2c       	mov	r10, r3
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <__stack+0x1cf>
    12c8:	b8 2c       	mov	r11, r8
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <__stack+0x1cf>
    12cc:	b9 2c       	mov	r11, r9
    12ce:	a4 fe       	sbrs	r10, 4
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <__stack+0x1f1>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e8 0d       	add	r30, r8
    12d6:	f1 1d       	adc	r31, r1
    12d8:	80 81       	ld	r24, Z
    12da:	80 33       	cpi	r24, 0x30	; 48
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <__stack+0x1e7>
    12de:	9a 2d       	mov	r25, r10
    12e0:	99 7e       	andi	r25, 0xE9	; 233
    12e2:	a9 2e       	mov	r10, r25
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <__stack+0x1f9>
    12e6:	a2 fe       	sbrs	r10, 2
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <__stack+0x1f7>
    12ea:	b3 94       	inc	r11
    12ec:	b3 94       	inc	r11
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <__stack+0x1f9>
    12f0:	8a 2d       	mov	r24, r10
    12f2:	86 78       	andi	r24, 0x86	; 134
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <__stack+0x1f9>
    12f6:	b3 94       	inc	r11
    12f8:	a3 fc       	sbrc	r10, 3
    12fa:	10 c0       	rjmp	.+32     	; 0x131c <__stack+0x21d>
    12fc:	a0 fe       	sbrs	r10, 0
    12fe:	06 c0       	rjmp	.+12     	; 0x130c <__stack+0x20d>
    1300:	b2 14       	cp	r11, r2
    1302:	80 f4       	brcc	.+32     	; 0x1324 <__stack+0x225>
    1304:	28 0c       	add	r2, r8
    1306:	92 2c       	mov	r9, r2
    1308:	9b 18       	sub	r9, r11
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <__stack+0x227>
    130c:	b2 14       	cp	r11, r2
    130e:	58 f4       	brcc	.+22     	; 0x1326 <__stack+0x227>
    1310:	b6 01       	movw	r22, r12
    1312:	80 e2       	ldi	r24, 0x20	; 32
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	76 d0       	rcall	.+236    	; 0x1404 <fputc>
    1318:	b3 94       	inc	r11
    131a:	f8 cf       	rjmp	.-16     	; 0x130c <__stack+0x20d>
    131c:	b2 14       	cp	r11, r2
    131e:	18 f4       	brcc	.+6      	; 0x1326 <__stack+0x227>
    1320:	2b 18       	sub	r2, r11
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <__stack+0x229>
    1324:	98 2c       	mov	r9, r8
    1326:	21 2c       	mov	r2, r1
    1328:	a4 fe       	sbrs	r10, 4
    132a:	0f c0       	rjmp	.+30     	; 0x134a <__stack+0x24b>
    132c:	b6 01       	movw	r22, r12
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	68 d0       	rcall	.+208    	; 0x1404 <fputc>
    1334:	a2 fe       	sbrs	r10, 2
    1336:	16 c0       	rjmp	.+44     	; 0x1364 <__stack+0x265>
    1338:	a1 fc       	sbrc	r10, 1
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <__stack+0x243>
    133c:	88 e7       	ldi	r24, 0x78	; 120
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <__stack+0x247>
    1342:	88 e5       	ldi	r24, 0x58	; 88
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	b6 01       	movw	r22, r12
    1348:	0c c0       	rjmp	.+24     	; 0x1362 <__stack+0x263>
    134a:	8a 2d       	mov	r24, r10
    134c:	86 78       	andi	r24, 0x86	; 134
    134e:	51 f0       	breq	.+20     	; 0x1364 <__stack+0x265>
    1350:	a1 fe       	sbrs	r10, 1
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <__stack+0x259>
    1354:	8b e2       	ldi	r24, 0x2B	; 43
    1356:	01 c0       	rjmp	.+2      	; 0x135a <__stack+0x25b>
    1358:	80 e2       	ldi	r24, 0x20	; 32
    135a:	a7 fc       	sbrc	r10, 7
    135c:	8d e2       	ldi	r24, 0x2D	; 45
    135e:	b6 01       	movw	r22, r12
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	50 d0       	rcall	.+160    	; 0x1404 <fputc>
    1364:	89 14       	cp	r8, r9
    1366:	30 f4       	brcc	.+12     	; 0x1374 <__stack+0x275>
    1368:	b6 01       	movw	r22, r12
    136a:	80 e3       	ldi	r24, 0x30	; 48
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	4a d0       	rcall	.+148    	; 0x1404 <fputc>
    1370:	9a 94       	dec	r9
    1372:	f8 cf       	rjmp	.-16     	; 0x1364 <__stack+0x265>
    1374:	8a 94       	dec	r8
    1376:	f3 01       	movw	r30, r6
    1378:	e8 0d       	add	r30, r8
    137a:	f1 1d       	adc	r31, r1
    137c:	80 81       	ld	r24, Z
    137e:	b6 01       	movw	r22, r12
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	40 d0       	rcall	.+128    	; 0x1404 <fputc>
    1384:	81 10       	cpse	r8, r1
    1386:	f6 cf       	rjmp	.-20     	; 0x1374 <__stack+0x275>
    1388:	22 20       	and	r2, r2
    138a:	09 f4       	brne	.+2      	; 0x138e <__stack+0x28f>
    138c:	4e ce       	rjmp	.-868    	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    138e:	b6 01       	movw	r22, r12
    1390:	80 e2       	ldi	r24, 0x20	; 32
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	37 d0       	rcall	.+110    	; 0x1404 <fputc>
    1396:	2a 94       	dec	r2
    1398:	f7 cf       	rjmp	.-18     	; 0x1388 <__stack+0x289>
    139a:	f6 01       	movw	r30, r12
    139c:	86 81       	ldd	r24, Z+6	; 0x06
    139e:	97 81       	ldd	r25, Z+7	; 0x07
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <__stack+0x2a7>
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
    13a6:	2b 96       	adiw	r28, 0x0b	; 11
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	bf 90       	pop	r11
    13c4:	af 90       	pop	r10
    13c6:	9f 90       	pop	r9
    13c8:	8f 90       	pop	r8
    13ca:	7f 90       	pop	r7
    13cc:	6f 90       	pop	r6
    13ce:	5f 90       	pop	r5
    13d0:	4f 90       	pop	r4
    13d2:	3f 90       	pop	r3
    13d4:	2f 90       	pop	r2
    13d6:	08 95       	ret

000013d8 <strnlen_P>:
    13d8:	fc 01       	movw	r30, r24
    13da:	05 90       	lpm	r0, Z+
    13dc:	61 50       	subi	r22, 0x01	; 1
    13de:	70 40       	sbci	r23, 0x00	; 0
    13e0:	01 10       	cpse	r0, r1
    13e2:	d8 f7       	brcc	.-10     	; 0x13da <strnlen_P+0x2>
    13e4:	80 95       	com	r24
    13e6:	90 95       	com	r25
    13e8:	8e 0f       	add	r24, r30
    13ea:	9f 1f       	adc	r25, r31
    13ec:	08 95       	ret

000013ee <strnlen>:
    13ee:	fc 01       	movw	r30, r24
    13f0:	61 50       	subi	r22, 0x01	; 1
    13f2:	70 40       	sbci	r23, 0x00	; 0
    13f4:	01 90       	ld	r0, Z+
    13f6:	01 10       	cpse	r0, r1
    13f8:	d8 f7       	brcc	.-10     	; 0x13f0 <strnlen+0x2>
    13fa:	80 95       	com	r24
    13fc:	90 95       	com	r25
    13fe:	8e 0f       	add	r24, r30
    1400:	9f 1f       	adc	r25, r31
    1402:	08 95       	ret

00001404 <fputc>:
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	fb 01       	movw	r30, r22
    140e:	23 81       	ldd	r18, Z+3	; 0x03
    1410:	21 fd       	sbrc	r18, 1
    1412:	03 c0       	rjmp	.+6      	; 0x141a <fputc+0x16>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	2c c0       	rjmp	.+88     	; 0x1472 <fputc+0x6e>
    141a:	22 ff       	sbrs	r18, 2
    141c:	16 c0       	rjmp	.+44     	; 0x144a <fputc+0x46>
    141e:	46 81       	ldd	r20, Z+6	; 0x06
    1420:	57 81       	ldd	r21, Z+7	; 0x07
    1422:	24 81       	ldd	r18, Z+4	; 0x04
    1424:	35 81       	ldd	r19, Z+5	; 0x05
    1426:	42 17       	cp	r20, r18
    1428:	53 07       	cpc	r21, r19
    142a:	44 f4       	brge	.+16     	; 0x143c <fputc+0x38>
    142c:	a0 81       	ld	r26, Z
    142e:	b1 81       	ldd	r27, Z+1	; 0x01
    1430:	9d 01       	movw	r18, r26
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	31 83       	std	Z+1, r19	; 0x01
    1438:	20 83       	st	Z, r18
    143a:	8c 93       	st	X, r24
    143c:	26 81       	ldd	r18, Z+6	; 0x06
    143e:	37 81       	ldd	r19, Z+7	; 0x07
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	37 83       	std	Z+7, r19	; 0x07
    1446:	26 83       	std	Z+6, r18	; 0x06
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <fputc+0x6e>
    144a:	8b 01       	movw	r16, r22
    144c:	ec 01       	movw	r28, r24
    144e:	fb 01       	movw	r30, r22
    1450:	00 84       	ldd	r0, Z+8	; 0x08
    1452:	f1 85       	ldd	r31, Z+9	; 0x09
    1454:	e0 2d       	mov	r30, r0
    1456:	09 95       	icall
    1458:	89 2b       	or	r24, r25
    145a:	e1 f6       	brne	.-72     	; 0x1414 <fputc+0x10>
    145c:	d8 01       	movw	r26, r16
    145e:	16 96       	adiw	r26, 0x06	; 6
    1460:	8d 91       	ld	r24, X+
    1462:	9c 91       	ld	r25, X
    1464:	17 97       	sbiw	r26, 0x07	; 7
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	17 96       	adiw	r26, 0x07	; 7
    146a:	9c 93       	st	X, r25
    146c:	8e 93       	st	-X, r24
    146e:	16 97       	sbiw	r26, 0x06	; 6
    1470:	ce 01       	movw	r24, r28
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	08 95       	ret

0000147c <__ultoa_invert>:
    147c:	fa 01       	movw	r30, r20
    147e:	aa 27       	eor	r26, r26
    1480:	28 30       	cpi	r18, 0x08	; 8
    1482:	51 f1       	breq	.+84     	; 0x14d8 <__ultoa_invert+0x5c>
    1484:	20 31       	cpi	r18, 0x10	; 16
    1486:	81 f1       	breq	.+96     	; 0x14e8 <__ultoa_invert+0x6c>
    1488:	e8 94       	clt
    148a:	6f 93       	push	r22
    148c:	6e 7f       	andi	r22, 0xFE	; 254
    148e:	6e 5f       	subi	r22, 0xFE	; 254
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	8f 4f       	sbci	r24, 0xFF	; 255
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	af 4f       	sbci	r26, 0xFF	; 255
    1498:	b1 e0       	ldi	r27, 0x01	; 1
    149a:	3e d0       	rcall	.+124    	; 0x1518 <__ultoa_invert+0x9c>
    149c:	b4 e0       	ldi	r27, 0x04	; 4
    149e:	3c d0       	rcall	.+120    	; 0x1518 <__ultoa_invert+0x9c>
    14a0:	67 0f       	add	r22, r23
    14a2:	78 1f       	adc	r23, r24
    14a4:	89 1f       	adc	r24, r25
    14a6:	9a 1f       	adc	r25, r26
    14a8:	a1 1d       	adc	r26, r1
    14aa:	68 0f       	add	r22, r24
    14ac:	79 1f       	adc	r23, r25
    14ae:	8a 1f       	adc	r24, r26
    14b0:	91 1d       	adc	r25, r1
    14b2:	a1 1d       	adc	r26, r1
    14b4:	6a 0f       	add	r22, r26
    14b6:	71 1d       	adc	r23, r1
    14b8:	81 1d       	adc	r24, r1
    14ba:	91 1d       	adc	r25, r1
    14bc:	a1 1d       	adc	r26, r1
    14be:	20 d0       	rcall	.+64     	; 0x1500 <__ultoa_invert+0x84>
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__ultoa_invert+0x48>
    14c2:	68 94       	set
    14c4:	3f 91       	pop	r19
    14c6:	2a e0       	ldi	r18, 0x0A	; 10
    14c8:	26 9f       	mul	r18, r22
    14ca:	11 24       	eor	r1, r1
    14cc:	30 19       	sub	r19, r0
    14ce:	30 5d       	subi	r19, 0xD0	; 208
    14d0:	31 93       	st	Z+, r19
    14d2:	de f6       	brtc	.-74     	; 0x148a <__ultoa_invert+0xe>
    14d4:	cf 01       	movw	r24, r30
    14d6:	08 95       	ret
    14d8:	46 2f       	mov	r20, r22
    14da:	47 70       	andi	r20, 0x07	; 7
    14dc:	40 5d       	subi	r20, 0xD0	; 208
    14de:	41 93       	st	Z+, r20
    14e0:	b3 e0       	ldi	r27, 0x03	; 3
    14e2:	0f d0       	rcall	.+30     	; 0x1502 <__ultoa_invert+0x86>
    14e4:	c9 f7       	brne	.-14     	; 0x14d8 <__ultoa_invert+0x5c>
    14e6:	f6 cf       	rjmp	.-20     	; 0x14d4 <__ultoa_invert+0x58>
    14e8:	46 2f       	mov	r20, r22
    14ea:	4f 70       	andi	r20, 0x0F	; 15
    14ec:	40 5d       	subi	r20, 0xD0	; 208
    14ee:	4a 33       	cpi	r20, 0x3A	; 58
    14f0:	18 f0       	brcs	.+6      	; 0x14f8 <__ultoa_invert+0x7c>
    14f2:	49 5d       	subi	r20, 0xD9	; 217
    14f4:	31 fd       	sbrc	r19, 1
    14f6:	40 52       	subi	r20, 0x20	; 32
    14f8:	41 93       	st	Z+, r20
    14fa:	02 d0       	rcall	.+4      	; 0x1500 <__ultoa_invert+0x84>
    14fc:	a9 f7       	brne	.-22     	; 0x14e8 <__ultoa_invert+0x6c>
    14fe:	ea cf       	rjmp	.-44     	; 0x14d4 <__ultoa_invert+0x58>
    1500:	b4 e0       	ldi	r27, 0x04	; 4
    1502:	a6 95       	lsr	r26
    1504:	97 95       	ror	r25
    1506:	87 95       	ror	r24
    1508:	77 95       	ror	r23
    150a:	67 95       	ror	r22
    150c:	ba 95       	dec	r27
    150e:	c9 f7       	brne	.-14     	; 0x1502 <__ultoa_invert+0x86>
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 05       	cpc	r22, r1
    1514:	71 05       	cpc	r23, r1
    1516:	08 95       	ret
    1518:	9b 01       	movw	r18, r22
    151a:	ac 01       	movw	r20, r24
    151c:	0a 2e       	mov	r0, r26
    151e:	06 94       	lsr	r0
    1520:	57 95       	ror	r21
    1522:	47 95       	ror	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	ba 95       	dec	r27
    152a:	c9 f7       	brne	.-14     	; 0x151e <__ultoa_invert+0xa2>
    152c:	62 0f       	add	r22, r18
    152e:	73 1f       	adc	r23, r19
    1530:	84 1f       	adc	r24, r20
    1532:	95 1f       	adc	r25, r21
    1534:	a0 1d       	adc	r26, r0
    1536:	08 95       	ret

00001538 <_exit>:
    1538:	f8 94       	cli

0000153a <__stop_program>:
    153a:	ff cf       	rjmp	.-2      	; 0x153a <__stop_program>
