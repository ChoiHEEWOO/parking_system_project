
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  0000157a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  008001ee  008001ee  000016fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028c2  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9a  00000000  00000000  0000421a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001343  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  000064f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d2  00000000  00000000  00006ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001862  00000000  00000000  00007492  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008cf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ba c3       	rjmp	.+1908   	; 0x7b2 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b5 c6       	rjmp	.+3434   	; 0xdbc <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e7       	ldi	r30, 0x7A	; 122
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3e       	cpi	r26, 0xEE	; 238
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ee       	ldi	r26, 0xEE	; 238
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 36       	cpi	r26, 0x69	; 105
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	93 d1       	rcall	.+806    	; 0x3ea <main>
      c4:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_30>:
	uart1_tx_string("AT+RST\r\n");
	_delay_ms(100);
	uart1_tx_string("AT+CWMODE=3\r\n");
	uart1_tx_string(send_SSID_TEST("AT+CWJAP=\"",(char*)ssid,(char*)pw));
	
}
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
      f0:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
      f4:	82 2f       	mov	r24, r18
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	8e 33       	cpi	r24, 0x3E	; 62
      fe:	91 05       	cpc	r25, r1
     100:	a1 05       	cpc	r26, r1
     102:	b1 05       	cpc	r27, r1
     104:	21 f4       	brne	.+8      	; 0x10e <__vector_30+0x44>
     106:	31 e0       	ldi	r19, 0x01	; 1
     108:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <esp8266_send_ready_flag>
     10c:	07 c0       	rjmp	.+14     	; 0x11c <__vector_30+0x52>
     10e:	8d 37       	cpi	r24, 0x7D	; 125
     110:	91 05       	cpc	r25, r1
     112:	a1 05       	cpc	r26, r1
     114:	b1 05       	cpc	r27, r1
     116:	11 f4       	brne	.+4      	; 0x11c <__vector_30+0x52>
     118:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <esp8266_receiving__flag>
     11c:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <esp8266_receiving__flag>
     120:	33 23       	and	r19, r19
     122:	c9 f0       	breq	.+50     	; 0x156 <__vector_30+0x8c>
     124:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <cnt.2355>
     128:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <cnt.2355+0x1>
     12c:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <cnt.2355+0x2>
     130:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <cnt.2355+0x3>
     134:	fa 01       	movw	r30, r20
     136:	ef 59       	subi	r30, 0x9F	; 159
     138:	fd 4f       	sbci	r31, 0xFD	; 253
     13a:	20 83       	st	Z, r18
     13c:	4f 5f       	subi	r20, 0xFF	; 255
     13e:	5f 4f       	sbci	r21, 0xFF	; 255
     140:	6f 4f       	sbci	r22, 0xFF	; 255
     142:	7f 4f       	sbci	r23, 0xFF	; 255
     144:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <cnt.2355>
     148:	50 93 f2 01 	sts	0x01F2, r21	; 0x8001f2 <cnt.2355+0x1>
     14c:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <cnt.2355+0x2>
     150:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <cnt.2355+0x3>
     154:	08 c0       	rjmp	.+16     	; 0x166 <__vector_30+0x9c>
     156:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <cnt.2355>
     15a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <cnt.2355+0x1>
     15e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <cnt.2355+0x2>
     162:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <cnt.2355+0x3>
     166:	8b 37       	cpi	r24, 0x7B	; 123
     168:	91 05       	cpc	r25, r1
     16a:	a1 05       	cpc	r26, r1
     16c:	b1 05       	cpc	r27, r1
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_30+0xac>
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <esp8266_receiving__flag>
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	7f 91       	pop	r23
     184:	6f 91       	pop	r22
     186:	5f 91       	pop	r21
     188:	4f 91       	pop	r20
     18a:	3f 91       	pop	r19
     18c:	2f 91       	pop	r18
     18e:	0f 90       	pop	r0
     190:	0b be       	out	0x3b, r0	; 59
     192:	0f 90       	pop	r0
     194:	0f be       	out	0x3f, r0	; 63
     196:	0f 90       	pop	r0
     198:	1f 90       	pop	r1
     19a:	18 95       	reti

0000019c <mfrc_print_serial>:
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	c6 2f       	mov	r28, r22
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	91 05       	cpc	r25, r1
     1b0:	51 f1       	breq	.+84     	; 0x206 <mfrc_print_serial+0x6a>
     1b2:	82 30       	cpi	r24, 0x02	; 2
     1b4:	91 05       	cpc	r25, r1
     1b6:	09 f4       	brne	.+2      	; 0x1ba <mfrc_print_serial+0x1e>
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <mfrc_print_serial+0xb8>
     1ba:	89 2b       	or	r24, r25
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <mfrc_print_serial+0x24>
     1be:	70 c0       	rjmp	.+224    	; 0x2a0 <mfrc_print_serial+0x104>
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	52 d6       	rcall	.+3236   	; 0xe6a <uart0_tx_string>
     1c6:	0f e3       	ldi	r16, 0x3F	; 63
     1c8:	13 e0       	ldi	r17, 0x03	; 3
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f1 e5       	ldi	r31, 0x51	; 81
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f3 e0       	ldi	r31, 0x03	; 3
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	0f 2e       	mov	r0, r31
     1d8:	f3 e4       	ldi	r31, 0x43	; 67
     1da:	cf 2e       	mov	r12, r31
     1dc:	f3 e0       	ldi	r31, 0x03	; 3
     1de:	df 2e       	mov	r13, r31
     1e0:	f0 2d       	mov	r31, r0
     1e2:	c1 11       	cpse	r28, r1
     1e4:	04 c0       	rjmp	.+8      	; 0x1ee <mfrc_print_serial+0x52>
     1e6:	f8 01       	movw	r30, r16
     1e8:	80 81       	ld	r24, Z
     1ea:	3b d6       	rcall	.+3190   	; 0xe62 <uart0_tx_char>
     1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <mfrc_print_serial+0x58>
     1ee:	f7 01       	movw	r30, r14
     1f0:	80 81       	ld	r24, Z
     1f2:	37 d6       	rcall	.+3182   	; 0xe62 <uart0_tx_char>
     1f4:	0f 5f       	subi	r16, 0xFF	; 255
     1f6:	1f 4f       	sbci	r17, 0xFF	; 255
     1f8:	ff ef       	ldi	r31, 0xFF	; 255
     1fa:	ef 1a       	sub	r14, r31
     1fc:	ff 0a       	sbc	r15, r31
     1fe:	0c 15       	cp	r16, r12
     200:	1d 05       	cpc	r17, r13
     202:	79 f7       	brne	.-34     	; 0x1e2 <mfrc_print_serial+0x46>
     204:	4d c0       	rjmp	.+154    	; 0x2a0 <mfrc_print_serial+0x104>
     206:	8b e0       	ldi	r24, 0x0B	; 11
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	2f d6       	rcall	.+3166   	; 0xe6a <uart0_tx_string>
     20c:	0f e3       	ldi	r16, 0x3F	; 63
     20e:	13 e0       	ldi	r17, 0x03	; 3
     210:	0f 2e       	mov	r0, r31
     212:	f1 e5       	ldi	r31, 0x51	; 81
     214:	ef 2e       	mov	r14, r31
     216:	f3 e0       	ldi	r31, 0x03	; 3
     218:	ff 2e       	mov	r15, r31
     21a:	f0 2d       	mov	r31, r0
     21c:	0f 2e       	mov	r0, r31
     21e:	f3 e4       	ldi	r31, 0x43	; 67
     220:	cf 2e       	mov	r12, r31
     222:	f3 e0       	ldi	r31, 0x03	; 3
     224:	df 2e       	mov	r13, r31
     226:	f0 2d       	mov	r31, r0
     228:	c1 11       	cpse	r28, r1
     22a:	06 c0       	rjmp	.+12     	; 0x238 <mfrc_print_serial+0x9c>
     22c:	f8 01       	movw	r30, r16
     22e:	80 81       	ld	r24, Z
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	3f d6       	rcall	.+3198   	; 0xeb2 <IntToString>
     234:	1a d6       	rcall	.+3124   	; 0xe6a <uart0_tx_string>
     236:	05 c0       	rjmp	.+10     	; 0x242 <mfrc_print_serial+0xa6>
     238:	f7 01       	movw	r30, r14
     23a:	80 81       	ld	r24, Z
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	39 d6       	rcall	.+3186   	; 0xeb2 <IntToString>
     240:	14 d6       	rcall	.+3112   	; 0xe6a <uart0_tx_string>
     242:	0f 5f       	subi	r16, 0xFF	; 255
     244:	1f 4f       	sbci	r17, 0xFF	; 255
     246:	ff ef       	ldi	r31, 0xFF	; 255
     248:	ef 1a       	sub	r14, r31
     24a:	ff 0a       	sbc	r15, r31
     24c:	0c 15       	cp	r16, r12
     24e:	1d 05       	cpc	r17, r13
     250:	59 f7       	brne	.-42     	; 0x228 <mfrc_print_serial+0x8c>
     252:	26 c0       	rjmp	.+76     	; 0x2a0 <mfrc_print_serial+0x104>
     254:	83 e1       	ldi	r24, 0x13	; 19
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	08 d6       	rcall	.+3088   	; 0xe6a <uart0_tx_string>
     25a:	0f e3       	ldi	r16, 0x3F	; 63
     25c:	13 e0       	ldi	r17, 0x03	; 3
     25e:	0f 2e       	mov	r0, r31
     260:	f1 e5       	ldi	r31, 0x51	; 81
     262:	ef 2e       	mov	r14, r31
     264:	f3 e0       	ldi	r31, 0x03	; 3
     266:	ff 2e       	mov	r15, r31
     268:	f0 2d       	mov	r31, r0
     26a:	0f 2e       	mov	r0, r31
     26c:	f3 e4       	ldi	r31, 0x43	; 67
     26e:	cf 2e       	mov	r12, r31
     270:	f3 e0       	ldi	r31, 0x03	; 3
     272:	df 2e       	mov	r13, r31
     274:	f0 2d       	mov	r31, r0
     276:	c1 11       	cpse	r28, r1
     278:	05 c0       	rjmp	.+10     	; 0x284 <mfrc_print_serial+0xe8>
     27a:	f8 01       	movw	r30, r16
     27c:	80 81       	ld	r24, Z
     27e:	48 d6       	rcall	.+3216   	; 0xf10 <HexToString>
     280:	f4 d5       	rcall	.+3048   	; 0xe6a <uart0_tx_string>
     282:	04 c0       	rjmp	.+8      	; 0x28c <mfrc_print_serial+0xf0>
     284:	f7 01       	movw	r30, r14
     286:	80 81       	ld	r24, Z
     288:	43 d6       	rcall	.+3206   	; 0xf10 <HexToString>
     28a:	ef d5       	rcall	.+3038   	; 0xe6a <uart0_tx_string>
     28c:	80 e2       	ldi	r24, 0x20	; 32
     28e:	e9 d5       	rcall	.+3026   	; 0xe62 <uart0_tx_char>
     290:	0f 5f       	subi	r16, 0xFF	; 255
     292:	1f 4f       	sbci	r17, 0xFF	; 255
     294:	ff ef       	ldi	r31, 0xFF	; 255
     296:	ef 1a       	sub	r14, r31
     298:	ff 0a       	sbc	r15, r31
     29a:	0c 15       	cp	r16, r12
     29c:	1d 05       	cpc	r17, r13
     29e:	59 f7       	brne	.-42     	; 0x276 <mfrc_print_serial+0xda>
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	08 95       	ret

000002b0 <mfrc_check_and_data_receive_ch0>:
     2b0:	cf 93       	push	r28
     2b2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <noise_flag.2369>
     2b6:	81 11       	cpse	r24, r1
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <mfrc_check_and_data_receive_ch0+0x1a>
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	6f e3       	ldi	r22, 0x3F	; 63
     2be:	73 e0       	ldi	r23, 0x03	; 3
     2c0:	82 e5       	ldi	r24, 0x52	; 82
     2c2:	86 d4       	rcall	.+2316   	; 0xbd0 <mfrc522_request>
     2c4:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_byte.2371>
     2c8:	1b c0       	rjmp	.+54     	; 0x300 <mfrc_check_and_data_receive_ch0+0x50>
     2ca:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <__data_end>
     2ce:	88 23       	and	r24, r24
     2d0:	31 f0       	breq	.+12     	; 0x2de <mfrc_check_and_data_receive_ch0+0x2e>
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	6f e3       	ldi	r22, 0x3F	; 63
     2d6:	73 e0       	ldi	r23, 0x03	; 3
     2d8:	82 e5       	ldi	r24, 0x52	; 82
     2da:	7a d4       	rcall	.+2292   	; 0xbd0 <mfrc522_request>
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <mfrc_check_and_data_receive_ch0+0x44>
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	6f e3       	ldi	r22, 0x3F	; 63
     2e2:	73 e0       	ldi	r23, 0x03	; 3
     2e4:	82 e5       	ldi	r24, 0x52	; 82
     2e6:	74 d4       	rcall	.+2280   	; 0xbd0 <mfrc522_request>
     2e8:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_byte.2371>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <mfrc_check_and_data_receive_ch0+0x44>
     2f0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <noise_flag.2369>
     2f4:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <__data_end>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	89 27       	eor	r24, r25
     2fc:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <__data_end>
     300:	c0 91 ef 01 	lds	r28, 0x01EF	; 0x8001ef <_byte.2371>
     304:	c1 30       	cpi	r28, 0x01	; 1
     306:	29 f0       	breq	.+10     	; 0x312 <mfrc_check_and_data_receive_ch0+0x62>
     308:	88 e5       	ldi	r24, 0x58	; 88
     30a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     30e:	c0 e0       	ldi	r28, 0x00	; 0
     310:	29 c0       	rjmp	.+82     	; 0x364 <mfrc_check_and_data_receive_ch0+0xb4>
     312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     316:	88 35       	cpi	r24, 0x58	; 88
     318:	11 f5       	brne	.+68     	; 0x35e <mfrc_check_and_data_receive_ch0+0xae>
     31a:	8f e4       	ldi	r24, 0x4F	; 79
     31c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <noise_flag.2369>
     326:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <__data_end>
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	8f e3       	ldi	r24, 0x3F	; 63
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	84 d4       	rcall	.+2312   	; 0xc3a <mfrc522_get_card_serial>
     332:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_byte.2371>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	a1 f4       	brne	.+40     	; 0x362 <mfrc_check_and_data_receive_ch0+0xb2>
     33a:	8b e1       	ldi	r24, 0x1B	; 27
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	95 d5       	rcall	.+2858   	; 0xe6a <uart0_tx_string>
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	2a df       	rcall	.-428    	; 0x19c <mfrc_print_serial>
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	26 df       	rcall	.-436    	; 0x19c <mfrc_print_serial>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	22 df       	rcall	.-444    	; 0x19c <mfrc_print_serial>
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	83 d5       	rcall	.+2822   	; 0xe62 <uart0_tx_char>
     35c:	03 c0       	rjmp	.+6      	; 0x364 <mfrc_check_and_data_receive_ch0+0xb4>
     35e:	c0 e0       	ldi	r28, 0x00	; 0
     360:	01 c0       	rjmp	.+2      	; 0x364 <mfrc_check_and_data_receive_ch0+0xb4>
     362:	cf ef       	ldi	r28, 0xFF	; 255
     364:	8c 2f       	mov	r24, r28
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 switch(clip)
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	79 f0       	breq	.+30     	; 0x38c <setSoundClip+0x22>
     36e:	28 f0       	brcs	.+10     	; 0x37a <setSoundClip+0x10>
     370:	82 30       	cpi	r24, 0x02	; 2
     372:	c9 f0       	breq	.+50     	; 0x3a6 <setSoundClip+0x3c>
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	21 f1       	breq	.+72     	; 0x3c0 <setSoundClip+0x56>
     378:	2f c0       	rjmp	.+94     	; 0x3d8 <setSoundClip+0x6e>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     37a:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <music_flag>
     37e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <music_flag+0x1>
     382:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <music_flag+0x2>
     386:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <music_flag+0x3>
     38a:	26 c0       	rjmp	.+76     	; 0x3d8 <setSoundClip+0x6e>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <music_flag>
     398:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <music_flag+0x1>
     39c:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <music_flag+0x2>
     3a0:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <music_flag+0x3>
     3a4:	19 c0       	rjmp	.+50     	; 0x3d8 <setSoundClip+0x6e>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <music_flag>
     3b2:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <music_flag+0x1>
     3b6:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <music_flag+0x2>
     3ba:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <music_flag+0x3>
     3be:	0c c0       	rjmp	.+24     	; 0x3d8 <setSoundClip+0x6e>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <music_flag>
     3cc:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <music_flag+0x1>
     3d0:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <music_flag+0x2>
     3d4:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <music_flag+0x3>
	 }
	 TICK.buzz_1ms=0;
     3d8:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <TICK+0x4>
     3dc:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <TICK+0x5>
     3e0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <TICK+0x6>
     3e4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <TICK+0x7>
     3e8:	08 95       	ret

000003ea <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     3ea:	78 94       	sei
	DDRA|=0x03; //test Port
     3ec:	8a b3       	in	r24, 0x1a	; 26
     3ee:	83 60       	ori	r24, 0x03	; 3
     3f0:	8a bb       	out	0x1a, r24	; 26
	
	
	//사용하는 기능들 초기화 작업
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
     3f2:	1f 92       	push	r1
     3f4:	1f 92       	push	r1
     3f6:	1f 92       	push	r1
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8f 93       	push	r24
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	8f 93       	push	r24
     400:	56 d4       	rcall	.+2220   	; 0xcae <spi_init>
	//spi_master_tx(0x67);
	mfrc522_init(CH0);
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	4f d2       	rcall	.+1182   	; 0x8a4 <mfrc522_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     406:	2f ef       	ldi	r18, 0xFF	; 255
     408:	81 ee       	ldi	r24, 0xE1	; 225
     40a:	94 e0       	ldi	r25, 0x04	; 4
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	80 40       	sbci	r24, 0x00	; 0
     410:	90 40       	sbci	r25, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	_delay_ms(100);
	mfrc522_init(CH1);
     416:	00 00       	nop
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	44 d2       	rcall	.+1160   	; 0x8a4 <mfrc522_init>
	uart_init(0,9600); //debug channel
     41c:	60 e8       	ldi	r22, 0x80	; 128
     41e:	75 e2       	ldi	r23, 0x25	; 37
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	f2 d4       	rcall	.+2532   	; 0xe0a <uart_init>
	uart_init(1,9600);//esp8266() : Rx:PD2, Tx:PD3
     426:	60 e8       	ldi	r22, 0x80	; 128
     428:	75 e2       	ldi	r23, 0x25	; 37
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	ed d4       	rcall	.+2522   	; 0xe0a <uart_init>
     430:	ef ef       	ldi	r30, 0xFF	; 255
     432:	f5 ea       	ldi	r31, 0xA5	; 165
     434:	2e e0       	ldi	r18, 0x0E	; 14
     436:	e1 50       	subi	r30, 0x01	; 1
     438:	f0 40       	sbci	r31, 0x00	; 0
     43a:	20 40       	sbci	r18, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	
	_delay_ms(300);
	mfrc522_version_check(CH0);
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     440:	00 00       	nop
     442:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
     444:	68 d2       	rcall	.+1232   	; 0x916 <mfrc522_version_check>
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	92 d2       	rcall	.+1316   	; 0x96e <mfrc522_IRQ_enable>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	95 ea       	ldi	r25, 0xA5	; 165
     44e:	ee e0       	ldi	r30, 0x0E	; 14
     450:	81 50       	subi	r24, 0x01	; 1
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	e0 40       	sbci	r30, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	_delay_ms(300);
	mfrc522_version_check(CH1);
     458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	mfrc522_IRQ_enable(CH1);
     45a:	00 00       	nop
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	5b d2       	rcall	.+1206   	; 0x916 <mfrc522_version_check>

// 	byte=mfrc522_read(ComIEnReg);
// 	mfrc522_write(ComIEnReg,byte|0x20); //RxInterrupt Enable
// 	byte=mfrc522_read(DivIEnReg);
// 	mfrc522_write(DivIEnReg,byte|0x80); //IRQPushPull
	cli();
     460:	81 e0       	ldi	r24, 0x01	; 1
	setSoundClip(BUZZ_ON);
     462:	85 d2       	rcall	.+1290   	; 0x96e <mfrc522_IRQ_enable>
     464:	f8 94       	cli
     466:	81 e0       	ldi	r24, 0x01	; 1
	timer0_init();
     468:	80 df       	rcall	.-256    	; 0x36a <setSoundClip>
     46a:	6d d4       	rcall	.+2266   	; 0xd46 <timer0_init>
	timer3_init();
     46c:	75 d4       	rcall	.+2282   	; 0xd58 <timer3_init>
     46e:	78 94       	sei
	sei();
     470:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <TICK>
	 TICK.tick_1ms=0;
     474:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <TICK+0x1>
     478:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <TICK+0x2>
     47c:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <TICK+0x3>
     480:	ff ef       	ldi	r31, 0xFF	; 255
     482:	21 e1       	ldi	r18, 0x11	; 17
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	f1 50       	subi	r31, 0x01	; 1
     488:	20 40       	sbci	r18, 0x00	; 0
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     490:	00 00       	nop
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	99 24       	eor	r9, r9
    {//절대 루프 안에 delay가 길게 걸리면 않도록 주의해야 함.
		//PORTA^=0x01;
		
		//_delay_ms(100);
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		PORTA^=0x01;
     49e:	93 94       	inc	r9
     4a0:	c1 e6       	ldi	r28, 0x61	; 97
		static char toggle=0;
		if((TICK.tick_1ms % 100) ==0) {
     4a2:	d3 e0       	ldi	r29, 0x03	; 3
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f4 e6       	ldi	r31, 0x64	; 100
     4a8:	cf 2e       	mov	r12, r31
     4aa:	d1 2c       	mov	r13, r1
     4ac:	e1 2c       	mov	r14, r1
     4ae:	f1 2c       	mov	r15, r1
     4b0:	f0 2d       	mov	r31, r0
     4b2:	03 e4       	ldi	r16, 0x43	; 67
     4b4:	13 e0       	ldi	r17, 0x03	; 3
    {//절대 루프 안에 delay가 길게 걸리면 않도록 주의해야 함.
		//PORTA^=0x01;
		
		//_delay_ms(100);
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		PORTA^=0x01;
     4b6:	8b b3       	in	r24, 0x1b	; 27
     4b8:	89 25       	eor	r24, r9
		static char toggle=0;
		if((TICK.tick_1ms % 100) ==0) {
     4ba:	8b bb       	out	0x1b, r24	; 27
     4bc:	68 81       	ld	r22, Y
     4be:	79 81       	ldd	r23, Y+1	; 0x01
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	9b 81       	ldd	r25, Y+3	; 0x03
     4c4:	a7 01       	movw	r20, r14
     4c6:	96 01       	movw	r18, r12
     4c8:	52 d5       	rcall	.+2724   	; 0xf6e <__udivmodsi4>
     4ca:	67 2b       	or	r22, r23
     4cc:	68 2b       	or	r22, r24
     4ce:	69 2b       	or	r22, r25
			//toggle^=0x01; //start toggling :
			//toggle = 0 : entrance gate 
			//toggle = 1 : exit gate
			if(toggle==0)received_state = mfrc_check_and_data_receive_ch0(); //RFID check and receive UID data per 100ms
     4d0:	19 f4       	brne	.+6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d2:	ee de       	rcall	.-548    	; 0x2b0 <mfrc_check_and_data_receive_ch0>
     4d4:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <received_state>
			else received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
		}
		if(received_state==RECEIVE_NONE); //do nothing
		else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     4d8:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <received_state>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	09 f5       	brne	.+66     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			//send to esp8266 and receive result data.
			//esp8266으로 uid값과 출/입 여부를 전송
			if(toggle==ENTRANCE_GATE){
				//esp8266에 uid와 입구게이트 정보 전송 함수
				//while(전송 완료될 때 까지 대기)???
				uart1_tx_string("AT+CIPSEND=4\r\n"); //4byte길이 데이터 전송 예정
     4e0:	83 e6       	ldi	r24, 0x63	; 99
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	d8 d4       	rcall	.+2480   	; 0xe96 <uart1_tx_string>
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
     4e8:	e9 ef       	ldi	r30, 0xF9	; 249
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	91 50       	subi	r25, 0x01	; 1
     4ee:	e0 40       	sbci	r30, 0x00	; 0
     4f0:	f0 40       	sbci	r31, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f6:	00 00       	nop
     4f8:	0f 2e       	mov	r0, r31
     4fa:	ff e3       	ldi	r31, 0x3F	; 63
     4fc:	af 2e       	mov	r10, r31
     4fe:	f3 e0       	ldi	r31, 0x03	; 3
				while(esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
				esp8266_send_ready_flag=0; //정상적으로 동작하는지 테스트 해봐야 함. 버그 발생한다면 이 부분도 의심해볼 필요 있음.
				*/
				for(int i=0; i<4; i++)
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     500:	bf 2e       	mov	r11, r31
     502:	f0 2d       	mov	r31, r0
     504:	f5 01       	movw	r30, r10
     506:	81 91       	ld	r24, Z+
     508:	5f 01       	movw	r10, r30
     50a:	02 d5       	rcall	.+2564   	; 0xf10 <HexToString>
     50c:	c4 d4       	rcall	.+2440   	; 0xe96 <uart1_tx_string>
					uart1_tx_char(' ');
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	ba d4       	rcall	.+2420   	; 0xe86 <uart1_tx_char>
     512:	a0 16       	cp	r10, r16
				// '>' 문자가 확인될 때까지 대기
				/*이부분은 esp8266 구현한 뒤에 넣어야 된다 
				while(esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
				esp8266_send_ready_flag=0; //정상적으로 동작하는지 테스트 해봐야 함. 버그 발생한다면 이 부분도 의심해볼 필요 있음.
				*/
				for(int i=0; i<4; i++)
     514:	b1 06       	cpc	r11, r17
     516:	b1 f7       	brne	.-20     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     518:	85 e5       	ldi	r24, 0x55	; 85
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
					uart1_tx_char(' ');
				}
				uart1_tx_string("\r\n");
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	bc d4       	rcall	.+2424   	; 0xe96 <uart1_tx_string>
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	24 df       	rcall	.-440    	; 0x36a <setSoundClip>
					
			/*
			if(esp수신데이터)
			else if(esp 수신 데이터)
			*/
			setSoundClip(BUZZ_SUCCESS);
     522:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <received_state>
     526:	c7 cf       	rjmp	.-114    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>

00000528 <buzz_MUTE>:
		}
		else if(received_state==RECEIVE_FAIL){
			setSoundClip(BUZZ_FAIL);
		}
		received_state=RECEIVE_NONE;
     528:	eb e8       	ldi	r30, 0x8B	; 139
     52a:	f0 e0       	ldi	r31, 0x00	; 0
		//dummy code
		//else if(received_state==RECEIVE_FAIL); 
		
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
     52c:	80 81       	ld	r24, Z
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     52e:	8f 7b       	andi	r24, 0xBF	; 191
     530:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     532:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <music_flag>
     536:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <music_flag+0x1>
     53a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <music_flag+0x2>
     53e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <music_flag+0x3>
     542:	08 95       	ret

00000544 <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	39 f0       	breq	.+14     	; 0x556 <setSoundNote+0x12>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     548:	eb e8       	ldi	r30, 0x8B	; 139
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	20 81       	ld	r18, Z
     54e:	20 64       	ori	r18, 0x40	; 64
     550:	20 83       	st	Z, r18
     552:	12 c4       	rjmp	.+2084   	; 0xd78 <setICR3>
     554:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     556:	eb e8       	ldi	r30, 0x8B	; 139
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	8f 7b       	andi	r24, 0xBF	; 191
     55e:	80 83       	st	Z, r24
     560:	08 95       	ret

00000562 <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     562:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <music_flag>
     566:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <music_flag+0x1>
     56a:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <music_flag+0x2>
     56e:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <music_flag+0x3>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	91 05       	cpc	r25, r1
     576:	a1 05       	cpc	r26, r1
     578:	b1 05       	cpc	r27, r1
     57a:	79 f0       	breq	.+30     	; 0x59a <buzz_play+0x38>
     57c:	60 f0       	brcs	.+24     	; 0x596 <buzz_play+0x34>
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	91 05       	cpc	r25, r1
     582:	a1 05       	cpc	r26, r1
     584:	b1 05       	cpc	r27, r1
     586:	09 f4       	brne	.+2      	; 0x58a <buzz_play+0x28>
     588:	6d c0       	rjmp	.+218    	; 0x664 <buzz_play+0x102>
     58a:	03 97       	sbiw	r24, 0x03	; 3
     58c:	a1 05       	cpc	r26, r1
     58e:	b1 05       	cpc	r27, r1
     590:	09 f4       	brne	.+2      	; 0x594 <buzz_play+0x32>
     592:	cd c0       	rjmp	.+410    	; 0x72e <buzz_play+0x1cc>
     594:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     596:	c8 cf       	rjmp	.-112    	; 0x528 <buzz_MUTE>
     598:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     59a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     59e:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     5a2:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     5a6:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     5aa:	88 3c       	cpi	r24, 0xC8	; 200
     5ac:	91 05       	cpc	r25, r1
     5ae:	a1 05       	cpc	r26, r1
     5b0:	b1 05       	cpc	r27, r1
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <buzz_play+0x5a>
     5b4:	8b e9       	ldi	r24, 0x9B	; 155
     5b6:	96 e0       	ldi	r25, 0x06	; 6
     5b8:	c5 cf       	rjmp	.-118    	; 0x544 <setSoundNote>
     5ba:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     5bc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     5c0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     5c4:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     5c8:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     5cc:	88 3c       	cpi	r24, 0xC8	; 200
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	21 f4       	brne	.+8      	; 0x5de <buzz_play+0x7c>
     5d6:	87 ee       	ldi	r24, 0xE7	; 231
     5d8:	95 e0       	ldi	r25, 0x05	; 5
     5da:	b4 cf       	rjmp	.-152    	; 0x544 <setSoundNote>
     5dc:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     5de:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     5e2:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     5e6:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     5ea:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     5ee:	80 39       	cpi	r24, 0x90	; 144
     5f0:	91 40       	sbci	r25, 0x01	; 1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	21 f4       	brne	.+8      	; 0x600 <buzz_play+0x9e>
     5f8:	85 e6       	ldi	r24, 0x65	; 101
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	a3 cf       	rjmp	.-186    	; 0x544 <setSoundNote>
     5fe:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     600:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     604:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     608:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     60c:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     610:	88 35       	cpi	r24, 0x58	; 88
     612:	92 40       	sbci	r25, 0x02	; 2
     614:	a1 05       	cpc	r26, r1
     616:	b1 05       	cpc	r27, r1
     618:	21 f4       	brne	.+8      	; 0x622 <buzz_play+0xc0>
     61a:	8d ef       	ldi	r24, 0xFD	; 253
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	92 cf       	rjmp	.-220    	; 0x544 <setSoundNote>
     620:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     622:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     626:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     62a:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     62e:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     632:	80 32       	cpi	r24, 0x20	; 32
     634:	93 40       	sbci	r25, 0x03	; 3
     636:	a1 05       	cpc	r26, r1
     638:	b1 05       	cpc	r27, r1
     63a:	21 f4       	brne	.+8      	; 0x644 <buzz_play+0xe2>
     63c:	88 ef       	ldi	r24, 0xF8	; 248
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	81 cf       	rjmp	.-254    	; 0x544 <setSoundNote>
     642:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     644:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     648:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     64c:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     650:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     654:	80 3b       	cpi	r24, 0xB0	; 176
     656:	94 40       	sbci	r25, 0x04	; 4
     658:	a1 05       	cpc	r26, r1
     65a:	b1 05       	cpc	r27, r1
     65c:	09 f0       	breq	.+2      	; 0x660 <buzz_play+0xfe>
     65e:	a8 c0       	rjmp	.+336    	; 0x7b0 <buzz_play+0x24e>
     660:	63 cf       	rjmp	.-314    	; 0x528 <buzz_MUTE>
     662:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     664:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     668:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     66c:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     670:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     674:	88 3c       	cpi	r24, 0xC8	; 200
     676:	91 05       	cpc	r25, r1
     678:	a1 05       	cpc	r26, r1
     67a:	b1 05       	cpc	r27, r1
     67c:	20 f4       	brcc	.+8      	; 0x686 <buzz_play+0x124>
     67e:	8b e9       	ldi	r24, 0x9B	; 155
     680:	96 e0       	ldi	r25, 0x06	; 6
     682:	60 cf       	rjmp	.-320    	; 0x544 <setSoundNote>
     684:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     686:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     68a:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     68e:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     692:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     696:	82 3d       	cpi	r24, 0xD2	; 210
     698:	91 05       	cpc	r25, r1
     69a:	a1 05       	cpc	r26, r1
     69c:	b1 05       	cpc	r27, r1
     69e:	21 f4       	brne	.+8      	; 0x6a8 <buzz_play+0x146>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	4f cf       	rjmp	.-354    	; 0x544 <setSoundNote>
     6a6:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     6a8:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     6ac:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     6b0:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     6b4:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     6b8:	8c 3d       	cpi	r24, 0xDC	; 220
     6ba:	91 05       	cpc	r25, r1
     6bc:	a1 05       	cpc	r26, r1
     6be:	b1 05       	cpc	r27, r1
     6c0:	21 f4       	brne	.+8      	; 0x6ca <buzz_play+0x168>
     6c2:	87 ee       	ldi	r24, 0xE7	; 231
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	3e cf       	rjmp	.-388    	; 0x544 <setSoundNote>
     6c8:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     6ca:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     6ce:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     6d2:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     6d6:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     6da:	80 39       	cpi	r24, 0x90	; 144
     6dc:	91 40       	sbci	r25, 0x01	; 1
     6de:	a1 05       	cpc	r26, r1
     6e0:	b1 05       	cpc	r27, r1
     6e2:	21 f4       	brne	.+8      	; 0x6ec <buzz_play+0x18a>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	2d cf       	rjmp	.-422    	; 0x544 <setSoundNote>
     6ea:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     6ec:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     6f0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     6f4:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     6f8:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     6fc:	8e 3a       	cpi	r24, 0xAE	; 174
     6fe:	91 40       	sbci	r25, 0x01	; 1
     700:	a1 05       	cpc	r26, r1
     702:	b1 05       	cpc	r27, r1
     704:	21 f4       	brne	.+8      	; 0x70e <buzz_play+0x1ac>
     706:	85 e6       	ldi	r24, 0x65	; 101
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	1c cf       	rjmp	.-456    	; 0x544 <setSoundNote>
     70c:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     70e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     712:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     716:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     71a:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     71e:	88 35       	cpi	r24, 0x58	; 88
     720:	92 40       	sbci	r25, 0x02	; 2
     722:	a1 05       	cpc	r26, r1
     724:	b1 05       	cpc	r27, r1
     726:	09 f0       	breq	.+2      	; 0x72a <buzz_play+0x1c8>
     728:	43 c0       	rjmp	.+134    	; 0x7b0 <buzz_play+0x24e>
     72a:	fe ce       	rjmp	.-516    	; 0x528 <buzz_MUTE>
     72c:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     72e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     732:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     736:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     73a:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     73e:	84 36       	cpi	r24, 0x64	; 100
     740:	91 05       	cpc	r25, r1
     742:	a1 05       	cpc	r26, r1
     744:	b1 05       	cpc	r27, r1
     746:	20 f4       	brcc	.+8      	; 0x750 <buzz_play+0x1ee>
     748:	82 e1       	ldi	r24, 0x12	; 18
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	fb ce       	rjmp	.-522    	; 0x544 <setSoundNote>
     74e:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     750:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     754:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     758:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     75c:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     760:	88 3c       	cpi	r24, 0xC8	; 200
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	20 f4       	brcc	.+8      	; 0x772 <buzz_play+0x210>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	ea ce       	rjmp	.-556    	; 0x544 <setSoundNote>
     770:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     772:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     776:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     77a:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     77e:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     782:	8c 32       	cpi	r24, 0x2C	; 44
     784:	91 40       	sbci	r25, 0x01	; 1
     786:	a1 05       	cpc	r26, r1
     788:	b1 05       	cpc	r27, r1
     78a:	20 f4       	brcc	.+8      	; 0x794 <buzz_play+0x232>
     78c:	82 e1       	ldi	r24, 0x12	; 18
     78e:	94 e0       	ldi	r25, 0x04	; 4
     790:	d9 ce       	rjmp	.-590    	; 0x544 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     792:	08 95       	ret
     794:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <TICK+0x4>
     798:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <TICK+0x5>
     79c:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <TICK+0x6>
     7a0:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <TICK+0x7>
     7a4:	82 3c       	cpi	r24, 0xC2	; 194
     7a6:	91 40       	sbci	r25, 0x01	; 1
     7a8:	a1 05       	cpc	r26, r1
     7aa:	b1 05       	cpc	r27, r1
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <buzz_play+0x24e>
     7ae:	bc ce       	rjmp	.-648    	; 0x528 <buzz_MUTE>
     7b0:	08 95       	ret

000007b2 <__vector_15>:

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port);
volatile unsigned char esp8266_send_ready_flag=0;
volatile unsigned char esp8266_receiving__flag=0;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     7b2:	1f 92       	push	r1
     7b4:	0f 92       	push	r0
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	0b b6       	in	r0, 0x3b	; 59
     7be:	0f 92       	push	r0
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     7d8:	e1 e6       	ldi	r30, 0x61	; 97
     7da:	f3 e0       	ldi	r31, 0x03	; 3
     7dc:	84 81       	ldd	r24, Z+4	; 0x04
     7de:	95 81       	ldd	r25, Z+5	; 0x05
     7e0:	a6 81       	ldd	r26, Z+6	; 0x06
     7e2:	b7 81       	ldd	r27, Z+7	; 0x07
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	a1 1d       	adc	r26, r1
     7e8:	b1 1d       	adc	r27, r1
     7ea:	84 83       	std	Z+4, r24	; 0x04
     7ec:	95 83       	std	Z+5, r25	; 0x05
     7ee:	a6 83       	std	Z+6, r26	; 0x06
     7f0:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	a2 81       	ldd	r26, Z+2	; 0x02
     7f8:	b3 81       	ldd	r27, Z+3	; 0x03
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	a1 1d       	adc	r26, r1
     7fe:	b1 1d       	adc	r27, r1
     800:	80 83       	st	Z, r24
     802:	91 83       	std	Z+1, r25	; 0x01
     804:	a2 83       	std	Z+2, r26	; 0x02
     806:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     808:	ac de       	rcall	.-680    	; 0x562 <buzz_play>
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	16 2f       	mov	r17, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
     838:	95 b3       	in	r25, 0x15	; 21
     83a:	c1 e0       	ldi	r28, 0x01	; 1
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	02 c0       	rjmp	.+4      	; 0x844 <mfrc522_write+0x14>
     840:	cc 0f       	add	r28, r28
     842:	dd 1f       	adc	r29, r29
     844:	4a 95       	dec	r20
     846:	e2 f7       	brpl	.-8      	; 0x840 <mfrc522_write+0x10>
     848:	2c 2f       	mov	r18, r28
     84a:	20 95       	com	r18
     84c:	92 23       	and	r25, r18
     84e:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
     850:	88 0f       	add	r24, r24
     852:	8e 77       	andi	r24, 0x7E	; 126
     854:	6f d2       	rcall	.+1246   	; 0xd34 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
     856:	81 2f       	mov	r24, r17
     858:	6d d2       	rcall	.+1242   	; 0xd34 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
     85a:	85 b3       	in	r24, 0x15	; 21
     85c:	c8 2b       	or	r28, r24
     85e:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <mfrc522_reset>:


void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	
     868:	48 2f       	mov	r20, r24
     86a:	6f e0       	ldi	r22, 0x0F	; 15
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	e0 cf       	rjmp	.-64     	; 0x830 <mfrc522_write>
     870:	08 95       	ret

00000872 <mfrc522_read>:
			
		
}


unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
     876:	95 b3       	in	r25, 0x15	; 21
     878:	c1 e0       	ldi	r28, 0x01	; 1
     87a:	d0 e0       	ldi	r29, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <mfrc522_read+0x10>
     87e:	cc 0f       	add	r28, r28
     880:	dd 1f       	adc	r29, r29
     882:	6a 95       	dec	r22
     884:	e2 f7       	brpl	.-8      	; 0x87e <mfrc522_read+0xc>
     886:	2c 2f       	mov	r18, r28
     888:	20 95       	com	r18
     88a:	92 23       	and	r25, r18
     88c:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
     88e:	88 0f       	add	r24, r24
     890:	8e 77       	andi	r24, 0x7E	; 126
     892:	80 68       	ori	r24, 0x80	; 128
     894:	4f d2       	rcall	.+1182   	; 0xd34 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
     896:	52 d2       	rcall	.+1188   	; 0xd3c <spi_master_rx>
     898:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
     89a:	c9 2b       	or	r28, r25
     89c:	c5 bb       	out	0x15, r28	; 21
     89e:	df 91       	pop	r29
	
	return value;
}
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <mfrc522_init>:
     8a4:	cf 93       	push	r28
#include "uart_lib.h"
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
void mfrc522_init(unsigned char ch)
{
     8a6:	c8 2f       	mov	r28, r24
	unsigned char byte;
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
     8a8:	84 b3       	in	r24, 0x14	; 20
     8aa:	83 60       	ori	r24, 0x03	; 3
     8ac:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0;
     8ae:	15 ba       	out	0x15, r1	; 21
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	89 ef       	ldi	r24, 0xF9	; 249
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	80 40       	sbci	r24, 0x00	; 0
     8ba:	90 40       	sbci	r25, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <mfrc522_init+0x12>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <mfrc522_init+0x1c>
     8c0:	00 00       	nop
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
     8c2:	85 b3       	in	r24, 0x15	; 21
     8c4:	83 60       	ori	r24, 0x03	; 3
     8c6:	85 bb       	out	0x15, r24	; 21
	mfrc522_reset(ch);
     8c8:	8c 2f       	mov	r24, r28
     8ca:	ce df       	rcall	.-100    	; 0x868 <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
     8cc:	4c 2f       	mov	r20, r28
     8ce:	6d e8       	ldi	r22, 0x8D	; 141
     8d0:	8a e2       	ldi	r24, 0x2A	; 42
     8d2:	ae df       	rcall	.-164    	; 0x830 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
     8d4:	4c 2f       	mov	r20, r28
     8d6:	6e e3       	ldi	r22, 0x3E	; 62
     8d8:	8b e2       	ldi	r24, 0x2B	; 43
     8da:	aa df       	rcall	.-172    	; 0x830 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
     8dc:	4c 2f       	mov	r20, r28
     8de:	6e e1       	ldi	r22, 0x1E	; 30
     8e0:	8c e2       	ldi	r24, 0x2C	; 44
     8e2:	a6 df       	rcall	.-180    	; 0x830 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
     8e4:	4c 2f       	mov	r20, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	8d e2       	ldi	r24, 0x2D	; 45
     8ea:	a2 df       	rcall	.-188    	; 0x830 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
     8ec:	4c 2f       	mov	r20, r28
     8ee:	60 e4       	ldi	r22, 0x40	; 64
     8f0:	85 e1       	ldi	r24, 0x15	; 21
     8f2:	9e df       	rcall	.-196    	; 0x830 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
     8f4:	4c 2f       	mov	r20, r28
     8f6:	6d e3       	ldi	r22, 0x3D	; 61
     8f8:	81 e1       	ldi	r24, 0x11	; 17
     8fa:	9a df       	rcall	.-204    	; 0x830 <mfrc522_write>
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
     8fc:	6c 2f       	mov	r22, r28
     8fe:	84 e1       	ldi	r24, 0x14	; 20
     900:	b8 df       	rcall	.-144    	; 0x872 <mfrc522_read>
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
     902:	98 2f       	mov	r25, r24
     904:	93 70       	andi	r25, 0x03	; 3
     906:	29 f4       	brne	.+10     	; 0x912 <mfrc522_init+0x6e>
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
     908:	68 2f       	mov	r22, r24
     90a:	63 60       	ori	r22, 0x03	; 3
     90c:	4c 2f       	mov	r20, r28
     90e:	84 e1       	ldi	r24, 0x14	; 20
     910:	8f df       	rcall	.-226    	; 0x830 <mfrc522_write>
     912:	cf 91       	pop	r28
	}
}
     914:	08 95       	ret

00000916 <mfrc522_version_check>:
     916:	cf 93       	push	r28
	SS_PORT |= (1<<channel);
	
	return value;
}

void mfrc522_version_check(unsigned char ch){
     918:	df 93       	push	r29
     91a:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
     91c:	68 2f       	mov	r22, r24
     91e:	87 e3       	ldi	r24, 0x37	; 55
     920:	a8 df       	rcall	.-176    	; 0x872 <mfrc522_read>
     922:	c8 2f       	mov	r28, r24
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	89 ef       	ldi	r24, 0xF9	; 249
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	21 50       	subi	r18, 0x01	; 1
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	90 40       	sbci	r25, 0x00	; 0
     930:	e1 f7       	brne	.-8      	; 0x92a <mfrc522_version_check+0x14>
     932:	00 c0       	rjmp	.+0      	; 0x934 <mfrc522_version_check+0x1e>
     934:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
     936:	d1 11       	cpse	r29, r1
     938:	04 c0       	rjmp	.+8      	; 0x942 <mfrc522_version_check+0x2c>
     93a:	82 e7       	ldi	r24, 0x72	; 114
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	95 d2       	rcall	.+1322   	; 0xe6a <uart0_tx_string>
     940:	03 c0       	rjmp	.+6      	; 0x948 <mfrc522_version_check+0x32>
	else uart0_tx_string("\n[channel 1");
     942:	8e e7       	ldi	r24, 0x7E	; 126
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	91 d2       	rcall	.+1314   	; 0xe6a <uart0_tx_string>
	
	if(byte == 0x92)
     948:	c2 39       	cpi	r28, 0x92	; 146
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
     94a:	21 f4       	brne	.+8      	; 0x954 <mfrc522_version_check+0x3e>
     94c:	8a e8       	ldi	r24, 0x8A	; 138
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	8c d2       	rcall	.+1304   	; 0xe6a <uart0_tx_string>
     952:	0a c0       	rjmp	.+20     	; 0x968 <mfrc522_version_check+0x52>
		
	}else if(byte == 0x91 || byte==0x90)
     954:	c0 59       	subi	r28, 0x90	; 144
     956:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
     958:	20 f4       	brcc	.+8      	; 0x962 <mfrc522_version_check+0x4c>
     95a:	8e ea       	ldi	r24, 0xAE	; 174
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	85 d2       	rcall	.+1290   	; 0xe6a <uart0_tx_string>
	}else
	{
		uart0_tx_string(" No reader found]\n");
     960:	03 c0       	rjmp	.+6      	; 0x968 <mfrc522_version_check+0x52>
     962:	82 ed       	ldi	r24, 0xD2	; 210
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	81 d2       	rcall	.+1282   	; 0xe6a <uart0_tx_string>
	}
	
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
     96e:	cf 93       	push	r28
     970:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
     972:	68 2f       	mov	r22, r24
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	7d df       	rcall	.-262    	; 0x872 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
     978:	68 2f       	mov	r22, r24
     97a:	60 62       	ori	r22, 0x20	; 32
     97c:	4c 2f       	mov	r20, r28
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	57 df       	rcall	.-338    	; 0x830 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
     982:	6c 2f       	mov	r22, r28
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	75 df       	rcall	.-278    	; 0x872 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
     988:	68 2f       	mov	r22, r24
     98a:	60 68       	ori	r22, 0x80	; 128
     98c:	4c 2f       	mov	r20, r28
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	4f df       	rcall	.-354    	; 0x830 <mfrc522_write>
}
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
     996:	2f 92       	push	r2
     998:	3f 92       	push	r3
     99a:	4f 92       	push	r4
     99c:	5f 92       	push	r5
     99e:	6f 92       	push	r6
     9a0:	7f 92       	push	r7
     9a2:	8f 92       	push	r8
     9a4:	9f 92       	push	r9
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	f8 2e       	mov	r15, r24
     9bc:	a6 2e       	mov	r10, r22
     9be:	b7 2e       	mov	r11, r23
     9c0:	44 2e       	mov	r4, r20
     9c2:	22 2e       	mov	r2, r18
     9c4:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
     9c6:	8c e0       	ldi	r24, 0x0C	; 12
     9c8:	f8 16       	cp	r15, r24
     9ca:	59 f0       	breq	.+22     	; 0x9e2 <mfrc522_to_card+0x4c>
     9cc:	ee e0       	ldi	r30, 0x0E	; 14
     9ce:	fe 12       	cpse	r15, r30
     9d0:	11 c0       	rjmp	.+34     	; 0x9f4 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     9d2:	68 94       	set
     9d4:	cc 24       	eor	r12, r12
     9d6:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
     9d8:	0f 2e       	mov	r0, r31
     9da:	f2 e1       	ldi	r31, 0x12	; 18
     9dc:	3f 2e       	mov	r3, r31
     9de:	f0 2d       	mov	r31, r0
     9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f0 e3       	ldi	r31, 0x30	; 48
     9e6:	cf 2e       	mov	r12, r31
     9e8:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
     9ea:	0f 2e       	mov	r0, r31
     9ec:	f7 e7       	ldi	r31, 0x77	; 119
     9ee:	3f 2e       	mov	r3, r31
     9f0:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <mfrc522_to_card+0x62>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
     9f4:	c1 2c       	mov	r12, r1
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
     9f6:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
     9f8:	4e 2d       	mov	r20, r14
     9fa:	63 2d       	mov	r22, r3
     9fc:	60 68       	ori	r22, 0x80	; 128
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	17 df       	rcall	.-466    	; 0x830 <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
     a02:	6e 2d       	mov	r22, r14
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	35 df       	rcall	.-406    	; 0x872 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
     a08:	68 2f       	mov	r22, r24
     a0a:	6f 77       	andi	r22, 0x7F	; 127
     a0c:	4e 2d       	mov	r20, r14
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	0f df       	rcall	.-482    	; 0x830 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
     a12:	6e 2d       	mov	r22, r14
     a14:	8a e0       	ldi	r24, 0x0A	; 10
     a16:	2d df       	rcall	.-422    	; 0x872 <mfrc522_read>
     a18:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
     a1a:	60 68       	ori	r22, 0x80	; 128
     a1c:	4e 2d       	mov	r20, r14
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	07 df       	rcall	.-498    	; 0x830 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
     a22:	4e 2d       	mov	r20, r14
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	03 df       	rcall	.-506    	; 0x830 <mfrc522_write>
     a2a:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     a2c:	61 2c       	mov	r6, r1
     a2e:	71 2c       	mov	r7, r1
     a30:	41 14       	cp	r4, r1
     a32:	51 04       	cpc	r5, r1
     a34:	61 04       	cpc	r6, r1
     a36:	71 04       	cpc	r7, r1
     a38:	99 f0       	breq	.+38     	; 0xa60 <mfrc522_to_card+0xca>
     a3a:	ca 2d       	mov	r28, r10
     a3c:	db 2d       	mov	r29, r11
     a3e:	81 2c       	mov	r8, r1
     a40:	91 2c       	mov	r9, r1
     a42:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
     a44:	69 91       	ld	r22, Y+
     a46:	4e 2d       	mov	r20, r14
     a48:	89 e0       	ldi	r24, 0x09	; 9
     a4a:	f2 de       	rcall	.-540    	; 0x830 <mfrc522_write>
     a4c:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     a4e:	8f 1a       	sub	r8, r31
     a50:	9f 0a       	sbc	r9, r31
     a52:	af 0a       	sbc	r10, r31
     a54:	bf 0a       	sbc	r11, r31
     a56:	84 14       	cp	r8, r4
     a58:	95 04       	cpc	r9, r5
     a5a:	a6 04       	cpc	r10, r6
     a5c:	b7 04       	cpc	r11, r7
     a5e:	90 f3       	brcs	.-28     	; 0xa44 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
     a60:	4e 2d       	mov	r20, r14
     a62:	6f 2d       	mov	r22, r15
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	e4 de       	rcall	.-568    	; 0x830 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
     a68:	8c e0       	ldi	r24, 0x0C	; 12
     a6a:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
     a6c:	08 c0       	rjmp	.+16     	; 0xa7e <mfrc522_to_card+0xe8>
     a6e:	6e 2d       	mov	r22, r14
     a70:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
     a72:	ff de       	rcall	.-514    	; 0x872 <mfrc522_read>
     a74:	68 2f       	mov	r22, r24
     a76:	60 68       	ori	r22, 0x80	; 128
     a78:	4e 2d       	mov	r20, r14
     a7a:	8d e0       	ldi	r24, 0x0D	; 13
     a7c:	d9 de       	rcall	.-590    	; 0x830 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
     a7e:	6e 2d       	mov	r22, r14
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	f7 de       	rcall	.-530    	; 0x872 <mfrc522_read>
     a84:	b8 2e       	mov	r11, r24
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     a8a:	ec 2d       	mov	r30, r12
     a8c:	e1 60       	ori	r30, 0x01	; 1
     a8e:	ce 2e       	mov	r12, r30
     a90:	0a c0       	rjmp	.+20     	; 0xaa6 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
     a92:	6e 2d       	mov	r22, r14
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	ed de       	rcall	.-550    	; 0x872 <mfrc522_read>
     a98:	b8 2e       	mov	r11, r24
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     a9e:	f7 e0       	ldi	r31, 0x07	; 7
     aa0:	df 07       	cpc	r29, r31
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <mfrc522_to_card+0x110>
     aa4:	68 c0       	rjmp	.+208    	; 0xb76 <mfrc522_to_card+0x1e0>
     aa6:	8c 2d       	mov	r24, r12
     aa8:	8b 21       	and	r24, r11
     aaa:	99 f3       	breq	.-26     	; 0xa92 <mfrc522_to_card+0xfc>
     aac:	6e c0       	rjmp	.+220    	; 0xb8a <mfrc522_to_card+0x1f4>
     aae:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
     ab0:	81 70       	andi	r24, 0x01	; 1
     ab2:	b8 22       	and	r11, r24
     ab4:	11 f0       	breq	.+4      	; 0xaba <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
     ab6:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
     aba:	c1 e0       	ldi	r28, 0x01	; 1
     abc:	8c e0       	ldi	r24, 0x0C	; 12
     abe:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
     ac0:	73 c0       	rjmp	.+230    	; 0xba8 <mfrc522_to_card+0x212>
     ac2:	6e 2d       	mov	r22, r14
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	d5 de       	rcall	.-598    	; 0x872 <mfrc522_read>
     ac8:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
     aca:	6e 2d       	mov	r22, r14
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	d1 de       	rcall	.-606    	; 0x872 <mfrc522_read>
     ad0:	28 2f       	mov	r18, r24
     ad2:	27 70       	andi	r18, 0x07	; 7
     ad4:	a9 f0       	breq	.+42     	; 0xb00 <mfrc522_to_card+0x16a>
				if (lastBits)
     ad6:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	88 0f       	add	r24, r24
     ae6:	99 1f       	adc	r25, r25
     ae8:	82 0f       	add	r24, r18
     aea:	91 1d       	adc	r25, r1
     aec:	09 2e       	mov	r0, r25
     aee:	00 0c       	add	r0, r0
     af0:	aa 0b       	sbc	r26, r26
     af2:	bb 0b       	sbc	r27, r27
     af4:	f8 01       	movw	r30, r16
     af6:	80 83       	st	Z, r24
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	a2 83       	std	Z+2, r26	; 0x02
     afc:	b3 83       	std	Z+3, r27	; 0x03
     afe:	11 c0       	rjmp	.+34     	; 0xb22 <mfrc522_to_card+0x18c>
     b00:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	88 0f       	add	r24, r24
     b0e:	99 1f       	adc	r25, r25
     b10:	09 2e       	mov	r0, r25
     b12:	00 0c       	add	r0, r0
     b14:	aa 0b       	sbc	r26, r26
     b16:	bb 0b       	sbc	r27, r27
     b18:	f8 01       	movw	r30, r16
     b1a:	80 83       	st	Z, r24
     b1c:	91 83       	std	Z+1, r25	; 0x01
     b1e:	a2 83       	std	Z+2, r26	; 0x02
     b20:	b3 83       	std	Z+3, r27	; 0x03
     b22:	88 20       	and	r8, r8
				}

				if (n == 0)
     b24:	71 f0       	breq	.+28     	; 0xb42 <mfrc522_to_card+0x1ac>
     b26:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     b28:	81 31       	cpi	r24, 0x11	; 17
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <mfrc522_to_card+0x198>
     b2c:	80 e1       	ldi	r24, 0x10	; 16
     b2e:	88 2e       	mov	r8, r24
     b30:	91 2c       	mov	r9, r1
     b32:	a1 2c       	mov	r10, r1
     b34:	b1 2c       	mov	r11, r1
     b36:	81 14       	cp	r8, r1
     b38:	91 04       	cpc	r9, r1
     b3a:	a1 04       	cpc	r10, r1
     b3c:	b1 04       	cpc	r11, r1
     b3e:	29 f4       	brne	.+10     	; 0xb4a <mfrc522_to_card+0x1b4>
     b40:	33 c0       	rjmp	.+102    	; 0xba8 <mfrc522_to_card+0x212>
     b42:	81 2c       	mov	r8, r1
     b44:	91 2c       	mov	r9, r1
     b46:	54 01       	movw	r10, r8
     b48:	83 94       	inc	r8
     b4a:	02 2d       	mov	r16, r2
     b4c:	1d 2d       	mov	r17, r13
     b4e:	41 2c       	mov	r4, r1
     b50:	51 2c       	mov	r5, r1
     b52:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
     b54:	6e 2d       	mov	r22, r14
     b56:	89 e0       	ldi	r24, 0x09	; 9
     b58:	8c de       	rcall	.-744    	; 0x872 <mfrc522_read>
     b5a:	f8 01       	movw	r30, r16
     b5c:	81 93       	st	Z+, r24
     b5e:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     b60:	ff ef       	ldi	r31, 0xFF	; 255
     b62:	4f 1a       	sub	r4, r31
     b64:	5f 0a       	sbc	r5, r31
     b66:	6f 0a       	sbc	r6, r31
     b68:	7f 0a       	sbc	r7, r31
     b6a:	48 14       	cp	r4, r8
     b6c:	59 04       	cpc	r5, r9
     b6e:	6a 04       	cpc	r6, r10
     b70:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
     b72:	80 f3       	brcs	.-32     	; 0xb54 <mfrc522_to_card+0x1be>
     b74:	19 c0       	rjmp	.+50     	; 0xba8 <mfrc522_to_card+0x212>
     b76:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
     b78:	8d e0       	ldi	r24, 0x0D	; 13
     b7a:	7b de       	rcall	.-778    	; 0x872 <mfrc522_read>
     b7c:	68 2f       	mov	r22, r24
     b7e:	6f 77       	andi	r22, 0x7F	; 127
     b80:	4e 2d       	mov	r20, r14
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	55 de       	rcall	.-854    	; 0x830 <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
     b86:	c3 e0       	ldi	r28, 0x03	; 3
     b88:	0f c0       	rjmp	.+30     	; 0xba8 <mfrc522_to_card+0x212>
     b8a:	6e 2d       	mov	r22, r14
     b8c:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
     b8e:	71 de       	rcall	.-798    	; 0x872 <mfrc522_read>
     b90:	68 2f       	mov	r22, r24
     b92:	6f 77       	andi	r22, 0x7F	; 127
     b94:	4e 2d       	mov	r20, r14
     b96:	8d e0       	ldi	r24, 0x0D	; 13
     b98:	4b de       	rcall	.-874    	; 0x830 <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     b9a:	6e 2d       	mov	r22, r14
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	69 de       	rcall	.-814    	; 0x872 <mfrc522_read>
     ba0:	8b 71       	andi	r24, 0x1B	; 27
     ba2:	09 f4       	brne	.+2      	; 0xba6 <mfrc522_to_card+0x210>
     ba4:	84 cf       	rjmp	.-248    	; 0xaae <mfrc522_to_card+0x118>
     ba6:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
     ba8:	8c 2f       	mov	r24, r28
	
// 	SetBitMask(ControlReg,0x80);           //timer stops
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	3f 90       	pop	r3
     bcc:	2f 90       	pop	r2
     bce:	08 95       	ret

00000bd0 <mfrc522_request>:
     bd0:	cf 92       	push	r12
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <mfrc522_request+0x10>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <mfrc522_request+0x12>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	18 2f       	mov	r17, r24
     be8:	6b 01       	movw	r12, r22
     bea:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
     bec:	67 e0       	ldi	r22, 0x07	; 7
     bee:	8d e0       	ldi	r24, 0x0D	; 13
     bf0:	1f de       	rcall	.-962    	; 0x830 <mfrc522_write>
	
	tag_type[0] = req_mode;
     bf2:	f6 01       	movw	r30, r12
     bf4:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
     bf6:	8e 01       	movw	r16, r28
     bf8:	0f 5f       	subi	r16, 0xFF	; 255
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	96 01       	movw	r18, r12
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	b6 01       	movw	r22, r12
     c02:	8c e0       	ldi	r24, 0x0C	; 12
     c04:	c8 de       	rcall	.-624    	; 0x996 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	59 f4       	brne	.+22     	; 0xc20 <mfrc522_request+0x50>
     c0a:	49 81       	ldd	r20, Y+1	; 0x01
     c0c:	5a 81       	ldd	r21, Y+2	; 0x02
     c0e:	6b 81       	ldd	r22, Y+3	; 0x03
     c10:	7c 81       	ldd	r23, Y+4	; 0x04
     c12:	40 31       	cpi	r20, 0x10	; 16
     c14:	51 05       	cpc	r21, r1
     c16:	61 05       	cpc	r22, r1
     c18:	71 05       	cpc	r23, r1
     c1a:	19 f0       	breq	.+6      	; 0xc22 <mfrc522_request+0x52>
	{
		status = ERROR;
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <mfrc522_request+0x52>
     c20:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	08 95       	ret

00000c3a <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	00 d0       	rcall	.+0      	; 0xc4a <mfrc522_get_card_serial+0x10>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <mfrc522_get_card_serial+0x12>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	6c 01       	movw	r12, r24
     c52:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
     c54:	46 2f       	mov	r20, r22
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	8d e0       	ldi	r24, 0x0D	; 13
     c5a:	ea dd       	rcall	.-1068   	; 0x830 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
     c5c:	83 e9       	ldi	r24, 0x93	; 147
     c5e:	f6 01       	movw	r30, r12
     c60:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
     c62:	80 e2       	ldi	r24, 0x20	; 32
     c64:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
     c66:	8e 01       	movw	r16, r28
     c68:	0f 5f       	subi	r16, 0xFF	; 255
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	96 01       	movw	r18, r12
     c6e:	42 e0       	ldi	r20, 0x02	; 2
     c70:	b6 01       	movw	r22, r12
     c72:	8c e0       	ldi	r24, 0x0C	; 12
     c74:	90 de       	rcall	.-736    	; 0x996 <mfrc522_to_card>

	if (status == CARD_FOUND)
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	71 f4       	brne	.+28     	; 0xc96 <mfrc522_get_card_serial+0x5c>
     c7a:	f6 01       	movw	r30, r12
     c7c:	a6 01       	movw	r20, r12
     c7e:	4c 5f       	subi	r20, 0xFC	; 252
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
     c84:	21 91       	ld	r18, Z+
     c86:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     c88:	4e 17       	cp	r20, r30
     c8a:	5f 07       	cpc	r21, r31
     c8c:	d9 f7       	brne	.-10     	; 0xc84 <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     c8e:	f6 01       	movw	r30, r12
     c90:	24 81       	ldd	r18, Z+4	; 0x04
     c92:	92 13       	cpse	r25, r18
		{
			status = ERROR;
     c94:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ef 90       	pop	r14
     ca8:	df 90       	pop	r13
     caa:	cf 90       	pop	r12
     cac:	08 95       	ret

00000cae <spi_init>:
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <spi_init+0x6>
     cb4:	1f 92       	push	r1
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	83 30       	cpi	r24, 0x03	; 3
     cbe:	21 f1       	breq	.+72     	; 0xd08 <spi_init+0x5a>
     cc0:	81 11       	cpse	r24, r1
     cc2:	32 c0       	rjmp	.+100    	; 0xd28 <spi_init+0x7a>
     cc4:	29 c0       	rjmp	.+82     	; 0xd18 <spi_init+0x6a>
     cc6:	9c 91       	ld	r25, X
     cc8:	12 96       	adiw	r26, 0x02	; 2
     cca:	91 93       	st	Z+, r25
     ccc:	e2 17       	cp	r30, r18
     cce:	f3 07       	cpc	r31, r19
     cd0:	d1 f7       	brne	.-12     	; 0xcc6 <spi_init+0x18>
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	92 30       	cpi	r25, 0x02	; 2
     cd6:	20 f1       	brcs	.+72     	; 0xd20 <spi_init+0x72>
     cd8:	1b 82       	std	Y+3, r1	; 0x03
     cda:	1d b8       	out	0x0d, r1	; 13
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	71 f4       	brne	.+28     	; 0xcfc <spi_init+0x4e>
     ce0:	c0 9a       	sbi	0x18, 0	; 24
     ce2:	87 b3       	in	r24, 0x17	; 23
     ce4:	87 60       	ori	r24, 0x07	; 7
     ce6:	87 bb       	out	0x17, r24	; 23
     ce8:	99 81       	ldd	r25, Y+1	; 0x01
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	89 2b       	or	r24, r25
     cee:	80 65       	ori	r24, 0x50	; 80
     cf0:	2e b1       	in	r18, 0x0e	; 14
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	92 2b       	or	r25, r18
     cf6:	9e b9       	out	0x0e, r25	; 14
     cf8:	8d b9       	out	0x0d, r24	; 13
     cfa:	16 c0       	rjmp	.+44     	; 0xd28 <spi_init+0x7a>
     cfc:	81 11       	cpse	r24, r1
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <spi_init+0x7a>
     d00:	bb 9a       	sbi	0x17, 3	; 23
     d02:	80 e4       	ldi	r24, 0x40	; 64
     d04:	8d b9       	out	0x0d, r24	; 13
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <spi_init+0x7a>
     d08:	de 01       	movw	r26, r28
     d0a:	19 96       	adiw	r26, 0x09	; 9
     d0c:	fe 01       	movw	r30, r28
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	9e 01       	movw	r18, r28
     d12:	2c 5f       	subi	r18, 0xFC	; 252
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	d7 cf       	rjmp	.-82     	; 0xcc6 <spi_init+0x18>
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	92 30       	cpi	r25, 0x02	; 2
     d1c:	e8 f6       	brcc	.-70     	; 0xcd8 <spi_init+0x2a>
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <spi_init+0x76>
     d20:	1d b8       	out	0x0d, r1	; 13
     d22:	de cf       	rjmp	.-68     	; 0xce0 <spi_init+0x32>
     d24:	1d b8       	out	0x0d, r1	; 13
     d26:	ec cf       	rjmp	.-40     	; 0xd00 <spi_init+0x52>
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <spi_master_tx>:
     d34:	8f b9       	out	0x0f, r24	; 15
     d36:	77 9b       	sbis	0x0e, 7	; 14
     d38:	fe cf       	rjmp	.-4      	; 0xd36 <spi_master_tx+0x2>
     d3a:	08 95       	ret

00000d3c <spi_master_rx>:
     d3c:	1f b8       	out	0x0f, r1	; 15
     d3e:	77 9b       	sbis	0x0e, 7	; 14
     d40:	fe cf       	rjmp	.-4      	; 0xd3e <spi_master_rx+0x2>
     d42:	8f b1       	in	r24, 0x0f	; 15
     d44:	08 95       	ret

00000d46 <timer0_init>:
     d46:	bc 9a       	sbi	0x17, 4	; 23
     d48:	8c e0       	ldi	r24, 0x0C	; 12
     d4a:	83 bf       	out	0x33, r24	; 51
     d4c:	8a ef       	ldi	r24, 0xFA	; 250
     d4e:	81 bf       	out	0x31, r24	; 49
     d50:	87 b7       	in	r24, 0x37	; 55
     d52:	82 60       	ori	r24, 0x02	; 2
     d54:	87 bf       	out	0x37, r24	; 55
     d56:	08 95       	ret

00000d58 <timer3_init>:
     d58:	13 9a       	sbi	0x02, 3	; 2
     d5a:	80 e4       	ldi	r24, 0x40	; 64
     d5c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d60:	8a e1       	ldi	r24, 0x1A	; 26
     d62:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d66:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d6a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d6e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d72:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d76:	08 95       	ret

00000d78 <setICR3>:
     d78:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d80:	08 95       	ret

00000d82 <_uart_tx_string_in_isr>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
     d82:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <uart0+0x64>
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e5 50       	subi	r30, 0x05	; 5
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	81 11       	cpse	r24, r1
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <_uart_tx_string_in_isr+0x22>
     d92:	56 98       	cbi	0x0a, 6	; 10
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	eb ef       	ldi	r30, 0xFB	; 251
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <_uart_tx_string_in_isr+0x1a>
     da2:	08 95       	ret
     da4:	af e5       	ldi	r26, 0x5F	; 95
     da6:	b2 e0       	ldi	r27, 0x02	; 2
     da8:	ec 91       	ld	r30, X
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	8e 0f       	add	r24, r30
     dae:	8c 93       	st	X, r24
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	e5 50       	subi	r30, 0x05	; 5
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	8c b9       	out	0x0c, r24	; 12
     dba:	08 95       	ret

00000dbc <__vector_20>:
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	0b b6       	in	r0, 0x3b	; 59
     dc8:	0f 92       	push	r0
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	cf df       	rcall	.-98     	; 0xd82 <_uart_tx_string_in_isr>
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0b be       	out	0x3b, r0	; 59
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <uart_init>:
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	9b 01       	movw	r18, r22
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	60 e4       	ldi	r22, 0x40	; 64
     e18:	72 e4       	ldi	r23, 0x42	; 66
     e1a:	8f e0       	ldi	r24, 0x0F	; 15
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a7 d0       	rcall	.+334    	; 0xf6e <__udivmodsi4>
     e20:	21 50       	subi	r18, 0x01	; 1
     e22:	31 09       	sbc	r19, r1
     e24:	20 97       	sbiw	r28, 0x00	; 0
     e26:	51 f4       	brne	.+20     	; 0xe3c <uart_init+0x32>
     e28:	10 98       	cbi	0x02, 0	; 2
     e2a:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     e2e:	29 b9       	out	0x09, r18	; 9
     e30:	88 e0       	ldi	r24, 0x08	; 8
     e32:	8a b9       	out	0x0a, r24	; 10
     e34:	86 e0       	ldi	r24, 0x06	; 6
     e36:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     e3a:	10 c0       	rjmp	.+32     	; 0xe5c <uart_init+0x52>
     e3c:	21 97       	sbiw	r28, 0x01	; 1
     e3e:	71 f4       	brne	.+28     	; 0xe5c <uart_init+0x52>
     e40:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     e44:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e48:	ea e9       	ldi	r30, 0x9A	; 154
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	88 e1       	ldi	r24, 0x18	; 24
     e4e:	80 83       	st	Z, r24
     e50:	80 81       	ld	r24, Z
     e52:	80 68       	ori	r24, 0x80	; 128
     e54:	80 83       	st	Z, r24
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <uart0_tx_char>:
     e62:	5d 9b       	sbis	0x0b, 5	; 11
     e64:	fe cf       	rjmp	.-4      	; 0xe62 <uart0_tx_char>
     e66:	8c b9       	out	0x0c, r24	; 12
     e68:	08 95       	ret

00000e6a <uart0_tx_string>:
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
     e70:	88 81       	ld	r24, Y
     e72:	88 23       	and	r24, r24
     e74:	29 f0       	breq	.+10     	; 0xe80 <uart0_tx_string+0x16>
     e76:	21 96       	adiw	r28, 0x01	; 1
     e78:	f4 df       	rcall	.-24     	; 0xe62 <uart0_tx_char>
     e7a:	89 91       	ld	r24, Y+
     e7c:	81 11       	cpse	r24, r1
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <uart0_tx_string+0xe>
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <uart1_tx_char>:
     e86:	eb e9       	ldi	r30, 0x9B	; 155
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	90 81       	ld	r25, Z
     e8c:	95 ff       	sbrs	r25, 5
     e8e:	fd cf       	rjmp	.-6      	; 0xe8a <uart1_tx_char+0x4>
     e90:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     e94:	08 95       	ret

00000e96 <uart1_tx_string>:
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
     e9c:	88 81       	ld	r24, Y
     e9e:	88 23       	and	r24, r24
     ea0:	29 f0       	breq	.+10     	; 0xeac <uart1_tx_string+0x16>
     ea2:	21 96       	adiw	r28, 0x01	; 1
     ea4:	f0 df       	rcall	.-32     	; 0xe86 <uart1_tx_char>
     ea6:	89 91       	ld	r24, Y+
     ea8:	81 11       	cpse	r24, r1
     eaa:	fc cf       	rjmp	.-8      	; 0xea4 <uart1_tx_string+0xe>
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <IntToString>:

char * IntToString(int num)
{
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	64 97       	sbiw	r28, 0x14	; 20
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d,",num); //고유 자릿값
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	85 ee       	ldi	r24, 0xE5	; 229
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	8e 01       	movw	r16, r28
     ed8:	0f 5f       	subi	r16, 0xFF	; 255
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	1f 93       	push	r17
     ede:	0f 93       	push	r16
     ee0:	6f d0       	rcall	.+222    	; 0xfc0 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
     ee2:	b8 01       	movw	r22, r16
     ee4:	89 ef       	ldi	r24, 0xF9	; 249
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	64 d0       	rcall	.+200    	; 0xfb2 <strcpy>
	
	return (buff.itos_buff);
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
}
     ef6:	89 ef       	ldi	r24, 0xF9	; 249
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	64 96       	adiw	r28, 0x14	; 20
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <HexToString>:
 
 char * HexToString(char num)
 {
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	64 97       	sbiw	r28, 0x14	; 20
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
     f28:	1f 92       	push	r1
     f2a:	8f 93       	push	r24
     f2c:	89 ee       	ldi	r24, 0xE9	; 233
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	8e 01       	movw	r16, r28
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	1f 93       	push	r17
     f3c:	0f 93       	push	r16
     f3e:	40 d0       	rcall	.+128    	; 0xfc0 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
     f40:	b8 01       	movw	r22, r16
     f42:	89 ef       	ldi	r24, 0xF9	; 249
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	35 d0       	rcall	.+106    	; 0xfb2 <strcpy>
	 
	 return (buff.itos_buff);
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
 }
     f54:	89 ef       	ldi	r24, 0xF9	; 249
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	64 96       	adiw	r28, 0x14	; 20
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <__udivmodsi4>:
     f6e:	a1 e2       	ldi	r26, 0x21	; 33
     f70:	1a 2e       	mov	r1, r26
     f72:	aa 1b       	sub	r26, r26
     f74:	bb 1b       	sub	r27, r27
     f76:	fd 01       	movw	r30, r26
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <__udivmodsi4_ep>

00000f7a <__udivmodsi4_loop>:
     f7a:	aa 1f       	adc	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	ee 1f       	adc	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	a2 17       	cp	r26, r18
     f84:	b3 07       	cpc	r27, r19
     f86:	e4 07       	cpc	r30, r20
     f88:	f5 07       	cpc	r31, r21
     f8a:	20 f0       	brcs	.+8      	; 0xf94 <__udivmodsi4_ep>
     f8c:	a2 1b       	sub	r26, r18
     f8e:	b3 0b       	sbc	r27, r19
     f90:	e4 0b       	sbc	r30, r20
     f92:	f5 0b       	sbc	r31, r21

00000f94 <__udivmodsi4_ep>:
     f94:	66 1f       	adc	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	1a 94       	dec	r1
     f9e:	69 f7       	brne	.-38     	; 0xf7a <__udivmodsi4_loop>
     fa0:	60 95       	com	r22
     fa2:	70 95       	com	r23
     fa4:	80 95       	com	r24
     fa6:	90 95       	com	r25
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	bd 01       	movw	r22, r26
     fae:	cf 01       	movw	r24, r30
     fb0:	08 95       	ret

00000fb2 <strcpy>:
     fb2:	fb 01       	movw	r30, r22
     fb4:	dc 01       	movw	r26, r24
     fb6:	01 90       	ld	r0, Z+
     fb8:	0d 92       	st	X+, r0
     fba:	00 20       	and	r0, r0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <strcpy+0x4>
     fbe:	08 95       	ret

00000fc0 <sprintf>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	2e 97       	sbiw	r28, 0x0e	; 14
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	0d 89       	ldd	r16, Y+21	; 0x15
     fda:	1e 89       	ldd	r17, Y+22	; 0x16
     fdc:	86 e0       	ldi	r24, 0x06	; 6
     fde:	8c 83       	std	Y+4, r24	; 0x04
     fe0:	1a 83       	std	Y+2, r17	; 0x02
     fe2:	09 83       	std	Y+1, r16	; 0x01
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	9f e7       	ldi	r25, 0x7F	; 127
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	ae 01       	movw	r20, r28
     fee:	47 5e       	subi	r20, 0xE7	; 231
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	6f 89       	ldd	r22, Y+23	; 0x17
     ff4:	78 8d       	ldd	r23, Y+24	; 0x18
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	10 d0       	rcall	.+32     	; 0x101c <vfprintf>
     ffc:	ef 81       	ldd	r30, Y+7	; 0x07
     ffe:	f8 85       	ldd	r31, Y+8	; 0x08
    1000:	e0 0f       	add	r30, r16
    1002:	f1 1f       	adc	r31, r17
    1004:	10 82       	st	Z, r1
    1006:	2e 96       	adiw	r28, 0x0e	; 14
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <vfprintf>:
    101c:	2f 92       	push	r2
    101e:	3f 92       	push	r3
    1020:	4f 92       	push	r4
    1022:	5f 92       	push	r5
    1024:	6f 92       	push	r6
    1026:	7f 92       	push	r7
    1028:	8f 92       	push	r8
    102a:	9f 92       	push	r9
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	2b 97       	sbiw	r28, 0x0b	; 11
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	6c 01       	movw	r12, r24
    1052:	7b 01       	movw	r14, r22
    1054:	8a 01       	movw	r16, r20
    1056:	fc 01       	movw	r30, r24
    1058:	17 82       	std	Z+7, r1	; 0x07
    105a:	16 82       	std	Z+6, r1	; 0x06
    105c:	83 81       	ldd	r24, Z+3	; 0x03
    105e:	81 ff       	sbrs	r24, 1
    1060:	bf c1       	rjmp	.+894    	; 0x13e0 <__stack+0x2e1>
    1062:	ce 01       	movw	r24, r28
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	3c 01       	movw	r6, r24
    1068:	f6 01       	movw	r30, r12
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	f7 01       	movw	r30, r14
    106e:	93 fd       	sbrc	r25, 3
    1070:	85 91       	lpm	r24, Z+
    1072:	93 ff       	sbrs	r25, 3
    1074:	81 91       	ld	r24, Z+
    1076:	7f 01       	movw	r14, r30
    1078:	88 23       	and	r24, r24
    107a:	09 f4       	brne	.+2      	; 0x107e <vfprintf+0x62>
    107c:	ad c1       	rjmp	.+858    	; 0x13d8 <__stack+0x2d9>
    107e:	85 32       	cpi	r24, 0x25	; 37
    1080:	39 f4       	brne	.+14     	; 0x1090 <vfprintf+0x74>
    1082:	93 fd       	sbrc	r25, 3
    1084:	85 91       	lpm	r24, Z+
    1086:	93 ff       	sbrs	r25, 3
    1088:	81 91       	ld	r24, Z+
    108a:	7f 01       	movw	r14, r30
    108c:	85 32       	cpi	r24, 0x25	; 37
    108e:	21 f4       	brne	.+8      	; 0x1098 <vfprintf+0x7c>
    1090:	b6 01       	movw	r22, r12
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	d6 d1       	rcall	.+940    	; 0x1442 <fputc>
    1096:	e8 cf       	rjmp	.-48     	; 0x1068 <vfprintf+0x4c>
    1098:	91 2c       	mov	r9, r1
    109a:	21 2c       	mov	r2, r1
    109c:	31 2c       	mov	r3, r1
    109e:	ff e1       	ldi	r31, 0x1F	; 31
    10a0:	f3 15       	cp	r31, r3
    10a2:	d8 f0       	brcs	.+54     	; 0x10da <vfprintf+0xbe>
    10a4:	8b 32       	cpi	r24, 0x2B	; 43
    10a6:	79 f0       	breq	.+30     	; 0x10c6 <vfprintf+0xaa>
    10a8:	38 f4       	brcc	.+14     	; 0x10b8 <vfprintf+0x9c>
    10aa:	80 32       	cpi	r24, 0x20	; 32
    10ac:	79 f0       	breq	.+30     	; 0x10cc <vfprintf+0xb0>
    10ae:	83 32       	cpi	r24, 0x23	; 35
    10b0:	a1 f4       	brne	.+40     	; 0x10da <vfprintf+0xbe>
    10b2:	23 2d       	mov	r18, r3
    10b4:	20 61       	ori	r18, 0x10	; 16
    10b6:	1d c0       	rjmp	.+58     	; 0x10f2 <vfprintf+0xd6>
    10b8:	8d 32       	cpi	r24, 0x2D	; 45
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <vfprintf+0xb8>
    10bc:	80 33       	cpi	r24, 0x30	; 48
    10be:	69 f4       	brne	.+26     	; 0x10da <vfprintf+0xbe>
    10c0:	23 2d       	mov	r18, r3
    10c2:	21 60       	ori	r18, 0x01	; 1
    10c4:	16 c0       	rjmp	.+44     	; 0x10f2 <vfprintf+0xd6>
    10c6:	83 2d       	mov	r24, r3
    10c8:	82 60       	ori	r24, 0x02	; 2
    10ca:	38 2e       	mov	r3, r24
    10cc:	e3 2d       	mov	r30, r3
    10ce:	e4 60       	ori	r30, 0x04	; 4
    10d0:	3e 2e       	mov	r3, r30
    10d2:	2a c0       	rjmp	.+84     	; 0x1128 <__stack+0x29>
    10d4:	f3 2d       	mov	r31, r3
    10d6:	f8 60       	ori	r31, 0x08	; 8
    10d8:	1d c0       	rjmp	.+58     	; 0x1114 <__stack+0x15>
    10da:	37 fc       	sbrc	r3, 7
    10dc:	2d c0       	rjmp	.+90     	; 0x1138 <__stack+0x39>
    10de:	20 ed       	ldi	r18, 0xD0	; 208
    10e0:	28 0f       	add	r18, r24
    10e2:	2a 30       	cpi	r18, 0x0A	; 10
    10e4:	40 f0       	brcs	.+16     	; 0x10f6 <vfprintf+0xda>
    10e6:	8e 32       	cpi	r24, 0x2E	; 46
    10e8:	b9 f4       	brne	.+46     	; 0x1118 <__stack+0x19>
    10ea:	36 fc       	sbrc	r3, 6
    10ec:	75 c1       	rjmp	.+746    	; 0x13d8 <__stack+0x2d9>
    10ee:	23 2d       	mov	r18, r3
    10f0:	20 64       	ori	r18, 0x40	; 64
    10f2:	32 2e       	mov	r3, r18
    10f4:	19 c0       	rjmp	.+50     	; 0x1128 <__stack+0x29>
    10f6:	36 fe       	sbrs	r3, 6
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <__stack+0x7>
    10fa:	8a e0       	ldi	r24, 0x0A	; 10
    10fc:	98 9e       	mul	r9, r24
    10fe:	20 0d       	add	r18, r0
    1100:	11 24       	eor	r1, r1
    1102:	92 2e       	mov	r9, r18
    1104:	11 c0       	rjmp	.+34     	; 0x1128 <__stack+0x29>
    1106:	ea e0       	ldi	r30, 0x0A	; 10
    1108:	2e 9e       	mul	r2, r30
    110a:	20 0d       	add	r18, r0
    110c:	11 24       	eor	r1, r1
    110e:	22 2e       	mov	r2, r18
    1110:	f3 2d       	mov	r31, r3
    1112:	f0 62       	ori	r31, 0x20	; 32
    1114:	3f 2e       	mov	r3, r31
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <__stack+0x29>
    1118:	8c 36       	cpi	r24, 0x6C	; 108
    111a:	21 f4       	brne	.+8      	; 0x1124 <__stack+0x25>
    111c:	83 2d       	mov	r24, r3
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	38 2e       	mov	r3, r24
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <__stack+0x29>
    1124:	88 36       	cpi	r24, 0x68	; 104
    1126:	41 f4       	brne	.+16     	; 0x1138 <__stack+0x39>
    1128:	f7 01       	movw	r30, r14
    112a:	93 fd       	sbrc	r25, 3
    112c:	85 91       	lpm	r24, Z+
    112e:	93 ff       	sbrs	r25, 3
    1130:	81 91       	ld	r24, Z+
    1132:	7f 01       	movw	r14, r30
    1134:	81 11       	cpse	r24, r1
    1136:	b3 cf       	rjmp	.-154    	; 0x109e <vfprintf+0x82>
    1138:	98 2f       	mov	r25, r24
    113a:	9f 7d       	andi	r25, 0xDF	; 223
    113c:	95 54       	subi	r25, 0x45	; 69
    113e:	93 30       	cpi	r25, 0x03	; 3
    1140:	28 f4       	brcc	.+10     	; 0x114c <__stack+0x4d>
    1142:	0c 5f       	subi	r16, 0xFC	; 252
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	9f e3       	ldi	r25, 0x3F	; 63
    1148:	99 83       	std	Y+1, r25	; 0x01
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <__stack+0x67>
    114c:	83 36       	cpi	r24, 0x63	; 99
    114e:	31 f0       	breq	.+12     	; 0x115c <__stack+0x5d>
    1150:	83 37       	cpi	r24, 0x73	; 115
    1152:	71 f0       	breq	.+28     	; 0x1170 <__stack+0x71>
    1154:	83 35       	cpi	r24, 0x53	; 83
    1156:	09 f0       	breq	.+2      	; 0x115a <__stack+0x5b>
    1158:	55 c0       	rjmp	.+170    	; 0x1204 <__stack+0x105>
    115a:	20 c0       	rjmp	.+64     	; 0x119c <__stack+0x9d>
    115c:	f8 01       	movw	r30, r16
    115e:	80 81       	ld	r24, Z
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	0e 5f       	subi	r16, 0xFE	; 254
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	88 24       	eor	r8, r8
    1168:	83 94       	inc	r8
    116a:	91 2c       	mov	r9, r1
    116c:	53 01       	movw	r10, r6
    116e:	12 c0       	rjmp	.+36     	; 0x1194 <__stack+0x95>
    1170:	28 01       	movw	r4, r16
    1172:	f2 e0       	ldi	r31, 0x02	; 2
    1174:	4f 0e       	add	r4, r31
    1176:	51 1c       	adc	r5, r1
    1178:	f8 01       	movw	r30, r16
    117a:	a0 80       	ld	r10, Z
    117c:	b1 80       	ldd	r11, Z+1	; 0x01
    117e:	36 fe       	sbrs	r3, 6
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <__stack+0x89>
    1182:	69 2d       	mov	r22, r9
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <__stack+0x8d>
    1188:	6f ef       	ldi	r22, 0xFF	; 255
    118a:	7f ef       	ldi	r23, 0xFF	; 255
    118c:	c5 01       	movw	r24, r10
    118e:	4e d1       	rcall	.+668    	; 0x142c <strnlen>
    1190:	4c 01       	movw	r8, r24
    1192:	82 01       	movw	r16, r4
    1194:	f3 2d       	mov	r31, r3
    1196:	ff 77       	andi	r31, 0x7F	; 127
    1198:	3f 2e       	mov	r3, r31
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <__stack+0xc7>
    119c:	28 01       	movw	r4, r16
    119e:	22 e0       	ldi	r18, 0x02	; 2
    11a0:	42 0e       	add	r4, r18
    11a2:	51 1c       	adc	r5, r1
    11a4:	f8 01       	movw	r30, r16
    11a6:	a0 80       	ld	r10, Z
    11a8:	b1 80       	ldd	r11, Z+1	; 0x01
    11aa:	36 fe       	sbrs	r3, 6
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <__stack+0xb5>
    11ae:	69 2d       	mov	r22, r9
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__stack+0xb9>
    11b4:	6f ef       	ldi	r22, 0xFF	; 255
    11b6:	7f ef       	ldi	r23, 0xFF	; 255
    11b8:	c5 01       	movw	r24, r10
    11ba:	2d d1       	rcall	.+602    	; 0x1416 <strnlen_P>
    11bc:	4c 01       	movw	r8, r24
    11be:	f3 2d       	mov	r31, r3
    11c0:	f0 68       	ori	r31, 0x80	; 128
    11c2:	3f 2e       	mov	r3, r31
    11c4:	82 01       	movw	r16, r4
    11c6:	33 fc       	sbrc	r3, 3
    11c8:	19 c0       	rjmp	.+50     	; 0x11fc <__stack+0xfd>
    11ca:	82 2d       	mov	r24, r2
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	88 16       	cp	r8, r24
    11d0:	99 06       	cpc	r9, r25
    11d2:	a0 f4       	brcc	.+40     	; 0x11fc <__stack+0xfd>
    11d4:	b6 01       	movw	r22, r12
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	33 d1       	rcall	.+614    	; 0x1442 <fputc>
    11dc:	2a 94       	dec	r2
    11de:	f5 cf       	rjmp	.-22     	; 0x11ca <__stack+0xcb>
    11e0:	f5 01       	movw	r30, r10
    11e2:	37 fc       	sbrc	r3, 7
    11e4:	85 91       	lpm	r24, Z+
    11e6:	37 fe       	sbrs	r3, 7
    11e8:	81 91       	ld	r24, Z+
    11ea:	5f 01       	movw	r10, r30
    11ec:	b6 01       	movw	r22, r12
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 d1       	rcall	.+592    	; 0x1442 <fputc>
    11f2:	21 10       	cpse	r2, r1
    11f4:	2a 94       	dec	r2
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	82 1a       	sub	r8, r18
    11fa:	91 08       	sbc	r9, r1
    11fc:	81 14       	cp	r8, r1
    11fe:	91 04       	cpc	r9, r1
    1200:	79 f7       	brne	.-34     	; 0x11e0 <__stack+0xe1>
    1202:	e1 c0       	rjmp	.+450    	; 0x13c6 <__stack+0x2c7>
    1204:	84 36       	cpi	r24, 0x64	; 100
    1206:	11 f0       	breq	.+4      	; 0x120c <__stack+0x10d>
    1208:	89 36       	cpi	r24, 0x69	; 105
    120a:	39 f5       	brne	.+78     	; 0x125a <__stack+0x15b>
    120c:	f8 01       	movw	r30, r16
    120e:	37 fe       	sbrs	r3, 7
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <__stack+0x121>
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	0c 5f       	subi	r16, 0xFC	; 252
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <__stack+0x131>
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	07 2e       	mov	r0, r23
    1226:	00 0c       	add	r0, r0
    1228:	88 0b       	sbc	r24, r24
    122a:	99 0b       	sbc	r25, r25
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	f3 2d       	mov	r31, r3
    1232:	ff 76       	andi	r31, 0x6F	; 111
    1234:	3f 2e       	mov	r3, r31
    1236:	97 ff       	sbrs	r25, 7
    1238:	09 c0       	rjmp	.+18     	; 0x124c <__stack+0x14d>
    123a:	90 95       	com	r25
    123c:	80 95       	com	r24
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	f0 68       	ori	r31, 0x80	; 128
    124a:	3f 2e       	mov	r3, r31
    124c:	2a e0       	ldi	r18, 0x0A	; 10
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	a3 01       	movw	r20, r6
    1252:	33 d1       	rcall	.+614    	; 0x14ba <__ultoa_invert>
    1254:	88 2e       	mov	r8, r24
    1256:	86 18       	sub	r8, r6
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <__stack+0x1e3>
    125a:	85 37       	cpi	r24, 0x75	; 117
    125c:	31 f4       	brne	.+12     	; 0x126a <__stack+0x16b>
    125e:	23 2d       	mov	r18, r3
    1260:	2f 7e       	andi	r18, 0xEF	; 239
    1262:	b2 2e       	mov	r11, r18
    1264:	2a e0       	ldi	r18, 0x0A	; 10
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	25 c0       	rjmp	.+74     	; 0x12b4 <__stack+0x1b5>
    126a:	93 2d       	mov	r25, r3
    126c:	99 7f       	andi	r25, 0xF9	; 249
    126e:	b9 2e       	mov	r11, r25
    1270:	8f 36       	cpi	r24, 0x6F	; 111
    1272:	c1 f0       	breq	.+48     	; 0x12a4 <__stack+0x1a5>
    1274:	18 f4       	brcc	.+6      	; 0x127c <__stack+0x17d>
    1276:	88 35       	cpi	r24, 0x58	; 88
    1278:	79 f0       	breq	.+30     	; 0x1298 <__stack+0x199>
    127a:	ae c0       	rjmp	.+348    	; 0x13d8 <__stack+0x2d9>
    127c:	80 37       	cpi	r24, 0x70	; 112
    127e:	19 f0       	breq	.+6      	; 0x1286 <__stack+0x187>
    1280:	88 37       	cpi	r24, 0x78	; 120
    1282:	21 f0       	breq	.+8      	; 0x128c <__stack+0x18d>
    1284:	a9 c0       	rjmp	.+338    	; 0x13d8 <__stack+0x2d9>
    1286:	e9 2f       	mov	r30, r25
    1288:	e0 61       	ori	r30, 0x10	; 16
    128a:	be 2e       	mov	r11, r30
    128c:	b4 fe       	sbrs	r11, 4
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <__stack+0x1ab>
    1290:	fb 2d       	mov	r31, r11
    1292:	f4 60       	ori	r31, 0x04	; 4
    1294:	bf 2e       	mov	r11, r31
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <__stack+0x1ab>
    1298:	34 fe       	sbrs	r3, 4
    129a:	0a c0       	rjmp	.+20     	; 0x12b0 <__stack+0x1b1>
    129c:	29 2f       	mov	r18, r25
    129e:	26 60       	ori	r18, 0x06	; 6
    12a0:	b2 2e       	mov	r11, r18
    12a2:	06 c0       	rjmp	.+12     	; 0x12b0 <__stack+0x1b1>
    12a4:	28 e0       	ldi	r18, 0x08	; 8
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <__stack+0x1b5>
    12aa:	20 e1       	ldi	r18, 0x10	; 16
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <__stack+0x1b5>
    12b0:	20 e1       	ldi	r18, 0x10	; 16
    12b2:	32 e0       	ldi	r19, 0x02	; 2
    12b4:	f8 01       	movw	r30, r16
    12b6:	b7 fe       	sbrs	r11, 7
    12b8:	07 c0       	rjmp	.+14     	; 0x12c8 <__stack+0x1c9>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	93 81       	ldd	r25, Z+3	; 0x03
    12c2:	0c 5f       	subi	r16, 0xFC	; 252
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	06 c0       	rjmp	.+12     	; 0x12d4 <__stack+0x1d5>
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 5f       	subi	r16, 0xFE	; 254
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	a3 01       	movw	r20, r6
    12d6:	f1 d0       	rcall	.+482    	; 0x14ba <__ultoa_invert>
    12d8:	88 2e       	mov	r8, r24
    12da:	86 18       	sub	r8, r6
    12dc:	fb 2d       	mov	r31, r11
    12de:	ff 77       	andi	r31, 0x7F	; 127
    12e0:	3f 2e       	mov	r3, r31
    12e2:	36 fe       	sbrs	r3, 6
    12e4:	0d c0       	rjmp	.+26     	; 0x1300 <__stack+0x201>
    12e6:	23 2d       	mov	r18, r3
    12e8:	2e 7f       	andi	r18, 0xFE	; 254
    12ea:	a2 2e       	mov	r10, r18
    12ec:	89 14       	cp	r8, r9
    12ee:	58 f4       	brcc	.+22     	; 0x1306 <__stack+0x207>
    12f0:	34 fe       	sbrs	r3, 4
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <__stack+0x20b>
    12f4:	32 fc       	sbrc	r3, 2
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <__stack+0x20b>
    12f8:	83 2d       	mov	r24, r3
    12fa:	8e 7e       	andi	r24, 0xEE	; 238
    12fc:	a8 2e       	mov	r10, r24
    12fe:	05 c0       	rjmp	.+10     	; 0x130a <__stack+0x20b>
    1300:	b8 2c       	mov	r11, r8
    1302:	a3 2c       	mov	r10, r3
    1304:	03 c0       	rjmp	.+6      	; 0x130c <__stack+0x20d>
    1306:	b8 2c       	mov	r11, r8
    1308:	01 c0       	rjmp	.+2      	; 0x130c <__stack+0x20d>
    130a:	b9 2c       	mov	r11, r9
    130c:	a4 fe       	sbrs	r10, 4
    130e:	0f c0       	rjmp	.+30     	; 0x132e <__stack+0x22f>
    1310:	fe 01       	movw	r30, r28
    1312:	e8 0d       	add	r30, r8
    1314:	f1 1d       	adc	r31, r1
    1316:	80 81       	ld	r24, Z
    1318:	80 33       	cpi	r24, 0x30	; 48
    131a:	21 f4       	brne	.+8      	; 0x1324 <__stack+0x225>
    131c:	9a 2d       	mov	r25, r10
    131e:	99 7e       	andi	r25, 0xE9	; 233
    1320:	a9 2e       	mov	r10, r25
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <__stack+0x237>
    1324:	a2 fe       	sbrs	r10, 2
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <__stack+0x235>
    1328:	b3 94       	inc	r11
    132a:	b3 94       	inc	r11
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <__stack+0x237>
    132e:	8a 2d       	mov	r24, r10
    1330:	86 78       	andi	r24, 0x86	; 134
    1332:	09 f0       	breq	.+2      	; 0x1336 <__stack+0x237>
    1334:	b3 94       	inc	r11
    1336:	a3 fc       	sbrc	r10, 3
    1338:	10 c0       	rjmp	.+32     	; 0x135a <__stack+0x25b>
    133a:	a0 fe       	sbrs	r10, 0
    133c:	06 c0       	rjmp	.+12     	; 0x134a <__stack+0x24b>
    133e:	b2 14       	cp	r11, r2
    1340:	80 f4       	brcc	.+32     	; 0x1362 <__stack+0x263>
    1342:	28 0c       	add	r2, r8
    1344:	92 2c       	mov	r9, r2
    1346:	9b 18       	sub	r9, r11
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <__stack+0x265>
    134a:	b2 14       	cp	r11, r2
    134c:	58 f4       	brcc	.+22     	; 0x1364 <__stack+0x265>
    134e:	b6 01       	movw	r22, r12
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	76 d0       	rcall	.+236    	; 0x1442 <fputc>
    1356:	b3 94       	inc	r11
    1358:	f8 cf       	rjmp	.-16     	; 0x134a <__stack+0x24b>
    135a:	b2 14       	cp	r11, r2
    135c:	18 f4       	brcc	.+6      	; 0x1364 <__stack+0x265>
    135e:	2b 18       	sub	r2, r11
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__stack+0x267>
    1362:	98 2c       	mov	r9, r8
    1364:	21 2c       	mov	r2, r1
    1366:	a4 fe       	sbrs	r10, 4
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <__stack+0x289>
    136a:	b6 01       	movw	r22, r12
    136c:	80 e3       	ldi	r24, 0x30	; 48
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	68 d0       	rcall	.+208    	; 0x1442 <fputc>
    1372:	a2 fe       	sbrs	r10, 2
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__stack+0x2a3>
    1376:	a1 fc       	sbrc	r10, 1
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <__stack+0x281>
    137a:	88 e7       	ldi	r24, 0x78	; 120
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <__stack+0x285>
    1380:	88 e5       	ldi	r24, 0x58	; 88
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	b6 01       	movw	r22, r12
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <__stack+0x2a1>
    1388:	8a 2d       	mov	r24, r10
    138a:	86 78       	andi	r24, 0x86	; 134
    138c:	51 f0       	breq	.+20     	; 0x13a2 <__stack+0x2a3>
    138e:	a1 fe       	sbrs	r10, 1
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <__stack+0x297>
    1392:	8b e2       	ldi	r24, 0x2B	; 43
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <__stack+0x299>
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	a7 fc       	sbrc	r10, 7
    139a:	8d e2       	ldi	r24, 0x2D	; 45
    139c:	b6 01       	movw	r22, r12
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	50 d0       	rcall	.+160    	; 0x1442 <fputc>
    13a2:	89 14       	cp	r8, r9
    13a4:	30 f4       	brcc	.+12     	; 0x13b2 <__stack+0x2b3>
    13a6:	b6 01       	movw	r22, r12
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	4a d0       	rcall	.+148    	; 0x1442 <fputc>
    13ae:	9a 94       	dec	r9
    13b0:	f8 cf       	rjmp	.-16     	; 0x13a2 <__stack+0x2a3>
    13b2:	8a 94       	dec	r8
    13b4:	f3 01       	movw	r30, r6
    13b6:	e8 0d       	add	r30, r8
    13b8:	f1 1d       	adc	r31, r1
    13ba:	80 81       	ld	r24, Z
    13bc:	b6 01       	movw	r22, r12
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	40 d0       	rcall	.+128    	; 0x1442 <fputc>
    13c2:	81 10       	cpse	r8, r1
    13c4:	f6 cf       	rjmp	.-20     	; 0x13b2 <__stack+0x2b3>
    13c6:	22 20       	and	r2, r2
    13c8:	09 f4       	brne	.+2      	; 0x13cc <__stack+0x2cd>
    13ca:	4e ce       	rjmp	.-868    	; 0x1068 <vfprintf+0x4c>
    13cc:	b6 01       	movw	r22, r12
    13ce:	80 e2       	ldi	r24, 0x20	; 32
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	37 d0       	rcall	.+110    	; 0x1442 <fputc>
    13d4:	2a 94       	dec	r2
    13d6:	f7 cf       	rjmp	.-18     	; 0x13c6 <__stack+0x2c7>
    13d8:	f6 01       	movw	r30, r12
    13da:	86 81       	ldd	r24, Z+6	; 0x06
    13dc:	97 81       	ldd	r25, Z+7	; 0x07
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <__stack+0x2e5>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	2b 96       	adiw	r28, 0x0b	; 11
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	3f 90       	pop	r3
    1412:	2f 90       	pop	r2
    1414:	08 95       	ret

00001416 <strnlen_P>:
    1416:	fc 01       	movw	r30, r24
    1418:	05 90       	lpm	r0, Z+
    141a:	61 50       	subi	r22, 0x01	; 1
    141c:	70 40       	sbci	r23, 0x00	; 0
    141e:	01 10       	cpse	r0, r1
    1420:	d8 f7       	brcc	.-10     	; 0x1418 <strnlen_P+0x2>
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	8e 0f       	add	r24, r30
    1428:	9f 1f       	adc	r25, r31
    142a:	08 95       	ret

0000142c <strnlen>:
    142c:	fc 01       	movw	r30, r24
    142e:	61 50       	subi	r22, 0x01	; 1
    1430:	70 40       	sbci	r23, 0x00	; 0
    1432:	01 90       	ld	r0, Z+
    1434:	01 10       	cpse	r0, r1
    1436:	d8 f7       	brcc	.-10     	; 0x142e <strnlen+0x2>
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	8e 0f       	add	r24, r30
    143e:	9f 1f       	adc	r25, r31
    1440:	08 95       	ret

00001442 <fputc>:
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	fb 01       	movw	r30, r22
    144c:	23 81       	ldd	r18, Z+3	; 0x03
    144e:	21 fd       	sbrc	r18, 1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <fputc+0x16>
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <fputc+0x6e>
    1458:	22 ff       	sbrs	r18, 2
    145a:	16 c0       	rjmp	.+44     	; 0x1488 <fputc+0x46>
    145c:	46 81       	ldd	r20, Z+6	; 0x06
    145e:	57 81       	ldd	r21, Z+7	; 0x07
    1460:	24 81       	ldd	r18, Z+4	; 0x04
    1462:	35 81       	ldd	r19, Z+5	; 0x05
    1464:	42 17       	cp	r20, r18
    1466:	53 07       	cpc	r21, r19
    1468:	44 f4       	brge	.+16     	; 0x147a <fputc+0x38>
    146a:	a0 81       	ld	r26, Z
    146c:	b1 81       	ldd	r27, Z+1	; 0x01
    146e:	9d 01       	movw	r18, r26
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	31 83       	std	Z+1, r19	; 0x01
    1476:	20 83       	st	Z, r18
    1478:	8c 93       	st	X, r24
    147a:	26 81       	ldd	r18, Z+6	; 0x06
    147c:	37 81       	ldd	r19, Z+7	; 0x07
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	37 83       	std	Z+7, r19	; 0x07
    1484:	26 83       	std	Z+6, r18	; 0x06
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <fputc+0x6e>
    1488:	8b 01       	movw	r16, r22
    148a:	ec 01       	movw	r28, r24
    148c:	fb 01       	movw	r30, r22
    148e:	00 84       	ldd	r0, Z+8	; 0x08
    1490:	f1 85       	ldd	r31, Z+9	; 0x09
    1492:	e0 2d       	mov	r30, r0
    1494:	09 95       	icall
    1496:	89 2b       	or	r24, r25
    1498:	e1 f6       	brne	.-72     	; 0x1452 <fputc+0x10>
    149a:	d8 01       	movw	r26, r16
    149c:	16 96       	adiw	r26, 0x06	; 6
    149e:	8d 91       	ld	r24, X+
    14a0:	9c 91       	ld	r25, X
    14a2:	17 97       	sbiw	r26, 0x07	; 7
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	17 96       	adiw	r26, 0x07	; 7
    14a8:	9c 93       	st	X, r25
    14aa:	8e 93       	st	-X, r24
    14ac:	16 97       	sbiw	r26, 0x06	; 6
    14ae:	ce 01       	movw	r24, r28
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <__ultoa_invert>:
    14ba:	fa 01       	movw	r30, r20
    14bc:	aa 27       	eor	r26, r26
    14be:	28 30       	cpi	r18, 0x08	; 8
    14c0:	51 f1       	breq	.+84     	; 0x1516 <__ultoa_invert+0x5c>
    14c2:	20 31       	cpi	r18, 0x10	; 16
    14c4:	81 f1       	breq	.+96     	; 0x1526 <__ultoa_invert+0x6c>
    14c6:	e8 94       	clt
    14c8:	6f 93       	push	r22
    14ca:	6e 7f       	andi	r22, 0xFE	; 254
    14cc:	6e 5f       	subi	r22, 0xFE	; 254
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	af 4f       	sbci	r26, 0xFF	; 255
    14d6:	b1 e0       	ldi	r27, 0x01	; 1
    14d8:	3e d0       	rcall	.+124    	; 0x1556 <__ultoa_invert+0x9c>
    14da:	b4 e0       	ldi	r27, 0x04	; 4
    14dc:	3c d0       	rcall	.+120    	; 0x1556 <__ultoa_invert+0x9c>
    14de:	67 0f       	add	r22, r23
    14e0:	78 1f       	adc	r23, r24
    14e2:	89 1f       	adc	r24, r25
    14e4:	9a 1f       	adc	r25, r26
    14e6:	a1 1d       	adc	r26, r1
    14e8:	68 0f       	add	r22, r24
    14ea:	79 1f       	adc	r23, r25
    14ec:	8a 1f       	adc	r24, r26
    14ee:	91 1d       	adc	r25, r1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	6a 0f       	add	r22, r26
    14f4:	71 1d       	adc	r23, r1
    14f6:	81 1d       	adc	r24, r1
    14f8:	91 1d       	adc	r25, r1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	20 d0       	rcall	.+64     	; 0x153e <__ultoa_invert+0x84>
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__ultoa_invert+0x48>
    1500:	68 94       	set
    1502:	3f 91       	pop	r19
    1504:	2a e0       	ldi	r18, 0x0A	; 10
    1506:	26 9f       	mul	r18, r22
    1508:	11 24       	eor	r1, r1
    150a:	30 19       	sub	r19, r0
    150c:	30 5d       	subi	r19, 0xD0	; 208
    150e:	31 93       	st	Z+, r19
    1510:	de f6       	brtc	.-74     	; 0x14c8 <__ultoa_invert+0xe>
    1512:	cf 01       	movw	r24, r30
    1514:	08 95       	ret
    1516:	46 2f       	mov	r20, r22
    1518:	47 70       	andi	r20, 0x07	; 7
    151a:	40 5d       	subi	r20, 0xD0	; 208
    151c:	41 93       	st	Z+, r20
    151e:	b3 e0       	ldi	r27, 0x03	; 3
    1520:	0f d0       	rcall	.+30     	; 0x1540 <__ultoa_invert+0x86>
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__ultoa_invert+0x5c>
    1524:	f6 cf       	rjmp	.-20     	; 0x1512 <__ultoa_invert+0x58>
    1526:	46 2f       	mov	r20, r22
    1528:	4f 70       	andi	r20, 0x0F	; 15
    152a:	40 5d       	subi	r20, 0xD0	; 208
    152c:	4a 33       	cpi	r20, 0x3A	; 58
    152e:	18 f0       	brcs	.+6      	; 0x1536 <__ultoa_invert+0x7c>
    1530:	49 5d       	subi	r20, 0xD9	; 217
    1532:	31 fd       	sbrc	r19, 1
    1534:	40 52       	subi	r20, 0x20	; 32
    1536:	41 93       	st	Z+, r20
    1538:	02 d0       	rcall	.+4      	; 0x153e <__ultoa_invert+0x84>
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__ultoa_invert+0x6c>
    153c:	ea cf       	rjmp	.-44     	; 0x1512 <__ultoa_invert+0x58>
    153e:	b4 e0       	ldi	r27, 0x04	; 4
    1540:	a6 95       	lsr	r26
    1542:	97 95       	ror	r25
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	ba 95       	dec	r27
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__ultoa_invert+0x86>
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 05       	cpc	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	08 95       	ret
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	0a 2e       	mov	r0, r26
    155c:	06 94       	lsr	r0
    155e:	57 95       	ror	r21
    1560:	47 95       	ror	r20
    1562:	37 95       	ror	r19
    1564:	27 95       	ror	r18
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__ultoa_invert+0xa2>
    156a:	62 0f       	add	r22, r18
    156c:	73 1f       	adc	r23, r19
    156e:	84 1f       	adc	r24, r20
    1570:	95 1f       	adc	r25, r21
    1572:	a0 1d       	adc	r26, r0
    1574:	08 95       	ret

00001576 <_exit>:
    1576:	f8 94       	cli

00001578 <__stop_program>:
    1578:	ff cf       	rjmp	.-2      	; 0x1578 <__stop_program>
