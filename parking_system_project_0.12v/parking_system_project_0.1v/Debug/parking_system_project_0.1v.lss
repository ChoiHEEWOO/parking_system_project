
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  000012e8  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  008001da  008001da  00001456  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214c  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eee  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010bd  00000000  00000000  000046d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00005794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000882  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001283  00000000  00000000  0000653e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000077c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3c c2       	rjmp	.+1144   	; 0x4b6 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c7 c4       	rjmp	.+2446   	; 0x9e0 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ee       	ldi	r30, 0xE8	; 232
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3d       	cpi	r26, 0xDA	; 218
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	aa ed       	ldi	r26, 0xDA	; 218
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 30       	cpi	r26, 0x0A	; 10
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c9 d0       	rcall	.+402    	; 0x256 <main>
      c4:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_30>:
	TICK.buzz_1ms++;
	buzz_play();
}

ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	u8 buff=UDR1;
      f0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff);
      f4:	c8 d4       	rcall	.+2448   	; 0xa86 <uart0_tx_char>
	
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <mfrc_print_serial>:
		return RECEIVE_NONE;
	}
}

void mfrc_print_serial(int _type)
{
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
	switch(_type)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	91 05       	cpc	r25, r1
     128:	91 f0       	breq	.+36     	; 0x14e <mfrc_print_serial+0x32>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	91 05       	cpc	r25, r1
     12e:	f1 f0       	breq	.+60     	; 0x16c <mfrc_print_serial+0x50>
     130:	89 2b       	or	r24, r25
     132:	49 f5       	brne	.+82     	; 0x186 <mfrc_print_serial+0x6a>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     134:	82 e3       	ldi	r24, 0x32	; 50
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	aa d4       	rcall	.+2388   	; 0xa8e <uart0_tx_string>
     13a:	c2 ef       	ldi	r28, 0xF2	; 242
     13c:	d2 e0       	ldi	r29, 0x02	; 2
     13e:	06 ef       	ldi	r16, 0xF6	; 246
     140:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			uart0_tx_char(str[i]);
     142:	89 91       	ld	r24, Y+
     144:	a0 d4       	rcall	.+2368   	; 0xa86 <uart0_tx_char>
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     146:	0c 17       	cp	r16, r28
     148:	1d 07       	cpc	r17, r29
     14a:	d9 f7       	brne	.-10     	; 0x142 <mfrc_print_serial+0x26>
     14c:	1c c0       	rjmp	.+56     	; 0x186 <mfrc_print_serial+0x6a>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     14e:	8c e3       	ldi	r24, 0x3C	; 60
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	9d d4       	rcall	.+2362   	; 0xa8e <uart0_tx_string>
     154:	c2 ef       	ldi	r28, 0xF2	; 242
     156:	d2 e0       	ldi	r29, 0x02	; 2
     158:	06 ef       	ldi	r16, 0xF6	; 246
     15a:	12 e0       	ldi	r17, 0x02	; 2
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(IntToString(str[i]));
     15c:	89 91       	ld	r24, Y+
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	d9 d4       	rcall	.+2482   	; 0xb14 <IntToString>
     162:	95 d4       	rcall	.+2346   	; 0xa8e <uart0_tx_string>
     164:	c0 17       	cp	r28, r16
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     166:	d1 07       	cpc	r29, r17
     168:	c9 f7       	brne	.-14     	; 0x15c <mfrc_print_serial+0x40>
     16a:	0d c0       	rjmp	.+26     	; 0x186 <mfrc_print_serial+0x6a>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     16c:	84 e4       	ldi	r24, 0x44	; 68
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	8e d4       	rcall	.+2332   	; 0xa8e <uart0_tx_string>
     172:	c2 ef       	ldi	r28, 0xF2	; 242
     174:	d2 e0       	ldi	r29, 0x02	; 2
     176:	06 ef       	ldi	r16, 0xF6	; 246
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			uart0_tx_string(HexToString(str[i]));
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	89 91       	ld	r24, Y+
     17c:	fa d4       	rcall	.+2548   	; 0xb72 <HexToString>
     17e:	87 d4       	rcall	.+2318   	; 0xa8e <uart0_tx_string>
     180:	c0 17       	cp	r28, r16
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     182:	d1 07       	cpc	r29, r17
     184:	d1 f7       	brne	.-12     	; 0x17a <mfrc_print_serial+0x5e>
     186:	df 91       	pop	r29
		
		break;
		
	}
	
}
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <setSoundClip>:
     190:	81 30       	cpi	r24, 0x01	; 1

void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 switch(clip)
     192:	69 f0       	breq	.+26     	; 0x1ae <setSoundClip+0x1e>
     194:	18 f0       	brcs	.+6      	; 0x19c <setSoundClip+0xc>
     196:	82 30       	cpi	r24, 0x02	; 2
     198:	b9 f0       	breq	.+46     	; 0x1c8 <setSoundClip+0x38>
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <setSoundClip+0x50>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     19c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <music_flag>
     1a0:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <music_flag+0x1>
     1a4:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <music_flag+0x2>
     1a8:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <music_flag+0x3>
     1ac:	19 c0       	rjmp	.+50     	; 0x1e0 <setSoundClip+0x50>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <music_flag>
     1ba:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <music_flag+0x1>
     1be:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <music_flag+0x2>
     1c2:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <music_flag+0x3>
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <setSoundClip+0x50>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <music_flag>
     1d4:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <music_flag+0x1>
     1d8:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <music_flag+0x2>
     1dc:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <music_flag+0x3>
// 		 case BUZZ_BEEP: music_flag=BUZZ_BEEP; break;
// 		 case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
// 		 case BUZZ_POWERON: music_flag=BUZZ_POWERON; break;
// 		 case BUZZ_DOOR_OPEN: music_flag=BUZZ_DOOR_OPEN; break;
	 }
	 TICK.buzz_1ms=0;
     1e0:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <TICK+0x4>
     1e4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <TICK+0x5>
     1e8:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <TICK+0x6>
     1ec:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <TICK+0x7>
     1f0:	08 95       	ret

000001f2 <mfrc_serial_data_receive>:
    }
}

char mfrc_serial_data_receive(void){
	
	byte = mfrc522_request(PICC_REQALL,str);//
     1f2:	62 ef       	ldi	r22, 0xF2	; 242
     1f4:	72 e0       	ldi	r23, 0x02	; 2
     1f6:	82 e5       	ldi	r24, 0x52	; 82
     1f8:	04 d3       	rcall	.+1544   	; 0x802 <mfrc522_request>
     1fa:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <byte>
	//uart0_tx_string(IntToString(byte));
	
	if(byte==CARD_FOUND&&detected_flag==0){//&& detected_flag==0
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	31 f5       	brne	.+76     	; 0x24e <mfrc_serial_data_receive+0x5c>
     202:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     206:	81 11       	cpse	r24, r1
     208:	22 c0       	rjmp	.+68     	; 0x24e <mfrc_serial_data_receive+0x5c>
		//카드 인식이 된 경우.
		detected_flag=1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
		byte=mfrc522_get_card_serial(str);
     210:	82 ef       	ldi	r24, 0xF2	; 242
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	28 d3       	rcall	.+1616   	; 0x866 <mfrc522_get_card_serial>
     216:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <byte>
		
		if(byte==CARD_FOUND){
     21a:	81 30       	cpi	r24, 0x01	; 1
			setSoundClip(BUZZ_SUCCESS);
     21c:	89 f4       	brne	.+34     	; 0x240 <mfrc_serial_data_receive+0x4e>
			//uart0_tx_string_IT("\nuid: ");
			uart0_tx_string("[CHECK UID]: ");
     21e:	b8 df       	rcall	.-144    	; 0x190 <setSoundClip>
     220:	8c e4       	ldi	r24, 0x4C	; 76
     222:	91 e0       	ldi	r25, 0x01	; 1
			//_delay_ms(20);
			mfrc_print_serial(ASCII_TYPE);
     224:	34 d4       	rcall	.+2152   	; 0xa8e <uart0_tx_string>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
			mfrc_print_serial(DECIMAL_TYPE);
     22a:	78 df       	rcall	.-272    	; 0x11c <mfrc_print_serial>
     22c:	81 e0       	ldi	r24, 0x01	; 1
			mfrc_print_serial(HEXDECIMAL_TYPE);
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	75 df       	rcall	.-278    	; 0x11c <mfrc_print_serial>
     232:	82 e0       	ldi	r24, 0x02	; 2
			uart0_tx_char('\n');
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	72 df       	rcall	.-284    	; 0x11c <mfrc_print_serial>
			return RECEIVE_SUCC;
     238:	8a e0       	ldi	r24, 0x0A	; 10
     23a:	25 d4       	rcall	.+2122   	; 0xa86 <uart0_tx_char>
		}
		else {
			setSoundClip(BUZZ_FAIL);
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	08 95       	ret
     240:	82 e0       	ldi	r24, 0x02	; 2
			uart0_tx_string("\nerror\n");
     242:	a6 df       	rcall	.-180    	; 0x190 <setSoundClip>
     244:	8a e5       	ldi	r24, 0x5A	; 90
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	22 d4       	rcall	.+2116   	; 0xa8e <uart0_tx_string>
			//uart0_tx_string_IT("error\n");
			return RECEIVE_FAIL;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	08 95       	ret
		}
	}
	else
	{
		detected_flag=0;
     24e:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
		return RECEIVE_NONE;
     252:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     254:	08 95       	ret

00000256 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     256:	78 94       	sei
	DDRA|=0x03;
     258:	8a b3       	in	r24, 0x1a	; 26
     25a:	83 60       	ori	r24, 0x03	; 3
     25c:	8a bb       	out	0x1a, r24	; 26
	
	
	//사용하는 기능들 초기화 작업
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
     25e:	1f 92       	push	r1
     260:	1f 92       	push	r1
     262:	1f 92       	push	r1
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	8f 93       	push	r24
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	8f 93       	push	r24
     26c:	32 d3       	rcall	.+1636   	; 0x8d2 <spi_init>
	//spi_master_tx(0x67);
	mfrc522_init();
     26e:	72 d1       	rcall	.+740    	; 0x554 <mfrc522_init>
     270:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(0,9600);
     272:	75 e2       	ldi	r23, 0x25	; 37
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	da d3       	rcall	.+1972   	; 0xa2e <uart_init>
     27a:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(1,9600);//esp8266()
     27c:	75 e2       	ldi	r23, 0x25	; 37
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	d5 d3       	rcall	.+1962   	; 0xa2e <uart_init>
	
	mfrc522_version_check();
     284:	86 d1       	rcall	.+780    	; 0x592 <mfrc522_version_check>
     286:	82 e0       	ldi	r24, 0x02	; 2
	byte=mfrc522_read(ComIEnReg);
     288:	5d d1       	rcall	.+698    	; 0x544 <mfrc522_read>
     28a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <byte>
     28e:	68 2f       	mov	r22, r24
	mfrc522_write(ComIEnReg,byte|0x20);
     290:	60 62       	ori	r22, 0x20	; 32
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	48 d1       	rcall	.+656    	; 0x526 <mfrc522_write>
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	55 d1       	rcall	.+682    	; 0x544 <mfrc522_read>
	byte=mfrc522_read(DivIEnReg);
     29a:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <byte>
     29e:	68 2f       	mov	r22, r24
	mfrc522_write(DivIEnReg,byte|0x80);
     2a0:	60 68       	ori	r22, 0x80	; 128
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	40 d1       	rcall	.+640    	; 0x526 <mfrc522_write>
     2a6:	f8 94       	cli
	cli();
     2a8:	81 e0       	ldi	r24, 0x01	; 1
	setSoundClip(BUZZ_SUCCESS);
     2aa:	72 df       	rcall	.-284    	; 0x190 <setSoundClip>
     2ac:	5e d3       	rcall	.+1724   	; 0x96a <timer0_init>
     2ae:	66 d3       	rcall	.+1740   	; 0x97c <timer3_init>
	timer0_init();
     2b0:	78 94       	sei
     2b2:	2f ef       	ldi	r18, 0xFF	; 255
	timer3_init();
     2b4:	87 ea       	ldi	r24, 0xA7	; 167
     2b6:	91 e6       	ldi	r25, 0x61	; 97
	sei();
     2b8:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ba:	80 40       	sbci	r24, 0x00	; 0
     2bc:	90 40       	sbci	r25, 0x00	; 0
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x62>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x6c>
     2c2:	00 00       	nop
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	c1 e0       	ldi	r28, 0x01	; 1
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	5e df       	rcall	.-324    	; 0x190 <setSoundClip>
		//_delay_ms(20);
		//_delay_ms(1000);
		
		setSoundClip(BUZZ_FAIL);
		_delay_ms(1000);
		PORTA^=0x01;
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
    while (1) 
    {//절대 루프 안에 delay가 길게 걸리면 않도록 주의해야 함.
		//_delay_ms(20);
		//_delay_ms(1000);
		
		setSoundClip(BUZZ_FAIL);
     2d6:	83 ed       	ldi	r24, 0xD3	; 211
     2d8:	90 e3       	ldi	r25, 0x30	; 48
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x84>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x8e>
     2e4:	00 00       	nop
     2e6:	8b b3       	in	r24, 0x1b	; 27
     2e8:	8c 27       	eor	r24, r28
		_delay_ms(1000);
		PORTA^=0x01;
     2ea:	8b bb       	out	0x1b, r24	; 27
     2ec:	62 e6       	ldi	r22, 0x62	; 98
     2ee:	71 e0       	ldi	r23, 0x01	; 1
		uart1_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
     2f0:	8d e6       	ldi	r24, 0x6D	; 109
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	6d d4       	rcall	.+2266   	; 0xbd0 <send_SSID_TEST>
     2f6:	e1 d3       	rcall	.+1986   	; 0xaba <uart1_tx_string>
     2f8:	8b b3       	in	r24, 0x1b	; 27
     2fa:	8c 27       	eor	r24, r28
     2fc:	8b bb       	out	0x1b, r24	; 27
     2fe:	79 df       	rcall	.-270    	; 0x1f2 <mfrc_serial_data_receive>
		PORTA^=0x01;
     300:	e7 cf       	rjmp	.-50     	; 0x2d0 <main+0x7a>

00000302 <buzz_MUTE>:
     302:	eb e8       	ldi	r30, 0x8B	; 139
     304:	f0 e0       	ldi	r31, 0x00	; 0
		if(mfrc_serial_data_receive()==RECEIVE_SUCC); //받은 데이터 처리 루틴
     306:	80 81       	ld	r24, Z
     308:	8f 7b       	andi	r24, 0xBF	; 191
     30a:	80 83       	st	Z, r24
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
	 music_flag = BUZZ_MUTE;
     30c:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <music_flag>
     310:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <music_flag+0x1>
     314:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <music_flag+0x2>
     318:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <music_flag+0x3>
     31c:	08 95       	ret

0000031e <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     31e:	00 97       	sbiw	r24, 0x00	; 0
     320:	39 f0       	breq	.+14     	; 0x330 <setSoundNote+0x12>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     322:	eb e8       	ldi	r30, 0x8B	; 139
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	20 81       	ld	r18, Z
     328:	20 64       	ori	r18, 0x40	; 64
     32a:	20 83       	st	Z, r18
     32c:	37 c3       	rjmp	.+1646   	; 0x99c <setICR3>
     32e:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     330:	eb e8       	ldi	r30, 0x8B	; 139
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8f 7b       	andi	r24, 0xBF	; 191
     338:	80 83       	st	Z, r24
     33a:	08 95       	ret

0000033c <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     33c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <music_flag>
     340:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <music_flag+0x1>
     344:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <music_flag+0x2>
     348:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <music_flag+0x3>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	91 05       	cpc	r25, r1
     350:	a1 05       	cpc	r26, r1
     352:	b1 05       	cpc	r27, r1
     354:	49 f0       	breq	.+18     	; 0x368 <buzz_play+0x2c>
     356:	30 f0       	brcs	.+12     	; 0x364 <buzz_play+0x28>
     358:	02 97       	sbiw	r24, 0x02	; 2
     35a:	a1 05       	cpc	r26, r1
     35c:	b1 05       	cpc	r27, r1
     35e:	09 f4       	brne	.+2      	; 0x362 <buzz_play+0x26>
     360:	68 c0       	rjmp	.+208    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     362:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     364:	ce cf       	rjmp	.-100    	; 0x302 <buzz_MUTE>
     366:	08 95       	ret
		  
		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     368:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     36c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     370:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     374:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     378:	88 3c       	cpi	r24, 0xC8	; 200
     37a:	91 05       	cpc	r25, r1
     37c:	a1 05       	cpc	r26, r1
     37e:	b1 05       	cpc	r27, r1
     380:	20 f4       	brcc	.+8      	; 0x38a <buzz_play+0x4e>
     382:	8b e9       	ldi	r24, 0x9B	; 155
     384:	96 e0       	ldi	r25, 0x06	; 6
     386:	cb cf       	rjmp	.-106    	; 0x31e <setSoundNote>
     388:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     38a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     38e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     392:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     396:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     39a:	82 3d       	cpi	r24, 0xD2	; 210
     39c:	91 05       	cpc	r25, r1
     39e:	a1 05       	cpc	r26, r1
     3a0:	b1 05       	cpc	r27, r1
     3a2:	21 f4       	brne	.+8      	; 0x3ac <buzz_play+0x70>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	ba cf       	rjmp	.-140    	; 0x31e <setSoundNote>
     3aa:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     3ac:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     3b0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     3b4:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     3b8:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     3bc:	8c 3d       	cpi	r24, 0xDC	; 220
     3be:	91 05       	cpc	r25, r1
     3c0:	a1 05       	cpc	r26, r1
     3c2:	b1 05       	cpc	r27, r1
     3c4:	21 f4       	brne	.+8      	; 0x3ce <buzz_play+0x92>
     3c6:	87 ee       	ldi	r24, 0xE7	; 231
     3c8:	95 e0       	ldi	r25, 0x05	; 5
     3ca:	a9 cf       	rjmp	.-174    	; 0x31e <setSoundNote>
     3cc:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     3ce:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     3d2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     3d6:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     3da:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     3de:	80 39       	cpi	r24, 0x90	; 144
     3e0:	91 40       	sbci	r25, 0x01	; 1
     3e2:	a1 05       	cpc	r26, r1
     3e4:	b1 05       	cpc	r27, r1
     3e6:	21 f4       	brne	.+8      	; 0x3f0 <buzz_play+0xb4>
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	98 cf       	rjmp	.-208    	; 0x31e <setSoundNote>
     3ee:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     3f0:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     3f4:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     3f8:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     3fc:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     400:	8e 3a       	cpi	r24, 0xAE	; 174
     402:	91 40       	sbci	r25, 0x01	; 1
     404:	a1 05       	cpc	r26, r1
     406:	b1 05       	cpc	r27, r1
     408:	21 f4       	brne	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40a:	85 e6       	ldi	r24, 0x65	; 101
     40c:	94 e0       	ldi	r25, 0x04	; 4
     40e:	87 cf       	rjmp	.-242    	; 0x31e <setSoundNote>
     410:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     412:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     416:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     41a:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     41e:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     422:	88 35       	cpi	r24, 0x58	; 88
     424:	92 40       	sbci	r25, 0x02	; 2
     426:	a1 05       	cpc	r26, r1
     428:	b1 05       	cpc	r27, r1
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	43 c0       	rjmp	.+134    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     42e:	69 cf       	rjmp	.-302    	; 0x302 <buzz_MUTE>
     430:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     432:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     436:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     43a:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     43e:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     442:	84 36       	cpi	r24, 0x64	; 100
     444:	91 05       	cpc	r25, r1
     446:	a1 05       	cpc	r26, r1
     448:	b1 05       	cpc	r27, r1
     44a:	20 f4       	brcc	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44c:	82 e1       	ldi	r24, 0x12	; 18
     44e:	94 e0       	ldi	r25, 0x04	; 4
     450:	66 cf       	rjmp	.-308    	; 0x31e <setSoundNote>
     452:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     454:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     458:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     45c:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     460:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     464:	88 3c       	cpi	r24, 0xC8	; 200
     466:	91 05       	cpc	r25, r1
     468:	a1 05       	cpc	r26, r1
     46a:	b1 05       	cpc	r27, r1
     46c:	20 f4       	brcc	.+8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	55 cf       	rjmp	.-342    	; 0x31e <setSoundNote>
     474:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     476:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     47a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     47e:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     482:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     486:	8c 32       	cpi	r24, 0x2C	; 44
     488:	91 40       	sbci	r25, 0x01	; 1
     48a:	a1 05       	cpc	r26, r1
     48c:	b1 05       	cpc	r27, r1
     48e:	20 f4       	brcc	.+8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     490:	82 e1       	ldi	r24, 0x12	; 18
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	44 cf       	rjmp	.-376    	; 0x31e <setSoundNote>
     496:	08 95       	ret
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     498:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <TICK+0x4>
     49c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <TICK+0x5>
     4a0:	a0 91 08 03 	lds	r26, 0x0308	; 0x800308 <TICK+0x6>
     4a4:	b0 91 09 03 	lds	r27, 0x0309	; 0x800309 <TICK+0x7>
     4a8:	82 3c       	cpi	r24, 0xC2	; 194
     4aa:	91 40       	sbci	r25, 0x01	; 1
     4ac:	a1 05       	cpc	r26, r1
     4ae:	b1 05       	cpc	r27, r1
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	27 cf       	rjmp	.-434    	; 0x302 <buzz_MUTE>
     4b4:	08 95       	ret

000004b6 <__vector_15>:
void buzz_play();
void buzz_MUTE();
void setSoundNote(int note);

ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	0b b6       	in	r0, 0x3b	; 59
     4c2:	0f 92       	push	r0
     4c4:	2f 93       	push	r18
     4c6:	3f 93       	push	r19
     4c8:	4f 93       	push	r20
     4ca:	5f 93       	push	r21
     4cc:	6f 93       	push	r22
     4ce:	7f 93       	push	r23
     4d0:	8f 93       	push	r24
     4d2:	9f 93       	push	r25
     4d4:	af 93       	push	r26
     4d6:	bf 93       	push	r27
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
	//dummy code to check 
	PORTA ^=0x02;
     4dc:	9b b3       	in	r25, 0x1b	; 27
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	89 27       	eor	r24, r25
     4e2:	8b bb       	out	0x1b, r24	; 27
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//1khz마다 증가
	TICK.buzz_1ms++;
     4e4:	e2 e0       	ldi	r30, 0x02	; 2
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	84 81       	ldd	r24, Z+4	; 0x04
     4ea:	95 81       	ldd	r25, Z+5	; 0x05
     4ec:	a6 81       	ldd	r26, Z+6	; 0x06
     4ee:	b7 81       	ldd	r27, Z+7	; 0x07
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	a1 1d       	adc	r26, r1
     4f4:	b1 1d       	adc	r27, r1
     4f6:	84 83       	std	Z+4, r24	; 0x04
     4f8:	95 83       	std	Z+5, r25	; 0x05
     4fa:	a6 83       	std	Z+6, r26	; 0x06
     4fc:	b7 83       	std	Z+7, r27	; 0x07
	buzz_play();
     4fe:	1e df       	rcall	.-452    	; 0x33c <buzz_play>
}
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value)
{
     526:	cf 93       	push	r28
     528:	c6 2f       	mov	r28, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
     52a:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
     52c:	88 0f       	add	r24, r24
     52e:	8e 77       	andi	r24, 0x7E	; 126
     530:	13 d2       	rcall	.+1062   	; 0x958 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
     532:	8c 2f       	mov	r24, r28
     534:	11 d2       	rcall	.+1058   	; 0x958 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
     536:	a8 9a       	sbi	0x15, 0	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <mfrc522_reset>:


void mfrc522_reset(){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset); // 0x01<<1 , 0x0F	
     53c:	6f e0       	ldi	r22, 0x0F	; 15
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	f2 cf       	rjmp	.-28     	; 0x526 <mfrc522_write>
     542:	08 95       	ret

00000544 <mfrc522_read>:


unsigned char mfrc522_read(unsigned char reg){
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(0x01);
     544:	a8 98       	cbi	0x15, 0	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
     546:	88 0f       	add	r24, r24
     548:	8e 77       	andi	r24, 0x7E	; 126
     54a:	80 68       	ori	r24, 0x80	; 128
     54c:	05 d2       	rcall	.+1034   	; 0x958 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
     54e:	08 d2       	rcall	.+1040   	; 0x960 <spi_master_rx>
     550:	a8 9a       	sbi	0x15, 0	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= 0x01;
     552:	08 95       	ret

00000554 <mfrc522_init>:
	
	return value;
}
     554:	a0 9a       	sbi	0x14, 0	; 20
void mfrc522_init()
{
	unsigned char byte;
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=0x01; // C포트 0번핀을 SS핀으로 사용
	SS_PORT|=0x01; //Default HIGH
     556:	a8 9a       	sbi	0x15, 0	; 21
	mfrc522_reset();
     558:	f1 df       	rcall	.-30     	; 0x53c <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D); //Timer setting and prescalingH
     55a:	6d e8       	ldi	r22, 0x8D	; 141
     55c:	8a e2       	ldi	r24, 0x2A	; 42
     55e:	e3 df       	rcall	.-58     	; 0x526 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E); //prescalingL  ==> pre:0xD3E=3390
     560:	6e e3       	ldi	r22, 0x3E	; 62
     562:	8b e2       	ldi	r24, 0x2B	; 43
     564:	e0 df       	rcall	.-64     	; 0x526 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30); //16-bit timer reload value high.
     566:	6e e1       	ldi	r22, 0x1E	; 30
     568:	8c e2       	ldi	r24, 0x2C	; 44
     56a:	dd df       	rcall	.-70     	; 0x526 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8d e2       	ldi	r24, 0x2D	; 45
     570:	da df       	rcall	.-76     	; 0x526 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40); //Controls transmit modulation settings. (Force100ASK)
     572:	60 e4       	ldi	r22, 0x40	; 64
     574:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D); //Defines general mode settings for transmitting and receiving.
     576:	d7 df       	rcall	.-82     	; 0x526 <mfrc522_write>
     578:	6d e3       	ldi	r22, 0x3D	; 61
     57a:	81 e1       	ldi	r24, 0x11	; 17
     57c:	d4 df       	rcall	.-88     	; 0x526 <mfrc522_write>
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg);
     57e:	84 e1       	ldi	r24, 0x14	; 20
     580:	e1 df       	rcall	.-62     	; 0x544 <mfrc522_read>
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
     582:	98 2f       	mov	r25, r24
     584:	93 70       	andi	r25, 0x03	; 3
     586:	21 f4       	brne	.+8      	; 0x590 <mfrc522_init+0x3c>
	{
		mfrc522_write(TxControlReg,byte|0x03);
     588:	68 2f       	mov	r22, r24
     58a:	63 60       	ori	r22, 0x03	; 3
     58c:	84 e1       	ldi	r24, 0x14	; 20
     58e:	cb cf       	rjmp	.-106    	; 0x526 <mfrc522_write>
     590:	08 95       	ret

00000592 <mfrc522_version_check>:
     592:	cf 93       	push	r28

void mfrc522_version_check(){
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg);
     594:	87 e3       	ldi	r24, 0x37	; 55
     596:	d6 df       	rcall	.-84     	; 0x544 <mfrc522_read>
     598:	c8 2f       	mov	r28, r24
	uart0_tx_string_IT(IntToString(byte));
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	bb d2       	rcall	.+1398   	; 0xb14 <IntToString>
     59e:	9b d2       	rcall	.+1334   	; 0xad6 <uart0_tx_string_IT>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	89 ef       	ldi	r24, 0xF9	; 249
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <mfrc522_version_check+0x14>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <mfrc522_version_check+0x1e>
     5b0:	00 00       	nop
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(byte == 0x92)
     5b2:	c2 39       	cpi	r28, 0x92	; 146
	{
		uart0_tx_string("\n[Detected Version]: MIFARE RC522v2\n");
     5b4:	21 f4       	brne	.+8      	; 0x5be <mfrc522_version_check+0x2c>
     5b6:	84 e7       	ldi	r24, 0x74	; 116
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	69 d2       	rcall	.+1234   	; 0xa8e <uart0_tx_string>
     5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <mfrc522_version_check+0x40>
		
	}else if(byte == 0x91 || byte==0x90)
     5be:	c0 59       	subi	r28, 0x90	; 144
     5c0:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string("\n[Detected Version]: MIFARE RC522v1\n");
     5c2:	20 f4       	brcc	.+8      	; 0x5cc <mfrc522_version_check+0x3a>
     5c4:	89 e9       	ldi	r24, 0x99	; 153
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	62 d2       	rcall	.+1220   	; 0xa8e <uart0_tx_string>
	}else
	{
		uart0_tx_string("\nNo reader found\n");
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <mfrc522_version_check+0x40>
     5cc:	8e eb       	ldi	r24, 0xBE	; 190
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	5e d2       	rcall	.+1212   	; 0xa8e <uart0_tx_string>
	}
	
}
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
     5d6:	3f 92       	push	r3
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	98 2e       	mov	r9, r24
     5fa:	f6 2e       	mov	r15, r22
     5fc:	e7 2e       	mov	r14, r23
     5fe:	44 2e       	mov	r4, r20
     600:	82 2e       	mov	r8, r18
     602:	33 2e       	mov	r3, r19
     604:	58 01       	movw	r10, r16
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
     606:	8c e0       	ldi	r24, 0x0C	; 12
     608:	98 16       	cp	r9, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <mfrc522_to_card+0x38>
     60c:	ba c0       	rjmp	.+372    	; 0x782 <mfrc522_to_card+0x1ac>
     60e:	ee e0       	ldi	r30, 0x0E	; 14
     610:	9e 12       	cpse	r9, r30
     612:	03 c0       	rjmp	.+6      	; 0x61a <mfrc522_to_card+0x44>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     614:	10 e1       	ldi	r17, 0x10	; 16

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
     616:	02 e1       	ldi	r16, 0x12	; 18
     618:	02 c0       	rjmp	.+4      	; 0x61e <mfrc522_to_card+0x48>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
     61a:	10 e0       	ldi	r17, 0x00	; 0
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
     61c:	00 e0       	ldi	r16, 0x00	; 0
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
     61e:	84 e0       	ldi	r24, 0x04	; 4
     620:	91 df       	rcall	.-222    	; 0x544 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     622:	68 2f       	mov	r22, r24
     624:	6f 77       	andi	r22, 0x7F	; 127
     626:	84 e0       	ldi	r24, 0x04	; 4
     628:	7e df       	rcall	.-260    	; 0x526 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg);
     62a:	8a e0       	ldi	r24, 0x0A	; 10
     62c:	8b df       	rcall	.-234    	; 0x544 <mfrc522_read>
     62e:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     630:	60 68       	ori	r22, 0x80	; 128
     632:	8a e0       	ldi	r24, 0x0A	; 10
     634:	78 df       	rcall	.-272    	; 0x526 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	75 df       	rcall	.-278    	; 0x526 <mfrc522_write>
     63c:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     63e:	61 2c       	mov	r6, r1
     640:	71 2c       	mov	r7, r1
     642:	41 14       	cp	r4, r1
     644:	51 04       	cpc	r5, r1
     646:	61 04       	cpc	r6, r1
     648:	71 04       	cpc	r7, r1
     64a:	19 f4       	brne	.+6      	; 0x652 <mfrc522_to_card+0x7c>
     64c:	14 c0       	rjmp	.+40     	; 0x676 <mfrc522_to_card+0xa0>
     64e:	10 e3       	ldi	r17, 0x30	; 48
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     650:	07 e7       	ldi	r16, 0x77	; 119
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
     652:	cf 2d       	mov	r28, r15
     654:	de 2d       	mov	r29, r14
     656:	c1 2c       	mov	r12, r1
     658:	d1 2c       	mov	r13, r1
     65a:	76 01       	movw	r14, r12
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
		mfrc522_write(FIFODataReg, send_data[i]);
     65c:	69 91       	ld	r22, Y+
     65e:	89 e0       	ldi	r24, 0x09	; 9
     660:	62 df       	rcall	.-316    	; 0x526 <mfrc522_write>
     662:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     664:	cf 1a       	sub	r12, r31
     666:	df 0a       	sbc	r13, r31
     668:	ef 0a       	sbc	r14, r31
     66a:	ff 0a       	sbc	r15, r31
     66c:	c4 14       	cp	r12, r4
     66e:	d5 04       	cpc	r13, r5
     670:	e6 04       	cpc	r14, r6
     672:	f7 04       	cpc	r15, r7
     674:	98 f3       	brcs	.-26     	; 0x65c <mfrc522_to_card+0x86>
	{
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     676:	69 2d       	mov	r22, r9
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	55 df       	rcall	.-342    	; 0x526 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
     67c:	8c e0       	ldi	r24, 0x0C	; 12
     67e:	98 12       	cpse	r9, r24
	{
		n=mfrc522_read(BitFramingReg);
     680:	06 c0       	rjmp	.+12     	; 0x68e <mfrc522_to_card+0xb8>
     682:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80);
     684:	5f df       	rcall	.-322    	; 0x544 <mfrc522_read>
     686:	68 2f       	mov	r22, r24
     688:	60 68       	ori	r22, 0x80	; 128
     68a:	8d e0       	ldi	r24, 0x0D	; 13
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
     68c:	4c df       	rcall	.-360    	; 0x526 <mfrc522_write>
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	59 df       	rcall	.-334    	; 0x544 <mfrc522_read>
     692:	f8 2e       	mov	r15, r24
     694:	c0 e0       	ldi	r28, 0x00	; 0
     696:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     698:	11 60       	ori	r17, 0x01	; 1
     69a:	09 c0       	rjmp	.+18     	; 0x6ae <mfrc522_to_card+0xd8>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	52 df       	rcall	.-348    	; 0x544 <mfrc522_read>
     6a0:	f8 2e       	mov	r15, r24
     6a2:	21 96       	adiw	r28, 0x01	; 1
     6a4:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     6a6:	e7 e0       	ldi	r30, 0x07	; 7
     6a8:	de 07       	cpc	r29, r30
     6aa:	09 f4       	brne	.+2      	; 0x6ae <mfrc522_to_card+0xd8>
     6ac:	83 c0       	rjmp	.+262    	; 0x7b4 <mfrc522_to_card+0x1de>
     6ae:	81 2f       	mov	r24, r17
     6b0:	8f 21       	and	r24, r15
     6b2:	a1 f3       	breq	.-24     	; 0x69c <mfrc522_to_card+0xc6>
     6b4:	87 c0       	rjmp	.+270    	; 0x7c4 <mfrc522_to_card+0x1ee>
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
     6b6:	01 70       	andi	r16, 0x01	; 1
     6b8:	f0 22       	and	r15, r16
			{
				status = CARD_NOT_FOUND;			//??
     6ba:	11 f0       	breq	.+4      	; 0x6c0 <mfrc522_to_card+0xea>
     6bc:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <mfrc522_to_card+0xec>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
     6c0:	c1 e0       	ldi	r28, 0x01	; 1
     6c2:	fc e0       	ldi	r31, 0x0C	; 12
     6c4:	9f 12       	cpse	r9, r31
			{
				n = mfrc522_read(FIFOLevelReg);
     6c6:	8a c0       	rjmp	.+276    	; 0x7dc <mfrc522_to_card+0x206>
     6c8:	8a e0       	ldi	r24, 0x0A	; 10
     6ca:	3c df       	rcall	.-392    	; 0x544 <mfrc522_read>
     6cc:	48 2e       	mov	r4, r24
				lastBits = mfrc522_read(ControlReg) & 0x07;
     6ce:	8c e0       	ldi	r24, 0x0C	; 12
     6d0:	39 df       	rcall	.-398    	; 0x544 <mfrc522_read>
     6d2:	28 2f       	mov	r18, r24
     6d4:	27 70       	andi	r18, 0x07	; 7
     6d6:	a9 f0       	breq	.+42     	; 0x702 <mfrc522_to_card+0x12c>
				if (lastBits)
     6d8:	84 2d       	mov	r24, r4
				{
					*back_data_len = (n-1)*8 + lastBits;
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	82 0f       	add	r24, r18
     6ec:	91 1d       	adc	r25, r1
     6ee:	09 2e       	mov	r0, r25
     6f0:	00 0c       	add	r0, r0
     6f2:	aa 0b       	sbc	r26, r26
     6f4:	bb 0b       	sbc	r27, r27
     6f6:	f5 01       	movw	r30, r10
     6f8:	80 83       	st	Z, r24
     6fa:	91 83       	std	Z+1, r25	; 0x01
     6fc:	a2 83       	std	Z+2, r26	; 0x02
     6fe:	b3 83       	std	Z+3, r27	; 0x03
     700:	11 c0       	rjmp	.+34     	; 0x724 <mfrc522_to_card+0x14e>
     702:	84 2d       	mov	r24, r4
				}
				else
				{
					*back_data_len = n*8;
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	09 2e       	mov	r0, r25
     714:	00 0c       	add	r0, r0
     716:	aa 0b       	sbc	r26, r26
     718:	bb 0b       	sbc	r27, r27
     71a:	f5 01       	movw	r30, r10
     71c:	80 83       	st	Z, r24
     71e:	91 83       	std	Z+1, r25	; 0x01
     720:	a2 83       	std	Z+2, r26	; 0x02
     722:	b3 83       	std	Z+3, r27	; 0x03
     724:	44 20       	and	r4, r4
				}

				if (n == 0)
     726:	71 f0       	breq	.+28     	; 0x744 <mfrc522_to_card+0x16e>
     728:	84 2d       	mov	r24, r4
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     72a:	81 31       	cpi	r24, 0x11	; 17
     72c:	08 f0       	brcs	.+2      	; 0x730 <mfrc522_to_card+0x15a>
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	48 2e       	mov	r4, r24
     732:	51 2c       	mov	r5, r1
     734:	61 2c       	mov	r6, r1
     736:	71 2c       	mov	r7, r1
     738:	41 14       	cp	r4, r1
     73a:	51 04       	cpc	r5, r1
     73c:	61 04       	cpc	r6, r1
     73e:	71 04       	cpc	r7, r1
     740:	29 f4       	brne	.+10     	; 0x74c <mfrc522_to_card+0x176>
     742:	4c c0       	rjmp	.+152    	; 0x7dc <mfrc522_to_card+0x206>
     744:	41 2c       	mov	r4, r1
     746:	51 2c       	mov	r5, r1
     748:	32 01       	movw	r6, r4
     74a:	43 94       	inc	r4
     74c:	08 2d       	mov	r16, r8
     74e:	13 2d       	mov	r17, r3
     750:	c1 2c       	mov	r12, r1
     752:	d1 2c       	mov	r13, r1
     754:	76 01       	movw	r14, r12
				{
					back_data[i] = mfrc522_read(FIFODataReg);
     756:	89 e0       	ldi	r24, 0x09	; 9
     758:	f5 de       	rcall	.-534    	; 0x544 <mfrc522_read>
     75a:	f8 01       	movw	r30, r16
     75c:	81 93       	st	Z+, r24
     75e:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
     760:	ff ef       	ldi	r31, 0xFF	; 255
     762:	cf 1a       	sub	r12, r31
     764:	df 0a       	sbc	r13, r31
     766:	ef 0a       	sbc	r14, r31
     768:	ff 0a       	sbc	r15, r31
     76a:	c4 14       	cp	r12, r4
     76c:	d5 04       	cpc	r13, r5
     76e:	e6 04       	cpc	r14, r6
     770:	f7 04       	cpc	r15, r7
	{
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     772:	88 f3       	brcs	.-30     	; 0x756 <mfrc522_to_card+0x180>
     774:	33 c0       	rjmp	.+102    	; 0x7dc <mfrc522_to_card+0x206>
     776:	6c e0       	ldi	r22, 0x0C	; 12
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     778:	81 e0       	ldi	r24, 0x01	; 1
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
     77a:	d5 de       	rcall	.-598    	; 0x526 <mfrc522_write>
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
     77c:	10 e3       	ldi	r17, 0x30	; 48
     77e:	07 e7       	ldi	r16, 0x77	; 119
     780:	80 cf       	rjmp	.-256    	; 0x682 <mfrc522_to_card+0xac>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	df de       	rcall	.-578    	; 0x544 <mfrc522_read>
     786:	68 2f       	mov	r22, r24
     788:	6f 77       	andi	r22, 0x7F	; 127
     78a:	84 e0       	ldi	r24, 0x04	; 4
	n=mfrc522_read(FIFOLevelReg);
     78c:	cc de       	rcall	.-616    	; 0x526 <mfrc522_write>
     78e:	8a e0       	ldi	r24, 0x0A	; 10
     790:	d9 de       	rcall	.-590    	; 0x544 <mfrc522_read>
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     792:	68 2f       	mov	r22, r24
     794:	60 68       	ori	r22, 0x80	; 128
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	c6 de       	rcall	.-628    	; 0x526 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle);	//NO action; Cancel the current cmd???
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	c3 de       	rcall	.-634    	; 0x526 <mfrc522_write>

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
     7a0:	51 2c       	mov	r5, r1
     7a2:	61 2c       	mov	r6, r1
     7a4:	71 2c       	mov	r7, r1
     7a6:	41 14       	cp	r4, r1
     7a8:	51 04       	cpc	r5, r1
     7aa:	61 04       	cpc	r6, r1
     7ac:	71 04       	cpc	r7, r1
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <mfrc522_to_card+0x1dc>
		n = mfrc522_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
     7b0:	4e cf       	rjmp	.-356    	; 0x64e <mfrc522_to_card+0x78>
     7b2:	e1 cf       	rjmp	.-62     	; 0x776 <mfrc522_to_card+0x1a0>
     7b4:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     7b6:	c6 de       	rcall	.-628    	; 0x544 <mfrc522_read>
     7b8:	68 2f       	mov	r22, r24
     7ba:	6f 77       	andi	r22, 0x7F	; 127
     7bc:	8d e0       	ldi	r24, 0x0D	; 13
     7be:	b3 de       	rcall	.-666    	; 0x526 <mfrc522_write>
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     7c0:	c3 e0       	ldi	r28, 0x03	; 3
     7c2:	0c c0       	rjmp	.+24     	; 0x7dc <mfrc522_to_card+0x206>
		n = mfrc522_read(ComIrqReg);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
     7c4:	8d e0       	ldi	r24, 0x0D	; 13
     7c6:	be de       	rcall	.-644    	; 0x544 <mfrc522_read>
     7c8:	68 2f       	mov	r22, r24
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     7ca:	6f 77       	andi	r22, 0x7F	; 127
     7cc:	8d e0       	ldi	r24, 0x0D	; 13
     7ce:	ab de       	rcall	.-682    	; 0x526 <mfrc522_write>
     7d0:	86 e0       	ldi	r24, 0x06	; 6
     7d2:	b8 de       	rcall	.-656    	; 0x544 <mfrc522_read>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     7d4:	8b 71       	andi	r24, 0x1B	; 27
     7d6:	09 f4       	brne	.+2      	; 0x7da <mfrc522_to_card+0x204>
     7d8:	6e cf       	rjmp	.-292    	; 0x6b6 <mfrc522_to_card+0xe0>
     7da:	c3 e0       	ldi	r28, 0x03	; 3
     7dc:	8c 2f       	mov	r24, r28
     7de:	df 91       	pop	r29
				}
			}
		}
		else
		{
			status = ERROR;
     7e0:	cf 91       	pop	r28
	
	//SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(cmdReg, PCD_IDLE);

	return status;
}
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	3f 90       	pop	r3
     800:	08 95       	ret

00000802 <mfrc522_request>:
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
	
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type)
{
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	00 d0       	rcall	.+0      	; 0x810 <mfrc522_request+0xe>
     810:	00 d0       	rcall	.+0      	; 0x812 <mfrc522_request+0x10>
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	18 2f       	mov	r17, r24
     818:	7b 01       	movw	r14, r22
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     81a:	67 e0       	ldi	r22, 0x07	; 7
     81c:	8d e0       	ldi	r24, 0x0D	; 13
     81e:	83 de       	rcall	.-762    	; 0x526 <mfrc522_write>
	
	tag_type[0] = req_mode;
     820:	f7 01       	movw	r30, r14
     822:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits);
     824:	8e 01       	movw	r16, r28
     826:	0f 5f       	subi	r16, 0xFF	; 255
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	97 01       	movw	r18, r14
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	b7 01       	movw	r22, r14
     830:	8c e0       	ldi	r24, 0x0C	; 12
     832:	d1 de       	rcall	.-606    	; 0x5d6 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	59 f4       	brne	.+22     	; 0x84e <mfrc522_request+0x4c>
     838:	49 81       	ldd	r20, Y+1	; 0x01
     83a:	5a 81       	ldd	r21, Y+2	; 0x02
     83c:	6b 81       	ldd	r22, Y+3	; 0x03
     83e:	7c 81       	ldd	r23, Y+4	; 0x04
     840:	40 31       	cpi	r20, 0x10	; 16
     842:	51 05       	cpc	r21, r1
     844:	61 05       	cpc	r22, r1
     846:	71 05       	cpc	r23, r1
     848:	19 f0       	breq	.+6      	; 0x850 <mfrc522_request+0x4e>
	{
		status = ERROR;
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	01 c0       	rjmp	.+2      	; 0x850 <mfrc522_request+0x4e>
     84e:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	08 95       	ret

00000866 <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out)
{
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	00 d0       	rcall	.+0      	; 0x874 <mfrc522_get_card_serial+0xe>
     874:	00 d0       	rcall	.+0      	; 0x876 <mfrc522_get_card_serial+0x10>
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	7c 01       	movw	r14, r24
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	8d e0       	ldi	r24, 0x0D	; 13
     880:	52 de       	rcall	.-860    	; 0x526 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
     882:	83 e9       	ldi	r24, 0x93	; 147
     884:	f7 01       	movw	r30, r14
     886:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
     888:	80 e2       	ldi	r24, 0x20	; 32
     88a:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen);
     88c:	8e 01       	movw	r16, r28
     88e:	0f 5f       	subi	r16, 0xFF	; 255
     890:	1f 4f       	sbci	r17, 0xFF	; 255
     892:	97 01       	movw	r18, r14
     894:	42 e0       	ldi	r20, 0x02	; 2
     896:	b7 01       	movw	r22, r14
     898:	8c e0       	ldi	r24, 0x0C	; 12
     89a:	9d de       	rcall	.-710    	; 0x5d6 <mfrc522_to_card>

	if (status == CARD_FOUND)
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	71 f4       	brne	.+28     	; 0x8bc <mfrc522_get_card_serial+0x56>
     8a0:	f7 01       	movw	r30, r14
     8a2:	a7 01       	movw	r20, r14
     8a4:	4c 5f       	subi	r20, 0xFC	; 252
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
     8aa:	21 91       	ld	r18, Z+
     8ac:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     8ae:	4e 17       	cp	r20, r30
     8b0:	5f 07       	cpc	r21, r31
     8b2:	d9 f7       	brne	.-10     	; 0x8aa <mfrc522_get_card_serial+0x44>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     8b4:	f7 01       	movw	r30, r14
     8b6:	24 81       	ldd	r18, Z+4	; 0x04
     8b8:	92 13       	cpse	r25, r18
		{
			status = ERROR;
     8ba:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	08 95       	ret

000008d2 <spi_init>:
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <spi_init+0x6>
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	88 85       	ldd	r24, Y+8	; 0x08
     8e0:	83 30       	cpi	r24, 0x03	; 3
     8e2:	21 f1       	breq	.+72     	; 0x92c <spi_init+0x5a>
     8e4:	81 11       	cpse	r24, r1
     8e6:	32 c0       	rjmp	.+100    	; 0x94c <spi_init+0x7a>
     8e8:	29 c0       	rjmp	.+82     	; 0x93c <spi_init+0x6a>
     8ea:	9c 91       	ld	r25, X
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	91 93       	st	Z+, r25
     8f0:	e2 17       	cp	r30, r18
     8f2:	f3 07       	cpc	r31, r19
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <spi_init+0x18>
     8f6:	9b 81       	ldd	r25, Y+3	; 0x03
     8f8:	92 30       	cpi	r25, 0x02	; 2
     8fa:	20 f1       	brcs	.+72     	; 0x944 <spi_init+0x72>
     8fc:	1b 82       	std	Y+3, r1	; 0x03
     8fe:	1d b8       	out	0x0d, r1	; 13
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	71 f4       	brne	.+28     	; 0x920 <spi_init+0x4e>
     904:	c0 9a       	sbi	0x18, 0	; 24
     906:	87 b3       	in	r24, 0x17	; 23
     908:	87 60       	ori	r24, 0x07	; 7
     90a:	87 bb       	out	0x17, r24	; 23
     90c:	99 81       	ldd	r25, Y+1	; 0x01
     90e:	8a 81       	ldd	r24, Y+2	; 0x02
     910:	89 2b       	or	r24, r25
     912:	80 65       	ori	r24, 0x50	; 80
     914:	2e b1       	in	r18, 0x0e	; 14
     916:	9b 81       	ldd	r25, Y+3	; 0x03
     918:	92 2b       	or	r25, r18
     91a:	9e b9       	out	0x0e, r25	; 14
     91c:	8d b9       	out	0x0d, r24	; 13
     91e:	16 c0       	rjmp	.+44     	; 0x94c <spi_init+0x7a>
     920:	81 11       	cpse	r24, r1
     922:	14 c0       	rjmp	.+40     	; 0x94c <spi_init+0x7a>
     924:	bb 9a       	sbi	0x17, 3	; 23
     926:	80 e4       	ldi	r24, 0x40	; 64
     928:	8d b9       	out	0x0d, r24	; 13
     92a:	10 c0       	rjmp	.+32     	; 0x94c <spi_init+0x7a>
     92c:	de 01       	movw	r26, r28
     92e:	19 96       	adiw	r26, 0x09	; 9
     930:	fe 01       	movw	r30, r28
     932:	31 96       	adiw	r30, 0x01	; 1
     934:	9e 01       	movw	r18, r28
     936:	2c 5f       	subi	r18, 0xFC	; 252
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	d7 cf       	rjmp	.-82     	; 0x8ea <spi_init+0x18>
     93c:	9b 81       	ldd	r25, Y+3	; 0x03
     93e:	92 30       	cpi	r25, 0x02	; 2
     940:	e8 f6       	brcc	.-70     	; 0x8fc <spi_init+0x2a>
     942:	02 c0       	rjmp	.+4      	; 0x948 <spi_init+0x76>
     944:	1d b8       	out	0x0d, r1	; 13
     946:	de cf       	rjmp	.-68     	; 0x904 <spi_init+0x32>
     948:	1d b8       	out	0x0d, r1	; 13
     94a:	ec cf       	rjmp	.-40     	; 0x924 <spi_init+0x52>
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <spi_master_tx>:
     958:	8f b9       	out	0x0f, r24	; 15
     95a:	77 9b       	sbis	0x0e, 7	; 14
     95c:	fe cf       	rjmp	.-4      	; 0x95a <spi_master_tx+0x2>
     95e:	08 95       	ret

00000960 <spi_master_rx>:
     960:	1f b8       	out	0x0f, r1	; 15
     962:	77 9b       	sbis	0x0e, 7	; 14
     964:	fe cf       	rjmp	.-4      	; 0x962 <spi_master_rx+0x2>
     966:	8f b1       	in	r24, 0x0f	; 15
     968:	08 95       	ret

0000096a <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
     96a:	bc 9a       	sbi	0x17, 4	; 23
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	83 bf       	out	0x33, r24	; 51
     970:	8a ef       	ldi	r24, 0xFA	; 250
     972:	81 bf       	out	0x31, r24	; 49
     974:	87 b7       	in	r24, 0x37	; 55
     976:	82 60       	ori	r24, 0x02	; 2
     978:	87 bf       	out	0x37, r24	; 55
     97a:	08 95       	ret

0000097c <timer3_init>:
     97c:	13 9a       	sbi	0x02, 3	; 2
     97e:	80 e4       	ldi	r24, 0x40	; 64
     980:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     984:	8a e1       	ldi	r24, 0x1A	; 26
     986:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     98a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     98e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     992:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     996:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     99a:	08 95       	ret

0000099c <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
     99c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
     9a0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     9a4:	08 95       	ret

000009a6 <_uart_tx_string_in_isr>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
     9a6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <uart0+0x64>
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	e1 52       	subi	r30, 0x21	; 33
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	80 81       	ld	r24, Z
     9b2:	81 11       	cpse	r24, r1
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <_uart_tx_string_in_isr+0x22>
     9b6:	56 98       	cbi	0x0a, 6	; 10
     9b8:	84 e6       	ldi	r24, 0x64	; 100
     9ba:	ef ed       	ldi	r30, 0xDF	; 223
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	df 01       	movw	r26, r30
     9c0:	1d 92       	st	X+, r1
     9c2:	8a 95       	dec	r24
     9c4:	e9 f7       	brne	.-6      	; 0x9c0 <_uart_tx_string_in_isr+0x1a>
     9c6:	08 95       	ret
     9c8:	a3 e4       	ldi	r26, 0x43	; 67
     9ca:	b2 e0       	ldi	r27, 0x02	; 2
     9cc:	ec 91       	ld	r30, X
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	8e 0f       	add	r24, r30
     9d2:	8c 93       	st	X, r24
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e1 52       	subi	r30, 0x21	; 33
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	80 81       	ld	r24, Z
     9dc:	8c b9       	out	0x0c, r24	; 12
     9de:	08 95       	ret

000009e0 <__vector_20>:
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	0b b6       	in	r0, 0x3b	; 59
     9ec:	0f 92       	push	r0
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
     a06:	cf df       	rcall	.-98     	; 0x9a6 <_uart_tx_string_in_isr>
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <uart_init>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	9b 01       	movw	r18, r22
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	60 e4       	ldi	r22, 0x40	; 64
     a3c:	72 e4       	ldi	r23, 0x42	; 66
     a3e:	8f e0       	ldi	r24, 0x0F	; 15
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	32 d1       	rcall	.+612    	; 0xca8 <__udivmodsi4>
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	31 09       	sbc	r19, r1
     a48:	20 97       	sbiw	r28, 0x00	; 0
     a4a:	51 f4       	brne	.+20     	; 0xa60 <uart_init+0x32>
     a4c:	10 98       	cbi	0x02, 0	; 2
     a4e:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     a52:	29 b9       	out	0x09, r18	; 9
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	8a b9       	out	0x0a, r24	; 10
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     a5e:	10 c0       	rjmp	.+32     	; 0xa80 <uart_init+0x52>
     a60:	21 97       	sbiw	r28, 0x01	; 1
     a62:	71 f4       	brne	.+28     	; 0xa80 <uart_init+0x52>
     a64:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     a68:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     a6c:	ea e9       	ldi	r30, 0x9A	; 154
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	80 83       	st	Z, r24
     a74:	80 81       	ld	r24, Z
     a76:	80 68       	ori	r24, 0x80	; 128
     a78:	80 83       	st	Z, r24
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <uart0_tx_char>:
     a86:	5d 9b       	sbis	0x0b, 5	; 11
     a88:	fe cf       	rjmp	.-4      	; 0xa86 <uart0_tx_char>
     a8a:	8c b9       	out	0x0c, r24	; 12
     a8c:	08 95       	ret

00000a8e <uart0_tx_string>:
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	88 81       	ld	r24, Y
     a96:	88 23       	and	r24, r24
     a98:	29 f0       	breq	.+10     	; 0xaa4 <uart0_tx_string+0x16>
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	f4 df       	rcall	.-24     	; 0xa86 <uart0_tx_char>
     a9e:	89 91       	ld	r24, Y+
     aa0:	81 11       	cpse	r24, r1
     aa2:	fc cf       	rjmp	.-8      	; 0xa9c <uart0_tx_string+0xe>
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <uart1_tx_char>:
     aaa:	eb e9       	ldi	r30, 0x9B	; 155
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	90 81       	ld	r25, Z
     ab0:	95 ff       	sbrs	r25, 5
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <uart1_tx_char+0x4>
     ab4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     ab8:	08 95       	ret

00000aba <uart1_tx_string>:
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	ec 01       	movw	r28, r24
     ac0:	88 81       	ld	r24, Y
     ac2:	88 23       	and	r24, r24
     ac4:	29 f0       	breq	.+10     	; 0xad0 <uart1_tx_string+0x16>
     ac6:	21 96       	adiw	r28, 0x01	; 1
     ac8:	f0 df       	rcall	.-32     	; 0xaaa <uart1_tx_char>
     aca:	89 91       	ld	r24, Y+
     acc:	81 11       	cpse	r24, r1
     ace:	fc cf       	rjmp	.-8      	; 0xac8 <uart1_tx_string+0xe>
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <uart0_tx_string_IT>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	fc 01       	movw	r30, r24
     adc:	01 90       	ld	r0, Z+
     ade:	00 20       	and	r0, r0
     ae0:	e9 f7       	brne	.-6      	; 0xadc <uart0_tx_string_IT+0x6>
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	ef 01       	movw	r28, r30
     ae6:	c8 1b       	sub	r28, r24
     ae8:	d9 0b       	sbc	r29, r25
     aea:	ae 01       	movw	r20, r28
     aec:	bc 01       	movw	r22, r24
     aee:	8f ed       	ldi	r24, 0xDF	; 223
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e d1       	rcall	.+540    	; 0xd10 <strncpy>
     af4:	5d 9b       	sbis	0x0b, 5	; 11
     af6:	fe cf       	rjmp	.-4      	; 0xaf4 <uart0_tx_string_IT+0x1e>
     af8:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <uart0>
     afc:	8c b9       	out	0x0c, r24	; 12
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <uart0+0x64>
     b04:	ec 2f       	mov	r30, r28
     b06:	ef 5f       	subi	r30, 0xFF	; 255
     b08:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <uart0+0x65>
     b0c:	56 9a       	sbi	0x0a, 6	; 10
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <IntToString>:

char * IntToString(int num)
{
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	64 97       	sbiw	r28, 0x14	; 20
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d,",num); //고유 자릿값
     b2c:	9f 93       	push	r25
     b2e:	8f 93       	push	r24
     b30:	80 ed       	ldi	r24, 0xD0	; 208
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	8e 01       	movw	r16, r28
     b3a:	0f 5f       	subi	r16, 0xFF	; 255
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	1f 93       	push	r17
     b40:	0f 93       	push	r16
     b42:	f5 d0       	rcall	.+490    	; 0xd2e <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
     b44:	b8 01       	movw	r22, r16
     b46:	8b ea       	ldi	r24, 0xAB	; 171
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	db d0       	rcall	.+438    	; 0xd02 <strcpy>
	
	return (buff.itos_buff);
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
}
     b58:	8b ea       	ldi	r24, 0xAB	; 171
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	64 96       	adiw	r28, 0x14	; 20
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <HexToString>:
 
 char * HexToString(char num)
 {
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	64 97       	sbiw	r28, 0x14	; 20
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"0x%x,",num); //고유 자릿값
     b8a:	1f 92       	push	r1
     b8c:	8f 93       	push	r24
     b8e:	84 ed       	ldi	r24, 0xD4	; 212
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	8e 01       	movw	r16, r28
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	1f 93       	push	r17
     b9e:	0f 93       	push	r16
     ba0:	c6 d0       	rcall	.+396    	; 0xd2e <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
     ba2:	b8 01       	movw	r22, r16
     ba4:	8b ea       	ldi	r24, 0xAB	; 171
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	ac d0       	rcall	.+344    	; 0xd02 <strcpy>
	 
	 return (buff.itos_buff);
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
 }
     bb6:	8b ea       	ldi	r24, 0xAB	; 171
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	64 96       	adiw	r28, 0x14	; 20
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <send_SSID_TEST>:
 
 
 
char* send_SSID_TEST(char *ssid,char*password){
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	e2 97       	sbiw	r28, 0x32	; 50
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	9c 01       	movw	r18, r24
     bf2:	6b 01       	movw	r12, r22
	//문자열 변수 ?
	
	char buf[50]="AT+CWJAP=\"";
     bf4:	9b e0       	ldi	r25, 0x0B	; 11
     bf6:	e0 e0       	ldi	r30, 0x00	; 0
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	8e 01       	movw	r16, r28
     bfc:	0f 5f       	subi	r16, 0xFF	; 255
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	d8 01       	movw	r26, r16
     c02:	01 90       	ld	r0, Z+
     c04:	0d 92       	st	X+, r0
     c06:	9a 95       	dec	r25
     c08:	e1 f7       	brne	.-8      	; 0xc02 <send_SSID_TEST+0x32>
     c0a:	fe 01       	movw	r30, r28
     c0c:	3c 96       	adiw	r30, 0x0c	; 12
     c0e:	87 e2       	ldi	r24, 0x27	; 39
     c10:	df 01       	movw	r26, r30
     c12:	1d 92       	st	X+, r1
     c14:	8a 95       	dec	r24
     c16:	e9 f7       	brne	.-6      	; 0xc12 <send_SSID_TEST+0x42>
	strcat(buf,ssid);
     c18:	b9 01       	movw	r22, r18
     c1a:	c8 01       	movw	r24, r16
     c1c:	67 d0       	rcall	.+206    	; 0xcec <strcat>
	strcat(buf,"\"");
     c1e:	f8 01       	movw	r30, r16
     c20:	01 90       	ld	r0, Z+
     c22:	00 20       	and	r0, r0
     c24:	e9 f7       	brne	.-6      	; 0xc20 <send_SSID_TEST+0x50>
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	0f 2e       	mov	r0, r31
     c2a:	f2 e2       	ldi	r31, 0x22	; 34
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f1 2c       	mov	r15, r1
     c30:	f0 2d       	mov	r31, r0
     c32:	f1 82       	std	Z+1, r15	; 0x01
     c34:	e0 82       	st	Z, r14
	strcat(buf,",");
     c36:	f8 01       	movw	r30, r16
     c38:	01 90       	ld	r0, Z+
     c3a:	00 20       	and	r0, r0
     c3c:	e9 f7       	brne	.-6      	; 0xc38 <send_SSID_TEST+0x68>
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	8c e2       	ldi	r24, 0x2C	; 44
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
	strcat(buf,"\"");
     c48:	f8 01       	movw	r30, r16
     c4a:	01 90       	ld	r0, Z+
     c4c:	00 20       	and	r0, r0
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <send_SSID_TEST+0x7a>
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	f1 82       	std	Z+1, r15	; 0x01
     c54:	e0 82       	st	Z, r14
	strcat(buf,password);
     c56:	b6 01       	movw	r22, r12
     c58:	c8 01       	movw	r24, r16
     c5a:	48 d0       	rcall	.+144    	; 0xcec <strcat>
	strcat(buf,"\"");
     c5c:	f8 01       	movw	r30, r16
     c5e:	01 90       	ld	r0, Z+
     c60:	00 20       	and	r0, r0
     c62:	e9 f7       	brne	.-6      	; 0xc5e <send_SSID_TEST+0x8e>
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	f1 82       	std	Z+1, r15	; 0x01
     c68:	e0 82       	st	Z, r14
	strcat(buf,"\r\n");
     c6a:	f8 01       	movw	r30, r16
     c6c:	01 90       	ld	r0, Z+
     c6e:	00 20       	and	r0, r0
     c70:	e9 f7       	brne	.-6      	; 0xc6c <send_SSID_TEST+0x9c>
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	8d e0       	ldi	r24, 0x0D	; 13
     c76:	9a e0       	ldi	r25, 0x0A	; 10
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
     c7c:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
     c7e:	b8 01       	movw	r22, r16
     c80:	8f eb       	ldi	r24, 0xBF	; 191
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	3e d0       	rcall	.+124    	; 0xd02 <strcpy>
	return buff.esp_buff;
	
}
     c86:	8f eb       	ldi	r24, 0xBF	; 191
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	e2 96       	adiw	r28, 0x32	; 50
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	08 95       	ret

00000ca8 <__udivmodsi4>:
     ca8:	a1 e2       	ldi	r26, 0x21	; 33
     caa:	1a 2e       	mov	r1, r26
     cac:	aa 1b       	sub	r26, r26
     cae:	bb 1b       	sub	r27, r27
     cb0:	fd 01       	movw	r30, r26
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <__udivmodsi4_ep>

00000cb4 <__udivmodsi4_loop>:
     cb4:	aa 1f       	adc	r26, r26
     cb6:	bb 1f       	adc	r27, r27
     cb8:	ee 1f       	adc	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	a2 17       	cp	r26, r18
     cbe:	b3 07       	cpc	r27, r19
     cc0:	e4 07       	cpc	r30, r20
     cc2:	f5 07       	cpc	r31, r21
     cc4:	20 f0       	brcs	.+8      	; 0xcce <__udivmodsi4_ep>
     cc6:	a2 1b       	sub	r26, r18
     cc8:	b3 0b       	sbc	r27, r19
     cca:	e4 0b       	sbc	r30, r20
     ccc:	f5 0b       	sbc	r31, r21

00000cce <__udivmodsi4_ep>:
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	1a 94       	dec	r1
     cd8:	69 f7       	brne	.-38     	; 0xcb4 <__udivmodsi4_loop>
     cda:	60 95       	com	r22
     cdc:	70 95       	com	r23
     cde:	80 95       	com	r24
     ce0:	90 95       	com	r25
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	bd 01       	movw	r22, r26
     ce8:	cf 01       	movw	r24, r30
     cea:	08 95       	ret

00000cec <strcat>:
     cec:	fb 01       	movw	r30, r22
     cee:	dc 01       	movw	r26, r24
     cf0:	0d 90       	ld	r0, X+
     cf2:	00 20       	and	r0, r0
     cf4:	e9 f7       	brne	.-6      	; 0xcf0 <strcat+0x4>
     cf6:	11 97       	sbiw	r26, 0x01	; 1
     cf8:	01 90       	ld	r0, Z+
     cfa:	0d 92       	st	X+, r0
     cfc:	00 20       	and	r0, r0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <strcat+0xc>
     d00:	08 95       	ret

00000d02 <strcpy>:
     d02:	fb 01       	movw	r30, r22
     d04:	dc 01       	movw	r26, r24
     d06:	01 90       	ld	r0, Z+
     d08:	0d 92       	st	X+, r0
     d0a:	00 20       	and	r0, r0
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <strcpy+0x4>
     d0e:	08 95       	ret

00000d10 <strncpy>:
     d10:	fb 01       	movw	r30, r22
     d12:	dc 01       	movw	r26, r24
     d14:	41 50       	subi	r20, 0x01	; 1
     d16:	50 40       	sbci	r21, 0x00	; 0
     d18:	48 f0       	brcs	.+18     	; 0xd2c <strncpy+0x1c>
     d1a:	01 90       	ld	r0, Z+
     d1c:	0d 92       	st	X+, r0
     d1e:	00 20       	and	r0, r0
     d20:	c9 f7       	brne	.-14     	; 0xd14 <strncpy+0x4>
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <strncpy+0x16>
     d24:	1d 92       	st	X+, r1
     d26:	41 50       	subi	r20, 0x01	; 1
     d28:	50 40       	sbci	r21, 0x00	; 0
     d2a:	e0 f7       	brcc	.-8      	; 0xd24 <strncpy+0x14>
     d2c:	08 95       	ret

00000d2e <sprintf>:
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	2e 97       	sbiw	r28, 0x0e	; 14
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	0d 89       	ldd	r16, Y+21	; 0x15
     d48:	1e 89       	ldd	r17, Y+22	; 0x16
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	8c 83       	std	Y+4, r24	; 0x04
     d4e:	1a 83       	std	Y+2, r17	; 0x02
     d50:	09 83       	std	Y+1, r16	; 0x01
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	9f e7       	ldi	r25, 0x7F	; 127
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	ae 01       	movw	r20, r28
     d5c:	47 5e       	subi	r20, 0xE7	; 231
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	6f 89       	ldd	r22, Y+23	; 0x17
     d62:	78 8d       	ldd	r23, Y+24	; 0x18
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	10 d0       	rcall	.+32     	; 0xd8a <vfprintf>
     d6a:	ef 81       	ldd	r30, Y+7	; 0x07
     d6c:	f8 85       	ldd	r31, Y+8	; 0x08
     d6e:	e0 0f       	add	r30, r16
     d70:	f1 1f       	adc	r31, r17
     d72:	10 82       	st	Z, r1
     d74:	2e 96       	adiw	r28, 0x0e	; 14
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <vfprintf>:
     d8a:	2f 92       	push	r2
     d8c:	3f 92       	push	r3
     d8e:	4f 92       	push	r4
     d90:	5f 92       	push	r5
     d92:	6f 92       	push	r6
     d94:	7f 92       	push	r7
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2b 97       	sbiw	r28, 0x0b	; 11
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	6c 01       	movw	r12, r24
     dc0:	7b 01       	movw	r14, r22
     dc2:	8a 01       	movw	r16, r20
     dc4:	fc 01       	movw	r30, r24
     dc6:	17 82       	std	Z+7, r1	; 0x07
     dc8:	16 82       	std	Z+6, r1	; 0x06
     dca:	83 81       	ldd	r24, Z+3	; 0x03
     dcc:	81 ff       	sbrs	r24, 1
     dce:	bf c1       	rjmp	.+894    	; 0x114e <__stack+0x4f>
     dd0:	ce 01       	movw	r24, r28
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	3c 01       	movw	r6, r24
     dd6:	f6 01       	movw	r30, r12
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	f7 01       	movw	r30, r14
     ddc:	93 fd       	sbrc	r25, 3
     dde:	85 91       	lpm	r24, Z+
     de0:	93 ff       	sbrs	r25, 3
     de2:	81 91       	ld	r24, Z+
     de4:	7f 01       	movw	r14, r30
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <vfprintf+0x62>
     dea:	ad c1       	rjmp	.+858    	; 0x1146 <__stack+0x47>
     dec:	85 32       	cpi	r24, 0x25	; 37
     dee:	39 f4       	brne	.+14     	; 0xdfe <vfprintf+0x74>
     df0:	93 fd       	sbrc	r25, 3
     df2:	85 91       	lpm	r24, Z+
     df4:	93 ff       	sbrs	r25, 3
     df6:	81 91       	ld	r24, Z+
     df8:	7f 01       	movw	r14, r30
     dfa:	85 32       	cpi	r24, 0x25	; 37
     dfc:	21 f4       	brne	.+8      	; 0xe06 <vfprintf+0x7c>
     dfe:	b6 01       	movw	r22, r12
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	d6 d1       	rcall	.+940    	; 0x11b0 <fputc>
     e04:	e8 cf       	rjmp	.-48     	; 0xdd6 <vfprintf+0x4c>
     e06:	91 2c       	mov	r9, r1
     e08:	21 2c       	mov	r2, r1
     e0a:	31 2c       	mov	r3, r1
     e0c:	ff e1       	ldi	r31, 0x1F	; 31
     e0e:	f3 15       	cp	r31, r3
     e10:	d8 f0       	brcs	.+54     	; 0xe48 <vfprintf+0xbe>
     e12:	8b 32       	cpi	r24, 0x2B	; 43
     e14:	79 f0       	breq	.+30     	; 0xe34 <vfprintf+0xaa>
     e16:	38 f4       	brcc	.+14     	; 0xe26 <vfprintf+0x9c>
     e18:	80 32       	cpi	r24, 0x20	; 32
     e1a:	79 f0       	breq	.+30     	; 0xe3a <vfprintf+0xb0>
     e1c:	83 32       	cpi	r24, 0x23	; 35
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <vfprintf+0xbe>
     e20:	23 2d       	mov	r18, r3
     e22:	20 61       	ori	r18, 0x10	; 16
     e24:	1d c0       	rjmp	.+58     	; 0xe60 <vfprintf+0xd6>
     e26:	8d 32       	cpi	r24, 0x2D	; 45
     e28:	61 f0       	breq	.+24     	; 0xe42 <vfprintf+0xb8>
     e2a:	80 33       	cpi	r24, 0x30	; 48
     e2c:	69 f4       	brne	.+26     	; 0xe48 <vfprintf+0xbe>
     e2e:	23 2d       	mov	r18, r3
     e30:	21 60       	ori	r18, 0x01	; 1
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <vfprintf+0xd6>
     e34:	83 2d       	mov	r24, r3
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	38 2e       	mov	r3, r24
     e3a:	e3 2d       	mov	r30, r3
     e3c:	e4 60       	ori	r30, 0x04	; 4
     e3e:	3e 2e       	mov	r3, r30
     e40:	2a c0       	rjmp	.+84     	; 0xe96 <vfprintf+0x10c>
     e42:	f3 2d       	mov	r31, r3
     e44:	f8 60       	ori	r31, 0x08	; 8
     e46:	1d c0       	rjmp	.+58     	; 0xe82 <vfprintf+0xf8>
     e48:	37 fc       	sbrc	r3, 7
     e4a:	2d c0       	rjmp	.+90     	; 0xea6 <vfprintf+0x11c>
     e4c:	20 ed       	ldi	r18, 0xD0	; 208
     e4e:	28 0f       	add	r18, r24
     e50:	2a 30       	cpi	r18, 0x0A	; 10
     e52:	40 f0       	brcs	.+16     	; 0xe64 <vfprintf+0xda>
     e54:	8e 32       	cpi	r24, 0x2E	; 46
     e56:	b9 f4       	brne	.+46     	; 0xe86 <vfprintf+0xfc>
     e58:	36 fc       	sbrc	r3, 6
     e5a:	75 c1       	rjmp	.+746    	; 0x1146 <__stack+0x47>
     e5c:	23 2d       	mov	r18, r3
     e5e:	20 64       	ori	r18, 0x40	; 64
     e60:	32 2e       	mov	r3, r18
     e62:	19 c0       	rjmp	.+50     	; 0xe96 <vfprintf+0x10c>
     e64:	36 fe       	sbrs	r3, 6
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <vfprintf+0xea>
     e68:	8a e0       	ldi	r24, 0x0A	; 10
     e6a:	98 9e       	mul	r9, r24
     e6c:	20 0d       	add	r18, r0
     e6e:	11 24       	eor	r1, r1
     e70:	92 2e       	mov	r9, r18
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <vfprintf+0x10c>
     e74:	ea e0       	ldi	r30, 0x0A	; 10
     e76:	2e 9e       	mul	r2, r30
     e78:	20 0d       	add	r18, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	22 2e       	mov	r2, r18
     e7e:	f3 2d       	mov	r31, r3
     e80:	f0 62       	ori	r31, 0x20	; 32
     e82:	3f 2e       	mov	r3, r31
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <vfprintf+0x10c>
     e86:	8c 36       	cpi	r24, 0x6C	; 108
     e88:	21 f4       	brne	.+8      	; 0xe92 <vfprintf+0x108>
     e8a:	83 2d       	mov	r24, r3
     e8c:	80 68       	ori	r24, 0x80	; 128
     e8e:	38 2e       	mov	r3, r24
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x10c>
     e92:	88 36       	cpi	r24, 0x68	; 104
     e94:	41 f4       	brne	.+16     	; 0xea6 <vfprintf+0x11c>
     e96:	f7 01       	movw	r30, r14
     e98:	93 fd       	sbrc	r25, 3
     e9a:	85 91       	lpm	r24, Z+
     e9c:	93 ff       	sbrs	r25, 3
     e9e:	81 91       	ld	r24, Z+
     ea0:	7f 01       	movw	r14, r30
     ea2:	81 11       	cpse	r24, r1
     ea4:	b3 cf       	rjmp	.-154    	; 0xe0c <vfprintf+0x82>
     ea6:	98 2f       	mov	r25, r24
     ea8:	9f 7d       	andi	r25, 0xDF	; 223
     eaa:	95 54       	subi	r25, 0x45	; 69
     eac:	93 30       	cpi	r25, 0x03	; 3
     eae:	28 f4       	brcc	.+10     	; 0xeba <vfprintf+0x130>
     eb0:	0c 5f       	subi	r16, 0xFC	; 252
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	9f e3       	ldi	r25, 0x3F	; 63
     eb6:	99 83       	std	Y+1, r25	; 0x01
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <vfprintf+0x14a>
     eba:	83 36       	cpi	r24, 0x63	; 99
     ebc:	31 f0       	breq	.+12     	; 0xeca <vfprintf+0x140>
     ebe:	83 37       	cpi	r24, 0x73	; 115
     ec0:	71 f0       	breq	.+28     	; 0xede <vfprintf+0x154>
     ec2:	83 35       	cpi	r24, 0x53	; 83
     ec4:	09 f0       	breq	.+2      	; 0xec8 <vfprintf+0x13e>
     ec6:	55 c0       	rjmp	.+170    	; 0xf72 <vfprintf+0x1e8>
     ec8:	20 c0       	rjmp	.+64     	; 0xf0a <vfprintf+0x180>
     eca:	f8 01       	movw	r30, r16
     ecc:	80 81       	ld	r24, Z
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	0e 5f       	subi	r16, 0xFE	; 254
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	88 24       	eor	r8, r8
     ed6:	83 94       	inc	r8
     ed8:	91 2c       	mov	r9, r1
     eda:	53 01       	movw	r10, r6
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <vfprintf+0x178>
     ede:	28 01       	movw	r4, r16
     ee0:	f2 e0       	ldi	r31, 0x02	; 2
     ee2:	4f 0e       	add	r4, r31
     ee4:	51 1c       	adc	r5, r1
     ee6:	f8 01       	movw	r30, r16
     ee8:	a0 80       	ld	r10, Z
     eea:	b1 80       	ldd	r11, Z+1	; 0x01
     eec:	36 fe       	sbrs	r3, 6
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <vfprintf+0x16c>
     ef0:	69 2d       	mov	r22, r9
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <vfprintf+0x170>
     ef6:	6f ef       	ldi	r22, 0xFF	; 255
     ef8:	7f ef       	ldi	r23, 0xFF	; 255
     efa:	c5 01       	movw	r24, r10
     efc:	4e d1       	rcall	.+668    	; 0x119a <strnlen>
     efe:	4c 01       	movw	r8, r24
     f00:	82 01       	movw	r16, r4
     f02:	f3 2d       	mov	r31, r3
     f04:	ff 77       	andi	r31, 0x7F	; 127
     f06:	3f 2e       	mov	r3, r31
     f08:	15 c0       	rjmp	.+42     	; 0xf34 <vfprintf+0x1aa>
     f0a:	28 01       	movw	r4, r16
     f0c:	22 e0       	ldi	r18, 0x02	; 2
     f0e:	42 0e       	add	r4, r18
     f10:	51 1c       	adc	r5, r1
     f12:	f8 01       	movw	r30, r16
     f14:	a0 80       	ld	r10, Z
     f16:	b1 80       	ldd	r11, Z+1	; 0x01
     f18:	36 fe       	sbrs	r3, 6
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <vfprintf+0x198>
     f1c:	69 2d       	mov	r22, r9
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x19c>
     f22:	6f ef       	ldi	r22, 0xFF	; 255
     f24:	7f ef       	ldi	r23, 0xFF	; 255
     f26:	c5 01       	movw	r24, r10
     f28:	2d d1       	rcall	.+602    	; 0x1184 <strnlen_P>
     f2a:	4c 01       	movw	r8, r24
     f2c:	f3 2d       	mov	r31, r3
     f2e:	f0 68       	ori	r31, 0x80	; 128
     f30:	3f 2e       	mov	r3, r31
     f32:	82 01       	movw	r16, r4
     f34:	33 fc       	sbrc	r3, 3
     f36:	19 c0       	rjmp	.+50     	; 0xf6a <vfprintf+0x1e0>
     f38:	82 2d       	mov	r24, r2
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 16       	cp	r8, r24
     f3e:	99 06       	cpc	r9, r25
     f40:	a0 f4       	brcc	.+40     	; 0xf6a <vfprintf+0x1e0>
     f42:	b6 01       	movw	r22, r12
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	33 d1       	rcall	.+614    	; 0x11b0 <fputc>
     f4a:	2a 94       	dec	r2
     f4c:	f5 cf       	rjmp	.-22     	; 0xf38 <vfprintf+0x1ae>
     f4e:	f5 01       	movw	r30, r10
     f50:	37 fc       	sbrc	r3, 7
     f52:	85 91       	lpm	r24, Z+
     f54:	37 fe       	sbrs	r3, 7
     f56:	81 91       	ld	r24, Z+
     f58:	5f 01       	movw	r10, r30
     f5a:	b6 01       	movw	r22, r12
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	28 d1       	rcall	.+592    	; 0x11b0 <fputc>
     f60:	21 10       	cpse	r2, r1
     f62:	2a 94       	dec	r2
     f64:	21 e0       	ldi	r18, 0x01	; 1
     f66:	82 1a       	sub	r8, r18
     f68:	91 08       	sbc	r9, r1
     f6a:	81 14       	cp	r8, r1
     f6c:	91 04       	cpc	r9, r1
     f6e:	79 f7       	brne	.-34     	; 0xf4e <vfprintf+0x1c4>
     f70:	e1 c0       	rjmp	.+450    	; 0x1134 <__stack+0x35>
     f72:	84 36       	cpi	r24, 0x64	; 100
     f74:	11 f0       	breq	.+4      	; 0xf7a <vfprintf+0x1f0>
     f76:	89 36       	cpi	r24, 0x69	; 105
     f78:	39 f5       	brne	.+78     	; 0xfc8 <vfprintf+0x23e>
     f7a:	f8 01       	movw	r30, r16
     f7c:	37 fe       	sbrs	r3, 7
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <vfprintf+0x204>
     f80:	60 81       	ld	r22, Z
     f82:	71 81       	ldd	r23, Z+1	; 0x01
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	93 81       	ldd	r25, Z+3	; 0x03
     f88:	0c 5f       	subi	r16, 0xFC	; 252
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <vfprintf+0x214>
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	07 2e       	mov	r0, r23
     f94:	00 0c       	add	r0, r0
     f96:	88 0b       	sbc	r24, r24
     f98:	99 0b       	sbc	r25, r25
     f9a:	0e 5f       	subi	r16, 0xFE	; 254
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	f3 2d       	mov	r31, r3
     fa0:	ff 76       	andi	r31, 0x6F	; 111
     fa2:	3f 2e       	mov	r3, r31
     fa4:	97 ff       	sbrs	r25, 7
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <vfprintf+0x230>
     fa8:	90 95       	com	r25
     faa:	80 95       	com	r24
     fac:	70 95       	com	r23
     fae:	61 95       	neg	r22
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	8f 4f       	sbci	r24, 0xFF	; 255
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	f0 68       	ori	r31, 0x80	; 128
     fb8:	3f 2e       	mov	r3, r31
     fba:	2a e0       	ldi	r18, 0x0A	; 10
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	a3 01       	movw	r20, r6
     fc0:	33 d1       	rcall	.+614    	; 0x1228 <__ultoa_invert>
     fc2:	88 2e       	mov	r8, r24
     fc4:	86 18       	sub	r8, r6
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <__DATA_REGION_LENGTH__+0x50>
     fc8:	85 37       	cpi	r24, 0x75	; 117
     fca:	31 f4       	brne	.+12     	; 0xfd8 <vfprintf+0x24e>
     fcc:	23 2d       	mov	r18, r3
     fce:	2f 7e       	andi	r18, 0xEF	; 239
     fd0:	b2 2e       	mov	r11, r18
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	25 c0       	rjmp	.+74     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
     fd8:	93 2d       	mov	r25, r3
     fda:	99 7f       	andi	r25, 0xF9	; 249
     fdc:	b9 2e       	mov	r11, r25
     fde:	8f 36       	cpi	r24, 0x6F	; 111
     fe0:	c1 f0       	breq	.+48     	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
     fe2:	18 f4       	brcc	.+6      	; 0xfea <vfprintf+0x260>
     fe4:	88 35       	cpi	r24, 0x58	; 88
     fe6:	79 f0       	breq	.+30     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe8:	ae c0       	rjmp	.+348    	; 0x1146 <__stack+0x47>
     fea:	80 37       	cpi	r24, 0x70	; 112
     fec:	19 f0       	breq	.+6      	; 0xff4 <vfprintf+0x26a>
     fee:	88 37       	cpi	r24, 0x78	; 120
     ff0:	21 f0       	breq	.+8      	; 0xffa <vfprintf+0x270>
     ff2:	a9 c0       	rjmp	.+338    	; 0x1146 <__stack+0x47>
     ff4:	e9 2f       	mov	r30, r25
     ff6:	e0 61       	ori	r30, 0x10	; 16
     ff8:	be 2e       	mov	r11, r30
     ffa:	b4 fe       	sbrs	r11, 4
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
     ffe:	fb 2d       	mov	r31, r11
    1000:	f4 60       	ori	r31, 0x04	; 4
    1002:	bf 2e       	mov	r11, r31
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
    1006:	34 fe       	sbrs	r3, 4
    1008:	0a c0       	rjmp	.+20     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    100a:	29 2f       	mov	r18, r25
    100c:	26 60       	ori	r18, 0x06	; 6
    100e:	b2 2e       	mov	r11, r18
    1010:	06 c0       	rjmp	.+12     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    1012:	28 e0       	ldi	r18, 0x08	; 8
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1018:	20 e1       	ldi	r18, 0x10	; 16
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101e:	20 e1       	ldi	r18, 0x10	; 16
    1020:	32 e0       	ldi	r19, 0x02	; 2
    1022:	f8 01       	movw	r30, r16
    1024:	b7 fe       	sbrs	r11, 7
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	0c 5f       	subi	r16, 0xFC	; 252
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 5f       	subi	r16, 0xFE	; 254
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	a3 01       	movw	r20, r6
    1044:	f1 d0       	rcall	.+482    	; 0x1228 <__ultoa_invert>
    1046:	88 2e       	mov	r8, r24
    1048:	86 18       	sub	r8, r6
    104a:	fb 2d       	mov	r31, r11
    104c:	ff 77       	andi	r31, 0x7F	; 127
    104e:	3f 2e       	mov	r3, r31
    1050:	36 fe       	sbrs	r3, 6
    1052:	0d c0       	rjmp	.+26     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1054:	23 2d       	mov	r18, r3
    1056:	2e 7f       	andi	r18, 0xFE	; 254
    1058:	a2 2e       	mov	r10, r18
    105a:	89 14       	cp	r8, r9
    105c:	58 f4       	brcc	.+22     	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    105e:	34 fe       	sbrs	r3, 4
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1062:	32 fc       	sbrc	r3, 2
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1066:	83 2d       	mov	r24, r3
    1068:	8e 7e       	andi	r24, 0xEE	; 238
    106a:	a8 2e       	mov	r10, r24
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    106e:	b8 2c       	mov	r11, r8
    1070:	a3 2c       	mov	r10, r3
    1072:	03 c0       	rjmp	.+6      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1074:	b8 2c       	mov	r11, r8
    1076:	01 c0       	rjmp	.+2      	; 0x107a <__DATA_REGION_LENGTH__+0x7a>
    1078:	b9 2c       	mov	r11, r9
    107a:	a4 fe       	sbrs	r10, 4
    107c:	0f c0       	rjmp	.+30     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    107e:	fe 01       	movw	r30, r28
    1080:	e8 0d       	add	r30, r8
    1082:	f1 1d       	adc	r31, r1
    1084:	80 81       	ld	r24, Z
    1086:	80 33       	cpi	r24, 0x30	; 48
    1088:	21 f4       	brne	.+8      	; 0x1092 <__DATA_REGION_LENGTH__+0x92>
    108a:	9a 2d       	mov	r25, r10
    108c:	99 7e       	andi	r25, 0xE9	; 233
    108e:	a9 2e       	mov	r10, r25
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    1092:	a2 fe       	sbrs	r10, 2
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    1096:	b3 94       	inc	r11
    1098:	b3 94       	inc	r11
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    109c:	8a 2d       	mov	r24, r10
    109e:	86 78       	andi	r24, 0x86	; 134
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    10a2:	b3 94       	inc	r11
    10a4:	a3 fc       	sbrc	r10, 3
    10a6:	10 c0       	rjmp	.+32     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10a8:	a0 fe       	sbrs	r10, 0
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10ac:	b2 14       	cp	r11, r2
    10ae:	80 f4       	brcc	.+32     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10b0:	28 0c       	add	r2, r8
    10b2:	92 2c       	mov	r9, r2
    10b4:	9b 18       	sub	r9, r11
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    10b8:	b2 14       	cp	r11, r2
    10ba:	58 f4       	brcc	.+22     	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    10bc:	b6 01       	movw	r22, r12
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	76 d0       	rcall	.+236    	; 0x11b0 <fputc>
    10c4:	b3 94       	inc	r11
    10c6:	f8 cf       	rjmp	.-16     	; 0x10b8 <__DATA_REGION_LENGTH__+0xb8>
    10c8:	b2 14       	cp	r11, r2
    10ca:	18 f4       	brcc	.+6      	; 0x10d2 <__DATA_REGION_LENGTH__+0xd2>
    10cc:	2b 18       	sub	r2, r11
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <__DATA_REGION_LENGTH__+0xd4>
    10d0:	98 2c       	mov	r9, r8
    10d2:	21 2c       	mov	r2, r1
    10d4:	a4 fe       	sbrs	r10, 4
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <__DATA_REGION_LENGTH__+0xf6>
    10d8:	b6 01       	movw	r22, r12
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	68 d0       	rcall	.+208    	; 0x11b0 <fputc>
    10e0:	a2 fe       	sbrs	r10, 2
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <__stack+0x11>
    10e4:	a1 fc       	sbrc	r10, 1
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    10e8:	88 e7       	ldi	r24, 0x78	; 120
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <__DATA_REGION_LENGTH__+0xf2>
    10ee:	88 e5       	ldi	r24, 0x58	; 88
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	b6 01       	movw	r22, r12
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <__stack+0xf>
    10f6:	8a 2d       	mov	r24, r10
    10f8:	86 78       	andi	r24, 0x86	; 134
    10fa:	51 f0       	breq	.+20     	; 0x1110 <__stack+0x11>
    10fc:	a1 fe       	sbrs	r10, 1
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <__stack+0x5>
    1100:	8b e2       	ldi	r24, 0x2B	; 43
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <__stack+0x7>
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	a7 fc       	sbrc	r10, 7
    1108:	8d e2       	ldi	r24, 0x2D	; 45
    110a:	b6 01       	movw	r22, r12
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	50 d0       	rcall	.+160    	; 0x11b0 <fputc>
    1110:	89 14       	cp	r8, r9
    1112:	30 f4       	brcc	.+12     	; 0x1120 <__stack+0x21>
    1114:	b6 01       	movw	r22, r12
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	4a d0       	rcall	.+148    	; 0x11b0 <fputc>
    111c:	9a 94       	dec	r9
    111e:	f8 cf       	rjmp	.-16     	; 0x1110 <__stack+0x11>
    1120:	8a 94       	dec	r8
    1122:	f3 01       	movw	r30, r6
    1124:	e8 0d       	add	r30, r8
    1126:	f1 1d       	adc	r31, r1
    1128:	80 81       	ld	r24, Z
    112a:	b6 01       	movw	r22, r12
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	40 d0       	rcall	.+128    	; 0x11b0 <fputc>
    1130:	81 10       	cpse	r8, r1
    1132:	f6 cf       	rjmp	.-20     	; 0x1120 <__stack+0x21>
    1134:	22 20       	and	r2, r2
    1136:	09 f4       	brne	.+2      	; 0x113a <__stack+0x3b>
    1138:	4e ce       	rjmp	.-868    	; 0xdd6 <vfprintf+0x4c>
    113a:	b6 01       	movw	r22, r12
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	37 d0       	rcall	.+110    	; 0x11b0 <fputc>
    1142:	2a 94       	dec	r2
    1144:	f7 cf       	rjmp	.-18     	; 0x1134 <__stack+0x35>
    1146:	f6 01       	movw	r30, r12
    1148:	86 81       	ldd	r24, Z+6	; 0x06
    114a:	97 81       	ldd	r25, Z+7	; 0x07
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__stack+0x53>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	2b 96       	adiw	r28, 0x0b	; 11
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	5f 90       	pop	r5
    117c:	4f 90       	pop	r4
    117e:	3f 90       	pop	r3
    1180:	2f 90       	pop	r2
    1182:	08 95       	ret

00001184 <strnlen_P>:
    1184:	fc 01       	movw	r30, r24
    1186:	05 90       	lpm	r0, Z+
    1188:	61 50       	subi	r22, 0x01	; 1
    118a:	70 40       	sbci	r23, 0x00	; 0
    118c:	01 10       	cpse	r0, r1
    118e:	d8 f7       	brcc	.-10     	; 0x1186 <strnlen_P+0x2>
    1190:	80 95       	com	r24
    1192:	90 95       	com	r25
    1194:	8e 0f       	add	r24, r30
    1196:	9f 1f       	adc	r25, r31
    1198:	08 95       	ret

0000119a <strnlen>:
    119a:	fc 01       	movw	r30, r24
    119c:	61 50       	subi	r22, 0x01	; 1
    119e:	70 40       	sbci	r23, 0x00	; 0
    11a0:	01 90       	ld	r0, Z+
    11a2:	01 10       	cpse	r0, r1
    11a4:	d8 f7       	brcc	.-10     	; 0x119c <strnlen+0x2>
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	8e 0f       	add	r24, r30
    11ac:	9f 1f       	adc	r25, r31
    11ae:	08 95       	ret

000011b0 <fputc>:
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	fb 01       	movw	r30, r22
    11ba:	23 81       	ldd	r18, Z+3	; 0x03
    11bc:	21 fd       	sbrc	r18, 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <fputc+0x16>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <fputc+0x6e>
    11c6:	22 ff       	sbrs	r18, 2
    11c8:	16 c0       	rjmp	.+44     	; 0x11f6 <fputc+0x46>
    11ca:	46 81       	ldd	r20, Z+6	; 0x06
    11cc:	57 81       	ldd	r21, Z+7	; 0x07
    11ce:	24 81       	ldd	r18, Z+4	; 0x04
    11d0:	35 81       	ldd	r19, Z+5	; 0x05
    11d2:	42 17       	cp	r20, r18
    11d4:	53 07       	cpc	r21, r19
    11d6:	44 f4       	brge	.+16     	; 0x11e8 <fputc+0x38>
    11d8:	a0 81       	ld	r26, Z
    11da:	b1 81       	ldd	r27, Z+1	; 0x01
    11dc:	9d 01       	movw	r18, r26
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3f 4f       	sbci	r19, 0xFF	; 255
    11e2:	31 83       	std	Z+1, r19	; 0x01
    11e4:	20 83       	st	Z, r18
    11e6:	8c 93       	st	X, r24
    11e8:	26 81       	ldd	r18, Z+6	; 0x06
    11ea:	37 81       	ldd	r19, Z+7	; 0x07
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	37 83       	std	Z+7, r19	; 0x07
    11f2:	26 83       	std	Z+6, r18	; 0x06
    11f4:	14 c0       	rjmp	.+40     	; 0x121e <fputc+0x6e>
    11f6:	8b 01       	movw	r16, r22
    11f8:	ec 01       	movw	r28, r24
    11fa:	fb 01       	movw	r30, r22
    11fc:	00 84       	ldd	r0, Z+8	; 0x08
    11fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1200:	e0 2d       	mov	r30, r0
    1202:	09 95       	icall
    1204:	89 2b       	or	r24, r25
    1206:	e1 f6       	brne	.-72     	; 0x11c0 <fputc+0x10>
    1208:	d8 01       	movw	r26, r16
    120a:	16 96       	adiw	r26, 0x06	; 6
    120c:	8d 91       	ld	r24, X+
    120e:	9c 91       	ld	r25, X
    1210:	17 97       	sbiw	r26, 0x07	; 7
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	17 96       	adiw	r26, 0x07	; 7
    1216:	9c 93       	st	X, r25
    1218:	8e 93       	st	-X, r24
    121a:	16 97       	sbiw	r26, 0x06	; 6
    121c:	ce 01       	movw	r24, r28
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <__ultoa_invert>:
    1228:	fa 01       	movw	r30, r20
    122a:	aa 27       	eor	r26, r26
    122c:	28 30       	cpi	r18, 0x08	; 8
    122e:	51 f1       	breq	.+84     	; 0x1284 <__ultoa_invert+0x5c>
    1230:	20 31       	cpi	r18, 0x10	; 16
    1232:	81 f1       	breq	.+96     	; 0x1294 <__ultoa_invert+0x6c>
    1234:	e8 94       	clt
    1236:	6f 93       	push	r22
    1238:	6e 7f       	andi	r22, 0xFE	; 254
    123a:	6e 5f       	subi	r22, 0xFE	; 254
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	af 4f       	sbci	r26, 0xFF	; 255
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	3e d0       	rcall	.+124    	; 0x12c4 <__ultoa_invert+0x9c>
    1248:	b4 e0       	ldi	r27, 0x04	; 4
    124a:	3c d0       	rcall	.+120    	; 0x12c4 <__ultoa_invert+0x9c>
    124c:	67 0f       	add	r22, r23
    124e:	78 1f       	adc	r23, r24
    1250:	89 1f       	adc	r24, r25
    1252:	9a 1f       	adc	r25, r26
    1254:	a1 1d       	adc	r26, r1
    1256:	68 0f       	add	r22, r24
    1258:	79 1f       	adc	r23, r25
    125a:	8a 1f       	adc	r24, r26
    125c:	91 1d       	adc	r25, r1
    125e:	a1 1d       	adc	r26, r1
    1260:	6a 0f       	add	r22, r26
    1262:	71 1d       	adc	r23, r1
    1264:	81 1d       	adc	r24, r1
    1266:	91 1d       	adc	r25, r1
    1268:	a1 1d       	adc	r26, r1
    126a:	20 d0       	rcall	.+64     	; 0x12ac <__ultoa_invert+0x84>
    126c:	09 f4       	brne	.+2      	; 0x1270 <__ultoa_invert+0x48>
    126e:	68 94       	set
    1270:	3f 91       	pop	r19
    1272:	2a e0       	ldi	r18, 0x0A	; 10
    1274:	26 9f       	mul	r18, r22
    1276:	11 24       	eor	r1, r1
    1278:	30 19       	sub	r19, r0
    127a:	30 5d       	subi	r19, 0xD0	; 208
    127c:	31 93       	st	Z+, r19
    127e:	de f6       	brtc	.-74     	; 0x1236 <__ultoa_invert+0xe>
    1280:	cf 01       	movw	r24, r30
    1282:	08 95       	ret
    1284:	46 2f       	mov	r20, r22
    1286:	47 70       	andi	r20, 0x07	; 7
    1288:	40 5d       	subi	r20, 0xD0	; 208
    128a:	41 93       	st	Z+, r20
    128c:	b3 e0       	ldi	r27, 0x03	; 3
    128e:	0f d0       	rcall	.+30     	; 0x12ae <__ultoa_invert+0x86>
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__ultoa_invert+0x5c>
    1292:	f6 cf       	rjmp	.-20     	; 0x1280 <__ultoa_invert+0x58>
    1294:	46 2f       	mov	r20, r22
    1296:	4f 70       	andi	r20, 0x0F	; 15
    1298:	40 5d       	subi	r20, 0xD0	; 208
    129a:	4a 33       	cpi	r20, 0x3A	; 58
    129c:	18 f0       	brcs	.+6      	; 0x12a4 <__ultoa_invert+0x7c>
    129e:	49 5d       	subi	r20, 0xD9	; 217
    12a0:	31 fd       	sbrc	r19, 1
    12a2:	40 52       	subi	r20, 0x20	; 32
    12a4:	41 93       	st	Z+, r20
    12a6:	02 d0       	rcall	.+4      	; 0x12ac <__ultoa_invert+0x84>
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__ultoa_invert+0x6c>
    12aa:	ea cf       	rjmp	.-44     	; 0x1280 <__ultoa_invert+0x58>
    12ac:	b4 e0       	ldi	r27, 0x04	; 4
    12ae:	a6 95       	lsr	r26
    12b0:	97 95       	ror	r25
    12b2:	87 95       	ror	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	ba 95       	dec	r27
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__ultoa_invert+0x86>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 05       	cpc	r22, r1
    12c0:	71 05       	cpc	r23, r1
    12c2:	08 95       	ret
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	0a 2e       	mov	r0, r26
    12ca:	06 94       	lsr	r0
    12cc:	57 95       	ror	r21
    12ce:	47 95       	ror	r20
    12d0:	37 95       	ror	r19
    12d2:	27 95       	ror	r18
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__ultoa_invert+0xa2>
    12d8:	62 0f       	add	r22, r18
    12da:	73 1f       	adc	r23, r19
    12dc:	84 1f       	adc	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	a0 1d       	adc	r26, r0
    12e2:	08 95       	ret

000012e4 <_exit>:
    12e4:	f8 94       	cli

000012e6 <__stop_program>:
    12e6:	ff cf       	rjmp	.-2      	; 0x12e6 <__stop_program>
