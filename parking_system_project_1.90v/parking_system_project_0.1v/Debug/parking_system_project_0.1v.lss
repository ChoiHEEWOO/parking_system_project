
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a6  00800100  0000230e  000023a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000230e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001dc  008004a6  008004a6  00002748  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000463e  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001339  00000000  00000000  000070fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000219c  00000000  00000000  00008433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000954  00000000  00000000  0000a5d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ca9  00000000  00000000  0000af24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bea  00000000  00000000  0000bbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000e7b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c5       	rjmp	.+2560   	; 0xa3e <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3a       	cpi	r26, 0xA6	; 166
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a6 ea       	ldi	r26, 0xA6	; 166
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 38       	cpi	r26, 0x82	; 130
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e9 d7       	rcall	.+4050   	; 0x1096 <main>
      c4:	0c 94 85 11 	jmp	0x230a	; 0x230a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_18>:
	buzz_play(); //
}

//esp8266 테스트
ISR(USART0_RX_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	uint8_t buff=UDR0;
      f0:	8c b1       	in	r24, 0x0c	; 12
	uart0.buf=buff;
      f2:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <uart0+0x66>
	
	uart1_tx_char(buff);
      f6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <uart1_tx_char>
}
      fa:	ff 91       	pop	r31
      fc:	ef 91       	pop	r30
      fe:	bf 91       	pop	r27
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0b be       	out	0x3b, r0	; 59
     116:	0f 90       	pop	r0
     118:	0f be       	out	0x3f, r0	; 63
     11a:	0f 90       	pop	r0
     11c:	1f 90       	pop	r1
     11e:	18 95       	reti

00000120 <__vector_30>:

//여기에 들어가있는 코드는 완전 뒤죽박죽임. 수정해야할 상황이 생긴다면, 차라리 새로짜는게 더 낫습니다.
ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
     120:	1f 92       	push	r1
     122:	0f 92       	push	r0
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	0f 92       	push	r0
     128:	11 24       	eor	r1, r1
     12a:	0b b6       	in	r0, 0x3b	; 59
     12c:	0f 92       	push	r0
     12e:	1f 93       	push	r17
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	00 d0       	rcall	.+0      	; 0x14e <__vector_30+0x2e>
     14e:	1f 92       	push	r1
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cnt=0;
	//static uint8_t receive_length=0;
	static uint8_t parse_cnt=0;
	static uint8_t data_cnt=0;
	static uint8_t parse_data_flag=0;
	uint8_t buff=UDR1;
     154:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
     158:	1e 33       	cpi	r17, 0x3E	; 62
     15a:	21 f4       	brne	.+8      	; 0x164 <__vector_30+0x44>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <esp8266_send_ready_flag>
     162:	42 c0       	rjmp	.+132    	; 0x1e8 <__vector_30+0xc8>
	
	else if(buff=='O') cnt=1;
     164:	1f 34       	cpi	r17, 0x4F	; 79
     166:	21 f4       	brne	.+8      	; 0x170 <__vector_30+0x50>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <cnt.2420>
     16e:	3c c0       	rjmp	.+120    	; 0x1e8 <__vector_30+0xc8>
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
     170:	1b 34       	cpi	r17, 0x4B	; 75
     172:	51 f4       	brne	.+20     	; 0x188 <__vector_30+0x68>
     174:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <cnt.2420>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <__vector_30+0x5e>
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__vector_30+0x16c>
     17e:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <esp8266_return_result_flag>
     182:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <cnt.2420>
     186:	30 c0       	rjmp	.+96     	; 0x1e8 <__vector_30+0xc8>
	else cnt=0;
     188:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <cnt.2420>
	
	if(buff=='+')parse_cnt=1;//
     18c:	1b 32       	cpi	r17, 0x2B	; 43
     18e:	21 f4       	brne	.+8      	; 0x198 <__vector_30+0x78>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
     196:	76 c0       	rjmp	.+236    	; 0x284 <__vector_30+0x164>
	else if(buff=='I'&&parse_cnt==1)parse_cnt++; //cnt=2
     198:	19 34       	cpi	r17, 0x49	; 73
     19a:	41 f4       	brne	.+16     	; 0x1ac <__vector_30+0x8c>
     19c:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <parse_cnt.2421>
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	11 f5       	brne	.+68     	; 0x1e8 <__vector_30+0xc8>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
     1aa:	6c c0       	rjmp	.+216    	; 0x284 <__vector_30+0x164>
	else if(buff=='P'&&parse_cnt==2)parse_cnt++; //cnt=3
     1ac:	10 35       	cpi	r17, 0x50	; 80
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <__vector_30+0xa0>
     1b0:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <parse_cnt.2421>
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	c1 f4       	brne	.+48     	; 0x1e8 <__vector_30+0xc8>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
     1be:	62 c0       	rjmp	.+196    	; 0x284 <__vector_30+0x164>
	else if(buff=='D'&&parse_cnt==3)parse_cnt++; //cnt=4
     1c0:	14 34       	cpi	r17, 0x44	; 68
     1c2:	41 f4       	brne	.+16     	; 0x1d4 <__vector_30+0xb4>
     1c4:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <parse_cnt.2421>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_30+0xc8>
     1cc:	84 e0       	ldi	r24, 0x04	; 4
     1ce:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
     1d2:	58 c0       	rjmp	.+176    	; 0x284 <__vector_30+0x164>
	else if(buff==','&&parse_cnt==4)parse_cnt++;	
     1d4:	1c 32       	cpi	r17, 0x2C	; 44
     1d6:	41 f4       	brne	.+16     	; 0x1e8 <__vector_30+0xc8>
     1d8:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <parse_cnt.2421>
     1dc:	84 30       	cpi	r24, 0x04	; 4
     1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_30+0xc8>
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
     1e6:	4e c0       	rjmp	.+156    	; 0x284 <__vector_30+0x164>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
     1e8:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <parse_cnt.2421>
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	91 f4       	brne	.+36     	; 0x214 <__vector_30+0xf4>
	{
		receive_length=buff; parse_cnt++; //
     1f0:	10 93 b1 04 	sts	0x04B1, r17	; 0x8004b1 <receive_length>
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <parse_cnt.2421>
		char buf_1[2]= {receive_length,0};
     1fa:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <receive_length>
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	1a 82       	std	Y+2, r1	; 0x02
		receive_length_int=atoi((char*)buf_1);
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <atoi>
     20a:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <receive_length_int+0x1>
     20e:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <receive_length_int>
     212:	38 c0       	rjmp	.+112    	; 0x284 <__vector_30+0x164>
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
     214:	86 30       	cpi	r24, 0x06	; 6
     216:	c1 f4       	brne	.+48     	; 0x248 <__vector_30+0x128>
     218:	1a 33       	cpi	r17, 0x3A	; 58
     21a:	71 f0       	breq	.+28     	; 0x238 <__vector_30+0x118>
	{
		char buf_2[3]={receive_length,buff,0};
     21c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <receive_length>
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	1a 83       	std	Y+2, r17	; 0x02
     224:	1b 82       	std	Y+3, r1	; 0x03
		receive_length_int = atoi((char*)buf_2);
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <atoi>
     22e:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <receive_length_int+0x1>
     232:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <receive_length_int>
		receive_length_int=atoi((char*)buf_1);
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
	{
     236:	26 c0       	rjmp	.+76     	; 0x284 <__vector_30+0x164>
		memset(buf_2,0,sizeof(buf_2));
	}
	else if(parse_cnt==6) //:가 들어왔을 때 
	{
		//esp8266_receiving_flag=1;
		parse_cnt=0; data_cnt=0; parse_data_flag=1;
     238:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <parse_cnt.2421>
     23c:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <data_cnt.2422>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <parse_data_flag.2423>
     246:	1e c0       	rjmp	.+60     	; 0x284 <__vector_30+0x164>
	}
	else if(parse_data_flag){ //길이가 4인 데이터
     248:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <parse_data_flag.2423>
     24c:	88 23       	and	r24, r24
     24e:	c1 f0       	breq	.+48     	; 0x280 <__vector_30+0x160>
		esp8266_received_data[data_cnt]=buff;
     250:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <data_cnt.2422>
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e6 5c       	subi	r30, 0xC6	; 198
     25a:	fa 4f       	sbci	r31, 0xFA	; 250
     25c:	10 83       	st	Z, r17
		data_cnt++;
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <data_cnt.2422>
		if(data_cnt==receive_length_int) {esp8266_receiving_flag=1; parse_data_flag=0; }
     264:	20 91 74 06 	lds	r18, 0x0674	; 0x800674 <receive_length_int>
     268:	30 91 75 06 	lds	r19, 0x0675	; 0x800675 <receive_length_int+0x1>
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	41 f4       	brne	.+16     	; 0x284 <__vector_30+0x164>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <esp8266_receiving_flag>
     27a:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <parse_data_flag.2423>
     27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_30+0x164>
	}
	else parse_cnt=0;
     280:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <parse_cnt.2421>
	
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
     284:	81 2f       	mov	r24, r17
     286:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
	
}
     28a:	03 c0       	rjmp	.+6      	; 0x292 <__vector_30+0x172>
	uint8_t buff=UDR1;
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
	
	else if(buff=='O') cnt=1;
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
	else cnt=0;
     28c:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <cnt.2420>
     290:	ab cf       	rjmp	.-170    	; 0x1e8 <__vector_30+0xc8>
	
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
	
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	1f 91       	pop	r17
     2b6:	0f 90       	pop	r0
     2b8:	0b be       	out	0x3b, r0	; 59
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <rfid_user_uid_buffer_init>:
	received_state=RECEIVE_NONE;
}


void rfid_user_uid_buffer_init(void)
{
     2c4:	89 eb       	ldi	r24, 0xB9	; 185
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	42 ed       	ldi	r20, 0xD2	; 210
     2ca:	54 e0       	ldi	r21, 0x04	; 4
	for(int i=0; i<MAX_USER_COUNT;i++)
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	e4 e6       	ldi	r30, 0x64	; 100
     2d0:	f3 e0       	ldi	r31, 0x03	; 3
     2d2:	dc 01       	movw	r26, r24
     2d4:	01 90       	ld	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	2a 95       	dec	r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <rfid_user_uid_buffer_init+0x10>
     2dc:	05 96       	adiw	r24, 0x05	; 5
}


void rfid_user_uid_buffer_init(void)
{
	for(int i=0; i<MAX_USER_COUNT;i++)
     2de:	84 17       	cp	r24, r20
     2e0:	95 07       	cpc	r25, r21
     2e2:	a1 f7       	brne	.-24     	; 0x2cc <rfid_user_uid_buffer_init+0x8>
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
	}
	i2c_lcd_string(2,0,"     OOOOOOOOOO     ");
     2e4:	4c e1       	ldi	r20, 0x1C	; 28
     2e6:	51 e0       	ldi	r21, 0x01	; 1
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	f9 d7       	rcall	.+4082   	; 0x12e0 <i2c_lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	89 e6       	ldi	r24, 0x69	; 105
     2f2:	98 e1       	ldi	r25, 0x18	; 24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	90 40       	sbci	r25, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <rfid_user_uid_buffer_init+0x30>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <rfid_user_uid_buffer_init+0x3a>
     2fe:	00 00       	nop
     300:	08 95       	ret

00000302 <mfrc_print_serial>:
	_delay_ms(500);
}

void mfrc_print_serial(int _type, unsigned char ch)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	c6 2f       	mov	r28, r22
	switch(_type)
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	69 f1       	breq	.+90     	; 0x372 <mfrc_print_serial+0x70>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 05       	cpc	r25, r1
     31c:	09 f4       	brne	.+2      	; 0x320 <mfrc_print_serial+0x1e>
     31e:	55 c0       	rjmp	.+170    	; 0x3ca <mfrc_print_serial+0xc8>
     320:	89 2b       	or	r24, r25
     322:	09 f0       	breq	.+2      	; 0x326 <mfrc_print_serial+0x24>
     324:	7e c0       	rjmp	.+252    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     326:	81 e3       	ldi	r24, 0x31	; 49
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     32e:	02 e5       	ldi	r16, 0x52	; 82
     330:	16 e0       	ldi	r17, 0x06	; 6
     332:	0f 2e       	mov	r0, r31
     334:	f4 e6       	ldi	r31, 0x64	; 100
     336:	ef 2e       	mov	r14, r31
     338:	f6 e0       	ldi	r31, 0x06	; 6
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	0f 2e       	mov	r0, r31
     340:	f6 e5       	ldi	r31, 0x56	; 86
     342:	cf 2e       	mov	r12, r31
     344:	f6 e0       	ldi	r31, 0x06	; 6
     346:	df 2e       	mov	r13, r31
     348:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     34a:	c1 11       	cpse	r28, r1
     34c:	05 c0       	rjmp	.+10     	; 0x358 <mfrc_print_serial+0x56>
     34e:	f8 01       	movw	r30, r16
     350:	80 81       	ld	r24, Z
     352:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
     356:	04 c0       	rjmp	.+8      	; 0x360 <mfrc_print_serial+0x5e>
			else uart0_tx_char(rfid_uid_ch1[i]);
     358:	f7 01       	movw	r30, r14
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	ff ef       	ldi	r31, 0xFF	; 255
     366:	ef 1a       	sub	r14, r31
     368:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     36a:	0c 15       	cp	r16, r12
     36c:	1d 05       	cpc	r17, r13
     36e:	69 f7       	brne	.-38     	; 0x34a <mfrc_print_serial+0x48>
     370:	58 c0       	rjmp	.+176    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     372:	8b e3       	ldi	r24, 0x3B	; 59
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     37a:	02 e5       	ldi	r16, 0x52	; 82
     37c:	16 e0       	ldi	r17, 0x06	; 6
     37e:	0f 2e       	mov	r0, r31
     380:	f4 e6       	ldi	r31, 0x64	; 100
     382:	ef 2e       	mov	r14, r31
     384:	f6 e0       	ldi	r31, 0x06	; 6
     386:	ff 2e       	mov	r15, r31
     388:	f0 2d       	mov	r31, r0
     38a:	0f 2e       	mov	r0, r31
     38c:	f6 e5       	ldi	r31, 0x56	; 86
     38e:	cf 2e       	mov	r12, r31
     390:	f6 e0       	ldi	r31, 0x06	; 6
     392:	df 2e       	mov	r13, r31
     394:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     396:	c1 11       	cpse	r28, r1
     398:	08 c0       	rjmp	.+16     	; 0x3aa <mfrc_print_serial+0xa8>
     39a:	f8 01       	movw	r30, r16
     39c:	80 81       	ld	r24, Z
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <IntToString>
     3a4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <mfrc_print_serial+0xb6>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     3aa:	f7 01       	movw	r30, r14
     3ac:	80 81       	ld	r24, Z
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <IntToString>
     3b4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ff ef       	ldi	r31, 0xFF	; 255
     3be:	ef 1a       	sub	r14, r31
     3c0:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     3c2:	0c 15       	cp	r16, r12
     3c4:	1d 05       	cpc	r17, r13
     3c6:	39 f7       	brne	.-50     	; 0x396 <mfrc_print_serial+0x94>
     3c8:	2c c0       	rjmp	.+88     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     3ca:	83 e4       	ldi	r24, 0x43	; 67
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     3d2:	02 e5       	ldi	r16, 0x52	; 82
     3d4:	16 e0       	ldi	r17, 0x06	; 6
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f4 e6       	ldi	r31, 0x64	; 100
     3da:	ef 2e       	mov	r14, r31
     3dc:	f6 e0       	ldi	r31, 0x06	; 6
     3de:	ff 2e       	mov	r15, r31
     3e0:	f0 2d       	mov	r31, r0
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f6 e5       	ldi	r31, 0x56	; 86
     3e6:	cf 2e       	mov	r12, r31
     3e8:	f6 e0       	ldi	r31, 0x06	; 6
     3ea:	df 2e       	mov	r13, r31
     3ec:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     3ee:	c1 11       	cpse	r28, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f2:	f8 01       	movw	r30, r16
     3f4:	80 81       	ld	r24, Z
     3f6:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <HexToString>
     3fa:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     400:	f7 01       	movw	r30, r14
     402:	80 81       	ld	r24, Z
     404:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <HexToString>
     408:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
			uart0_tx_char(' ');
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
     412:	0f 5f       	subi	r16, 0xFF	; 255
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	ff ef       	ldi	r31, 0xFF	; 255
     418:	ef 1a       	sub	r14, r31
     41a:	ff 0a       	sbc	r15, r31
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     41c:	0c 15       	cp	r16, r12
     41e:	1d 05       	cpc	r17, r13
     420:	31 f7       	brne	.-52     	; 0x3ee <mfrc_print_serial+0xec>
		
		break;
		
	}
	
}
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <mfrc_check_and_data_receive_ch0>:
	_delay_ms(2000);
	i2c_lcd_clear();
	i2c_lcd_noBacklight();
}

char mfrc_check_and_data_receive_ch0(void){ 
     432:	cf 93       	push	r28
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     434:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <noise_flag.2438>
     438:	81 11       	cpse	r24, r1
     43a:	09 c0       	rjmp	.+18     	; 0x44e <mfrc_check_and_data_receive_ch0+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	62 e5       	ldi	r22, 0x52	; 82
     440:	76 e0       	ldi	r23, 0x06	; 6
     442:	82 e5       	ldi	r24, 0x52	; 82
     444:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     448:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_byte.2440>
     44c:	1d c0       	rjmp	.+58     	; 0x488 <mfrc_check_and_data_receive_ch0+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     44e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <toggle_flag.2439>
     452:	88 23       	and	r24, r24
     454:	39 f0       	breq	.+14     	; 0x464 <mfrc_check_and_data_receive_ch0+0x32>
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	62 e5       	ldi	r22, 0x52	; 82
     45a:	76 e0       	ldi	r23, 0x06	; 6
     45c:	82 e5       	ldi	r24, 0x52	; 82
     45e:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     462:	0c c0       	rjmp	.+24     	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	62 e5       	ldi	r22, 0x52	; 82
     468:	76 e0       	ldi	r23, 0x06	; 6
     46a:	82 e5       	ldi	r24, 0x52	; 82
     46c:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     470:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_byte.2440>
			if(_byte==ERROR) noise_flag=0;
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	11 f4       	brne	.+4      	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
     478:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <noise_flag.2438>
		}
			
		toggle_flag^=0x01;
     47c:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <toggle_flag.2439>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	89 27       	eor	r24, r25
     484:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <toggle_flag.2439>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     488:	c0 91 aa 04 	lds	r28, 0x04AA	; 0x8004aa <_byte.2440>
     48c:	c1 30       	cpi	r28, 0x01	; 1
     48e:	29 f0       	breq	.+10     	; 0x49a <mfrc_check_and_data_receive_ch0+0x68>
	{
		detected_flag_ch0=NON_DETECTED;  
     490:	88 e5       	ldi	r24, 0x58	; 88
     492:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <detected_flag_ch0>
		return RECEIVE_NONE;
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     49a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <detected_flag_ch0>
     49e:	88 35       	cpi	r24, 0x58	; 88
     4a0:	29 f5       	brne	.+74     	; 0x4ec <mfrc_check_and_data_receive_ch0+0xba>
	{
		detected_flag_ch0=DETECED;
     4a2:	8f e4       	ldi	r24, 0x4F	; 79
     4a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <noise_flag.2438>
		toggle_flag=1;
     4ae:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <toggle_flag.2439>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	82 e5       	ldi	r24, 0x52	; 82
     4b6:	96 e0       	ldi	r25, 0x06	; 6
     4b8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <mfrc522_get_card_serial>
     4bc:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_byte.2440>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	b1 f4       	brne	.+44     	; 0x4f0 <mfrc_check_and_data_receive_ch0+0xbe>

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			if(DUMMY_TEST_SERIAL){
				uart0_tx_string("[CHECK UID(CH0)]: ");
     4c4:	8b e4       	ldi	r24, 0x4B	; 75
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
				mfrc_print_serial(ASCII_TYPE,CH0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	17 df       	rcall	.-466    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(DECIMAL_TYPE,CH0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	13 df       	rcall	.-474    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0f df       	rcall	.-482    	; 0x302 <mfrc_print_serial>
				uart0_tx_char('\n');
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
			}
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     4f0:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     4f2:	8c 2f       	mov	r24, r28
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     4f8:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     4fa:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <noise_flag.2444>
     4fe:	81 11       	cpse	r24, r1
     500:	09 c0       	rjmp	.+18     	; 0x514 <mfrc_check_and_data_receive_ch1+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	64 e6       	ldi	r22, 0x64	; 100
     506:	76 e0       	ldi	r23, 0x06	; 6
     508:	82 e5       	ldi	r24, 0x52	; 82
     50a:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     50e:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_byte.2446>
     512:	1d c0       	rjmp	.+58     	; 0x54e <mfrc_check_and_data_receive_ch1+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     514:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <__data_end>
     518:	88 23       	and	r24, r24
     51a:	39 f0       	breq	.+14     	; 0x52a <mfrc_check_and_data_receive_ch1+0x32>
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	64 e6       	ldi	r22, 0x64	; 100
     520:	76 e0       	ldi	r23, 0x06	; 6
     522:	82 e5       	ldi	r24, 0x52	; 82
     524:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     528:	0c c0       	rjmp	.+24     	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	64 e6       	ldi	r22, 0x64	; 100
     52e:	76 e0       	ldi	r23, 0x06	; 6
     530:	82 e5       	ldi	r24, 0x52	; 82
     532:	0e 94 15 0c 	call	0x182a	; 0x182a <mfrc522_request>
     536:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_byte.2446>
			if(_byte==ERROR) noise_flag=0;
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	11 f4       	brne	.+4      	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
     53e:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <noise_flag.2444>
		}
		toggle_flag^=0x01;
     542:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <__data_end>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 27       	eor	r24, r25
     54a:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     54e:	c0 91 a7 04 	lds	r28, 0x04A7	; 0x8004a7 <_byte.2446>
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	29 f0       	breq	.+10     	; 0x560 <mfrc_check_and_data_receive_ch1+0x68>
	{
		detected_flag_ch1=NON_DETECTED;  
     556:	88 e5       	ldi	r24, 0x58	; 88
     558:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <detected_flag_ch1>
		return RECEIVE_NONE;
     55c:	c0 e0       	ldi	r28, 0x00	; 0
     55e:	2c c0       	rjmp	.+88     	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     560:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <detected_flag_ch1>
     564:	88 35       	cpi	r24, 0x58	; 88
     566:	29 f5       	brne	.+74     	; 0x5b2 <mfrc_check_and_data_receive_ch1+0xba>
	{
		detected_flag_ch1=DETECED;
     568:	8f e4       	ldi	r24, 0x4F	; 79
     56a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <detected_flag_ch1>
		noise_flag=1; //얘가 첫 순간임.
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <noise_flag.2444>
		toggle_flag=1;
     574:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	84 e6       	ldi	r24, 0x64	; 100
     57c:	96 e0       	ldi	r25, 0x06	; 6
     57e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <mfrc522_get_card_serial>
     582:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <_byte.2446>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	b1 f4       	brne	.+44     	; 0x5b6 <mfrc_check_and_data_receive_ch1+0xbe>
			if(DUMMY_TEST_SERIAL){
						uart0_tx_string("[CHECK UID(CH1)]: ");
     58a:	8e e5       	ldi	r24, 0x5E	; 94
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <uart0_tx_string>
						mfrc_print_serial(ASCII_TYPE,CH1);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	b4 de       	rcall	.-664    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	b0 de       	rcall	.-672    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	ac de       	rcall	.-680    	; 0x302 <mfrc_print_serial>
						uart0_tx_char('\n');
     5aa:	8a e0       	ldi	r24, 0x0A	; 10
     5ac:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart0_tx_char>
			}
			return RECEIVE_SUCCESS;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
						uart0_tx_char('\n');
			}
			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     5b6:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     5b8:	8c 2f       	mov	r24, r28
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <RC522_data_request_per_100ms>:


void RC522_data_request_per_100ms(char* tggl){
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
	
	if((TICK.tick_1ms % 100) ==0) {
     5c4:	60 91 76 06 	lds	r22, 0x0676	; 0x800676 <TICK>
     5c8:	70 91 77 06 	lds	r23, 0x0677	; 0x800677 <TICK+0x1>
     5cc:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <TICK+0x2>
     5d0:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <TICK+0x3>
     5d4:	24 e6       	ldi	r18, 0x64	; 100
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__udivmodsi4>
     5e0:	67 2b       	or	r22, r23
     5e2:	68 2b       	or	r22, r24
     5e4:	69 2b       	or	r22, r25
     5e6:	89 f4       	brne	.+34     	; 0x60a <RC522_data_request_per_100ms+0x4c>
		
		//toggle = 0 : entrance gate
		//toggle = 1 : exit gate
		(*tggl)^=0x01; //start toggling :
     5e8:	98 81       	ld	r25, Y
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	89 27       	eor	r24, r25
     5ee:	88 83       	st	Y, r24
		
		if((*tggl)==0){
     5f0:	81 11       	cpse	r24, r1
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <RC522_data_request_per_100ms+0x42>
			received_state = mfrc_check_and_data_receive_ch0();
     5f4:	1e df       	rcall	.-452    	; 0x432 <mfrc_check_and_data_receive_ch0>
     5f6:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <received_state>
			rfid_uid_ch0[4]=0; //배열을 문자열처럼 사용하기 위해 (문자 끝에 null을 넣어주기 위함. "abcd")
     5fa:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <rfid_uid_ch0+0x4>
		}//RFID check and receive UID data per 100ms
		else {
			received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <RC522_data_request_per_100ms+0x4c>
     600:	7b df       	rcall	.-266    	; 0x4f8 <mfrc_check_and_data_receive_ch1>
     602:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <received_state>
			rfid_uid_ch1[4]=0;
     606:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <rfid_uid_ch1+0x4>
		}
	}
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 TICK.buzz_1ms=0;
     610:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <TICK+0x4>
     614:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <TICK+0x5>
     618:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <TICK+0x6>
     61c:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <TICK+0x7>
	 switch(clip)
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	99 f0       	breq	.+38     	; 0x64a <setSoundClip+0x3a>
     624:	28 f4       	brcc	.+10     	; 0x630 <setSoundClip+0x20>
     626:	88 23       	and	r24, r24
     628:	49 f0       	breq	.+18     	; 0x63c <setSoundClip+0x2c>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	51 f0       	breq	.+20     	; 0x642 <setSoundClip+0x32>
     62e:	1c c0       	rjmp	.+56     	; 0x668 <setSoundClip+0x58>
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	99 f0       	breq	.+38     	; 0x65a <setSoundClip+0x4a>
     634:	70 f0       	brcs	.+28     	; 0x652 <setSoundClip+0x42>
     636:	85 30       	cpi	r24, 0x05	; 5
     638:	a1 f0       	breq	.+40     	; 0x662 <setSoundClip+0x52>
     63a:	16 c0       	rjmp	.+44     	; 0x668 <setSoundClip+0x58>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     63c:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <music_flag>
     640:	13 c0       	rjmp	.+38     	; 0x668 <setSoundClip+0x58>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <music_flag>
     648:	0f c0       	rjmp	.+30     	; 0x668 <setSoundClip+0x58>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <music_flag>
     650:	0b c0       	rjmp	.+22     	; 0x668 <setSoundClip+0x58>
		   case BUZZ_UNENROLLED: music_flag=BUZZ_UNENROLLED; break;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <music_flag>
     658:	07 c0       	rjmp	.+14     	; 0x668 <setSoundClip+0x58>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <music_flag>
     660:	03 c0       	rjmp	.+6      	; 0x668 <setSoundClip+0x58>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <music_flag>
		   
	 }
	 TICK.buzz_1ms=0;
     668:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <TICK+0x4>
     66c:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <TICK+0x5>
     670:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <TICK+0x6>
     674:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <TICK+0x7>
     678:	08 95       	ret

0000067a <buzz_MUTE>:
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     67a:	eb e8       	ldi	r30, 0x8B	; 139
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	8f 7b       	andi	r24, 0xBF	; 191
     682:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     684:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <music_flag>
     688:	08 95       	ret

0000068a <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	41 f0       	breq	.+16     	; 0x69e <setSoundNote+0x14>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     68e:	eb e8       	ldi	r30, 0x8B	; 139
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	20 81       	ld	r18, Z
     694:	20 64       	ori	r18, 0x40	; 64
     696:	20 83       	st	Z, r18
     698:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <setICR3>
     69c:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     69e:	eb e8       	ldi	r30, 0x8B	; 139
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	8f 7b       	andi	r24, 0xBF	; 191
     6a6:	80 83       	st	Z, r24
     6a8:	08 95       	ret

000006aa <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     6aa:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <music_flag>
     6ae:	82 30       	cpi	r24, 0x02	; 2
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <buzz_play+0xa>
     6b2:	76 c0       	rjmp	.+236    	; 0x7a0 <buzz_play+0xf6>
     6b4:	28 f4       	brcc	.+10     	; 0x6c0 <buzz_play+0x16>
     6b6:	88 23       	and	r24, r24
     6b8:	61 f0       	breq	.+24     	; 0x6d2 <buzz_play+0x28>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <buzz_play+0x2c>
     6be:	08 95       	ret
     6c0:	84 30       	cpi	r24, 0x04	; 4
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <buzz_play+0x1c>
     6c4:	37 c1       	rjmp	.+622    	; 0x934 <buzz_play+0x28a>
     6c6:	08 f4       	brcc	.+2      	; 0x6ca <buzz_play+0x20>
     6c8:	d0 c0       	rjmp	.+416    	; 0x86a <buzz_play+0x1c0>
     6ca:	85 30       	cpi	r24, 0x05	; 5
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <buzz_play+0x26>
     6ce:	75 c1       	rjmp	.+746    	; 0x9ba <buzz_play+0x310>
     6d0:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     6d2:	d3 cf       	rjmp	.-90     	; 0x67a <buzz_MUTE>
     6d4:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     6d6:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     6da:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     6de:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     6e2:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     6e6:	88 3c       	cpi	r24, 0xC8	; 200
     6e8:	91 05       	cpc	r25, r1
     6ea:	a1 05       	cpc	r26, r1
     6ec:	b1 05       	cpc	r27, r1
     6ee:	20 f4       	brcc	.+8      	; 0x6f8 <buzz_play+0x4e>
     6f0:	8b e9       	ldi	r24, 0x9B	; 155
     6f2:	96 e0       	ldi	r25, 0x06	; 6
     6f4:	ca cf       	rjmp	.-108    	; 0x68a <setSoundNote>
     6f6:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     6f8:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     6fc:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     700:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     704:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     708:	88 3c       	cpi	r24, 0xC8	; 200
     70a:	91 05       	cpc	r25, r1
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	21 f4       	brne	.+8      	; 0x71a <buzz_play+0x70>
     712:	87 ee       	ldi	r24, 0xE7	; 231
     714:	95 e0       	ldi	r25, 0x05	; 5
     716:	b9 cf       	rjmp	.-142    	; 0x68a <setSoundNote>
     718:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     71a:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     71e:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     722:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     726:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     72a:	80 39       	cpi	r24, 0x90	; 144
     72c:	91 40       	sbci	r25, 0x01	; 1
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f4       	brne	.+8      	; 0x73c <buzz_play+0x92>
     734:	85 e6       	ldi	r24, 0x65	; 101
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	a8 cf       	rjmp	.-176    	; 0x68a <setSoundNote>
     73a:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     73c:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     740:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     744:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     748:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     74c:	88 35       	cpi	r24, 0x58	; 88
     74e:	92 40       	sbci	r25, 0x02	; 2
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	21 f4       	brne	.+8      	; 0x75e <buzz_play+0xb4>
     756:	8d ef       	ldi	r24, 0xFD	; 253
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	97 cf       	rjmp	.-210    	; 0x68a <setSoundNote>
     75c:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     75e:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     762:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     766:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     76a:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     76e:	80 32       	cpi	r24, 0x20	; 32
     770:	93 40       	sbci	r25, 0x03	; 3
     772:	a1 05       	cpc	r26, r1
     774:	b1 05       	cpc	r27, r1
     776:	21 f4       	brne	.+8      	; 0x780 <buzz_play+0xd6>
     778:	88 ef       	ldi	r24, 0xF8	; 248
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	86 cf       	rjmp	.-244    	; 0x68a <setSoundNote>
     77e:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     780:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     784:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     788:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     78c:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     790:	80 3b       	cpi	r24, 0xB0	; 176
     792:	94 40       	sbci	r25, 0x04	; 4
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	09 f0       	breq	.+2      	; 0x79c <buzz_play+0xf2>
     79a:	50 c1       	rjmp	.+672    	; 0xa3c <buzz_play+0x392>
     79c:	6e cf       	rjmp	.-292    	; 0x67a <buzz_MUTE>
     79e:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     7a0:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     7a4:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     7a8:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     7ac:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     7b0:	88 3c       	cpi	r24, 0xC8	; 200
     7b2:	91 05       	cpc	r25, r1
     7b4:	a1 05       	cpc	r26, r1
     7b6:	b1 05       	cpc	r27, r1
     7b8:	20 f4       	brcc	.+8      	; 0x7c2 <buzz_play+0x118>
     7ba:	8b e9       	ldi	r24, 0x9B	; 155
     7bc:	96 e0       	ldi	r25, 0x06	; 6
     7be:	65 cf       	rjmp	.-310    	; 0x68a <setSoundNote>
     7c0:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     7c2:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     7c6:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     7ca:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     7ce:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     7d2:	82 3d       	cpi	r24, 0xD2	; 210
     7d4:	91 05       	cpc	r25, r1
     7d6:	a1 05       	cpc	r26, r1
     7d8:	b1 05       	cpc	r27, r1
     7da:	21 f4       	brne	.+8      	; 0x7e4 <buzz_play+0x13a>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	54 cf       	rjmp	.-344    	; 0x68a <setSoundNote>
     7e2:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     7e4:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     7e8:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     7ec:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     7f0:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     7f4:	8c 3d       	cpi	r24, 0xDC	; 220
     7f6:	91 05       	cpc	r25, r1
     7f8:	a1 05       	cpc	r26, r1
     7fa:	b1 05       	cpc	r27, r1
     7fc:	21 f4       	brne	.+8      	; 0x806 <buzz_play+0x15c>
     7fe:	87 ee       	ldi	r24, 0xE7	; 231
     800:	95 e0       	ldi	r25, 0x05	; 5
     802:	43 cf       	rjmp	.-378    	; 0x68a <setSoundNote>
     804:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     806:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     80a:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     80e:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     812:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     816:	80 39       	cpi	r24, 0x90	; 144
     818:	91 40       	sbci	r25, 0x01	; 1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	21 f4       	brne	.+8      	; 0x828 <buzz_play+0x17e>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	32 cf       	rjmp	.-412    	; 0x68a <setSoundNote>
     826:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     828:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     82c:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     830:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     834:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     838:	8e 3a       	cpi	r24, 0xAE	; 174
     83a:	91 40       	sbci	r25, 0x01	; 1
     83c:	a1 05       	cpc	r26, r1
     83e:	b1 05       	cpc	r27, r1
     840:	21 f4       	brne	.+8      	; 0x84a <buzz_play+0x1a0>
     842:	85 e6       	ldi	r24, 0x65	; 101
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	21 cf       	rjmp	.-446    	; 0x68a <setSoundNote>
     848:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     84a:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     84e:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     852:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     856:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     85a:	88 35       	cpi	r24, 0x58	; 88
     85c:	92 40       	sbci	r25, 0x02	; 2
     85e:	a1 05       	cpc	r26, r1
     860:	b1 05       	cpc	r27, r1
     862:	09 f0       	breq	.+2      	; 0x866 <buzz_play+0x1bc>
     864:	eb c0       	rjmp	.+470    	; 0xa3c <buzz_play+0x392>
     866:	09 cf       	rjmp	.-494    	; 0x67a <buzz_MUTE>
     868:	08 95       	ret
		  break;
		  case BUZZ_UNENROLLED:
		  		  if(TICK.buzz_1ms<75)setSoundNote(_960Hz);
     86a:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     86e:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     872:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     876:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     87a:	8b 34       	cpi	r24, 0x4B	; 75
     87c:	91 05       	cpc	r25, r1
     87e:	a1 05       	cpc	r26, r1
     880:	b1 05       	cpc	r27, r1
     882:	20 f4       	brcc	.+8      	; 0x88c <buzz_play+0x1e2>
     884:	82 e1       	ldi	r24, 0x12	; 18
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	00 cf       	rjmp	.-512    	; 0x68a <setSoundNote>
     88a:	08 95       	ret
		  		  else if(TICK.buzz_1ms<150)setSoundNote(BUZZ_MUTE);
     88c:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     890:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     894:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     898:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     89c:	86 39       	cpi	r24, 0x96	; 150
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	20 f4       	brcc	.+8      	; 0x8ae <buzz_play+0x204>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	ef ce       	rjmp	.-546    	; 0x68a <setSoundNote>
     8ac:	08 95       	ret
		  		  else if(TICK.buzz_1ms<225)setSoundNote(_960Hz);
     8ae:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     8b2:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     8b6:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     8ba:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     8be:	81 3e       	cpi	r24, 0xE1	; 225
     8c0:	91 05       	cpc	r25, r1
     8c2:	a1 05       	cpc	r26, r1
     8c4:	b1 05       	cpc	r27, r1
     8c6:	20 f4       	brcc	.+8      	; 0x8d0 <buzz_play+0x226>
     8c8:	82 e1       	ldi	r24, 0x12	; 18
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	de ce       	rjmp	.-580    	; 0x68a <setSoundNote>
		  		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_MUTE);
     8ce:	08 95       	ret
     8d0:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     8d4:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     8d8:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     8dc:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     8e0:	8c 32       	cpi	r24, 0x2C	; 44
     8e2:	91 40       	sbci	r25, 0x01	; 1
     8e4:	a1 05       	cpc	r26, r1
     8e6:	b1 05       	cpc	r27, r1
     8e8:	20 f4       	brcc	.+8      	; 0x8f2 <buzz_play+0x248>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	cd ce       	rjmp	.-614    	; 0x68a <setSoundNote>
		  		  else if(TICK.buzz_1ms<375)setSoundNote(_960Hz);
     8f0:	08 95       	ret
     8f2:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     8f6:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     8fa:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     8fe:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     902:	87 37       	cpi	r24, 0x77	; 119
     904:	91 40       	sbci	r25, 0x01	; 1
     906:	a1 05       	cpc	r26, r1
     908:	b1 05       	cpc	r27, r1
     90a:	20 f4       	brcc	.+8      	; 0x914 <buzz_play+0x26a>
     90c:	82 e1       	ldi	r24, 0x12	; 18
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	bc ce       	rjmp	.-648    	; 0x68a <setSoundNote>
		  		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     912:	08 95       	ret
     914:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     918:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     91c:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     920:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     924:	82 3c       	cpi	r24, 0xC2	; 194
     926:	91 40       	sbci	r25, 0x01	; 1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <buzz_play+0x286>
     92e:	86 c0       	rjmp	.+268    	; 0xa3c <buzz_play+0x392>
     930:	a4 ce       	rjmp	.-696    	; 0x67a <buzz_MUTE>
		  		  break;
		  break;
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     932:	08 95       	ret
     934:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     938:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     93c:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     940:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     944:	84 36       	cpi	r24, 0x64	; 100
     946:	91 05       	cpc	r25, r1
     948:	a1 05       	cpc	r26, r1
     94a:	b1 05       	cpc	r27, r1
     94c:	20 f4       	brcc	.+8      	; 0x956 <buzz_play+0x2ac>
     94e:	82 e1       	ldi	r24, 0x12	; 18
     950:	94 e0       	ldi	r25, 0x04	; 4
     952:	9b ce       	rjmp	.-714    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     954:	08 95       	ret
     956:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     95a:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     95e:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     962:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     966:	88 3c       	cpi	r24, 0xC8	; 200
     968:	91 05       	cpc	r25, r1
     96a:	a1 05       	cpc	r26, r1
     96c:	b1 05       	cpc	r27, r1
     96e:	20 f4       	brcc	.+8      	; 0x978 <buzz_play+0x2ce>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	8a ce       	rjmp	.-748    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     976:	08 95       	ret
     978:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     97c:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     980:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     984:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     988:	8c 32       	cpi	r24, 0x2C	; 44
     98a:	91 40       	sbci	r25, 0x01	; 1
     98c:	a1 05       	cpc	r26, r1
     98e:	b1 05       	cpc	r27, r1
     990:	20 f4       	brcc	.+8      	; 0x99a <buzz_play+0x2f0>
     992:	82 e1       	ldi	r24, 0x12	; 18
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	79 ce       	rjmp	.-782    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     998:	08 95       	ret
     99a:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     99e:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     9a2:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     9a6:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     9aa:	82 3c       	cpi	r24, 0xC2	; 194
     9ac:	91 40       	sbci	r25, 0x01	; 1
     9ae:	a1 05       	cpc	r26, r1
     9b0:	b1 05       	cpc	r27, r1
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <buzz_play+0x30c>
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <buzz_play+0x392>
     9b6:	61 ce       	rjmp	.-830    	; 0x67a <buzz_MUTE>
		  break;
		  case BUZZ_ESP8266_CONNECTED:
		  if(TICK.buzz_1ms<100)setSoundNote(BUZZ_240Hz);
     9b8:	08 95       	ret
     9ba:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     9be:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     9c2:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     9c6:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     9ca:	84 36       	cpi	r24, 0x64	; 100
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	20 f4       	brcc	.+8      	; 0x9dc <buzz_play+0x332>
     9d4:	87 e4       	ldi	r24, 0x47	; 71
     9d6:	90 e1       	ldi	r25, 0x10	; 16
     9d8:	58 ce       	rjmp	.-848    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     9da:	08 95       	ret
     9dc:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     9e0:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     9e4:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     9e8:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     9ec:	88 3c       	cpi	r24, 0xC8	; 200
     9ee:	91 05       	cpc	r25, r1
     9f0:	a1 05       	cpc	r26, r1
     9f2:	b1 05       	cpc	r27, r1
     9f4:	20 f4       	brcc	.+8      	; 0x9fe <buzz_play+0x354>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	47 ce       	rjmp	.-882    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_480Hz);
     9fc:	08 95       	ret
     9fe:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     a02:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     a06:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     a0a:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     a0e:	8c 32       	cpi	r24, 0x2C	; 44
     a10:	91 40       	sbci	r25, 0x01	; 1
     a12:	a1 05       	cpc	r26, r1
     a14:	b1 05       	cpc	r27, r1
     a16:	20 f4       	brcc	.+8      	; 0xa20 <buzz_play+0x376>
     a18:	84 e2       	ldi	r24, 0x24	; 36
     a1a:	98 e0       	ldi	r25, 0x08	; 8
     a1c:	36 ce       	rjmp	.-916    	; 0x68a <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     a1e:	08 95       	ret
     a20:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <TICK+0x4>
     a24:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <TICK+0x5>
     a28:	a0 91 7c 06 	lds	r26, 0x067C	; 0x80067c <TICK+0x6>
     a2c:	b0 91 7d 06 	lds	r27, 0x067D	; 0x80067d <TICK+0x7>
     a30:	82 3c       	cpi	r24, 0xC2	; 194
     a32:	91 40       	sbci	r25, 0x01	; 1
     a34:	a1 05       	cpc	r26, r1
     a36:	b1 05       	cpc	r27, r1
     a38:	09 f4       	brne	.+2      	; 0xa3c <buzz_play+0x392>
     a3a:	1f ce       	rjmp	.-962    	; 0x67a <buzz_MUTE>
     a3c:	08 95       	ret

00000a3e <__vector_15>:
void logojector_OFF();

int start_timer_flag=1;
int start_timeout_count_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     a64:	e6 e7       	ldi	r30, 0x76	; 118
     a66:	f6 e0       	ldi	r31, 0x06	; 6
     a68:	84 81       	ldd	r24, Z+4	; 0x04
     a6a:	95 81       	ldd	r25, Z+5	; 0x05
     a6c:	a6 81       	ldd	r26, Z+6	; 0x06
     a6e:	b7 81       	ldd	r27, Z+7	; 0x07
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	a1 1d       	adc	r26, r1
     a74:	b1 1d       	adc	r27, r1
     a76:	84 83       	std	Z+4, r24	; 0x04
     a78:	95 83       	std	Z+5, r25	; 0x05
     a7a:	a6 83       	std	Z+6, r26	; 0x06
     a7c:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	a2 81       	ldd	r26, Z+2	; 0x02
     a84:	b3 81       	ldd	r27, Z+3	; 0x03
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	a1 1d       	adc	r26, r1
     a8a:	b1 1d       	adc	r27, r1
     a8c:	80 83       	st	Z, r24
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	a2 83       	std	Z+2, r26	; 0x02
     a92:	b3 83       	std	Z+3, r27	; 0x03
	TICK.timeout_tick_1ms++;
     a94:	80 85       	ldd	r24, Z+8	; 0x08
     a96:	91 85       	ldd	r25, Z+9	; 0x09
     a98:	a2 85       	ldd	r26, Z+10	; 0x0a
     a9a:	b3 85       	ldd	r27, Z+11	; 0x0b
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	a1 1d       	adc	r26, r1
     aa0:	b1 1d       	adc	r27, r1
     aa2:	80 87       	std	Z+8, r24	; 0x08
     aa4:	91 87       	std	Z+9, r25	; 0x09
     aa6:	a2 87       	std	Z+10, r26	; 0x0a
     aa8:	b3 87       	std	Z+11, r27	; 0x0b
	buzz_play(); //
     aaa:	ff dd       	rcall	.-1026   	; 0x6aa <buzz_play>
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0b be       	out	0x3b, r0	; 59
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <start_timer>:
	 
}

void start_timer(void)
{
	TICK.tick_1ms=0;
     ad2:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <TICK>
     ad6:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <TICK+0x1>
     ada:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <TICK+0x2>
     ade:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <TICK+0x3>
	start_timer_flag=1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <start_timer_flag+0x1>
     aea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <start_timer_flag>
     aee:	08 95       	ret

00000af0 <start_timeout_count>:
}
void start_timeout_count(void){
	TICK.timeout_tick_1ms=0;
     af0:	10 92 7e 06 	sts	0x067E, r1	; 0x80067e <TICK+0x8>
     af4:	10 92 7f 06 	sts	0x067F, r1	; 0x80067f <TICK+0x9>
     af8:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <TICK+0xa>
     afc:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <TICK+0xb>
	start_timeout_count_flag=0;
     b00:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b04:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     b08:	08 95       	ret

00000b0a <request_reset_to_admin>:
		start_timeout_count_flag=1;request_reset_to_admin(state);
	}
	while(start_timeout_count_flag); //시스템 중지v
}
void request_reset_to_admin(char* state)
{
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	65 97       	sbiw	r28, 0x15	; 21
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	bc 01       	movw	r22, r24
	
	char buf[21]="ERR Code:";
     b20:	9a e0       	ldi	r25, 0x0A	; 10
     b22:	e7 e0       	ldi	r30, 0x07	; 7
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	de 01       	movw	r26, r28
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	9a 95       	dec	r25
     b30:	e1 f7       	brne	.-8      	; 0xb2a <request_reset_to_admin+0x20>
     b32:	fe 01       	movw	r30, r28
     b34:	3b 96       	adiw	r30, 0x0b	; 11
     b36:	8b e0       	ldi	r24, 0x0B	; 11
     b38:	df 01       	movw	r26, r30
     b3a:	1d 92       	st	X+, r1
     b3c:	8a 95       	dec	r24
     b3e:	e9 f7       	brne	.-6      	; 0xb3a <request_reset_to_admin+0x30>
	strcat(buf,state);
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <strcat>
	
	i2c_lcd_clear();
     b48:	da d3       	rcall	.+1972   	; 0x12fe <i2c_lcd_clear>
	i2c_lcd_string(1,0,"Initial err.");
     b4a:	41 e7       	ldi	r20, 0x71	; 113
     b4c:	51 e0       	ldi	r21, 0x01	; 1
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	c6 d3       	rcall	.+1932   	; 0x12e0 <i2c_lcd_string>
	i2c_lcd_string(2,0,"Plz, Trying reset.");
     b54:	4e e7       	ldi	r20, 0x7E	; 126
     b56:	51 e0       	ldi	r21, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	c1 d3       	rcall	.+1922   	; 0x12e0 <i2c_lcd_string>
	i2c_lcd_string(3,0,buf);//따로 전역으로 빼주지 않아도 상관없음. 함수 안에서 다 처리하므로.
     b5e:	ae 01       	movw	r20, r28
     b60:	4f 5f       	subi	r20, 0xFF	; 255
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	bb d3       	rcall	.+1910   	; 0x12e0 <i2c_lcd_string>
}
     b6a:	65 96       	adiw	r28, 0x15	; 21
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <timeout_check>:
}

void timeout_check(char* state){
	//timeout_tick_1ms 변수가 10000을 넘지 않는다면 if구문을 돌지 않으며, 마찬가지로 while루프도 돌지 않음.
	
	if(TICK.timeout_tick_1ms>10000) {//10초 이상 경과 한 뒤 해당 구문을 들어갈 경우.
     b7c:	40 91 7e 06 	lds	r20, 0x067E	; 0x80067e <TICK+0x8>
     b80:	50 91 7f 06 	lds	r21, 0x067F	; 0x80067f <TICK+0x9>
     b84:	60 91 80 06 	lds	r22, 0x0680	; 0x800680 <TICK+0xa>
     b88:	70 91 81 06 	lds	r23, 0x0681	; 0x800681 <TICK+0xb>
     b8c:	41 31       	cpi	r20, 0x11	; 17
     b8e:	57 42       	sbci	r21, 0x27	; 39
     b90:	61 05       	cpc	r22, r1
     b92:	71 05       	cpc	r23, r1
     b94:	38 f0       	brcs	.+14     	; 0xba4 <timeout_check+0x28>
		start_timeout_count_flag=1;request_reset_to_admin(state);
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b9e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba2:	b3 df       	rcall	.-154    	; 0xb0a <request_reset_to_admin>
	}
	while(start_timeout_count_flag); //시스템 중지v
     ba4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	f1 f7       	brne	.-4      	; 0xbac <timeout_check+0x30>
}
     bb0:	08 95       	ret

00000bb2 <esp8266_init>:

//AP 끊는함수하고, TCP끊는거, 다시연결하는거 등등 > 터미널환경에서 가능케 할수도 있어야함
//리셋, 실패시 ssid, passward 묻고, 마찬가지로 TCP연결 실패시 또한 다시 ip, port 묻는다

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port)
{
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	7c 01       	movw	r14, r24
     bc4:	6b 01       	movw	r12, r22
     bc6:	ea 01       	movw	r28, r20
     bc8:	89 01       	movw	r16, r18
	//타임아웃 시작
	start_timeout_count();
     bca:	92 df       	rcall	.-220    	; 0xaf0 <start_timeout_count>
	uart1_tx_string("AT+RST\r\n");	 //리셋 신호 이후 추가 데이터가 들어와서, 딜레이로 강제 정지 시켜줘야 함
     bcc:	81 e9       	ldi	r24, 0x91	; 145
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	4c d7       	rcall	.+3736   	; 0x1a6a <uart1_tx_string>
     bd2:	2f ef       	ldi	r18, 0xFF	; 255
     bd4:	81 e1       	ldi	r24, 0x11	; 17
     bd6:	9a e7       	ldi	r25, 0x7A	; 122
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	90 40       	sbci	r25, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <esp8266_init+0x26>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <esp8266_init+0x30>
     be2:	00 00       	nop
	_delay_ms(2500);
	timeout_check(TIMEOUT_ATRST);
     be4:	8a e9       	ldi	r24, 0x9A	; 154
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	c9 df       	rcall	.-110    	; 0xb7c <timeout_check>
	i2c_lcd_string(2,0,"     OOO_______     ");
     bea:	41 ea       	ldi	r20, 0xA1	; 161
     bec:	51 e0       	ldi	r21, 0x01	; 1
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	82 e0       	ldi	r24, 0x02	; 2
	
	
	start_timeout_count();
     bf2:	76 d3       	rcall	.+1772   	; 0x12e0 <i2c_lcd_string>
	uart1_tx_string("AT+GMR\r\n");
     bf4:	7d df       	rcall	.-262    	; 0xaf0 <start_timeout_count>
     bf6:	86 eb       	ldi	r24, 0xB6	; 182
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	37 d7       	rcall	.+3694   	; 0x1a6a <uart1_tx_string>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     bfc:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     c00:	81 11       	cpse	r24, r1
		timeout_check(TIMEOUT_ATGMR);
     c02:	07 c0       	rjmp	.+14     	; 0xc12 <esp8266_init+0x60>
     c04:	8f eb       	ldi	r24, 0xBF	; 191
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	b9 df       	rcall	.-142    	; 0xb7c <timeout_check>
	
	
	start_timeout_count();
	uart1_tx_string("AT+GMR\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c0a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     c0e:	88 23       	and	r24, r24
		timeout_check(TIMEOUT_ATGMR);
	}
	esp8266_return_result_flag=0;
     c10:	c9 f3       	breq	.-14     	; 0xc04 <esp8266_init+0x52>
     c12:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	
	
	start_timeout_count();
     c16:	6c df       	rcall	.-296    	; 0xaf0 <start_timeout_count>
	uart1_tx_string("AT+CWMODE=1\r\n"); // OK sign 말고도 다른 신호도 들어오기 때문에 걸어놓음
     c18:	86 ec       	ldi	r24, 0xC6	; 198
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	26 d7       	rcall	.+3660   	; 0x1a6a <uart1_tx_string>
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	87 ea       	ldi	r24, 0xA7	; 167
     c22:	91 e6       	ldi	r25, 0x61	; 97
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	90 40       	sbci	r25, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <esp8266_init+0x72>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <esp8266_init+0x7c>
     c2e:	00 00       	nop
	_delay_ms(2000);
	esp8266_return_result_flag=0;
     c30:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	timeout_check(TIMEOUT_ATCWMODE);
     c34:	84 ed       	ldi	r24, 0xD4	; 212
     c36:	91 e0       	ldi	r25, 0x01	; 1
	i2c_lcd_string(2,0,"     OOOO______     ");
     c38:	a1 df       	rcall	.-190    	; 0xb7c <timeout_check>
     c3a:	4e ed       	ldi	r20, 0xDE	; 222
     c3c:	51 e0       	ldi	r21, 0x01	; 1
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	4e d3       	rcall	.+1692   	; 0x12e0 <i2c_lcd_string>
	
	
	//
	
	start_timeout_count();
     c44:	55 df       	rcall	.-342    	; 0xaf0 <start_timeout_count>
	uart1_tx_string("AT+CWMODE?\r\n");
     c46:	83 ef       	ldi	r24, 0xF3	; 243
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0f d7       	rcall	.+3614   	; 0x1a6a <uart1_tx_string>
     c4c:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag) {
     c50:	81 11       	cpse	r24, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <esp8266_init+0xb0>
		timeout_check(TIMEOUT_ATCWMODE_);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	91 df       	rcall	.-222    	; 0xb7c <timeout_check>
	//
	
	start_timeout_count();
	uart1_tx_string("AT+CWMODE?\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag) {
     c5a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     c5e:	88 23       	and	r24, r24
		timeout_check(TIMEOUT_ATCWMODE_);
	}
	esp8266_return_result_flag=0;
     c60:	c9 f3       	breq	.-14     	; 0xc54 <esp8266_init+0xa2>
     c62:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	
		
	start_timeout_count();
     c66:	44 df       	rcall	.-376    	; 0xaf0 <start_timeout_count>
	uart1_tx_string("AT+CWLAP\r\n");
     c68:	8b e0       	ldi	r24, 0x0B	; 11
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	fe d6       	rcall	.+3580   	; 0x1a6a <uart1_tx_string>
     c6e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c72:	81 11       	cpse	r24, r1
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <esp8266_init+0xd2>
		timeout_check(TIMEOUT_ATCWLAP);
     c76:	86 e1       	ldi	r24, 0x16	; 22
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	80 df       	rcall	.-256    	; 0xb7c <timeout_check>
	
		
	start_timeout_count();
	uart1_tx_string("AT+CWLAP\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c7c:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     c80:	88 23       	and	r24, r24
		timeout_check(TIMEOUT_ATCWLAP);
	}
	esp8266_return_result_flag=0;
     c82:	c9 f3       	breq	.-14     	; 0xc76 <esp8266_init+0xc4>
     c84:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOO_____     ");
     c88:	4f e1       	ldi	r20, 0x1F	; 31
     c8a:	52 e0       	ldi	r21, 0x02	; 2
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	82 e0       	ldi	r24, 0x02	; 2
	
	
	start_timeout_count();
     c90:	27 d3       	rcall	.+1614   	; 0x12e0 <i2c_lcd_string>
     c92:	2e df       	rcall	.-420    	; 0xaf0 <start_timeout_count>
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
     c94:	a6 01       	movw	r20, r12
     c96:	b7 01       	movw	r22, r14
     c98:	84 e3       	ldi	r24, 0x34	; 52
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	52 d7       	rcall	.+3748   	; 0x1b42 <connect_to_AP>
     c9e:	e5 d6       	rcall	.+3530   	; 0x1a6a <uart1_tx_string>
     ca0:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     ca4:	81 11       	cpse	r24, r1
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <esp8266_init+0x104>
		timeout_check(TIMEOUT_ATCWJAP);
     ca8:	8f e3       	ldi	r24, 0x3F	; 63
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	67 df       	rcall	.-306    	; 0xb7c <timeout_check>
     cae:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
	
	
	start_timeout_count();
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     cb2:	88 23       	and	r24, r24
     cb4:	c9 f3       	breq	.-14     	; 0xca8 <esp8266_init+0xf6>
		timeout_check(TIMEOUT_ATCWJAP);
	}
	esp8266_return_result_flag=0;
     cb6:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOO____     ");
     cba:	48 e4       	ldi	r20, 0x48	; 72
     cbc:	52 e0       	ldi	r21, 0x02	; 2
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	0e d3       	rcall	.+1564   	; 0x12e0 <i2c_lcd_string>
     cc4:	15 df       	rcall	.-470    	; 0xaf0 <start_timeout_count>
	
	//AT+SWQAP  AP 접속 끊기
	
	start_timeout_count();
     cc6:	8d e5       	ldi	r24, 0x5D	; 93
	uart1_tx_string("AT+CIFSR\r\n");
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	cf d6       	rcall	.+3486   	; 0x1a6a <uart1_tx_string>
     ccc:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     cd0:	81 11       	cpse	r24, r1
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <esp8266_init+0x130>
		timeout_check(TIMEOUT_ATCIFSR);
     cd4:	88 e6       	ldi	r24, 0x68	; 104
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	51 df       	rcall	.-350    	; 0xb7c <timeout_check>
	//AT+SWQAP  AP 접속 끊기
	
	start_timeout_count();
	uart1_tx_string("AT+CIFSR\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     cda:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     cde:	88 23       	and	r24, r24
     ce0:	c9 f3       	breq	.-14     	; 0xcd4 <esp8266_init+0x122>
		timeout_check(TIMEOUT_ATCIFSR);
	} 
	esp8266_return_result_flag=0;
     ce2:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOO___     ");
     ce6:	41 e7       	ldi	r20, 0x71	; 113
     ce8:	52 e0       	ldi	r21, 0x02	; 2
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	f8 d2       	rcall	.+1520   	; 0x12e0 <i2c_lcd_string>
	
	
	
	start_timeout_count();
     cf0:	ff de       	rcall	.-514    	; 0xaf0 <start_timeout_count>
     cf2:	b8 01       	movw	r22, r16
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
     cf4:	ce 01       	movw	r24, r28
     cf6:	7b d7       	rcall	.+3830   	; 0x1bee <TCP_connect>
     cf8:	b8 d6       	rcall	.+3440   	; 0x1a6a <uart1_tx_string>
     cfa:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     cfe:	81 11       	cpse	r24, r1
	//AT+CIPCLOSE 
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     d00:	07 c0       	rjmp	.+14     	; 0xd10 <esp8266_init+0x15e>
     d02:	86 e8       	ldi	r24, 0x86	; 134
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	3a df       	rcall	.-396    	; 0xb7c <timeout_check>
		timeout_check(TIMEOUT_ATCIPSTART);
     d08:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <esp8266_return_result_flag>
     d0c:	88 23       	and	r24, r24
	
	start_timeout_count();
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
	//AT+CIPCLOSE 
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     d0e:	c9 f3       	breq	.-14     	; 0xd02 <esp8266_init+0x150>
     d10:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <esp8266_return_result_flag>
     d14:	42 e9       	ldi	r20, 0x92	; 146
		timeout_check(TIMEOUT_ATCIPSTART);
	}
	esp8266_return_result_flag=0;
     d16:	52 e0       	ldi	r21, 0x02	; 2
     d18:	60 e0       	ldi	r22, 0x00	; 0
	i2c_lcd_string(2,0,"     OOOOOOOO__     ");
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	e1 d2       	rcall	.+1474   	; 0x12e0 <i2c_lcd_string>
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	81 ee       	ldi	r24, 0xE1	; 225
     d22:	94 e0       	ldi	r25, 0x04	; 4
     d24:	21 50       	subi	r18, 0x01	; 1
     d26:	80 40       	sbci	r24, 0x00	; 0
     d28:	90 40       	sbci	r25, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <esp8266_init+0x172>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <esp8266_init+0x17c>
     d2e:	00 00       	nop
     d30:	47 ea       	ldi	r20, 0xA7	; 167
     d32:	52 e0       	ldi	r21, 0x02	; 2
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	82 e0       	ldi	r24, 0x02	; 2
	//1byte당 해봐야 1ms 정도밖에 소요되지 않는다.
	_delay_ms(100);// OK sign 말고도 Linked sign까지 들어온다. 이 문자까지 잡아내려면 또 구문을 추가해야되는데, 번거로워서 일단 딜레이로 처리함.

	i2c_lcd_string(2,0,"     OOOOOOOOO_     ");
     d38:	d3 d2       	rcall	.+1446   	; 0x12e0 <i2c_lcd_string>
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
	
}
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	08 95       	ret

00000d4c <logojector_ON>:
     d4c:	df 9a       	sbi	0x1b, 7	; 27
     d4e:	08 95       	ret

00000d50 <RC522_data_state_check_and_actuate>:
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     d62:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <received_state>
     d66:	91 30       	cpi	r25, 0x01	; 1
     d68:	09 f0       	breq	.+2      	; 0xd6c <RC522_data_state_check_and_actuate+0x1c>
     d6a:	16 c1       	rjmp	.+556    	; 0xf98 <RC522_data_state_check_and_actuate+0x248>
     d6c:	f9 01       	movw	r30, r18
		//send to esp8266 and receive result data.
		if((*tggl)==ENTRANCE_GATE){
     d6e:	80 81       	ld	r24, Z
     d70:	81 11       	cpse	r24, r1
     d72:	cf c0       	rjmp	.+414    	; 0xf12 <RC522_data_state_check_and_actuate+0x1c2>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     d74:	8c eb       	ldi	r24, 0xBC	; 188
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	78 d6       	rcall	.+3312   	; 0x1a6a <uart1_tx_string>
			//_delay_ms(20); //위 데이터 다 보낼때 까지 대기해야 하는데, 사실 없어도 되는 라인
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     d7a:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <esp8266_send_ready_flag>
     d7e:	88 23       	and	r24, r24
     d80:	e1 f3       	breq	.-8      	; 0xd7a <RC522_data_state_check_and_actuate+0x2a>
			esp8266_send_ready_flag=0;
     d82:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <esp8266_send_ready_flag>
     d86:	c2 e5       	ldi	r28, 0x52	; 82
     d88:	d6 e0       	ldi	r29, 0x06	; 6
     d8a:	06 e5       	ldi	r16, 0x56	; 86
     d8c:	16 e0       	ldi	r17, 0x06	; 6
			
			//esp8266으로 uid데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     d8e:	89 91       	ld	r24, Y+
     d90:	a9 d6       	rcall	.+3410   	; 0x1ae4 <HexToString>
     d92:	6b d6       	rcall	.+3286   	; 0x1a6a <uart1_tx_string>
				uart1_tx_char(' ');
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	61 d6       	rcall	.+3266   	; 0x1a5a <uart1_tx_char>
     d98:	c0 17       	cp	r28, r16
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
			esp8266_send_ready_flag=0;
			
			//esp8266으로 uid데이터 전송
			for(int i=0; i<4; i++)
     d9a:	d1 07       	cpc	r29, r17
     d9c:	c1 f7       	brne	.-16     	; 0xd8e <RC522_data_state_check_and_actuate+0x3e>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
     d9e:	87 eb       	ldi	r24, 0xB7	; 183
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	63 d6       	rcall	.+3270   	; 0x1a6a <uart1_tx_string>
     da4:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <esp8266_receiving_flag>

			//uart0_tx_string("\nline:304\n");
			/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
			//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     da8:	88 23       	and	r24, r24
     daa:	e1 f3       	breq	.-8      	; 0xda4 <RC522_data_state_check_and_actuate+0x54>
     dac:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
     db0:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <esp8266_received_data>
			//uart0_tx_string("\nline:309\n");
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
     db4:	8f 34       	cpi	r24, 0x4F	; 79
     db6:	09 f0       	breq	.+2      	; 0xdba <RC522_data_state_check_and_actuate+0x6a>
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
				//uart0_tx_string("\nline:313\n");
				logojector_ON();
     db8:	6c c0       	rjmp	.+216    	; 0xe92 <RC522_data_state_check_and_actuate+0x142>
     dba:	c8 df       	rcall	.-112    	; 0xd4c <logojector_ON>
				start_timer(); //ticktim을 0으로 클리어시킴.
     dbc:	8a de       	rcall	.-748    	; 0xad2 <start_timer>
     dbe:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <rfid_user_flag+0x1>
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
     dc2:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <rfid_user_flag>
     dc6:	c9 eb       	ldi	r28, 0xB9	; 185
     dc8:	d4 e0       	ldi	r29, 0x04	; 4
     dca:	00 e0       	ldi	r16, 0x00	; 0
				for(int i=0; i<MAX_USER_COUNT;i++)
     dcc:	10 e0       	ldi	r17, 0x00	; 0
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
     dce:	ee 24       	eor	r14, r14
     dd0:	e3 94       	inc	r14
     dd2:	f1 2c       	mov	r15, r1
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     dd4:	64 e6       	ldi	r22, 0x64	; 100
     dd6:	73 e0       	ldi	r23, 0x03	; 3
     dd8:	ce 01       	movw	r24, r28
     dda:	a4 d7       	rcall	.+3912   	; 0x1d24 <strcmp>
     ddc:	89 2b       	or	r24, r25
     dde:	49 f4       	brne	.+18     	; 0xdf2 <RC522_data_state_check_and_actuate+0xa2>
     de0:	10 93 b8 04 	sts	0x04B8, r17	; 0x8004b8 <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
     de4:	00 93 b7 04 	sts	0x04B7, r16	; 0x8004b7 <rfid_user_count_pointer>
     de8:	f0 92 b6 04 	sts	0x04B6, r15	; 0x8004b6 <rfid_user_flag+0x1>
						rfid_user_flag=1;
     dec:	e0 92 b5 04 	sts	0x04B5, r14	; 0x8004b5 <rfid_user_flag>
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <RC522_data_state_check_and_actuate+0xb8>
						//i=MAX_USER_COUNT;//루프를 나오기 위함
						}else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0){
     df2:	62 e5       	ldi	r22, 0x52	; 82
     df4:	76 e0       	ldi	r23, 0x06	; 6
     df6:	ce 01       	movw	r24, r28
     df8:	95 d7       	rcall	.+3882   	; 0x1d24 <strcmp>
     dfa:	89 2b       	or	r24, r25
     dfc:	29 f4       	brne	.+10     	; 0xe08 <RC522_data_state_check_and_actuate+0xb8>
     dfe:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <rfid_user_flag+0x1>
						//만일 버퍼 안에 기존 유저가 들어있다면
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
     e02:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <rfid_user_flag>
     e06:	34 c0       	rjmp	.+104    	; 0xe70 <RC522_data_state_check_and_actuate+0x120>
     e08:	0f 5f       	subi	r16, 0xFF	; 255
				//uart0_tx_string("\nline:313\n");
				logojector_ON();
				start_timer(); //ticktim을 0으로 클리어시킴.
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	25 96       	adiw	r28, 0x05	; 5
     e0e:	05 30       	cpi	r16, 0x05	; 5
     e10:	11 05       	cpc	r17, r1
     e12:	01 f7       	brne	.-64     	; 0xdd4 <RC522_data_state_check_and_actuate+0x84>
     e14:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <rfid_user_flag>
					}
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				//uart0_tx_string("\nline:336\n");
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     e18:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <rfid_user_flag+0x1>
     e1c:	89 2b       	or	r24, r25
     e1e:	41 f1       	breq	.+80     	; 0xe70 <RC522_data_state_check_and_actuate+0x120>
     e20:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
     e24:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <rfid_user_count_pointer+0x1>
     e28:	9c 01       	movw	r18, r24
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	62 e5       	ldi	r22, 0x52	; 82
     e38:	76 e0       	ldi	r23, 0x06	; 6
     e3a:	87 54       	subi	r24, 0x47	; 71
     e3c:	9b 4f       	sbci	r25, 0xFB	; 251
					
					
					//start_timer(); //ticktim을 0으로 클리어시킴.
					
					//uart0_tx_string("\nline:344\n");
					i2c_lcd_clear();
     e3e:	7b d7       	rcall	.+3830   	; 0x1d36 <strcpy>
     e40:	5e d2       	rcall	.+1212   	; 0x12fe <i2c_lcd_clear>
					i2c_lcd_string(0,0,"Welcome,");
     e42:	4c ec       	ldi	r20, 0xCC	; 204
     e44:	52 e0       	ldi	r21, 0x02	; 2
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	4a d2       	rcall	.+1172   	; 0x12e0 <i2c_lcd_string>
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
     e4c:	4a e3       	ldi	r20, 0x3A	; 58
     e4e:	55 e0       	ldi	r21, 0x05	; 5
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	45 d2       	rcall	.+1162   	; 0x12e0 <i2c_lcd_string>
					i2c_lcd_string(2,0,"Empty Space=[00 /42]");
     e56:	45 ed       	ldi	r20, 0xD5	; 213
     e58:	52 e0       	ldi	r21, 0x02	; 2
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	82 e0       	ldi	r24, 0x02	; 2
					i2c_lcd_string(2,13,"40");
     e5e:	40 d2       	rcall	.+1152   	; 0x12e0 <i2c_lcd_string>
     e60:	4a ee       	ldi	r20, 0xEA	; 234
     e62:	52 e0       	ldi	r21, 0x02	; 2
     e64:	6d e0       	ldi	r22, 0x0D	; 13
     e66:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
     e68:	3b d2       	rcall	.+1142   	; 0x12e0 <i2c_lcd_string>
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	d1 db       	rcall	.-2142   	; 0x610 <setSoundClip>
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					i2c_lcd_clear();
     e6e:	13 c0       	rjmp	.+38     	; 0xe96 <RC522_data_state_check_and_actuate+0x146>
     e70:	46 d2       	rcall	.+1164   	; 0x12fe <i2c_lcd_clear>
					i2c_lcd_string(0,0,"Welcome,");
     e72:	4c ec       	ldi	r20, 0xCC	; 204
     e74:	52 e0       	ldi	r21, 0x02	; 2
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
     e7a:	32 d2       	rcall	.+1124   	; 0x12e0 <i2c_lcd_string>
     e7c:	4a e3       	ldi	r20, 0x3A	; 58
     e7e:	55 e0       	ldi	r21, 0x05	; 5
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	2d d2       	rcall	.+1114   	; 0x12e0 <i2c_lcd_string>
					i2c_lcd_string(2,0,"Already Recognized");
     e86:	4d ee       	ldi	r20, 0xED	; 237
     e88:	52 e0       	ldi	r21, 0x02	; 2
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	28 d2       	rcall	.+1104   	; 0x12e0 <i2c_lcd_string>
					
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') setSoundClip(BUZZ_FAIL);
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <RC522_data_state_check_and_actuate+0x146>
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	bd db       	rcall	.-2182   	; 0x610 <setSoundClip>
     e96:	2f ef       	ldi	r18, 0xFF	; 255
     e98:	89 ef       	ldi	r24, 0xF9	; 249
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	21 50       	subi	r18, 0x01	; 1
     e9e:	80 40       	sbci	r24, 0x00	; 0
     ea0:	90 40       	sbci	r25, 0x00	; 0
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <RC522_data_state_check_and_actuate+0x14c>
			
			_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			uart0_tx_char('\n');
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <RC522_data_state_check_and_actuate+0x156>
     ea6:	00 00       	nop
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
			uart0_tx_string("From server : ");
     eaa:	c5 d5       	rcall	.+2954   	; 0x1a36 <uart0_tx_char>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	93 e0       	ldi	r25, 0x03	; 3
			uart0_tx_string((char*)esp8266_received_data);
     eb0:	c6 d5       	rcall	.+2956   	; 0x1a3e <uart0_tx_string>
     eb2:	8a e3       	ldi	r24, 0x3A	; 58
     eb4:	95 e0       	ldi	r25, 0x05	; 5
			uart0_tx_char('\n');
     eb6:	c3 d5       	rcall	.+2950   	; 0x1a3e <uart0_tx_string>
     eb8:	8a e0       	ldi	r24, 0x0A	; 10
     eba:	bd d5       	rcall	.+2938   	; 0x1a36 <uart0_tx_char>
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f9 eb       	ldi	r31, 0xB9	; 185
     ec0:	ef 2e       	mov	r14, r31
     ec2:	f4 e0       	ldi	r31, 0x04	; 4
     ec4:	ff 2e       	mov	r15, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	0f 2e       	mov	r0, r31
     eca:	f2 ed       	ldi	r31, 0xD2	; 210
     ecc:	cf 2e       	mov	r12, r31
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
     ece:	f4 e0       	ldi	r31, 0x04	; 4
     ed0:	df 2e       	mov	r13, r31
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     ed2:	f0 2d       	mov	r31, r0
     ed4:	8b e5       	ldi	r24, 0x5B	; 91
     ed6:	af d5       	rcall	.+2910   	; 0x1a36 <uart0_tx_char>
     ed8:	f7 01       	movw	r30, r14
     eda:	81 91       	ld	r24, Z+
     edc:	8f 01       	movw	r16, r30
     ede:	02 d6       	rcall	.+3076   	; 0x1ae4 <HexToString>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     ee0:	ae d5       	rcall	.+2908   	; 0x1a3e <uart0_tx_string>
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
     ee4:	d0 e0       	ldi	r29, 0x00	; 0
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	a6 d5       	rcall	.+2892   	; 0x1a36 <uart0_tx_char>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     eea:	21 96       	adiw	r28, 0x01	; 1
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     eec:	f8 01       	movw	r30, r16
     eee:	81 91       	ld	r24, Z+
     ef0:	8f 01       	movw	r16, r30
     ef2:	f8 d5       	rcall	.+3056   	; 0x1ae4 <HexToString>
     ef4:	a4 d5       	rcall	.+2888   	; 0x1a3e <uart0_tx_string>
     ef6:	c3 30       	cpi	r28, 0x03	; 3
     ef8:	d1 05       	cpc	r29, r1
					if(j!=3)uart0_tx_char(' ');
     efa:	a9 f7       	brne	.-22     	; 0xee6 <RC522_data_state_check_and_actuate+0x196>
     efc:	8d e5       	ldi	r24, 0x5D	; 93
     efe:	9b d5       	rcall	.+2870   	; 0x1a36 <uart0_tx_char>
					//_delay_ms(10);
				}
				
				
				uart0_tx_char(']');
     f00:	8a e0       	ldi	r24, 0x0A	; 10
     f02:	99 d5       	rcall	.+2866   	; 0x1a36 <uart0_tx_char>
				uart0_tx_char('\n');
     f04:	f5 e0       	ldi	r31, 0x05	; 5
     f06:	ef 0e       	add	r14, r31
     f08:	f1 1c       	adc	r15, r1
     f0a:	ce 14       	cp	r12, r14
     f0c:	df 04       	cpc	r13, r15
     f0e:	11 f7       	brne	.-60     	; 0xed4 <RC522_data_state_check_and_actuate+0x184>
			uart0_tx_string("From server : ");
			uart0_tx_string((char*)esp8266_received_data);
			uart0_tx_char('\n');
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
     f10:	43 c0       	rjmp	.+134    	; 0xf98 <RC522_data_state_check_and_actuate+0x248>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	09 f0       	breq	.+2      	; 0xf18 <RC522_data_state_check_and_actuate+0x1c8>
     f16:	40 c0       	rjmp	.+128    	; 0xf98 <RC522_data_state_check_and_actuate+0x248>
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE){
     f18:	0f 2e       	mov	r0, r31
     f1a:	f9 eb       	ldi	r31, 0xB9	; 185
     f1c:	ef 2e       	mov	r14, r31
     f1e:	f4 e0       	ldi	r31, 0x04	; 4
     f20:	ff 2e       	mov	r15, r31
     f22:	f0 2d       	mov	r31, r0
     f24:	0f 2e       	mov	r0, r31
     f26:	f2 ed       	ldi	r31, 0xD2	; 210
     f28:	cf 2e       	mov	r12, r31
     f2a:	f4 e0       	ldi	r31, 0x04	; 4
     f2c:	df 2e       	mov	r13, r31
     f2e:	f0 2d       	mov	r31, r0
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
     f30:	e7 01       	movw	r28, r14
     f32:	64 e6       	ldi	r22, 0x64	; 100
     f34:	76 e0       	ldi	r23, 0x06	; 6
     f36:	ce 01       	movw	r24, r28
     f38:	f5 d6       	rcall	.+3562   	; 0x1d24 <strcmp>
     f3a:	89 2b       	or	r24, r25
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
     f3c:	59 f4       	brne	.+22     	; 0xf54 <RC522_data_state_check_and_actuate+0x204>
     f3e:	85 e0       	ldi	r24, 0x05	; 5
     f40:	e4 e6       	ldi	r30, 0x64	; 100
     f42:	f3 e0       	ldi	r31, 0x03	; 3
     f44:	de 01       	movw	r26, r28
     f46:	01 90       	ld	r0, Z+
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					start_timer(); //ticktim을 0으로 클리어시킴.
     f48:	0d 92       	st	X+, r0
     f4a:	8a 95       	dec	r24
					setSoundClip(BUZZ_SUCCESS);
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <RC522_data_state_check_and_actuate+0x1f6>
     f4e:	c1 dd       	rcall	.-1150   	; 0xad2 <start_timer>
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	5e db       	rcall	.-2372   	; 0x610 <setSoundClip>
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
     f54:	25 96       	adiw	r28, 0x05	; 5
     f56:	cc 15       	cp	r28, r12
     f58:	dd 05       	cpc	r29, r13
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
     f5a:	59 f7       	brne	.-42     	; 0xf32 <RC522_data_state_check_and_actuate+0x1e2>
     f5c:	8b e5       	ldi	r24, 0x5B	; 91
     f5e:	6b d5       	rcall	.+2774   	; 0x1a36 <uart0_tx_char>
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     f60:	f7 01       	movw	r30, r14
     f62:	81 91       	ld	r24, Z+
     f64:	8f 01       	movw	r16, r30
     f66:	be d5       	rcall	.+2940   	; 0x1ae4 <HexToString>
     f68:	6a d5       	rcall	.+2772   	; 0x1a3e <uart0_tx_string>
     f6a:	c0 e0       	ldi	r28, 0x00	; 0
     f6c:	d0 e0       	ldi	r29, 0x00	; 0
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	62 d5       	rcall	.+2756   	; 0x1a36 <uart0_tx_char>
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
     f72:	21 96       	adiw	r28, 0x01	; 1
     f74:	f8 01       	movw	r30, r16
     f76:	81 91       	ld	r24, Z+
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     f78:	8f 01       	movw	r16, r30
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     f7a:	b4 d5       	rcall	.+2920   	; 0x1ae4 <HexToString>
     f7c:	60 d5       	rcall	.+2752   	; 0x1a3e <uart0_tx_string>
     f7e:	c3 30       	cpi	r28, 0x03	; 3
     f80:	d1 05       	cpc	r29, r1
     f82:	a9 f7       	brne	.-22     	; 0xf6e <RC522_data_state_check_and_actuate+0x21e>
     f84:	8d e5       	ldi	r24, 0x5D	; 93
     f86:	57 d5       	rcall	.+2734   	; 0x1a36 <uart0_tx_char>
					if(j!=3)uart0_tx_char(' ');
     f88:	8a e0       	ldi	r24, 0x0A	; 10
     f8a:	55 d5       	rcall	.+2730   	; 0x1a36 <uart0_tx_char>
     f8c:	f5 e0       	ldi	r31, 0x05	; 5
					//_delay_ms(10);
				}
				uart0_tx_char(']');
     f8e:	ef 0e       	add	r14, r31
     f90:	f1 1c       	adc	r15, r1
     f92:	ec 14       	cp	r14, r12
				uart0_tx_char('\n');
     f94:	fd 04       	cpc	r15, r13
     f96:	11 f7       	brne	.-60     	; 0xf5c <RC522_data_state_check_and_actuate+0x20c>
     f98:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <received_state>
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
					setSoundClip(BUZZ_SUCCESS);
				}//그곳 버퍼를 비움
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
}
     faa:	cf 90       	pop	r12
     fac:	08 95       	ret

00000fae <logojector_OFF>:
     fae:	df 98       	cbi	0x1b, 7	; 27
     fb0:	08 95       	ret

00000fb2 <systems_init>:
     fb2:	78 94       	sei
     fb4:	8f e8       	ldi	r24, 0x8F	; 143
     fb6:	8a bb       	out	0x1a, r24	; 26
     fb8:	f8 94       	cli
     fba:	f2 d4       	rcall	.+2532   	; 0x19a0 <timer0_init>
	DDRA=0x8f;
	
	cli(); //전역 인터럽트 해제
	
	timer0_init();
	timer3_init();
     fbc:	fa d4       	rcall	.+2548   	; 0x19b2 <timer3_init>
     fbe:	78 94       	sei
	sei(); //전역 인터럽트 허용
     fc0:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <TICK>
	TICK.tick_1ms=0;
     fc4:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <TICK+0x1>
     fc8:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <TICK+0x2>
     fcc:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <TICK+0x3>
	//사용하는 기능들 초기화 작업
	
	logojector_OFF();
     fd0:	ee df       	rcall	.-36     	; 0xfae <logojector_OFF>
	
	mfrc522_init(CH0);
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	78 d3       	rcall	.+1776   	; 0x16c6 <mfrc522_init>
	mfrc522_init(CH1);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	76 d3       	rcall	.+1772   	; 0x16c6 <mfrc522_init>
	uart_init(0,BAUD_9600); //debug channel
     fda:	60 e8       	ldi	r22, 0x80	; 128
     fdc:	75 e2       	ldi	r23, 0x25	; 37
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	fc d4       	rcall	.+2552   	; 0x19dc <uart_init>
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
     fe4:	60 e8       	ldi	r22, 0x80	; 128
     fe6:	75 e2       	ldi	r23, 0x25	; 37
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	f7 d4       	rcall	.+2542   	; 0x19dc <uart_init>
	i2c_lcd_init();
     fee:	ed d0       	rcall	.+474    	; 0x11ca <i2c_lcd_init>
     ff0:	4f e0       	ldi	r20, 0x0F	; 15
	
	
	i2c_lcd_string(0,0,"====================");
     ff2:	53 e0       	ldi	r21, 0x03	; 3
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	73 d1       	rcall	.+742    	; 0x12e0 <i2c_lcd_string>
     ffa:	44 e2       	ldi	r20, 0x24	; 36
	i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
     ffc:	53 e0       	ldi	r21, 0x03	; 3
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	6e d1       	rcall	.+732    	; 0x12e0 <i2c_lcd_string>
    1004:	48 e3       	ldi	r20, 0x38	; 56
	i2c_lcd_string(2,0,"     __________     ");
    1006:	53 e0       	ldi	r21, 0x03	; 3
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	69 d1       	rcall	.+722    	; 0x12e0 <i2c_lcd_string>
    100e:	4f e0       	ldi	r20, 0x0F	; 15
	i2c_lcd_string(3,0,"====================");
    1010:	53 e0       	ldi	r21, 0x03	; 3
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	64 d1       	rcall	.+712    	; 0x12e0 <i2c_lcd_string>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	fa da       	rcall	.-2572   	; 0x610 <setSoundClip>
	setSoundClip(BUZZ_ON);
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	81 e1       	ldi	r24, 0x11	; 17
    1020:	9a e7       	ldi	r25, 0x7A	; 122
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	80 40       	sbci	r24, 0x00	; 0
    1026:	90 40       	sbci	r25, 0x00	; 0
    1028:	e1 f7       	brne	.-8      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    102c:	00 00       	nop
	_delay_ms(2500);
	
	//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
	mfrc522_version_check(CH0);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	92 d3       	rcall	.+1828   	; 0x1756 <mfrc522_version_check>
    1032:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
    1034:	e6 d3       	rcall	.+1996   	; 0x1802 <mfrc522_IRQ_enable>
	mfrc522_version_check(CH1);
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8e d3       	rcall	.+1820   	; 0x1756 <mfrc522_version_check>
    103a:	81 e0       	ldi	r24, 0x01	; 1
	mfrc522_IRQ_enable(CH1);
    103c:	e2 d3       	rcall	.+1988   	; 0x1802 <mfrc522_IRQ_enable>
    103e:	2d e4       	ldi	r18, 0x4D	; 77
	
	
	esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
    1040:	33 e0       	ldi	r19, 0x03	; 3
    1042:	40 e5       	ldi	r20, 0x50	; 80
    1044:	53 e0       	ldi	r21, 0x03	; 3
    1046:	6c e5       	ldi	r22, 0x5C	; 92
    1048:	73 e0       	ldi	r23, 0x03	; 3
    104a:	89 e6       	ldi	r24, 0x69	; 105
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	b1 dd       	rcall	.-1182   	; 0xbb2 <esp8266_init>
	rfid_user_uid_buffer_init();
    1050:	39 d9       	rcall	.-3470   	; 0x2c4 <rfid_user_uid_buffer_init>
    1052:	4f e0       	ldi	r20, 0x0F	; 15
	
	i2c_lcd_string(0,0,"====================");
    1054:	53 e0       	ldi	r21, 0x03	; 3
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	42 d1       	rcall	.+644    	; 0x12e0 <i2c_lcd_string>
	i2c_lcd_string(1,0,"  Parking System    ");
    105c:	40 e7       	ldi	r20, 0x70	; 112
    105e:	53 e0       	ldi	r21, 0x03	; 3
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	3d d1       	rcall	.+634    	; 0x12e0 <i2c_lcd_string>
    1066:	45 e8       	ldi	r20, 0x85	; 133
	i2c_lcd_string(2,0," Firmware Ver 1.90  ");
    1068:	53 e0       	ldi	r21, 0x03	; 3
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	38 d1       	rcall	.+624    	; 0x12e0 <i2c_lcd_string>
	i2c_lcd_string(3,0,"====================");
    1070:	4f e0       	ldi	r20, 0x0F	; 15
    1072:	53 e0       	ldi	r21, 0x03	; 3
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	33 d1       	rcall	.+614    	; 0x12e0 <i2c_lcd_string>
    107a:	85 e0       	ldi	r24, 0x05	; 5
	setSoundClip(BUZZ_ESP8266_CONNECTED);
    107c:	c9 da       	rcall	.-2670   	; 0x610 <setSoundClip>
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	87 ea       	ldi	r24, 0xA7	; 167
    1082:	91 e6       	ldi	r25, 0x61	; 97
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	90 40       	sbci	r25, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
    108e:	00 00       	nop
    1090:	36 d1       	rcall	.+620    	; 0x12fe <i2c_lcd_clear>
    1092:	36 c0       	rjmp	.+108    	; 0x1100 <i2c_lcd_noBacklight>
	//main loop start.
	_delay_ms(2000);
	i2c_lcd_clear();
    1094:	08 95       	ret

00001096 <main>:
    1096:	8d df       	rcall	.-230    	; 0xfb2 <systems_init>
	i2c_lcd_noBacklight();
    1098:	c6 e7       	ldi	r28, 0x76	; 118
    109a:	d6 e0       	ldi	r29, 0x06	; 6
    109c:	8c ea       	ldi	r24, 0xAC	; 172
		//PORTA^=0x01;
		
		//to use RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    109e:	94 e0       	ldi	r25, 0x04	; 4
    10a0:	8e da       	rcall	.-2788   	; 0x5be <RC522_data_request_per_100ms>
		RC522_data_state_check_and_actuate(&toggle);
    10a2:	8c ea       	ldi	r24, 0xAC	; 172
    10a4:	94 e0       	ldi	r25, 0x04	; 4
    10a6:	54 de       	rcall	.-856    	; 0xd50 <RC522_data_state_check_and_actuate>
		if(start_timer_flag==1)
    10a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <start_timer_flag>
    10ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <start_timer_flag+0x1>
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	a1 f7       	brne	.-24     	; 0x109c <main+0x6>
		{
			if(TICK.tick_1ms==5000)//5초
    10b4:	88 81       	ld	r24, Y
    10b6:	99 81       	ldd	r25, Y+1	; 0x01
    10b8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ba:	bb 81       	ldd	r27, Y+3	; 0x03
    10bc:	88 38       	cpi	r24, 0x88	; 136
    10be:	93 41       	sbci	r25, 0x13	; 19
    10c0:	a1 05       	cpc	r26, r1
    10c2:	b1 05       	cpc	r27, r1
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				setSoundClip(BUZZ_FAIL);
    10c4:	19 f4       	brne	.+6      	; 0x10cc <main+0x36>
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	a3 da       	rcall	.-2746   	; 0x610 <setSoundClip>
    10ca:	e8 cf       	rjmp	.-48     	; 0x109c <main+0x6>
				
			}
			else if(TICK.tick_1ms==10000){//10초
    10cc:	88 81       	ld	r24, Y
    10ce:	99 81       	ldd	r25, Y+1	; 0x01
    10d0:	aa 81       	ldd	r26, Y+2	; 0x02
    10d2:	bb 81       	ldd	r27, Y+3	; 0x03
    10d4:	80 31       	cpi	r24, 0x10	; 16
    10d6:	97 42       	sbci	r25, 0x27	; 39
    10d8:	a1 05       	cpc	r26, r1
    10da:	b1 05       	cpc	r27, r1
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <main+0x4c>
    10de:	10 d0       	rcall	.+32     	; 0x1100 <i2c_lcd_noBacklight>
    10e0:	dd cf       	rjmp	.-70     	; 0x109c <main+0x6>
			}
			else if(TICK.tick_1ms==12000)
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	aa 81       	ldd	r26, Y+2	; 0x02
    10e8:	bb 81       	ldd	r27, Y+3	; 0x03
    10ea:	80 3e       	cpi	r24, 0xE0	; 224
    10ec:	9e 42       	sbci	r25, 0x2E	; 46
    10ee:	a1 05       	cpc	r26, r1
    10f0:	b1 05       	cpc	r27, r1
			{
				//로고젝터 오프 
				logojector_OFF();
    10f2:	a1 f6       	brne	.-88     	; 0x109c <main+0x6>
    10f4:	5c df       	rcall	.-328    	; 0xfae <logojector_OFF>
				start_timer_flag=0;
    10f6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <start_timer_flag+0x1>
    10fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <start_timer_flag>
    10fe:	ce cf       	rjmp	.-100    	; 0x109c <main+0x6>

00001100 <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <i2c_lcd_noBacklight+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <i2c_lcd_noBacklight+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	1a 82       	std	Y+2, r1	; 0x02
    1112:	84 e1       	ldi	r24, 0x14	; 20
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	80 e1       	ldi	r24, 0x10	; 16
    1118:	8c 83       	std	Y+4, r24	; 0x04
    111a:	44 e0       	ldi	r20, 0x04	; 4
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	be 01       	movw	r22, r28
    1120:	6f 5f       	subi	r22, 0xFF	; 255
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1128:	4a d1       	rcall	.+660    	; 0x13be <i2c_transmit>
    112a:	81 11       	cpse	r24, r1
    112c:	f6 cf       	rjmp	.-20     	; 0x111a <i2c_lcd_noBacklight+0x1a>
    112e:	8f e3       	ldi	r24, 0x3F	; 63
    1130:	9c e9       	ldi	r25, 0x9C	; 156
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <i2c_lcd_noBacklight+0x32>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <i2c_lcd_noBacklight+0x38>
    1138:	00 00       	nop
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <i2c_lcd_command_8+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    1152:	80 7f       	andi	r24, 0xF0	; 240
    1154:	98 2f       	mov	r25, r24
    1156:	9c 60       	ori	r25, 0x0C	; 12
    1158:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    115a:	88 60       	ori	r24, 0x08	; 8
    115c:	8a 83       	std	Y+2, r24	; 0x02
}

    115e:	42 e0       	ldi	r20, 0x02	; 2
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	be 01       	movw	r22, r28
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    116c:	28 d1       	rcall	.+592    	; 0x13be <i2c_transmit>
    116e:	81 11       	cpse	r24, r1
    1170:	f6 cf       	rjmp	.-20     	; 0x115e <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	00 d0       	rcall	.+0      	; 0x1182 <i2c_lcd_command+0x6>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <i2c_lcd_command+0x8>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    1188:	98 2f       	mov	r25, r24
    118a:	90 7f       	andi	r25, 0xF0	; 240
    118c:	29 2f       	mov	r18, r25
    118e:	2c 60       	ori	r18, 0x0C	; 12
    1190:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    1192:	98 60       	ori	r25, 0x08	; 8
    1194:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    1196:	20 e1       	ldi	r18, 0x10	; 16
    1198:	82 9f       	mul	r24, r18
    119a:	c0 01       	movw	r24, r0
    119c:	11 24       	eor	r1, r1
    119e:	98 2f       	mov	r25, r24
    11a0:	9c 60       	ori	r25, 0x0C	; 12
    11a2:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    11a4:	88 60       	ori	r24, 0x08	; 8
    11a6:	8c 83       	std	Y+4, r24	; 0x04
}

    11a8:	44 e0       	ldi	r20, 0x04	; 4
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	be 01       	movw	r22, r28
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    11b6:	03 d1       	rcall	.+518    	; 0x13be <i2c_transmit>
    11b8:	81 11       	cpse	r24, r1
    11ba:	f6 cf       	rjmp	.-20     	; 0x11a8 <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    11ca:	be d0       	rcall	.+380    	; 0x1348 <i2c_init>
    11cc:	2f ef       	ldi	r18, 0xFF	; 255
    11ce:	89 e6       	ldi	r24, 0x69	; 105
    11d0:	98 e1       	ldi	r25, 0x18	; 24
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	80 40       	sbci	r24, 0x00	; 0
    11d6:	90 40       	sbci	r25, 0x00	; 0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <i2c_lcd_init+0x8>
    11da:	00 c0       	rjmp	.+0      	; 0x11dc <i2c_lcd_init+0x12>
    11dc:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    11de:	8a e9       	ldi	r24, 0x9A	; 154
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	2d d4       	rcall	.+2138   	; 0x1a3e <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    11e4:	80 e3       	ldi	r24, 0x30	; 48
    11e6:	b0 df       	rcall	.-160    	; 0x1148 <i2c_lcd_command_8>
    11e8:	8f e1       	ldi	r24, 0x1F	; 31
    11ea:	9e e4       	ldi	r25, 0x4E	; 78
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <i2c_lcd_init+0x22>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <i2c_lcd_init+0x28>
    11f2:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    11f4:	80 e3       	ldi	r24, 0x30	; 48
    11f6:	a8 df       	rcall	.-176    	; 0x1148 <i2c_lcd_command_8>
    11f8:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <i2c_lcd_init+0x32>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <i2c_lcd_init+0x38>
    1202:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1204:	80 e3       	ldi	r24, 0x30	; 48
    1206:	a0 df       	rcall	.-192    	; 0x1148 <i2c_lcd_command_8>
    1208:	8f e8       	ldi	r24, 0x8F	; 143
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <i2c_lcd_init+0x42>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <i2c_lcd_init+0x48>
    1212:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    1214:	80 e2       	ldi	r24, 0x20	; 32
    1216:	98 df       	rcall	.-208    	; 0x1148 <i2c_lcd_command_8>
    1218:	8f e8       	ldi	r24, 0x8F	; 143
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <i2c_lcd_init+0x52>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <i2c_lcd_init+0x58>
    1222:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    1224:	88 e2       	ldi	r24, 0x28	; 40
    1226:	aa df       	rcall	.-172    	; 0x117c <i2c_lcd_command>
    1228:	87 ec       	ldi	r24, 0xC7	; 199
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <i2c_lcd_init+0x62>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <i2c_lcd_init+0x68>
    1232:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    1234:	88 e0       	ldi	r24, 0x08	; 8
    1236:	a2 df       	rcall	.-188    	; 0x117c <i2c_lcd_command>
    1238:	87 ec       	ldi	r24, 0xC7	; 199
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <i2c_lcd_init+0x72>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <i2c_lcd_init+0x78>
    1242:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	9a df       	rcall	.-204    	; 0x117c <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1248:	8f ed       	ldi	r24, 0xDF	; 223
    124a:	9e e2       	ldi	r25, 0x2E	; 46
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <i2c_lcd_init+0x82>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <i2c_lcd_init+0x88>
    1252:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	92 df       	rcall	.-220    	; 0x117c <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1258:	87 ec       	ldi	r24, 0xC7	; 199
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <i2c_lcd_init+0x92>
    1260:	00 c0       	rjmp	.+0      	; 0x1262 <i2c_lcd_init+0x98>
    1262:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    1264:	8c e0       	ldi	r24, 0x0C	; 12
    1266:	8a df       	rcall	.-236    	; 0x117c <i2c_lcd_command>
    1268:	87 ec       	ldi	r24, 0xC7	; 199
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <i2c_lcd_init+0xa2>
    1270:	00 c0       	rjmp	.+0      	; 0x1272 <i2c_lcd_init+0xa8>
    1272:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    1274:	8a eb       	ldi	r24, 0xBA	; 186
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	e2 c3       	rjmp	.+1988   	; 0x1a3e <uart0_tx_string>
    127a:	08 95       	ret

0000127c <i2c_lcd_data>:
    127c:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    127e:	df 93       	push	r29
    1280:	00 d0       	rcall	.+0      	; 0x1282 <i2c_lcd_data+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <i2c_lcd_data+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    1288:	98 2f       	mov	r25, r24
    128a:	90 7f       	andi	r25, 0xF0	; 240
    128c:	29 2f       	mov	r18, r25
    128e:	2d 60       	ori	r18, 0x0D	; 13
    1290:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    1292:	99 60       	ori	r25, 0x09	; 9
    1294:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    1296:	20 e1       	ldi	r18, 0x10	; 16
    1298:	82 9f       	mul	r24, r18
    129a:	c0 01       	movw	r24, r0
    129c:	11 24       	eor	r1, r1
    129e:	98 2f       	mov	r25, r24
    12a0:	9d 60       	ori	r25, 0x0D	; 13
    12a2:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    12a4:	89 60       	ori	r24, 0x09	; 9
    12a6:	8c 83       	std	Y+4, r24	; 0x04
}

    12a8:	44 e0       	ldi	r20, 0x04	; 4
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	be 01       	movw	r22, r28
    12ae:	6f 5f       	subi	r22, 0xFF	; 255
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    12b6:	83 d0       	rcall	.+262    	; 0x13be <i2c_transmit>
    12b8:	81 11       	cpse	r24, r1
    12ba:	f6 cf       	rjmp	.-20     	; 0x12a8 <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    12ca:	e8 2f       	mov	r30, r24
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	e0 53       	subi	r30, 0x30	; 48
    12d4:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    12d6:	80 81       	ld	r24, Z
    12d8:	86 0f       	add	r24, r22
    12da:	80 68       	ori	r24, 0x80	; 128
    12dc:	4f cf       	rjmp	.-354    	; 0x117c <i2c_lcd_command>
    12de:	08 95       	ret

000012e0 <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    12e6:	f1 df       	rcall	.-30     	; 0x12ca <i2c_lcd_goto_XY>
	}
    12e8:	88 81       	ld	r24, Y
    12ea:	88 23       	and	r24, r24
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <i2c_lcd_string+0x18>
}
    12ee:	21 96       	adiw	r28, 0x01	; 1
    12f0:	c5 df       	rcall	.-118    	; 0x127c <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    12f2:	89 91       	ld	r24, Y+
    12f4:	81 11       	cpse	r24, r1
    12f6:	fc cf       	rjmp	.-8      	; 0x12f0 <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <i2c_lcd_clear+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <i2c_lcd_clear+0x8>
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    1312:	8c e1       	ldi	r24, 0x1C	; 28
    1314:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    1316:	88 e1       	ldi	r24, 0x18	; 24
    1318:	8c 83       	std	Y+4, r24	; 0x04
    131a:	44 e0       	ldi	r20, 0x04	; 4
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	be 01       	movw	r22, r28
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1328:	4a d0       	rcall	.+148    	; 0x13be <i2c_transmit>
    132a:	81 11       	cpse	r24, r1
    132c:	f6 cf       	rjmp	.-20     	; 0x131a <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    132e:	8f e3       	ldi	r24, 0x3F	; 63
    1330:	9c e9       	ldi	r25, 0x9C	; 156
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <i2c_lcd_clear+0x34>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <i2c_lcd_clear+0x3a>
    1338:	00 00       	nop
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    1348:	88 e4       	ldi	r24, 0x48	; 72
    134a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    134e:	08 95       	ret

00001350 <i2c_start>:
    1350:	e4 e7       	ldi	r30, 0x74	; 116
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	10 82       	st	Z, r1
    1356:	94 ea       	ldi	r25, 0xA4	; 164
    1358:	90 83       	st	Z, r25
    135a:	90 81       	ld	r25, Z
    135c:	99 23       	and	r25, r25
    135e:	ec f7       	brge	.-6      	; 0x135a <i2c_start+0xa>
    1360:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1364:	98 7f       	andi	r25, 0xF8	; 248
    1366:	98 30       	cpi	r25, 0x08	; 8
    1368:	a1 f4       	brne	.+40     	; 0x1392 <i2c_start+0x42>
    136a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    136e:	84 e8       	ldi	r24, 0x84	; 132
    1370:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1374:	e4 e7       	ldi	r30, 0x74	; 116
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 23       	and	r24, r24
    137c:	ec f7       	brge	.-6      	; 0x1378 <i2c_start+0x28>
    137e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1382:	98 7f       	andi	r25, 0xF8	; 248
    1384:	98 31       	cpi	r25, 0x18	; 24
    1386:	39 f0       	breq	.+14     	; 0x1396 <i2c_start+0x46>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 34       	cpi	r25, 0x40	; 64
    138c:	29 f4       	brne	.+10     	; 0x1398 <i2c_start+0x48>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 95       	ret
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	08 95       	ret
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	08 95       	ret

0000139a <i2c_write>:
    139a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    139e:	84 e8       	ldi	r24, 0x84	; 132
    13a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    13a4:	e4 e7       	ldi	r30, 0x74	; 116
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	ec f7       	brge	.-6      	; 0x13a8 <i2c_write+0xe>
    13ae:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    13b2:	98 7f       	andi	r25, 0xF8	; 248
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	98 32       	cpi	r25, 0x28	; 40
    13b8:	09 f4       	brne	.+2      	; 0x13bc <i2c_write+0x22>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	08 95       	ret

000013be <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	6b 01       	movw	r12, r22
    13ce:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    13d0:	bf df       	rcall	.-130    	; 0x1350 <i2c_start>
    13d2:	f8 2e       	mov	r15, r24
    13d4:	81 11       	cpse	r24, r1
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    13d8:	01 15       	cp	r16, r1
    13da:	11 05       	cpc	r17, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <i2c_transmit+0x40>
    13de:	e6 01       	movw	r28, r12
    13e0:	0c 0d       	add	r16, r12
    13e2:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    13e4:	89 91       	ld	r24, Y+
    13e6:	d9 df       	rcall	.-78     	; 0x139a <i2c_write>
    13e8:	81 11       	cpse	r24, r1
    13ea:	10 c0       	rjmp	.+32     	; 0x140c <i2c_transmit+0x4e>
    13ec:	8f e9       	ldi	r24, 0x9F	; 159
    13ee:	9f e0       	ldi	r25, 0x0F	; 15
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <i2c_transmit+0x32>
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <i2c_transmit+0x38>
    13f6:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    13f8:	0c 17       	cp	r16, r28
    13fa:	1d 07       	cpc	r17, r29
    13fc:	99 f7       	brne	.-26     	; 0x13e4 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    13fe:	84 e9       	ldi	r24, 0x94	; 148
    1400:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    1406:	ff 24       	eor	r15, r15
    1408:	f3 94       	inc	r15
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    140c:	ff 24       	eor	r15, r15
    140e:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1410:	8f 2d       	mov	r24, r15
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	08 95       	ret

00001422 <mfrc522_write>:
void mfrc522_init(unsigned char ch)
{
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
	
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	16 2f       	mov	r17, r22
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
    142a:	95 b3       	in	r25, 0x15	; 21
    142c:	c1 e0       	ldi	r28, 0x01	; 1
    142e:	d0 e0       	ldi	r29, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <mfrc522_write+0x14>
    1432:	cc 0f       	add	r28, r28
    1434:	dd 1f       	adc	r29, r29
    1436:	4a 95       	dec	r20
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <mfrc522_write+0x10>
    143a:	2c 2f       	mov	r18, r28
    143c:	20 95       	com	r18
    143e:	92 23       	and	r25, r18
    1440:	95 bb       	out	0x15, r25	; 21
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1442:	88 0f       	add	r24, r24
    1444:	8e 77       	andi	r24, 0x7E	; 126
    1446:	a3 d2       	rcall	.+1350   	; 0x198e <spi_master_tx>
	mfrc522_reset(ch);
	
    1448:	81 2f       	mov	r24, r17
    144a:	a1 d2       	rcall	.+1346   	; 0x198e <spi_master_tx>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
    144c:	85 b3       	in	r24, 0x15	; 21
    144e:	c8 2b       	or	r28, r24
    1450:	c5 bb       	out	0x15, r28	; 21
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	08 95       	ret

0000145a <mfrc522_read>:
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
	
	
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    145e:	95 b3       	in	r25, 0x15	; 21
    1460:	c1 e0       	ldi	r28, 0x01	; 1
    1462:	d0 e0       	ldi	r29, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <mfrc522_read+0x10>
    1466:	cc 0f       	add	r28, r28
    1468:	dd 1f       	adc	r29, r29
    146a:	6a 95       	dec	r22
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <mfrc522_read+0xc>
    146e:	2c 2f       	mov	r18, r28
    1470:	20 95       	com	r18
    1472:	92 23       	and	r25, r18
    1474:	95 bb       	out	0x15, r25	; 21
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    1476:	88 0f       	add	r24, r24
    1478:	8e 77       	andi	r24, 0x7E	; 126
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	88 d2       	rcall	.+1296   	; 0x198e <spi_master_tx>
	}
    147e:	8b d2       	rcall	.+1302   	; 0x1996 <spi_master_rx>
    1480:	95 b3       	in	r25, 0x15	; 21
}

    1482:	c9 2b       	or	r28, r25
    1484:	c5 bb       	out	0x15, r28	; 21
    1486:	df 91       	pop	r29

void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <mfrc522_to_card>:
    148c:	2f 92       	push	r2
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

    148e:	3f 92       	push	r3
    1490:	4f 92       	push	r4
    1492:	5f 92       	push	r5
    1494:	6f 92       	push	r6
    1496:	7f 92       	push	r7
    1498:	8f 92       	push	r8
    149a:	9f 92       	push	r9
    149c:	af 92       	push	r10
    149e:	bf 92       	push	r11
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	f8 2e       	mov	r15, r24
    14b2:	a6 2e       	mov	r10, r22
    14b4:	b7 2e       	mov	r11, r23
    14b6:	44 2e       	mov	r4, r20
    14b8:	22 2e       	mov	r2, r18
    14ba:	d3 2e       	mov	r13, r19
void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    14bc:	8c e0       	ldi	r24, 0x0C	; 12
    14be:	f8 16       	cp	r15, r24
    14c0:	59 f0       	breq	.+22     	; 0x14d8 <mfrc522_to_card+0x4c>
    14c2:	ee e0       	ldi	r30, 0x0E	; 14
    14c4:	fe 12       	cpse	r15, r30
    14c6:	11 c0       	rjmp	.+34     	; 0x14ea <mfrc522_to_card+0x5e>
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
	//RC522와 연결된 SS핀 HIGH출력
    14c8:	68 94       	set
    14ca:	cc 24       	eor	r12, r12
    14cc:	c4 f8       	bld	r12, 4
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    14ce:	0f 2e       	mov	r0, r31
    14d0:	f2 e1       	ldi	r31, 0x12	; 18
    14d2:	3f 2e       	mov	r3, r31
    14d4:	f0 2d       	mov	r31, r0
    14d6:	0b c0       	rjmp	.+22     	; 0x14ee <mfrc522_to_card+0x62>
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}

    14d8:	0f 2e       	mov	r0, r31
    14da:	f0 e3       	ldi	r31, 0x30	; 48
    14dc:	cf 2e       	mov	r12, r31
    14de:	f0 2d       	mov	r31, r0
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    14e0:	0f 2e       	mov	r0, r31
    14e2:	f7 e7       	ldi	r31, 0x77	; 119
    14e4:	3f 2e       	mov	r3, r31
    14e6:	f0 2d       	mov	r31, r0


    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <mfrc522_to_card+0x62>
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}


    14ea:	c1 2c       	mov	r12, r1
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}

    14ec:	31 2c       	mov	r3, r1
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
	value = spi_master_rx(); //send dummy data and receive data.
    14ee:	4e 2d       	mov	r20, r14
    14f0:	63 2d       	mov	r22, r3
    14f2:	60 68       	ori	r22, 0x80	; 128
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	95 df       	rcall	.-214    	; 0x1422 <mfrc522_write>
	//RC522와 연결된 SS핀 HIGH출력
    14f8:	6e 2d       	mov	r22, r14
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	ae df       	rcall	.-164    	; 0x145a <mfrc522_read>
	SS_PORT |= (1<<channel);
    14fe:	68 2f       	mov	r22, r24
    1500:	6f 77       	andi	r22, 0x7F	; 127
    1502:	4e 2d       	mov	r20, r14
    1504:	84 e0       	ldi	r24, 0x04	; 4
    1506:	8d df       	rcall	.-230    	; 0x1422 <mfrc522_write>
	
    1508:	6e 2d       	mov	r22, r14
    150a:	8a e0       	ldi	r24, 0x0A	; 10
    150c:	a6 df       	rcall	.-180    	; 0x145a <mfrc522_read>
    150e:	68 2f       	mov	r22, r24
	return value;
    1510:	60 68       	ori	r22, 0x80	; 128
    1512:	4e 2d       	mov	r20, r14
    1514:	8a e0       	ldi	r24, 0x0A	; 10
    1516:	85 df       	rcall	.-246    	; 0x1422 <mfrc522_write>
}

    1518:	4e 2d       	mov	r20, r14
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	81 df       	rcall	.-254    	; 0x1422 <mfrc522_write>
    1520:	51 2c       	mov	r5, r1
void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1522:	61 2c       	mov	r6, r1
    1524:	71 2c       	mov	r7, r1
    1526:	41 14       	cp	r4, r1
    1528:	51 04       	cpc	r5, r1
    152a:	61 04       	cpc	r6, r1
    152c:	71 04       	cpc	r7, r1
    152e:	99 f0       	breq	.+38     	; 0x1556 <mfrc522_to_card+0xca>
    1530:	ca 2d       	mov	r28, r10
    1532:	db 2d       	mov	r29, r11
    1534:	81 2c       	mov	r8, r1
    1536:	91 2c       	mov	r9, r1
    1538:	54 01       	movw	r10, r8
	
	byte = mfrc522_read(VersionReg, ch);
    153a:	69 91       	ld	r22, Y+
    153c:	4e 2d       	mov	r20, r14
    153e:	89 e0       	ldi	r24, 0x09	; 9
    1540:	70 df       	rcall	.-288    	; 0x1422 <mfrc522_write>
    1542:	ff ef       	ldi	r31, 0xFF	; 255
	return value;
}

void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1544:	8f 1a       	sub	r8, r31
    1546:	9f 0a       	sbc	r9, r31
    1548:	af 0a       	sbc	r10, r31
    154a:	bf 0a       	sbc	r11, r31
    154c:	84 14       	cp	r8, r4
    154e:	95 04       	cpc	r9, r5
    1550:	a6 04       	cpc	r10, r6
    1552:	b7 04       	cpc	r11, r7
    1554:	90 f3       	brcs	.-28     	; 0x153a <mfrc522_to_card+0xae>
	
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1556:	4e 2d       	mov	r20, r14
    1558:	6f 2d       	mov	r22, r15
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	62 df       	rcall	.-316    	; 0x1422 <mfrc522_write>
	else uart0_tx_string("\n[channel 1");
    155e:	8c e0       	ldi	r24, 0x0C	; 12
    1560:	f8 12       	cpse	r15, r24
	
	if(byte == 0x92)
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <mfrc522_to_card+0xe8>
    1564:	6e 2d       	mov	r22, r14
    1566:	8d e0       	ldi	r24, 0x0D	; 13
	{
    1568:	78 df       	rcall	.-272    	; 0x145a <mfrc522_read>
    156a:	68 2f       	mov	r22, r24
    156c:	60 68       	ori	r22, 0x80	; 128
    156e:	4e 2d       	mov	r20, r14
    1570:	8d e0       	ldi	r24, 0x0D	; 13
    1572:	57 df       	rcall	.-338    	; 0x1422 <mfrc522_write>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1574:	6e 2d       	mov	r22, r14
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	70 df       	rcall	.-288    	; 0x145a <mfrc522_read>
    157a:	b8 2e       	mov	r11, r24
    157c:	c0 e0       	ldi	r28, 0x00	; 0
    157e:	d0 e0       	ldi	r29, 0x00	; 0
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1580:	ec 2d       	mov	r30, r12
    1582:	e1 60       	ori	r30, 0x01	; 1
    1584:	ce 2e       	mov	r12, r30
    1586:	0a c0       	rjmp	.+20     	; 0x159c <mfrc522_to_card+0x110>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1588:	6e 2d       	mov	r22, r14
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	66 df       	rcall	.-308    	; 0x145a <mfrc522_read>
    158e:	b8 2e       	mov	r11, r24
    1590:	21 96       	adiw	r28, 0x01	; 1
    1592:	cf 3c       	cpi	r28, 0xCF	; 207
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1594:	f7 e0       	ldi	r31, 0x07	; 7
    1596:	df 07       	cpc	r29, r31
    1598:	09 f4       	brne	.+2      	; 0x159c <mfrc522_to_card+0x110>
    159a:	68 c0       	rjmp	.+208    	; 0x166c <mfrc522_to_card+0x1e0>
    159c:	8c 2d       	mov	r24, r12
    159e:	8b 21       	and	r24, r11
    15a0:	99 f3       	breq	.-26     	; 0x1588 <mfrc522_to_card+0xfc>
    15a2:	6e c0       	rjmp	.+220    	; 0x1680 <mfrc522_to_card+0x1f4>
    15a4:	83 2d       	mov	r24, r3
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
	
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	b8 22       	and	r11, r24
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <mfrc522_to_card+0x124>
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    15ac:	c2 e0       	ldi	r28, 0x02	; 2
	
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <mfrc522_to_card+0x126>
	
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
	byte=mfrc522_read(DivIEnReg, ch);
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}
    15b0:	c1 e0       	ldi	r28, 0x01	; 1
    15b2:	8c e0       	ldi	r24, 0x0C	; 12
    15b4:	f8 12       	cpse	r15, r24


    15b6:	73 c0       	rjmp	.+230    	; 0x169e <mfrc522_to_card+0x212>
    15b8:	6e 2d       	mov	r22, r14
    15ba:	8a e0       	ldi	r24, 0x0A	; 10
    15bc:	4e df       	rcall	.-356    	; 0x145a <mfrc522_read>
    15be:	88 2e       	mov	r8, r24
unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
    15c0:	6e 2d       	mov	r22, r14
    15c2:	8c e0       	ldi	r24, 0x0C	; 12
    15c4:	4a df       	rcall	.-364    	; 0x145a <mfrc522_read>
    15c6:	28 2f       	mov	r18, r24
    15c8:	27 70       	andi	r18, 0x07	; 7
    15ca:	a9 f0       	breq	.+42     	; 0x15f6 <mfrc522_to_card+0x16a>
{
    15cc:	88 2d       	mov	r24, r8
	uint8_t  status;
	uint32_t backBits;//The received data bits
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	82 0f       	add	r24, r18
    15e0:	91 1d       	adc	r25, r1
    15e2:	09 2e       	mov	r0, r25
    15e4:	00 0c       	add	r0, r0
    15e6:	aa 0b       	sbc	r26, r26
    15e8:	bb 0b       	sbc	r27, r27
    15ea:	f8 01       	movw	r30, r16
    15ec:	80 83       	st	Z, r24
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	a2 83       	std	Z+2, r26	; 0x02
    15f2:	b3 83       	std	Z+3, r27	; 0x03
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <mfrc522_to_card+0x18c>
    15f6:	88 2d       	mov	r24, r8

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
	
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	09 2e       	mov	r0, r25
    1608:	00 0c       	add	r0, r0
    160a:	aa 0b       	sbc	r26, r26
    160c:	bb 0b       	sbc	r27, r27
    160e:	f8 01       	movw	r30, r16
    1610:	80 83       	st	Z, r24
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	a2 83       	std	Z+2, r26	; 0x02
    1616:	b3 83       	std	Z+3, r27	; 0x03
    1618:	88 20       	and	r8, r8
	tag_type[0] = req_mode;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);

    161a:	71 f0       	breq	.+28     	; 0x1638 <mfrc522_to_card+0x1ac>
    161c:	88 2d       	mov	r24, r8
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    161e:	81 31       	cpi	r24, 0x11	; 17
    1620:	08 f0       	brcs	.+2      	; 0x1624 <mfrc522_to_card+0x198>
    1622:	80 e1       	ldi	r24, 0x10	; 16
    1624:	88 2e       	mov	r8, r24
    1626:	91 2c       	mov	r9, r1
    1628:	a1 2c       	mov	r10, r1
    162a:	b1 2c       	mov	r11, r1
    162c:	81 14       	cp	r8, r1
    162e:	91 04       	cpc	r9, r1
    1630:	a1 04       	cpc	r10, r1
    1632:	b1 04       	cpc	r11, r1
    1634:	29 f4       	brne	.+10     	; 0x1640 <mfrc522_to_card+0x1b4>
    1636:	33 c0       	rjmp	.+102    	; 0x169e <mfrc522_to_card+0x212>
    1638:	81 2c       	mov	r8, r1
    163a:	91 2c       	mov	r9, r1
    163c:	54 01       	movw	r10, r8
    163e:	83 94       	inc	r8
    1640:	02 2d       	mov	r16, r2
    1642:	1d 2d       	mov	r17, r13
    1644:	41 2c       	mov	r4, r1
    1646:	51 2c       	mov	r5, r1
    1648:	32 01       	movw	r6, r4
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    164a:	6e 2d       	mov	r22, r14
    164c:	89 e0       	ldi	r24, 0x09	; 9
    164e:	05 df       	rcall	.-502    	; 0x145a <mfrc522_read>
    1650:	f8 01       	movw	r30, r16
    1652:	81 93       	st	Z+, r24
    1654:	8f 01       	movw	r16, r30
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1656:	ff ef       	ldi	r31, 0xFF	; 255
    1658:	4f 1a       	sub	r4, r31
    165a:	5f 0a       	sbc	r5, r31
    165c:	6f 0a       	sbc	r6, r31
    165e:	7f 0a       	sbc	r7, r31
    1660:	48 14       	cp	r4, r8
    1662:	59 04       	cpc	r5, r9
    1664:	6a 04       	cpc	r6, r10
    1666:	7b 04       	cpc	r7, r11
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    1668:	80 f3       	brcs	.-32     	; 0x164a <mfrc522_to_card+0x1be>
    166a:	19 c0       	rjmp	.+50     	; 0x169e <mfrc522_to_card+0x212>
    166c:	6e 2d       	mov	r22, r14
	}
    166e:	8d e0       	ldi	r24, 0x0D	; 13
    1670:	f4 de       	rcall	.-536    	; 0x145a <mfrc522_read>
    1672:	68 2f       	mov	r22, r24
    1674:	6f 77       	andi	r22, 0x7F	; 127
    1676:	4e 2d       	mov	r20, r14
void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}
    1678:	8d e0       	ldi	r24, 0x0D	; 13
    167a:	d3 de       	rcall	.-602    	; 0x1422 <mfrc522_write>
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    167c:	c3 e0       	ldi	r28, 0x03	; 3
    167e:	0f c0       	rjmp	.+30     	; 0x169e <mfrc522_to_card+0x212>
    1680:	6e 2d       	mov	r22, r14
    1682:	8d e0       	ldi	r24, 0x0D	; 13
	}
    1684:	ea de       	rcall	.-556    	; 0x145a <mfrc522_read>
    1686:	68 2f       	mov	r22, r24
    1688:	6f 77       	andi	r22, 0x7F	; 127
    168a:	4e 2d       	mov	r20, r14
    168c:	8d e0       	ldi	r24, 0x0D	; 13
    168e:	c9 de       	rcall	.-622    	; 0x1422 <mfrc522_write>
	
}

void mfrc522_IRQ_enable(unsigned char ch)
    1690:	6e 2d       	mov	r22, r14
    1692:	86 e0       	ldi	r24, 0x06	; 6
    1694:	e2 de       	rcall	.-572    	; 0x145a <mfrc522_read>
    1696:	8b 71       	andi	r24, 0x1B	; 27
    1698:	09 f4       	brne	.+2      	; 0x169c <mfrc522_to_card+0x210>
    169a:	84 cf       	rjmp	.-248    	; 0x15a4 <mfrc522_to_card+0x118>
    169c:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

    169e:	8c 2f       	mov	r24, r28
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	3f 90       	pop	r3
    16c2:	2f 90       	pop	r2
    16c4:	08 95       	ret

000016c6 <mfrc522_init>:
    16c6:	cf 93       	push	r28
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    16c8:	c8 2f       	mov	r28, r24
			break;
		}
		default:
    16ca:	1f 92       	push	r1
    16cc:	1f 92       	push	r1
    16ce:	1f 92       	push	r1
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	8f 93       	push	r24
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	8f 93       	push	r24
    16d8:	17 d1       	rcall	.+558    	; 0x1908 <spi_init>
		break;
	}
	
    16da:	84 b3       	in	r24, 0x14	; 20
    16dc:	83 60       	ori	r24, 0x03	; 3
    16de:	84 bb       	out	0x14, r24	; 20
	///////////////////////////////////////////============여기-==========//////////
    16e0:	15 ba       	out	0x15, r1	; 21
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	89 ef       	ldi	r24, 0xF9	; 249
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	21 50       	subi	r18, 0x01	; 1
    16ea:	80 40       	sbci	r24, 0x00	; 0
    16ec:	90 40       	sbci	r25, 0x00	; 0
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <mfrc522_init+0x22>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <mfrc522_init+0x2c>
    16f2:	00 00       	nop
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
	n=mfrc522_read(ComIrqReg,ch);
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    16f4:	85 b3       	in	r24, 0x15	; 21
    16f6:	83 60       	ori	r24, 0x03	; 3
    16f8:	85 bb       	out	0x15, r24	; 21
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
	
	
    16fa:	4c 2f       	mov	r20, r28
    16fc:	6f e0       	ldi	r22, 0x0F	; 15
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 de       	rcall	.-736    	; 0x1422 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
    1702:	4c 2f       	mov	r20, r28
    1704:	6d e8       	ldi	r22, 0x8D	; 141
    1706:	8a e2       	ldi	r24, 0x2A	; 42
    1708:	8c de       	rcall	.-744    	; 0x1422 <mfrc522_write>
		mfrc522_write(FIFODataReg, send_data[i],ch);
    170a:	4c 2f       	mov	r20, r28
    170c:	6e e3       	ldi	r22, 0x3E	; 62
    170e:	8b e2       	ldi	r24, 0x2B	; 43
    1710:	88 de       	rcall	.-752    	; 0x1422 <mfrc522_write>
	}
    1712:	4c 2f       	mov	r20, r28
    1714:	6e e1       	ldi	r22, 0x1E	; 30
    1716:	8c e2       	ldi	r24, 0x2C	; 44
    1718:	84 de       	rcall	.-760    	; 0x1422 <mfrc522_write>

    171a:	4c 2f       	mov	r20, r28
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	8d e2       	ldi	r24, 0x2D	; 45
    1720:	80 de       	rcall	.-768    	; 0x1422 <mfrc522_write>
	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
	if (cmd == MFRC522_CMD_Transceive)
    1722:	4c 2f       	mov	r20, r28
    1724:	60 e4       	ldi	r22, 0x40	; 64
    1726:	85 e1       	ldi	r24, 0x15	; 21
    1728:	7c de       	rcall	.-776    	; 0x1422 <mfrc522_write>
	{
    172a:	4c 2f       	mov	r20, r28
    172c:	6d e3       	ldi	r22, 0x3D	; 61
    172e:	81 e1       	ldi	r24, 0x11	; 17
    1730:	78 de       	rcall	.-784    	; 0x1422 <mfrc522_write>
    1732:	6c 2f       	mov	r22, r28
		n=mfrc522_read(BitFramingReg,ch);
		mfrc522_write(BitFramingReg,n|0x80,ch);
	}
	
    1734:	84 e1       	ldi	r24, 0x14	; 20
    1736:	91 de       	rcall	.-734    	; 0x145a <mfrc522_read>
    1738:	98 2f       	mov	r25, r24
    173a:	93 70       	andi	r25, 0x03	; 3
	//Waiting to receive data to complete
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	29 f4       	brne	.+10     	; 0x1752 <mfrc522_init+0x8c>
    1748:	68 2f       	mov	r22, r24
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
    174a:	63 60       	ori	r22, 0x03	; 3
    174c:	4c 2f       	mov	r20, r28
    174e:	84 e1       	ldi	r24, 0x14	; 20
    1750:	68 de       	rcall	.-816    	; 0x1422 <mfrc522_write>
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <mfrc522_version_check>:
	{
		//CommIrqReg[7..0]
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    175a:	d8 2f       	mov	r29, r24

	tmp=mfrc522_read(BitFramingReg,ch);
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
	
    175c:	68 2f       	mov	r22, r24
    175e:	87 e3       	ldi	r24, 0x37	; 55
    1760:	7c de       	rcall	.-776    	; 0x145a <mfrc522_read>
    1762:	c8 2f       	mov	r28, r24
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	89 ef       	ldi	r24, 0xF9	; 249
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	21 50       	subi	r18, 0x01	; 1
    176c:	80 40       	sbci	r24, 0x00	; 0
    176e:	90 40       	sbci	r25, 0x00	; 0
    1770:	e1 f7       	brne	.-8      	; 0x176a <mfrc522_version_check+0x14>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <mfrc522_version_check+0x1e>
    1774:	00 00       	nop
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
    1776:	d1 11       	cpse	r29, r1
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <mfrc522_version_check+0x30>
    177a:	88 ed       	ldi	r24, 0xD8	; 216
    177c:	93 e0       	ldi	r25, 0x03	; 3
    177e:	5f d1       	rcall	.+702    	; 0x1a3e <uart0_tx_string>
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
    1780:	c2 39       	cpi	r28, 0x92	; 146
    1782:	59 f5       	brne	.+86     	; 0x17da <mfrc522_version_check+0x84>
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <mfrc522_version_check+0x4e>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    1786:	84 ee       	ldi	r24, 0xE4	; 228
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	59 d1       	rcall	.+690    	; 0x1a3e <uart0_tx_string>
			if (n & irqEn & 0x01)
			{
    178c:	c2 39       	cpi	r28, 0x92	; 146
    178e:	91 f5       	brne	.+100    	; 0x17f4 <mfrc522_version_check+0x9e>
				if (lastBits)
				{
					*back_data_len = (n-1)*8 + lastBits;
				}
				else
				{
    1790:	12 c0       	rjmp	.+36     	; 0x17b6 <mfrc522_version_check+0x60>
    1792:	80 ef       	ldi	r24, 0xF0	; 240
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	53 d1       	rcall	.+678    	; 0x1a3e <uart0_tx_string>
					*back_data_len = n*8;
    1798:	43 e0       	ldi	r20, 0x03	; 3
    179a:	54 e0       	ldi	r21, 0x04	; 4
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	9f dd       	rcall	.-1218   	; 0x12e0 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <mfrc522_version_check+0x4c>
    17a4:	87 e1       	ldi	r24, 0x17	; 23
    17a6:	94 e0       	ldi	r25, 0x04	; 4

    17a8:	4a d1       	rcall	.+660    	; 0x1a3e <uart0_tx_string>
    17aa:	4b e3       	ldi	r20, 0x3B	; 59
    17ac:	54 e0       	ldi	r21, 0x04	; 4
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	96 dd       	rcall	.-1236   	; 0x12e0 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    17b4:	23 c0       	rjmp	.+70     	; 0x17fc <mfrc522_version_check+0xa6>
    17b6:	87 e1       	ldi	r24, 0x17	; 23
    17b8:	94 e0       	ldi	r25, 0x04	; 4

			if (cmd == MFRC522_CMD_Transceive)
    17ba:	41 d1       	rcall	.+642    	; 0x1a3e <uart0_tx_string>
    17bc:	40 e5       	ldi	r20, 0x50	; 80
    17be:	54 e0       	ldi	r21, 0x04	; 4
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	82 e0       	ldi	r24, 0x02	; 2
			{
				n = mfrc522_read(FIFOLevelReg,ch);
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    17c4:	8d dd       	rcall	.-1254   	; 0x12e0 <i2c_lcd_string>
    17c6:	1a c0       	rjmp	.+52     	; 0x17fc <mfrc522_version_check+0xa6>
    17c8:	85 e6       	ldi	r24, 0x65	; 101
    17ca:	94 e0       	ldi	r25, 0x04	; 4
				{
    17cc:	38 d1       	rcall	.+624    	; 0x1a3e <uart0_tx_string>
    17ce:	4b e3       	ldi	r20, 0x3B	; 59
    17d0:	54 e0       	ldi	r21, 0x04	; 4
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	84 dd       	rcall	.-1272   	; 0x12e0 <i2c_lcd_string>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <mfrc522_version_check+0xa6>
    17da:	c0 59       	subi	r28, 0x90	; 144
    17dc:	c2 30       	cpi	r28, 0x02	; 2
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    17de:	c8 f6       	brcc	.-78     	; 0x1792 <mfrc522_version_check+0x3c>
    17e0:	f3 cf       	rjmp	.-26     	; 0x17c8 <mfrc522_version_check+0x72>
    17e2:	85 e6       	ldi	r24, 0x65	; 101
    17e4:	94 e0       	ldi	r25, 0x04	; 4
				{
					*back_data_len = (n-1)*8 + lastBits;
    17e6:	2b d1       	rcall	.+598    	; 0x1a3e <uart0_tx_string>
    17e8:	40 e5       	ldi	r20, 0x50	; 80
    17ea:	54 e0       	ldi	r21, 0x04	; 4
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	77 dd       	rcall	.-1298   	; 0x12e0 <i2c_lcd_string>
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <mfrc522_version_check+0xa6>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    17f4:	c0 59       	subi	r28, 0x90	; 144
    17f6:	c2 30       	cpi	r28, 0x02	; 2
    17f8:	60 f6       	brcc	.-104    	; 0x1792 <mfrc522_version_check+0x3c>
    17fa:	f3 cf       	rjmp	.-26     	; 0x17e2 <mfrc522_version_check+0x8c>
				{
					*back_data_len = n*8;
				}

				if (n == 0)
				{
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <mfrc522_IRQ_enable>:
					n = 1;
				}
				if (n > MAX_LEN)
    1802:	cf 93       	push	r28
    1804:	c8 2f       	mov	r28, r24
				{
					n = MAX_LEN;
				}
    1806:	68 2f       	mov	r22, r24
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	27 de       	rcall	.-946    	; 0x145a <mfrc522_read>
				
    180c:	68 2f       	mov	r22, r24
    180e:	60 62       	ori	r22, 0x20	; 32
    1810:	4c 2f       	mov	r20, r28
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	06 de       	rcall	.-1012   	; 0x1422 <mfrc522_write>
				//Reading the received data in FIFO
    1816:	6c 2f       	mov	r22, r28
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	1f de       	rcall	.-962    	; 0x145a <mfrc522_read>
				for (i=0; i<n; i++)
    181c:	68 2f       	mov	r22, r24
    181e:	60 68       	ori	r22, 0x80	; 128
    1820:	4c 2f       	mov	r20, r28
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	fe dd       	rcall	.-1028   	; 0x1422 <mfrc522_write>
				{
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <mfrc522_request>:
					back_data[i] = mfrc522_read(FIFODataReg,ch);
				}
			}
		}
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	00 d0       	rcall	.+0      	; 0x183a <mfrc522_request+0x10>
    183a:	00 d0       	rcall	.+0      	; 0x183c <mfrc522_request+0x12>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	18 2f       	mov	r17, r24
    1842:	6b 01       	movw	r12, r22
    1844:	e4 2e       	mov	r14, r20
		else
		{
			status = ERROR;
		}
		
    1846:	67 e0       	ldi	r22, 0x07	; 7
    1848:	8d e0       	ldi	r24, 0x0D	; 13
    184a:	eb dd       	rcall	.-1066   	; 0x1422 <mfrc522_write>
	}
	
    184c:	f6 01       	movw	r30, r12
    184e:	10 83       	st	Z, r17
// 	SetBitMask(ControlReg,0x80);           //timer stops
    1850:	8e 01       	movw	r16, r28
    1852:	0f 5f       	subi	r16, 0xFF	; 255
    1854:	1f 4f       	sbci	r17, 0xFF	; 255
    1856:	96 01       	movw	r18, r12
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	b6 01       	movw	r22, r12
    185c:	8c e0       	ldi	r24, 0x0C	; 12
    185e:	16 de       	rcall	.-980    	; 0x148c <mfrc522_to_card>
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	59 f4       	brne	.+22     	; 0x187a <mfrc522_request+0x50>
    1864:	49 81       	ldd	r20, Y+1	; 0x01
    1866:	5a 81       	ldd	r21, Y+2	; 0x02
    1868:	6b 81       	ldd	r22, Y+3	; 0x03
    186a:	7c 81       	ldd	r23, Y+4	; 0x04
    186c:	40 31       	cpi	r20, 0x10	; 16
    186e:	51 05       	cpc	r21, r1
    1870:	61 05       	cpc	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	19 f0       	breq	.+6      	; 0x187c <mfrc522_request+0x52>
	return status;
}
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	01 c0       	rjmp	.+2      	; 0x187c <mfrc522_request+0x52>
    187a:	83 e0       	ldi	r24, 0x03	; 3


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	08 95       	ret

00001894 <mfrc522_get_card_serial>:
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <mfrc522_get_card_serial+0x10>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <mfrc522_get_card_serial+0x12>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	6c 01       	movw	r12, r24
    18ac:	e6 2e       	mov	r14, r22
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
	
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

    18ae:	46 2f       	mov	r20, r22
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	8d e0       	ldi	r24, 0x0D	; 13
    18b4:	b6 dd       	rcall	.-1172   	; 0x1422 <mfrc522_write>
	if (status == CARD_FOUND)
	{
    18b6:	83 e9       	ldi	r24, 0x93	; 147
    18b8:	f6 01       	movw	r30, r12
    18ba:	80 83       	st	Z, r24
		//Check card serial number
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	81 83       	std	Z+1, r24	; 0x01
		for (i=0; i<4; i++)
    18c0:	8e 01       	movw	r16, r28
    18c2:	0f 5f       	subi	r16, 0xFF	; 255
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	96 01       	movw	r18, r12
    18c8:	42 e0       	ldi	r20, 0x02	; 2
    18ca:	b6 01       	movw	r22, r12
    18cc:	8c e0       	ldi	r24, 0x0C	; 12
    18ce:	de dd       	rcall	.-1092   	; 0x148c <mfrc522_to_card>
		{
			serNumCheck ^= serial_out[i];
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	71 f4       	brne	.+28     	; 0x18f0 <mfrc522_get_card_serial+0x5c>
    18d4:	f6 01       	movw	r30, r12
    18d6:	a6 01       	movw	r20, r12
    18d8:	4c 5f       	subi	r20, 0xFC	; 252
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (serNumCheck != serial_out[i])
		{
			status = ERROR;
		}
    18de:	21 91       	ld	r18, Z+
    18e0:	92 27       	eor	r25, r18
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
    18e2:	4e 17       	cp	r20, r30
    18e4:	5f 07       	cpc	r21, r31
    18e6:	d9 f7       	brne	.-10     	; 0x18de <mfrc522_get_card_serial+0x4a>
			status = ERROR;
		}
	}
	return status;
    18e8:	f6 01       	movw	r30, r12
    18ea:	24 81       	ldd	r18, Z+4	; 0x04
    18ec:	92 13       	cpse	r25, r18
}

    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ef 90       	pop	r14
    1902:	df 90       	pop	r13
    1904:	cf 90       	pop	r12
    1906:	08 95       	ret

00001908 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	00 d0       	rcall	.+0      	; 0x190e <spi_init+0x6>
    190e:	1f 92       	push	r1
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1916:	83 30       	cpi	r24, 0x03	; 3
    1918:	21 f1       	breq	.+72     	; 0x1962 <spi_init+0x5a>
    191a:	81 11       	cpse	r24, r1
    191c:	32 c0       	rjmp	.+100    	; 0x1982 <spi_init+0x7a>
    191e:	29 c0       	rjmp	.+82     	; 0x1972 <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1920:	9c 91       	ld	r25, X
    1922:	12 96       	adiw	r26, 0x02	; 2
    1924:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1926:	e2 17       	cp	r30, r18
    1928:	f3 07       	cpc	r31, r19
    192a:	d1 f7       	brne	.-12     	; 0x1920 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	92 30       	cpi	r25, 0x02	; 2
    1930:	20 f1       	brcs	.+72     	; 0x197a <spi_init+0x72>
    1932:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1934:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	71 f4       	brne	.+28     	; 0x1956 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    193a:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    193c:	87 b3       	in	r24, 0x17	; 23
    193e:	87 60       	ori	r24, 0x07	; 7
    1940:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1942:	99 81       	ldd	r25, Y+1	; 0x01
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	89 2b       	or	r24, r25
    1948:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    194a:	2e b1       	in	r18, 0x0e	; 14
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	92 2b       	or	r25, r18
    1950:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1952:	8d b9       	out	0x0d, r24	; 13
    1954:	16 c0       	rjmp	.+44     	; 0x1982 <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1956:	81 11       	cpse	r24, r1
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    195a:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    195c:	80 e4       	ldi	r24, 0x40	; 64
    195e:	8d b9       	out	0x0d, r24	; 13
    1960:	10 c0       	rjmp	.+32     	; 0x1982 <spi_init+0x7a>
    1962:	de 01       	movw	r26, r28
    1964:	19 96       	adiw	r26, 0x09	; 9
    1966:	fe 01       	movw	r30, r28
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	9e 01       	movw	r18, r28
    196c:	2c 5f       	subi	r18, 0xFC	; 252
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	d7 cf       	rjmp	.-82     	; 0x1920 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	92 30       	cpi	r25, 0x02	; 2
    1976:	e8 f6       	brcc	.-70     	; 0x1932 <spi_init+0x2a>
    1978:	02 c0       	rjmp	.+4      	; 0x197e <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    197a:	1d b8       	out	0x0d, r1	; 13
    197c:	de cf       	rjmp	.-68     	; 0x193a <spi_init+0x32>
    197e:	1d b8       	out	0x0d, r1	; 13
    1980:	ec cf       	rjmp	.-40     	; 0x195a <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    198e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1990:	77 9b       	sbis	0x0e, 7	; 14
    1992:	fe cf       	rjmp	.-4      	; 0x1990 <spi_master_tx+0x2>
}
    1994:	08 95       	ret

00001996 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1996:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1998:	77 9b       	sbis	0x0e, 7	; 14
    199a:	fe cf       	rjmp	.-4      	; 0x1998 <spi_master_rx+0x2>
	
	return SPDR;
    199c:	8f b1       	in	r24, 0x0f	; 15
}
    199e:	08 95       	ret

000019a0 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    19a0:	bc 9a       	sbi	0x17, 4	; 23
    19a2:	8c e0       	ldi	r24, 0x0C	; 12
    19a4:	83 bf       	out	0x33, r24	; 51
    19a6:	8a ef       	ldi	r24, 0xFA	; 250
    19a8:	81 bf       	out	0x31, r24	; 49
    19aa:	87 b7       	in	r24, 0x37	; 55
    19ac:	82 60       	ori	r24, 0x02	; 2
    19ae:	87 bf       	out	0x37, r24	; 55
    19b0:	08 95       	ret

000019b2 <timer3_init>:
    19b2:	13 9a       	sbi	0x02, 3	; 2
    19b4:	80 e4       	ldi	r24, 0x40	; 64
    19b6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    19ba:	8a e1       	ldi	r24, 0x1A	; 26
    19bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    19c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    19c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    19c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19d0:	08 95       	ret

000019d2 <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    19d2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    19d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19da:	08 95       	ret

000019dc <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	ec 01       	movw	r28, r24
    19e2:	9b 01       	movw	r18, r22
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	60 e4       	ldi	r22, 0x40	; 64
    19ea:	72 e4       	ldi	r23, 0x42	; 66
    19ec:	8f e0       	ldi	r24, 0x0F	; 15
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	4f d1       	rcall	.+670    	; 0x1c90 <__udivmodsi4>
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	31 09       	sbc	r19, r1
    19f6:	20 97       	sbiw	r28, 0x00	; 0
    19f8:	59 f4       	brne	.+22     	; 0x1a10 <uart_init+0x34>
    19fa:	10 98       	cbi	0x02, 0	; 2
    19fc:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1a00:	29 b9       	out	0x09, r18	; 9
    1a02:	88 e1       	ldi	r24, 0x18	; 24
    1a04:	8a b9       	out	0x0a, r24	; 10
    1a06:	57 9a       	sbi	0x0a, 7	; 10
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <uart_init+0x54>
    1a10:	21 97       	sbiw	r28, 0x01	; 1
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <uart_init+0x54>
    1a14:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1a18:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1a1c:	ea e9       	ldi	r30, 0x9A	; 154
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	88 e1       	ldi	r24, 0x18	; 24
    1a22:	80 83       	st	Z, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	80 83       	st	Z, r24
    1a2a:	86 e0       	ldi	r24, 0x06	; 6
    1a2c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <uart0_tx_char>:
    1a36:	5d 9b       	sbis	0x0b, 5	; 11
    1a38:	fe cf       	rjmp	.-4      	; 0x1a36 <uart0_tx_char>
    1a3a:	8c b9       	out	0x0c, r24	; 12
    1a3c:	08 95       	ret

00001a3e <uart0_tx_string>:
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	ec 01       	movw	r28, r24
    1a44:	88 81       	ld	r24, Y
    1a46:	88 23       	and	r24, r24
    1a48:	29 f0       	breq	.+10     	; 0x1a54 <uart0_tx_string+0x16>
    1a4a:	21 96       	adiw	r28, 0x01	; 1
    1a4c:	f4 df       	rcall	.-24     	; 0x1a36 <uart0_tx_char>
    1a4e:	89 91       	ld	r24, Y+
    1a50:	81 11       	cpse	r24, r1
    1a52:	fc cf       	rjmp	.-8      	; 0x1a4c <uart0_tx_string+0xe>
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <uart1_tx_char>:
    1a5a:	eb e9       	ldi	r30, 0x9B	; 155
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	90 81       	ld	r25, Z
    1a60:	95 ff       	sbrs	r25, 5
    1a62:	fd cf       	rjmp	.-6      	; 0x1a5e <uart1_tx_char+0x4>
    1a64:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1a68:	08 95       	ret

00001a6a <uart1_tx_string>:
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	88 81       	ld	r24, Y
    1a72:	88 23       	and	r24, r24
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <uart1_tx_string+0x16>
    1a76:	21 96       	adiw	r28, 0x01	; 1
    1a78:	f0 df       	rcall	.-32     	; 0x1a5a <uart1_tx_char>
    1a7a:	89 91       	ld	r24, Y+
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	fc cf       	rjmp	.-8      	; 0x1a78 <uart1_tx_string+0xe>
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	08 95       	ret

00001a86 <IntToString>:

char * IntToString(int num)
{
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	64 97       	sbiw	r28, 0x14	; 20
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d ",num); //고유 자릿값
    1a9e:	9f 93       	push	r25
    1aa0:	8f 93       	push	r24
    1aa2:	89 e8       	ldi	r24, 0x89	; 137
    1aa4:	94 e0       	ldi	r25, 0x04	; 4
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	8e 01       	movw	r16, r28
    1aac:	0f 5f       	subi	r16, 0xFF	; 255
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	1f 93       	push	r17
    1ab2:	0f 93       	push	r16
    1ab4:	4f d1       	rcall	.+670    	; 0x1d54 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	82 ed       	ldi	r24, 0xD2	; 210
    1aba:	95 e0       	ldi	r25, 0x05	; 5
    1abc:	3c d1       	rcall	.+632    	; 0x1d36 <strcpy>
	
	return (buff.itos_buff);
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
}
    1aca:	82 ed       	ldi	r24, 0xD2	; 210
    1acc:	95 e0       	ldi	r25, 0x05	; 5
    1ace:	64 96       	adiw	r28, 0x14	; 20
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <HexToString>:
 
 char * HexToString(char num)
 {
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	64 97       	sbiw	r28, 0x14	; 20
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1afc:	1f 92       	push	r1
    1afe:	8f 93       	push	r24
    1b00:	8d e8       	ldi	r24, 0x8D	; 141
    1b02:	94 e0       	ldi	r25, 0x04	; 4
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0f 5f       	subi	r16, 0xFF	; 255
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	1f 93       	push	r17
    1b10:	0f 93       	push	r16
    1b12:	20 d1       	rcall	.+576    	; 0x1d54 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1b14:	b8 01       	movw	r22, r16
    1b16:	82 ed       	ldi	r24, 0xD2	; 210
    1b18:	95 e0       	ldi	r25, 0x05	; 5
    1b1a:	0d d1       	rcall	.+538    	; 0x1d36 <strcpy>
	 
	 return (buff.itos_buff);
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
 }
    1b28:	82 ed       	ldi	r24, 0xD2	; 210
    1b2a:	95 e0       	ldi	r25, 0x05	; 5
    1b2c:	64 96       	adiw	r28, 0x14	; 20
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1b42:	cf 92       	push	r12
    1b44:	df 92       	push	r13
    1b46:	ef 92       	push	r14
    1b48:	ff 92       	push	r15
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	c0 54       	subi	r28, 0x40	; 64
    1b58:	d1 09       	sbc	r29, r1
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	6b 01       	movw	r12, r22
    1b66:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1b68:	20 e4       	ldi	r18, 0x40	; 64
    1b6a:	e2 e1       	ldi	r30, 0x12	; 18
    1b6c:	f6 e0       	ldi	r31, 0x06	; 6
    1b6e:	df 01       	movw	r26, r30
    1b70:	1d 92       	st	X+, r1
    1b72:	2a 95       	dec	r18
    1b74:	e9 f7       	brne	.-6      	; 0x1b70 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1b76:	bc 01       	movw	r22, r24
    1b78:	8e 01       	movw	r16, r28
    1b7a:	0f 5f       	subi	r16, 0xFF	; 255
    1b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7e:	c8 01       	movw	r24, r16
    1b80:	da d0       	rcall	.+436    	; 0x1d36 <strcpy>
	strcat(buf,ssid);
    1b82:	b6 01       	movw	r22, r12
    1b84:	c8 01       	movw	r24, r16
    1b86:	c3 d0       	rcall	.+390    	; 0x1d0e <strcat>
	strcat(buf,"\",\"");
    1b88:	f8 01       	movw	r30, r16
    1b8a:	01 90       	ld	r0, Z+
    1b8c:	00 20       	and	r0, r0
    1b8e:	e9 f7       	brne	.-6      	; 0x1b8a <connect_to_AP+0x48>
    1b90:	31 97       	sbiw	r30, 0x01	; 1
    1b92:	82 e2       	ldi	r24, 0x22	; 34
    1b94:	9c e2       	ldi	r25, 0x2C	; 44
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	82 e2       	ldi	r24, 0x22	; 34
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	93 83       	std	Z+3, r25	; 0x03
    1ba0:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	b3 d0       	rcall	.+358    	; 0x1d0e <strcat>
	strcat(buf,"\"\r\n");
    1ba8:	f8 01       	movw	r30, r16
    1baa:	01 90       	ld	r0, Z+
    1bac:	00 20       	and	r0, r0
    1bae:	e9 f7       	brne	.-6      	; 0x1baa <connect_to_AP+0x68>
    1bb0:	31 97       	sbiw	r30, 0x01	; 1
    1bb2:	82 e2       	ldi	r24, 0x22	; 34
    1bb4:	9d e0       	ldi	r25, 0x0D	; 13
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
    1bba:	8a e0       	ldi	r24, 0x0A	; 10
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	93 83       	std	Z+3, r25	; 0x03
    1bc0:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1bc2:	b8 01       	movw	r22, r16
    1bc4:	82 e1       	ldi	r24, 0x12	; 18
    1bc6:	96 e0       	ldi	r25, 0x06	; 6
    1bc8:	b6 d0       	rcall	.+364    	; 0x1d36 <strcpy>
	return buff.esp_buff;
	
}
    1bca:	82 e1       	ldi	r24, 0x12	; 18
    1bcc:	96 e0       	ldi	r25, 0x06	; 6
    1bce:	c0 5c       	subi	r28, 0xC0	; 192
    1bd0:	df 4f       	sbci	r29, 0xFF	; 255
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	cf 93       	push	r28
    1bf8:	df 93       	push	r29
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	c0 54       	subi	r28, 0x40	; 64
    1c00:	d1 09       	sbc	r29, r1
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1c10:	80 e4       	ldi	r24, 0x40	; 64
    1c12:	e2 e1       	ldi	r30, 0x12	; 18
    1c14:	f6 e0       	ldi	r31, 0x06	; 6
    1c16:	df 01       	movw	r26, r30
    1c18:	1d 92       	st	X+, r1
    1c1a:	8a 95       	dec	r24
    1c1c:	e9 f7       	brne	.-6      	; 0x1c18 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1c1e:	94 e1       	ldi	r25, 0x14	; 20
    1c20:	e2 e9       	ldi	r30, 0x92	; 146
    1c22:	f4 e0       	ldi	r31, 0x04	; 4
    1c24:	8e 01       	movw	r16, r28
    1c26:	0f 5f       	subi	r16, 0xFF	; 255
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	d8 01       	movw	r26, r16
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	0d 92       	st	X+, r0
    1c30:	9a 95       	dec	r25
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <TCP_connect+0x3e>
	strcat(buf,ip);
    1c34:	b9 01       	movw	r22, r18
    1c36:	c8 01       	movw	r24, r16
    1c38:	6a d0       	rcall	.+212    	; 0x1d0e <strcat>
	strcat(buf,"\",");
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	00 20       	and	r0, r0
    1c40:	e9 f7       	brne	.-6      	; 0x1c3c <TCP_connect+0x4e>
    1c42:	31 97       	sbiw	r30, 0x01	; 1
    1c44:	82 e2       	ldi	r24, 0x22	; 34
    1c46:	9c e2       	ldi	r25, 0x2C	; 44
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1c4e:	b7 01       	movw	r22, r14
    1c50:	c8 01       	movw	r24, r16
    1c52:	5d d0       	rcall	.+186    	; 0x1d0e <strcat>
	strcat(buf,"\r\n");
    1c54:	f8 01       	movw	r30, r16
    1c56:	01 90       	ld	r0, Z+
    1c58:	00 20       	and	r0, r0
    1c5a:	e9 f7       	brne	.-6      	; 0x1c56 <TCP_connect+0x68>
    1c5c:	31 97       	sbiw	r30, 0x01	; 1
    1c5e:	8d e0       	ldi	r24, 0x0D	; 13
    1c60:	9a e0       	ldi	r25, 0x0A	; 10
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
    1c66:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1c68:	b8 01       	movw	r22, r16
    1c6a:	82 e1       	ldi	r24, 0x12	; 18
    1c6c:	96 e0       	ldi	r25, 0x06	; 6
    1c6e:	63 d0       	rcall	.+198    	; 0x1d36 <strcpy>
	
	return buff.esp_buff;
	
}
    1c70:	82 e1       	ldi	r24, 0x12	; 18
    1c72:	96 e0       	ldi	r25, 0x06	; 6
    1c74:	c0 5c       	subi	r28, 0xC0	; 192
    1c76:	df 4f       	sbci	r29, 0xFF	; 255
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	08 95       	ret

00001c90 <__udivmodsi4>:
    1c90:	a1 e2       	ldi	r26, 0x21	; 33
    1c92:	1a 2e       	mov	r1, r26
    1c94:	aa 1b       	sub	r26, r26
    1c96:	bb 1b       	sub	r27, r27
    1c98:	fd 01       	movw	r30, r26
    1c9a:	0d c0       	rjmp	.+26     	; 0x1cb6 <__udivmodsi4_ep>

00001c9c <__udivmodsi4_loop>:
    1c9c:	aa 1f       	adc	r26, r26
    1c9e:	bb 1f       	adc	r27, r27
    1ca0:	ee 1f       	adc	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	a2 17       	cp	r26, r18
    1ca6:	b3 07       	cpc	r27, r19
    1ca8:	e4 07       	cpc	r30, r20
    1caa:	f5 07       	cpc	r31, r21
    1cac:	20 f0       	brcs	.+8      	; 0x1cb6 <__udivmodsi4_ep>
    1cae:	a2 1b       	sub	r26, r18
    1cb0:	b3 0b       	sbc	r27, r19
    1cb2:	e4 0b       	sbc	r30, r20
    1cb4:	f5 0b       	sbc	r31, r21

00001cb6 <__udivmodsi4_ep>:
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	88 1f       	adc	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	1a 94       	dec	r1
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <__udivmodsi4_loop>
    1cc2:	60 95       	com	r22
    1cc4:	70 95       	com	r23
    1cc6:	80 95       	com	r24
    1cc8:	90 95       	com	r25
    1cca:	9b 01       	movw	r18, r22
    1ccc:	ac 01       	movw	r20, r24
    1cce:	bd 01       	movw	r22, r26
    1cd0:	cf 01       	movw	r24, r30
    1cd2:	08 95       	ret

00001cd4 <atoi>:
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	88 27       	eor	r24, r24
    1cd8:	99 27       	eor	r25, r25
    1cda:	e8 94       	clt
    1cdc:	21 91       	ld	r18, Z+
    1cde:	20 32       	cpi	r18, 0x20	; 32
    1ce0:	e9 f3       	breq	.-6      	; 0x1cdc <atoi+0x8>
    1ce2:	29 30       	cpi	r18, 0x09	; 9
    1ce4:	10 f0       	brcs	.+4      	; 0x1cea <atoi+0x16>
    1ce6:	2e 30       	cpi	r18, 0x0E	; 14
    1ce8:	c8 f3       	brcs	.-14     	; 0x1cdc <atoi+0x8>
    1cea:	2b 32       	cpi	r18, 0x2B	; 43
    1cec:	39 f0       	breq	.+14     	; 0x1cfc <atoi+0x28>
    1cee:	2d 32       	cpi	r18, 0x2D	; 45
    1cf0:	31 f4       	brne	.+12     	; 0x1cfe <atoi+0x2a>
    1cf2:	68 94       	set
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <atoi+0x28>
    1cf6:	26 d0       	rcall	.+76     	; 0x1d44 <__mulhi_const_10>
    1cf8:	82 0f       	add	r24, r18
    1cfa:	91 1d       	adc	r25, r1
    1cfc:	21 91       	ld	r18, Z+
    1cfe:	20 53       	subi	r18, 0x30	; 48
    1d00:	2a 30       	cpi	r18, 0x0A	; 10
    1d02:	c8 f3       	brcs	.-14     	; 0x1cf6 <atoi+0x22>
    1d04:	1e f4       	brtc	.+6      	; 0x1d0c <atoi+0x38>
    1d06:	90 95       	com	r25
    1d08:	81 95       	neg	r24
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	08 95       	ret

00001d0e <strcat>:
    1d0e:	fb 01       	movw	r30, r22
    1d10:	dc 01       	movw	r26, r24
    1d12:	0d 90       	ld	r0, X+
    1d14:	00 20       	and	r0, r0
    1d16:	e9 f7       	brne	.-6      	; 0x1d12 <strcat+0x4>
    1d18:	11 97       	sbiw	r26, 0x01	; 1
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	00 20       	and	r0, r0
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <strcat+0xc>
    1d22:	08 95       	ret

00001d24 <strcmp>:
    1d24:	fb 01       	movw	r30, r22
    1d26:	dc 01       	movw	r26, r24
    1d28:	8d 91       	ld	r24, X+
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	80 19       	sub	r24, r0
    1d2e:	01 10       	cpse	r0, r1
    1d30:	d9 f3       	breq	.-10     	; 0x1d28 <strcmp+0x4>
    1d32:	99 0b       	sbc	r25, r25
    1d34:	08 95       	ret

00001d36 <strcpy>:
    1d36:	fb 01       	movw	r30, r22
    1d38:	dc 01       	movw	r26, r24
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	0d 92       	st	X+, r0
    1d3e:	00 20       	and	r0, r0
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <strcpy+0x4>
    1d42:	08 95       	ret

00001d44 <__mulhi_const_10>:
    1d44:	7a e0       	ldi	r23, 0x0A	; 10
    1d46:	97 9f       	mul	r25, r23
    1d48:	90 2d       	mov	r25, r0
    1d4a:	87 9f       	mul	r24, r23
    1d4c:	80 2d       	mov	r24, r0
    1d4e:	91 0d       	add	r25, r1
    1d50:	11 24       	eor	r1, r1
    1d52:	08 95       	ret

00001d54 <sprintf>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	2e 97       	sbiw	r28, 0x0e	; 14
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	0d 89       	ldd	r16, Y+21	; 0x15
    1d6e:	1e 89       	ldd	r17, Y+22	; 0x16
    1d70:	86 e0       	ldi	r24, 0x06	; 6
    1d72:	8c 83       	std	Y+4, r24	; 0x04
    1d74:	1a 83       	std	Y+2, r17	; 0x02
    1d76:	09 83       	std	Y+1, r16	; 0x01
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	9f e7       	ldi	r25, 0x7F	; 127
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	ae 01       	movw	r20, r28
    1d82:	47 5e       	subi	r20, 0xE7	; 231
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	6f 89       	ldd	r22, Y+23	; 0x17
    1d88:	78 8d       	ldd	r23, Y+24	; 0x18
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	01 96       	adiw	r24, 0x01	; 1
    1d8e:	10 d0       	rcall	.+32     	; 0x1db0 <vfprintf>
    1d90:	ef 81       	ldd	r30, Y+7	; 0x07
    1d92:	f8 85       	ldd	r31, Y+8	; 0x08
    1d94:	e0 0f       	add	r30, r16
    1d96:	f1 1f       	adc	r31, r17
    1d98:	10 82       	st	Z, r1
    1d9a:	2e 96       	adiw	r28, 0x0e	; 14
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <vfprintf>:
    1db0:	2f 92       	push	r2
    1db2:	3f 92       	push	r3
    1db4:	4f 92       	push	r4
    1db6:	5f 92       	push	r5
    1db8:	6f 92       	push	r6
    1dba:	7f 92       	push	r7
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	2b 97       	sbiw	r28, 0x0b	; 11
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	6c 01       	movw	r12, r24
    1de6:	7b 01       	movw	r14, r22
    1de8:	8a 01       	movw	r16, r20
    1dea:	fc 01       	movw	r30, r24
    1dec:	17 82       	std	Z+7, r1	; 0x07
    1dee:	16 82       	std	Z+6, r1	; 0x06
    1df0:	83 81       	ldd	r24, Z+3	; 0x03
    1df2:	81 ff       	sbrs	r24, 1
    1df4:	bf c1       	rjmp	.+894    	; 0x2174 <vfprintf+0x3c4>
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	3c 01       	movw	r6, r24
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	f7 01       	movw	r30, r14
    1e02:	93 fd       	sbrc	r25, 3
    1e04:	85 91       	lpm	r24, Z+
    1e06:	93 ff       	sbrs	r25, 3
    1e08:	81 91       	ld	r24, Z+
    1e0a:	7f 01       	movw	r14, r30
    1e0c:	88 23       	and	r24, r24
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <vfprintf+0x62>
    1e10:	ad c1       	rjmp	.+858    	; 0x216c <vfprintf+0x3bc>
    1e12:	85 32       	cpi	r24, 0x25	; 37
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <vfprintf+0x74>
    1e16:	93 fd       	sbrc	r25, 3
    1e18:	85 91       	lpm	r24, Z+
    1e1a:	93 ff       	sbrs	r25, 3
    1e1c:	81 91       	ld	r24, Z+
    1e1e:	7f 01       	movw	r14, r30
    1e20:	85 32       	cpi	r24, 0x25	; 37
    1e22:	21 f4       	brne	.+8      	; 0x1e2c <vfprintf+0x7c>
    1e24:	b6 01       	movw	r22, r12
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	d6 d1       	rcall	.+940    	; 0x21d6 <fputc>
    1e2a:	e8 cf       	rjmp	.-48     	; 0x1dfc <vfprintf+0x4c>
    1e2c:	91 2c       	mov	r9, r1
    1e2e:	21 2c       	mov	r2, r1
    1e30:	31 2c       	mov	r3, r1
    1e32:	ff e1       	ldi	r31, 0x1F	; 31
    1e34:	f3 15       	cp	r31, r3
    1e36:	d8 f0       	brcs	.+54     	; 0x1e6e <vfprintf+0xbe>
    1e38:	8b 32       	cpi	r24, 0x2B	; 43
    1e3a:	79 f0       	breq	.+30     	; 0x1e5a <vfprintf+0xaa>
    1e3c:	38 f4       	brcc	.+14     	; 0x1e4c <vfprintf+0x9c>
    1e3e:	80 32       	cpi	r24, 0x20	; 32
    1e40:	79 f0       	breq	.+30     	; 0x1e60 <vfprintf+0xb0>
    1e42:	83 32       	cpi	r24, 0x23	; 35
    1e44:	a1 f4       	brne	.+40     	; 0x1e6e <vfprintf+0xbe>
    1e46:	23 2d       	mov	r18, r3
    1e48:	20 61       	ori	r18, 0x10	; 16
    1e4a:	1d c0       	rjmp	.+58     	; 0x1e86 <vfprintf+0xd6>
    1e4c:	8d 32       	cpi	r24, 0x2D	; 45
    1e4e:	61 f0       	breq	.+24     	; 0x1e68 <vfprintf+0xb8>
    1e50:	80 33       	cpi	r24, 0x30	; 48
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <vfprintf+0xbe>
    1e54:	23 2d       	mov	r18, r3
    1e56:	21 60       	ori	r18, 0x01	; 1
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <vfprintf+0xd6>
    1e5a:	83 2d       	mov	r24, r3
    1e5c:	82 60       	ori	r24, 0x02	; 2
    1e5e:	38 2e       	mov	r3, r24
    1e60:	e3 2d       	mov	r30, r3
    1e62:	e4 60       	ori	r30, 0x04	; 4
    1e64:	3e 2e       	mov	r3, r30
    1e66:	2a c0       	rjmp	.+84     	; 0x1ebc <vfprintf+0x10c>
    1e68:	f3 2d       	mov	r31, r3
    1e6a:	f8 60       	ori	r31, 0x08	; 8
    1e6c:	1d c0       	rjmp	.+58     	; 0x1ea8 <vfprintf+0xf8>
    1e6e:	37 fc       	sbrc	r3, 7
    1e70:	2d c0       	rjmp	.+90     	; 0x1ecc <vfprintf+0x11c>
    1e72:	20 ed       	ldi	r18, 0xD0	; 208
    1e74:	28 0f       	add	r18, r24
    1e76:	2a 30       	cpi	r18, 0x0A	; 10
    1e78:	40 f0       	brcs	.+16     	; 0x1e8a <vfprintf+0xda>
    1e7a:	8e 32       	cpi	r24, 0x2E	; 46
    1e7c:	b9 f4       	brne	.+46     	; 0x1eac <vfprintf+0xfc>
    1e7e:	36 fc       	sbrc	r3, 6
    1e80:	75 c1       	rjmp	.+746    	; 0x216c <vfprintf+0x3bc>
    1e82:	23 2d       	mov	r18, r3
    1e84:	20 64       	ori	r18, 0x40	; 64
    1e86:	32 2e       	mov	r3, r18
    1e88:	19 c0       	rjmp	.+50     	; 0x1ebc <vfprintf+0x10c>
    1e8a:	36 fe       	sbrs	r3, 6
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <vfprintf+0xea>
    1e8e:	8a e0       	ldi	r24, 0x0A	; 10
    1e90:	98 9e       	mul	r9, r24
    1e92:	20 0d       	add	r18, r0
    1e94:	11 24       	eor	r1, r1
    1e96:	92 2e       	mov	r9, r18
    1e98:	11 c0       	rjmp	.+34     	; 0x1ebc <vfprintf+0x10c>
    1e9a:	ea e0       	ldi	r30, 0x0A	; 10
    1e9c:	2e 9e       	mul	r2, r30
    1e9e:	20 0d       	add	r18, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	22 2e       	mov	r2, r18
    1ea4:	f3 2d       	mov	r31, r3
    1ea6:	f0 62       	ori	r31, 0x20	; 32
    1ea8:	3f 2e       	mov	r3, r31
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <vfprintf+0x10c>
    1eac:	8c 36       	cpi	r24, 0x6C	; 108
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <vfprintf+0x108>
    1eb0:	83 2d       	mov	r24, r3
    1eb2:	80 68       	ori	r24, 0x80	; 128
    1eb4:	38 2e       	mov	r3, r24
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <vfprintf+0x10c>
    1eb8:	88 36       	cpi	r24, 0x68	; 104
    1eba:	41 f4       	brne	.+16     	; 0x1ecc <vfprintf+0x11c>
    1ebc:	f7 01       	movw	r30, r14
    1ebe:	93 fd       	sbrc	r25, 3
    1ec0:	85 91       	lpm	r24, Z+
    1ec2:	93 ff       	sbrs	r25, 3
    1ec4:	81 91       	ld	r24, Z+
    1ec6:	7f 01       	movw	r14, r30
    1ec8:	81 11       	cpse	r24, r1
    1eca:	b3 cf       	rjmp	.-154    	; 0x1e32 <vfprintf+0x82>
    1ecc:	98 2f       	mov	r25, r24
    1ece:	9f 7d       	andi	r25, 0xDF	; 223
    1ed0:	95 54       	subi	r25, 0x45	; 69
    1ed2:	93 30       	cpi	r25, 0x03	; 3
    1ed4:	28 f4       	brcc	.+10     	; 0x1ee0 <vfprintf+0x130>
    1ed6:	0c 5f       	subi	r16, 0xFC	; 252
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	9f e3       	ldi	r25, 0x3F	; 63
    1edc:	99 83       	std	Y+1, r25	; 0x01
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <vfprintf+0x14a>
    1ee0:	83 36       	cpi	r24, 0x63	; 99
    1ee2:	31 f0       	breq	.+12     	; 0x1ef0 <vfprintf+0x140>
    1ee4:	83 37       	cpi	r24, 0x73	; 115
    1ee6:	71 f0       	breq	.+28     	; 0x1f04 <vfprintf+0x154>
    1ee8:	83 35       	cpi	r24, 0x53	; 83
    1eea:	09 f0       	breq	.+2      	; 0x1eee <vfprintf+0x13e>
    1eec:	55 c0       	rjmp	.+170    	; 0x1f98 <vfprintf+0x1e8>
    1eee:	20 c0       	rjmp	.+64     	; 0x1f30 <vfprintf+0x180>
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 81       	ld	r24, Z
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	0e 5f       	subi	r16, 0xFE	; 254
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	88 24       	eor	r8, r8
    1efc:	83 94       	inc	r8
    1efe:	91 2c       	mov	r9, r1
    1f00:	53 01       	movw	r10, r6
    1f02:	12 c0       	rjmp	.+36     	; 0x1f28 <vfprintf+0x178>
    1f04:	28 01       	movw	r4, r16
    1f06:	f2 e0       	ldi	r31, 0x02	; 2
    1f08:	4f 0e       	add	r4, r31
    1f0a:	51 1c       	adc	r5, r1
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	a0 80       	ld	r10, Z
    1f10:	b1 80       	ldd	r11, Z+1	; 0x01
    1f12:	36 fe       	sbrs	r3, 6
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <vfprintf+0x16c>
    1f16:	69 2d       	mov	r22, r9
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <vfprintf+0x170>
    1f1c:	6f ef       	ldi	r22, 0xFF	; 255
    1f1e:	7f ef       	ldi	r23, 0xFF	; 255
    1f20:	c5 01       	movw	r24, r10
    1f22:	4e d1       	rcall	.+668    	; 0x21c0 <strnlen>
    1f24:	4c 01       	movw	r8, r24
    1f26:	82 01       	movw	r16, r4
    1f28:	f3 2d       	mov	r31, r3
    1f2a:	ff 77       	andi	r31, 0x7F	; 127
    1f2c:	3f 2e       	mov	r3, r31
    1f2e:	15 c0       	rjmp	.+42     	; 0x1f5a <vfprintf+0x1aa>
    1f30:	28 01       	movw	r4, r16
    1f32:	22 e0       	ldi	r18, 0x02	; 2
    1f34:	42 0e       	add	r4, r18
    1f36:	51 1c       	adc	r5, r1
    1f38:	f8 01       	movw	r30, r16
    1f3a:	a0 80       	ld	r10, Z
    1f3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f3e:	36 fe       	sbrs	r3, 6
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <vfprintf+0x198>
    1f42:	69 2d       	mov	r22, r9
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x19c>
    1f48:	6f ef       	ldi	r22, 0xFF	; 255
    1f4a:	7f ef       	ldi	r23, 0xFF	; 255
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	2d d1       	rcall	.+602    	; 0x21aa <strnlen_P>
    1f50:	4c 01       	movw	r8, r24
    1f52:	f3 2d       	mov	r31, r3
    1f54:	f0 68       	ori	r31, 0x80	; 128
    1f56:	3f 2e       	mov	r3, r31
    1f58:	82 01       	movw	r16, r4
    1f5a:	33 fc       	sbrc	r3, 3
    1f5c:	19 c0       	rjmp	.+50     	; 0x1f90 <vfprintf+0x1e0>
    1f5e:	82 2d       	mov	r24, r2
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	88 16       	cp	r8, r24
    1f64:	99 06       	cpc	r9, r25
    1f66:	a0 f4       	brcc	.+40     	; 0x1f90 <vfprintf+0x1e0>
    1f68:	b6 01       	movw	r22, r12
    1f6a:	80 e2       	ldi	r24, 0x20	; 32
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	33 d1       	rcall	.+614    	; 0x21d6 <fputc>
    1f70:	2a 94       	dec	r2
    1f72:	f5 cf       	rjmp	.-22     	; 0x1f5e <vfprintf+0x1ae>
    1f74:	f5 01       	movw	r30, r10
    1f76:	37 fc       	sbrc	r3, 7
    1f78:	85 91       	lpm	r24, Z+
    1f7a:	37 fe       	sbrs	r3, 7
    1f7c:	81 91       	ld	r24, Z+
    1f7e:	5f 01       	movw	r10, r30
    1f80:	b6 01       	movw	r22, r12
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	28 d1       	rcall	.+592    	; 0x21d6 <fputc>
    1f86:	21 10       	cpse	r2, r1
    1f88:	2a 94       	dec	r2
    1f8a:	21 e0       	ldi	r18, 0x01	; 1
    1f8c:	82 1a       	sub	r8, r18
    1f8e:	91 08       	sbc	r9, r1
    1f90:	81 14       	cp	r8, r1
    1f92:	91 04       	cpc	r9, r1
    1f94:	79 f7       	brne	.-34     	; 0x1f74 <vfprintf+0x1c4>
    1f96:	e1 c0       	rjmp	.+450    	; 0x215a <vfprintf+0x3aa>
    1f98:	84 36       	cpi	r24, 0x64	; 100
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <vfprintf+0x1f0>
    1f9c:	89 36       	cpi	r24, 0x69	; 105
    1f9e:	39 f5       	brne	.+78     	; 0x1fee <vfprintf+0x23e>
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	37 fe       	sbrs	r3, 7
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <vfprintf+0x204>
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	0c 5f       	subi	r16, 0xFC	; 252
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <vfprintf+0x214>
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	07 2e       	mov	r0, r23
    1fba:	00 0c       	add	r0, r0
    1fbc:	88 0b       	sbc	r24, r24
    1fbe:	99 0b       	sbc	r25, r25
    1fc0:	0e 5f       	subi	r16, 0xFE	; 254
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	f3 2d       	mov	r31, r3
    1fc6:	ff 76       	andi	r31, 0x6F	; 111
    1fc8:	3f 2e       	mov	r3, r31
    1fca:	97 ff       	sbrs	r25, 7
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <vfprintf+0x230>
    1fce:	90 95       	com	r25
    1fd0:	80 95       	com	r24
    1fd2:	70 95       	com	r23
    1fd4:	61 95       	neg	r22
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	f0 68       	ori	r31, 0x80	; 128
    1fde:	3f 2e       	mov	r3, r31
    1fe0:	2a e0       	ldi	r18, 0x0A	; 10
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	a3 01       	movw	r20, r6
    1fe6:	33 d1       	rcall	.+614    	; 0x224e <__ultoa_invert>
    1fe8:	88 2e       	mov	r8, r24
    1fea:	86 18       	sub	r8, r6
    1fec:	44 c0       	rjmp	.+136    	; 0x2076 <vfprintf+0x2c6>
    1fee:	85 37       	cpi	r24, 0x75	; 117
    1ff0:	31 f4       	brne	.+12     	; 0x1ffe <vfprintf+0x24e>
    1ff2:	23 2d       	mov	r18, r3
    1ff4:	2f 7e       	andi	r18, 0xEF	; 239
    1ff6:	b2 2e       	mov	r11, r18
    1ff8:	2a e0       	ldi	r18, 0x0A	; 10
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	25 c0       	rjmp	.+74     	; 0x2048 <vfprintf+0x298>
    1ffe:	93 2d       	mov	r25, r3
    2000:	99 7f       	andi	r25, 0xF9	; 249
    2002:	b9 2e       	mov	r11, r25
    2004:	8f 36       	cpi	r24, 0x6F	; 111
    2006:	c1 f0       	breq	.+48     	; 0x2038 <vfprintf+0x288>
    2008:	18 f4       	brcc	.+6      	; 0x2010 <vfprintf+0x260>
    200a:	88 35       	cpi	r24, 0x58	; 88
    200c:	79 f0       	breq	.+30     	; 0x202c <vfprintf+0x27c>
    200e:	ae c0       	rjmp	.+348    	; 0x216c <vfprintf+0x3bc>
    2010:	80 37       	cpi	r24, 0x70	; 112
    2012:	19 f0       	breq	.+6      	; 0x201a <vfprintf+0x26a>
    2014:	88 37       	cpi	r24, 0x78	; 120
    2016:	21 f0       	breq	.+8      	; 0x2020 <vfprintf+0x270>
    2018:	a9 c0       	rjmp	.+338    	; 0x216c <vfprintf+0x3bc>
    201a:	e9 2f       	mov	r30, r25
    201c:	e0 61       	ori	r30, 0x10	; 16
    201e:	be 2e       	mov	r11, r30
    2020:	b4 fe       	sbrs	r11, 4
    2022:	0d c0       	rjmp	.+26     	; 0x203e <vfprintf+0x28e>
    2024:	fb 2d       	mov	r31, r11
    2026:	f4 60       	ori	r31, 0x04	; 4
    2028:	bf 2e       	mov	r11, r31
    202a:	09 c0       	rjmp	.+18     	; 0x203e <vfprintf+0x28e>
    202c:	34 fe       	sbrs	r3, 4
    202e:	0a c0       	rjmp	.+20     	; 0x2044 <vfprintf+0x294>
    2030:	29 2f       	mov	r18, r25
    2032:	26 60       	ori	r18, 0x06	; 6
    2034:	b2 2e       	mov	r11, r18
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <vfprintf+0x294>
    2038:	28 e0       	ldi	r18, 0x08	; 8
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <vfprintf+0x298>
    203e:	20 e1       	ldi	r18, 0x10	; 16
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <vfprintf+0x298>
    2044:	20 e1       	ldi	r18, 0x10	; 16
    2046:	32 e0       	ldi	r19, 0x02	; 2
    2048:	f8 01       	movw	r30, r16
    204a:	b7 fe       	sbrs	r11, 7
    204c:	07 c0       	rjmp	.+14     	; 0x205c <vfprintf+0x2ac>
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	0c 5f       	subi	r16, 0xFC	; 252
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <vfprintf+0x2b8>
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 5f       	subi	r16, 0xFE	; 254
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	a3 01       	movw	r20, r6
    206a:	f1 d0       	rcall	.+482    	; 0x224e <__ultoa_invert>
    206c:	88 2e       	mov	r8, r24
    206e:	86 18       	sub	r8, r6
    2070:	fb 2d       	mov	r31, r11
    2072:	ff 77       	andi	r31, 0x7F	; 127
    2074:	3f 2e       	mov	r3, r31
    2076:	36 fe       	sbrs	r3, 6
    2078:	0d c0       	rjmp	.+26     	; 0x2094 <vfprintf+0x2e4>
    207a:	23 2d       	mov	r18, r3
    207c:	2e 7f       	andi	r18, 0xFE	; 254
    207e:	a2 2e       	mov	r10, r18
    2080:	89 14       	cp	r8, r9
    2082:	58 f4       	brcc	.+22     	; 0x209a <vfprintf+0x2ea>
    2084:	34 fe       	sbrs	r3, 4
    2086:	0b c0       	rjmp	.+22     	; 0x209e <vfprintf+0x2ee>
    2088:	32 fc       	sbrc	r3, 2
    208a:	09 c0       	rjmp	.+18     	; 0x209e <vfprintf+0x2ee>
    208c:	83 2d       	mov	r24, r3
    208e:	8e 7e       	andi	r24, 0xEE	; 238
    2090:	a8 2e       	mov	r10, r24
    2092:	05 c0       	rjmp	.+10     	; 0x209e <vfprintf+0x2ee>
    2094:	b8 2c       	mov	r11, r8
    2096:	a3 2c       	mov	r10, r3
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <vfprintf+0x2f0>
    209a:	b8 2c       	mov	r11, r8
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <vfprintf+0x2f0>
    209e:	b9 2c       	mov	r11, r9
    20a0:	a4 fe       	sbrs	r10, 4
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <vfprintf+0x312>
    20a4:	fe 01       	movw	r30, r28
    20a6:	e8 0d       	add	r30, r8
    20a8:	f1 1d       	adc	r31, r1
    20aa:	80 81       	ld	r24, Z
    20ac:	80 33       	cpi	r24, 0x30	; 48
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <vfprintf+0x308>
    20b0:	9a 2d       	mov	r25, r10
    20b2:	99 7e       	andi	r25, 0xE9	; 233
    20b4:	a9 2e       	mov	r10, r25
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <vfprintf+0x31a>
    20b8:	a2 fe       	sbrs	r10, 2
    20ba:	06 c0       	rjmp	.+12     	; 0x20c8 <vfprintf+0x318>
    20bc:	b3 94       	inc	r11
    20be:	b3 94       	inc	r11
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <vfprintf+0x31a>
    20c2:	8a 2d       	mov	r24, r10
    20c4:	86 78       	andi	r24, 0x86	; 134
    20c6:	09 f0       	breq	.+2      	; 0x20ca <vfprintf+0x31a>
    20c8:	b3 94       	inc	r11
    20ca:	a3 fc       	sbrc	r10, 3
    20cc:	10 c0       	rjmp	.+32     	; 0x20ee <vfprintf+0x33e>
    20ce:	a0 fe       	sbrs	r10, 0
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <vfprintf+0x32e>
    20d2:	b2 14       	cp	r11, r2
    20d4:	80 f4       	brcc	.+32     	; 0x20f6 <vfprintf+0x346>
    20d6:	28 0c       	add	r2, r8
    20d8:	92 2c       	mov	r9, r2
    20da:	9b 18       	sub	r9, r11
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <vfprintf+0x348>
    20de:	b2 14       	cp	r11, r2
    20e0:	58 f4       	brcc	.+22     	; 0x20f8 <vfprintf+0x348>
    20e2:	b6 01       	movw	r22, r12
    20e4:	80 e2       	ldi	r24, 0x20	; 32
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	76 d0       	rcall	.+236    	; 0x21d6 <fputc>
    20ea:	b3 94       	inc	r11
    20ec:	f8 cf       	rjmp	.-16     	; 0x20de <vfprintf+0x32e>
    20ee:	b2 14       	cp	r11, r2
    20f0:	18 f4       	brcc	.+6      	; 0x20f8 <vfprintf+0x348>
    20f2:	2b 18       	sub	r2, r11
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <vfprintf+0x34a>
    20f6:	98 2c       	mov	r9, r8
    20f8:	21 2c       	mov	r2, r1
    20fa:	a4 fe       	sbrs	r10, 4
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <vfprintf+0x36c>
    20fe:	b6 01       	movw	r22, r12
    2100:	80 e3       	ldi	r24, 0x30	; 48
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	68 d0       	rcall	.+208    	; 0x21d6 <fputc>
    2106:	a2 fe       	sbrs	r10, 2
    2108:	16 c0       	rjmp	.+44     	; 0x2136 <vfprintf+0x386>
    210a:	a1 fc       	sbrc	r10, 1
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <vfprintf+0x364>
    210e:	88 e7       	ldi	r24, 0x78	; 120
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <vfprintf+0x368>
    2114:	88 e5       	ldi	r24, 0x58	; 88
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	b6 01       	movw	r22, r12
    211a:	0c c0       	rjmp	.+24     	; 0x2134 <vfprintf+0x384>
    211c:	8a 2d       	mov	r24, r10
    211e:	86 78       	andi	r24, 0x86	; 134
    2120:	51 f0       	breq	.+20     	; 0x2136 <vfprintf+0x386>
    2122:	a1 fe       	sbrs	r10, 1
    2124:	02 c0       	rjmp	.+4      	; 0x212a <vfprintf+0x37a>
    2126:	8b e2       	ldi	r24, 0x2B	; 43
    2128:	01 c0       	rjmp	.+2      	; 0x212c <vfprintf+0x37c>
    212a:	80 e2       	ldi	r24, 0x20	; 32
    212c:	a7 fc       	sbrc	r10, 7
    212e:	8d e2       	ldi	r24, 0x2D	; 45
    2130:	b6 01       	movw	r22, r12
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	50 d0       	rcall	.+160    	; 0x21d6 <fputc>
    2136:	89 14       	cp	r8, r9
    2138:	30 f4       	brcc	.+12     	; 0x2146 <vfprintf+0x396>
    213a:	b6 01       	movw	r22, r12
    213c:	80 e3       	ldi	r24, 0x30	; 48
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	4a d0       	rcall	.+148    	; 0x21d6 <fputc>
    2142:	9a 94       	dec	r9
    2144:	f8 cf       	rjmp	.-16     	; 0x2136 <vfprintf+0x386>
    2146:	8a 94       	dec	r8
    2148:	f3 01       	movw	r30, r6
    214a:	e8 0d       	add	r30, r8
    214c:	f1 1d       	adc	r31, r1
    214e:	80 81       	ld	r24, Z
    2150:	b6 01       	movw	r22, r12
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	40 d0       	rcall	.+128    	; 0x21d6 <fputc>
    2156:	81 10       	cpse	r8, r1
    2158:	f6 cf       	rjmp	.-20     	; 0x2146 <vfprintf+0x396>
    215a:	22 20       	and	r2, r2
    215c:	09 f4       	brne	.+2      	; 0x2160 <vfprintf+0x3b0>
    215e:	4e ce       	rjmp	.-868    	; 0x1dfc <vfprintf+0x4c>
    2160:	b6 01       	movw	r22, r12
    2162:	80 e2       	ldi	r24, 0x20	; 32
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	37 d0       	rcall	.+110    	; 0x21d6 <fputc>
    2168:	2a 94       	dec	r2
    216a:	f7 cf       	rjmp	.-18     	; 0x215a <vfprintf+0x3aa>
    216c:	f6 01       	movw	r30, r12
    216e:	86 81       	ldd	r24, Z+6	; 0x06
    2170:	97 81       	ldd	r25, Z+7	; 0x07
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <vfprintf+0x3c8>
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	2b 96       	adiw	r28, 0x0b	; 11
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	ff 90       	pop	r15
    218e:	ef 90       	pop	r14
    2190:	df 90       	pop	r13
    2192:	cf 90       	pop	r12
    2194:	bf 90       	pop	r11
    2196:	af 90       	pop	r10
    2198:	9f 90       	pop	r9
    219a:	8f 90       	pop	r8
    219c:	7f 90       	pop	r7
    219e:	6f 90       	pop	r6
    21a0:	5f 90       	pop	r5
    21a2:	4f 90       	pop	r4
    21a4:	3f 90       	pop	r3
    21a6:	2f 90       	pop	r2
    21a8:	08 95       	ret

000021aa <strnlen_P>:
    21aa:	fc 01       	movw	r30, r24
    21ac:	05 90       	lpm	r0, Z+
    21ae:	61 50       	subi	r22, 0x01	; 1
    21b0:	70 40       	sbci	r23, 0x00	; 0
    21b2:	01 10       	cpse	r0, r1
    21b4:	d8 f7       	brcc	.-10     	; 0x21ac <strnlen_P+0x2>
    21b6:	80 95       	com	r24
    21b8:	90 95       	com	r25
    21ba:	8e 0f       	add	r24, r30
    21bc:	9f 1f       	adc	r25, r31
    21be:	08 95       	ret

000021c0 <strnlen>:
    21c0:	fc 01       	movw	r30, r24
    21c2:	61 50       	subi	r22, 0x01	; 1
    21c4:	70 40       	sbci	r23, 0x00	; 0
    21c6:	01 90       	ld	r0, Z+
    21c8:	01 10       	cpse	r0, r1
    21ca:	d8 f7       	brcc	.-10     	; 0x21c2 <strnlen+0x2>
    21cc:	80 95       	com	r24
    21ce:	90 95       	com	r25
    21d0:	8e 0f       	add	r24, r30
    21d2:	9f 1f       	adc	r25, r31
    21d4:	08 95       	ret

000021d6 <fputc>:
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	fb 01       	movw	r30, r22
    21e0:	23 81       	ldd	r18, Z+3	; 0x03
    21e2:	21 fd       	sbrc	r18, 1
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <fputc+0x16>
    21e6:	8f ef       	ldi	r24, 0xFF	; 255
    21e8:	9f ef       	ldi	r25, 0xFF	; 255
    21ea:	2c c0       	rjmp	.+88     	; 0x2244 <fputc+0x6e>
    21ec:	22 ff       	sbrs	r18, 2
    21ee:	16 c0       	rjmp	.+44     	; 0x221c <fputc+0x46>
    21f0:	46 81       	ldd	r20, Z+6	; 0x06
    21f2:	57 81       	ldd	r21, Z+7	; 0x07
    21f4:	24 81       	ldd	r18, Z+4	; 0x04
    21f6:	35 81       	ldd	r19, Z+5	; 0x05
    21f8:	42 17       	cp	r20, r18
    21fa:	53 07       	cpc	r21, r19
    21fc:	44 f4       	brge	.+16     	; 0x220e <fputc+0x38>
    21fe:	a0 81       	ld	r26, Z
    2200:	b1 81       	ldd	r27, Z+1	; 0x01
    2202:	9d 01       	movw	r18, r26
    2204:	2f 5f       	subi	r18, 0xFF	; 255
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	31 83       	std	Z+1, r19	; 0x01
    220a:	20 83       	st	Z, r18
    220c:	8c 93       	st	X, r24
    220e:	26 81       	ldd	r18, Z+6	; 0x06
    2210:	37 81       	ldd	r19, Z+7	; 0x07
    2212:	2f 5f       	subi	r18, 0xFF	; 255
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	37 83       	std	Z+7, r19	; 0x07
    2218:	26 83       	std	Z+6, r18	; 0x06
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <fputc+0x6e>
    221c:	8b 01       	movw	r16, r22
    221e:	ec 01       	movw	r28, r24
    2220:	fb 01       	movw	r30, r22
    2222:	00 84       	ldd	r0, Z+8	; 0x08
    2224:	f1 85       	ldd	r31, Z+9	; 0x09
    2226:	e0 2d       	mov	r30, r0
    2228:	09 95       	icall
    222a:	89 2b       	or	r24, r25
    222c:	e1 f6       	brne	.-72     	; 0x21e6 <fputc+0x10>
    222e:	d8 01       	movw	r26, r16
    2230:	16 96       	adiw	r26, 0x06	; 6
    2232:	8d 91       	ld	r24, X+
    2234:	9c 91       	ld	r25, X
    2236:	17 97       	sbiw	r26, 0x07	; 7
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	17 96       	adiw	r26, 0x07	; 7
    223c:	9c 93       	st	X, r25
    223e:	8e 93       	st	-X, r24
    2240:	16 97       	sbiw	r26, 0x06	; 6
    2242:	ce 01       	movw	r24, r28
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <__ultoa_invert>:
    224e:	fa 01       	movw	r30, r20
    2250:	aa 27       	eor	r26, r26
    2252:	28 30       	cpi	r18, 0x08	; 8
    2254:	51 f1       	breq	.+84     	; 0x22aa <__ultoa_invert+0x5c>
    2256:	20 31       	cpi	r18, 0x10	; 16
    2258:	81 f1       	breq	.+96     	; 0x22ba <__ultoa_invert+0x6c>
    225a:	e8 94       	clt
    225c:	6f 93       	push	r22
    225e:	6e 7f       	andi	r22, 0xFE	; 254
    2260:	6e 5f       	subi	r22, 0xFE	; 254
    2262:	7f 4f       	sbci	r23, 0xFF	; 255
    2264:	8f 4f       	sbci	r24, 0xFF	; 255
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	af 4f       	sbci	r26, 0xFF	; 255
    226a:	b1 e0       	ldi	r27, 0x01	; 1
    226c:	3e d0       	rcall	.+124    	; 0x22ea <__ultoa_invert+0x9c>
    226e:	b4 e0       	ldi	r27, 0x04	; 4
    2270:	3c d0       	rcall	.+120    	; 0x22ea <__ultoa_invert+0x9c>
    2272:	67 0f       	add	r22, r23
    2274:	78 1f       	adc	r23, r24
    2276:	89 1f       	adc	r24, r25
    2278:	9a 1f       	adc	r25, r26
    227a:	a1 1d       	adc	r26, r1
    227c:	68 0f       	add	r22, r24
    227e:	79 1f       	adc	r23, r25
    2280:	8a 1f       	adc	r24, r26
    2282:	91 1d       	adc	r25, r1
    2284:	a1 1d       	adc	r26, r1
    2286:	6a 0f       	add	r22, r26
    2288:	71 1d       	adc	r23, r1
    228a:	81 1d       	adc	r24, r1
    228c:	91 1d       	adc	r25, r1
    228e:	a1 1d       	adc	r26, r1
    2290:	20 d0       	rcall	.+64     	; 0x22d2 <__ultoa_invert+0x84>
    2292:	09 f4       	brne	.+2      	; 0x2296 <__ultoa_invert+0x48>
    2294:	68 94       	set
    2296:	3f 91       	pop	r19
    2298:	2a e0       	ldi	r18, 0x0A	; 10
    229a:	26 9f       	mul	r18, r22
    229c:	11 24       	eor	r1, r1
    229e:	30 19       	sub	r19, r0
    22a0:	30 5d       	subi	r19, 0xD0	; 208
    22a2:	31 93       	st	Z+, r19
    22a4:	de f6       	brtc	.-74     	; 0x225c <__ultoa_invert+0xe>
    22a6:	cf 01       	movw	r24, r30
    22a8:	08 95       	ret
    22aa:	46 2f       	mov	r20, r22
    22ac:	47 70       	andi	r20, 0x07	; 7
    22ae:	40 5d       	subi	r20, 0xD0	; 208
    22b0:	41 93       	st	Z+, r20
    22b2:	b3 e0       	ldi	r27, 0x03	; 3
    22b4:	0f d0       	rcall	.+30     	; 0x22d4 <__ultoa_invert+0x86>
    22b6:	c9 f7       	brne	.-14     	; 0x22aa <__ultoa_invert+0x5c>
    22b8:	f6 cf       	rjmp	.-20     	; 0x22a6 <__ultoa_invert+0x58>
    22ba:	46 2f       	mov	r20, r22
    22bc:	4f 70       	andi	r20, 0x0F	; 15
    22be:	40 5d       	subi	r20, 0xD0	; 208
    22c0:	4a 33       	cpi	r20, 0x3A	; 58
    22c2:	18 f0       	brcs	.+6      	; 0x22ca <__ultoa_invert+0x7c>
    22c4:	49 5d       	subi	r20, 0xD9	; 217
    22c6:	31 fd       	sbrc	r19, 1
    22c8:	40 52       	subi	r20, 0x20	; 32
    22ca:	41 93       	st	Z+, r20
    22cc:	02 d0       	rcall	.+4      	; 0x22d2 <__ultoa_invert+0x84>
    22ce:	a9 f7       	brne	.-22     	; 0x22ba <__ultoa_invert+0x6c>
    22d0:	ea cf       	rjmp	.-44     	; 0x22a6 <__ultoa_invert+0x58>
    22d2:	b4 e0       	ldi	r27, 0x04	; 4
    22d4:	a6 95       	lsr	r26
    22d6:	97 95       	ror	r25
    22d8:	87 95       	ror	r24
    22da:	77 95       	ror	r23
    22dc:	67 95       	ror	r22
    22de:	ba 95       	dec	r27
    22e0:	c9 f7       	brne	.-14     	; 0x22d4 <__ultoa_invert+0x86>
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	61 05       	cpc	r22, r1
    22e6:	71 05       	cpc	r23, r1
    22e8:	08 95       	ret
    22ea:	9b 01       	movw	r18, r22
    22ec:	ac 01       	movw	r20, r24
    22ee:	0a 2e       	mov	r0, r26
    22f0:	06 94       	lsr	r0
    22f2:	57 95       	ror	r21
    22f4:	47 95       	ror	r20
    22f6:	37 95       	ror	r19
    22f8:	27 95       	ror	r18
    22fa:	ba 95       	dec	r27
    22fc:	c9 f7       	brne	.-14     	; 0x22f0 <__ultoa_invert+0xa2>
    22fe:	62 0f       	add	r22, r18
    2300:	73 1f       	adc	r23, r19
    2302:	84 1f       	adc	r24, r20
    2304:	95 1f       	adc	r25, r21
    2306:	a0 1d       	adc	r26, r0
    2308:	08 95       	ret

0000230a <_exit>:
    230a:	f8 94       	cli

0000230c <__stop_program>:
    230c:	ff cf       	rjmp	.-2      	; 0x230c <__stop_program>
