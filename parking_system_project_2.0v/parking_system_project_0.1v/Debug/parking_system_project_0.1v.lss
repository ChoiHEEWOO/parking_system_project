
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039a  00800100  00002638  000026cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024b  0080049a  0080049a  00002a66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000496f  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c1  00000000  00000000  0000777b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000239f  00000000  00000000  00008b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a0  00000000  00000000  0000aedc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e51  00000000  00000000  0000b87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002df4  00000000  00000000  0000c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0a c7       	rjmp	.+3604   	; 0xe52 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e3       	ldi	r30, 0x38	; 56
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 39       	cpi	r26, 0x9A	; 154
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	aa e9       	ldi	r26, 0x9A	; 154
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3e       	cpi	r26, 0xE5	; 229
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 9f 09 	call	0x133e	; 0x133e <main>
      c6:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_18>:
void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
	set_motor_flag=1;
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	8f 93       	push	r24
      d8:	8c b1       	in	r24, 0x0c	; 12
      da:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <uart0+0x66>
      de:	8f 91       	pop	r24
      e0:	0f 90       	pop	r0
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	0f 90       	pop	r0
      e6:	1f 90       	pop	r1
      e8:	18 95       	reti

000000ea <__vector_30>:
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	0b b6       	in	r0, 0x3b	; 59
      f6:	0f 92       	push	r0
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	ef 93       	push	r30
     110:	ff 93       	push	r31
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <__vector_30+0x2e>
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     122:	1e 33       	cpi	r17, 0x3E	; 62
     124:	21 f4       	brne	.+8      	; 0x12e <__vector_30+0x44>
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <esp8266_send_ready_flag>
     12c:	42 c0       	rjmp	.+132    	; 0x1b2 <__vector_30+0xc8>
     12e:	1f 34       	cpi	r17, 0x4F	; 79
     130:	21 f4       	brne	.+8      	; 0x13a <__vector_30+0x50>
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <cnt.2447>
     138:	3c c0       	rjmp	.+120    	; 0x1b2 <__vector_30+0xc8>
     13a:	1b 34       	cpi	r17, 0x4B	; 75
     13c:	51 f4       	brne	.+20     	; 0x152 <__vector_30+0x68>
     13e:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <cnt.2447>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	09 f0       	breq	.+2      	; 0x148 <__vector_30+0x5e>
     146:	87 c0       	rjmp	.+270    	; 0x256 <__vector_30+0x16c>
     148:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <esp8266_return_result_flag>
     14c:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <cnt.2447>
     150:	30 c0       	rjmp	.+96     	; 0x1b2 <__vector_30+0xc8>
     152:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <cnt.2447>
     156:	1b 32       	cpi	r17, 0x2B	; 43
     158:	21 f4       	brne	.+8      	; 0x162 <__vector_30+0x78>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     160:	76 c0       	rjmp	.+236    	; 0x24e <__vector_30+0x164>
     162:	19 34       	cpi	r17, 0x49	; 73
     164:	41 f4       	brne	.+16     	; 0x176 <__vector_30+0x8c>
     166:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <parse_cnt.2448>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	11 f5       	brne	.+68     	; 0x1b2 <__vector_30+0xc8>
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     174:	6c c0       	rjmp	.+216    	; 0x24e <__vector_30+0x164>
     176:	10 35       	cpi	r17, 0x50	; 80
     178:	41 f4       	brne	.+16     	; 0x18a <__vector_30+0xa0>
     17a:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <parse_cnt.2448>
     17e:	82 30       	cpi	r24, 0x02	; 2
     180:	c1 f4       	brne	.+48     	; 0x1b2 <__vector_30+0xc8>
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     188:	62 c0       	rjmp	.+196    	; 0x24e <__vector_30+0x164>
     18a:	14 34       	cpi	r17, 0x44	; 68
     18c:	41 f4       	brne	.+16     	; 0x19e <__vector_30+0xb4>
     18e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <parse_cnt.2448>
     192:	83 30       	cpi	r24, 0x03	; 3
     194:	71 f4       	brne	.+28     	; 0x1b2 <__vector_30+0xc8>
     196:	84 e0       	ldi	r24, 0x04	; 4
     198:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     19c:	58 c0       	rjmp	.+176    	; 0x24e <__vector_30+0x164>
     19e:	1c 32       	cpi	r17, 0x2C	; 44
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <__vector_30+0xc8>
     1a2:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <parse_cnt.2448>
     1a6:	84 30       	cpi	r24, 0x04	; 4
     1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_30+0xc8>
     1aa:	85 e0       	ldi	r24, 0x05	; 5
     1ac:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     1b0:	4e c0       	rjmp	.+156    	; 0x24e <__vector_30+0x164>
     1b2:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <parse_cnt.2448>
     1b6:	85 30       	cpi	r24, 0x05	; 5
     1b8:	91 f4       	brne	.+36     	; 0x1de <__vector_30+0xf4>
     1ba:	10 93 bf 04 	sts	0x04BF, r17	; 0x8004bf <receive_length>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <parse_cnt.2448>
     1c4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <receive_length>
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	1a 82       	std	Y+2, r1	; 0x02
     1cc:	ce 01       	movw	r24, r28
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <atoi>
     1d4:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <receive_length_int+0x1>
     1d8:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <receive_length_int>
     1dc:	38 c0       	rjmp	.+112    	; 0x24e <__vector_30+0x164>
     1de:	86 30       	cpi	r24, 0x06	; 6
     1e0:	c1 f4       	brne	.+48     	; 0x212 <__vector_30+0x128>
     1e2:	1a 33       	cpi	r17, 0x3A	; 58
     1e4:	71 f0       	breq	.+28     	; 0x202 <__vector_30+0x118>
     1e6:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <receive_length>
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	1a 83       	std	Y+2, r17	; 0x02
     1ee:	1b 82       	std	Y+3, r1	; 0x03
     1f0:	ce 01       	movw	r24, r28
     1f2:	01 96       	adiw	r24, 0x01	; 1
     1f4:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <atoi>
     1f8:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <receive_length_int+0x1>
     1fc:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <receive_length_int>
     200:	26 c0       	rjmp	.+76     	; 0x24e <__vector_30+0x164>
     202:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <parse_cnt.2448>
     206:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <data_cnt.2449>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_data_flag.2450>
     210:	1e c0       	rjmp	.+60     	; 0x24e <__vector_30+0x164>
     212:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_data_flag.2450>
     216:	88 23       	and	r24, r24
     218:	c1 f0       	breq	.+48     	; 0x24a <__vector_30+0x160>
     21a:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <data_cnt.2449>
     21e:	e8 2f       	mov	r30, r24
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	ed 56       	subi	r30, 0x6D	; 109
     224:	fa 4f       	sbci	r31, 0xFA	; 250
     226:	10 83       	st	Z, r17
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <data_cnt.2449>
     22e:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <receive_length_int>
     232:	30 91 d0 06 	lds	r19, 0x06D0	; 0x8006d0 <receive_length_int+0x1>
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	82 17       	cp	r24, r18
     23a:	93 07       	cpc	r25, r19
     23c:	41 f4       	brne	.+16     	; 0x24e <__vector_30+0x164>
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <esp8266_receiving_flag>
     244:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <parse_data_flag.2450>
     248:	02 c0       	rjmp	.+4      	; 0x24e <__vector_30+0x164>
     24a:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <parse_cnt.2448>
     24e:	81 2f       	mov	r24, r17
     250:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <uart0_tx_char>
     254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_30+0x172>
     256:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <cnt.2447>
     25a:	ab cf       	rjmp	.-170    	; 0x1b2 <__vector_30+0xc8>
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	1f 91       	pop	r17
     280:	0f 90       	pop	r0
     282:	0b be       	out	0x3b, r0	; 59
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <mfrc_check_and_data_receive_ch0>:
     28e:	cf 93       	push	r28
     290:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <noise_flag.2466>
     294:	81 11       	cpse	r24, r1
     296:	09 c0       	rjmp	.+18     	; 0x2aa <mfrc_check_and_data_receive_ch0+0x1c>
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	6d ea       	ldi	r22, 0xAD	; 173
     29c:	76 e0       	ldi	r23, 0x06	; 6
     29e:	82 e5       	ldi	r24, 0x52	; 82
     2a0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     2a4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_byte.2468>
     2a8:	1d c0       	rjmp	.+58     	; 0x2e4 <mfrc_check_and_data_receive_ch0+0x56>
     2aa:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <toggle_flag.2467>
     2ae:	88 23       	and	r24, r24
     2b0:	39 f0       	breq	.+14     	; 0x2c0 <mfrc_check_and_data_receive_ch0+0x32>
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	6d ea       	ldi	r22, 0xAD	; 173
     2b6:	76 e0       	ldi	r23, 0x06	; 6
     2b8:	82 e5       	ldi	r24, 0x52	; 82
     2ba:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     2be:	0c c0       	rjmp	.+24     	; 0x2d8 <mfrc_check_and_data_receive_ch0+0x4a>
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	6d ea       	ldi	r22, 0xAD	; 173
     2c4:	76 e0       	ldi	r23, 0x06	; 6
     2c6:	82 e5       	ldi	r24, 0x52	; 82
     2c8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     2cc:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_byte.2468>
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <mfrc_check_and_data_receive_ch0+0x4a>
     2d4:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <noise_flag.2466>
     2d8:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <toggle_flag.2467>
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	89 27       	eor	r24, r25
     2e0:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <toggle_flag.2467>
     2e4:	c0 91 a6 04 	lds	r28, 0x04A6	; 0x8004a6 <_byte.2468>
     2e8:	c1 30       	cpi	r28, 0x01	; 1
     2ea:	29 f0       	breq	.+10     	; 0x2f6 <mfrc_check_and_data_receive_ch0+0x68>
     2ec:	88 e5       	ldi	r24, 0x58	; 88
     2ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     2f2:	c0 e0       	ldi	r28, 0x00	; 0
     2f4:	18 c0       	rjmp	.+48     	; 0x326 <mfrc_check_and_data_receive_ch0+0x98>
     2f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <detected_flag_ch0>
     2fa:	88 35       	cpi	r24, 0x58	; 88
     2fc:	99 f4       	brne	.+38     	; 0x324 <mfrc_check_and_data_receive_ch0+0x96>
     2fe:	8f e4       	ldi	r24, 0x4F	; 79
     300:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <noise_flag.2466>
     30a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <toggle_flag.2467>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	8d ea       	ldi	r24, 0xAD	; 173
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <mfrc522_get_card_serial>
     318:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_byte.2468>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	19 f0       	breq	.+6      	; 0x326 <mfrc_check_and_data_receive_ch0+0x98>
     320:	cf ef       	ldi	r28, 0xFF	; 255
     322:	01 c0       	rjmp	.+2      	; 0x326 <mfrc_check_and_data_receive_ch0+0x98>
     324:	c0 e0       	ldi	r28, 0x00	; 0
     326:	8c 2f       	mov	r24, r28
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <mfrc_check_and_data_receive_ch1>:
     32c:	cf 93       	push	r28
     32e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <noise_flag.2472>
     332:	81 11       	cpse	r24, r1
     334:	09 c0       	rjmp	.+18     	; 0x348 <mfrc_check_and_data_receive_ch1+0x1c>
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	6f eb       	ldi	r22, 0xBF	; 191
     33a:	76 e0       	ldi	r23, 0x06	; 6
     33c:	82 e5       	ldi	r24, 0x52	; 82
     33e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     342:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_byte.2474>
     346:	1d c0       	rjmp	.+58     	; 0x382 <mfrc_check_and_data_receive_ch1+0x56>
     348:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <toggle_flag.2473>
     34c:	88 23       	and	r24, r24
     34e:	39 f0       	breq	.+14     	; 0x35e <mfrc_check_and_data_receive_ch1+0x32>
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	6f eb       	ldi	r22, 0xBF	; 191
     354:	76 e0       	ldi	r23, 0x06	; 6
     356:	82 e5       	ldi	r24, 0x52	; 82
     358:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     35c:	0c c0       	rjmp	.+24     	; 0x376 <mfrc_check_and_data_receive_ch1+0x4a>
     35e:	41 e0       	ldi	r20, 0x01	; 1
     360:	6f eb       	ldi	r22, 0xBF	; 191
     362:	76 e0       	ldi	r23, 0x06	; 6
     364:	82 e5       	ldi	r24, 0x52	; 82
     366:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <mfrc522_request>
     36a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_byte.2474>
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	11 f4       	brne	.+4      	; 0x376 <mfrc_check_and_data_receive_ch1+0x4a>
     372:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <noise_flag.2472>
     376:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <toggle_flag.2473>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	89 27       	eor	r24, r25
     37e:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <toggle_flag.2473>
     382:	c0 91 a3 04 	lds	r28, 0x04A3	; 0x8004a3 <_byte.2474>
     386:	c1 30       	cpi	r28, 0x01	; 1
     388:	29 f0       	breq	.+10     	; 0x394 <mfrc_check_and_data_receive_ch1+0x68>
     38a:	88 e5       	ldi	r24, 0x58	; 88
     38c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	18 c0       	rjmp	.+48     	; 0x3c4 <mfrc_check_and_data_receive_ch1+0x98>
     394:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <detected_flag_ch1>
     398:	88 35       	cpi	r24, 0x58	; 88
     39a:	99 f4       	brne	.+38     	; 0x3c2 <mfrc_check_and_data_receive_ch1+0x96>
     39c:	8f e4       	ldi	r24, 0x4F	; 79
     39e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <noise_flag.2472>
     3a8:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <toggle_flag.2473>
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	8f eb       	ldi	r24, 0xBF	; 191
     3b0:	96 e0       	ldi	r25, 0x06	; 6
     3b2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <mfrc522_get_card_serial>
     3b6:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <_byte.2474>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <mfrc_check_and_data_receive_ch1+0x98>
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <mfrc_check_and_data_receive_ch1+0x98>
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	8c 2f       	mov	r24, r28
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <RC522_data_request_per_100ms>:
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
     3d0:	60 91 d1 06 	lds	r22, 0x06D1	; 0x8006d1 <TICK>
     3d4:	70 91 d2 06 	lds	r23, 0x06D2	; 0x8006d2 <TICK+0x1>
     3d8:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <TICK+0x2>
     3dc:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <TICK+0x3>
     3e0:	24 e6       	ldi	r18, 0x64	; 100
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__udivmodsi4>
     3ec:	67 2b       	or	r22, r23
     3ee:	68 2b       	or	r22, r24
     3f0:	69 2b       	or	r22, r25
     3f2:	89 f4       	brne	.+34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f4:	98 81       	ld	r25, Y
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	89 27       	eor	r24, r25
     3fa:	88 83       	st	Y, r24
     3fc:	81 11       	cpse	r24, r1
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	46 df       	rcall	.-372    	; 0x28e <mfrc_check_and_data_receive_ch0>
     402:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <received_state>
     406:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <rfid_uid_ch0+0x4>
     40a:	05 c0       	rjmp	.+10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40c:	8f df       	rcall	.-226    	; 0x32c <mfrc_check_and_data_receive_ch1>
     40e:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <received_state>
     412:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <rfid_uid_ch1+0x4>
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <rfid_user_uid_buffer_init>:
     41c:	87 ec       	ldi	r24, 0xC7	; 199
     41e:	94 e0       	ldi	r25, 0x04	; 4
     420:	4b e2       	ldi	r20, 0x2B	; 43
     422:	55 e0       	ldi	r21, 0x05	; 5
     424:	25 e0       	ldi	r18, 0x05	; 5
     426:	e6 e1       	ldi	r30, 0x16	; 22
     428:	f3 e0       	ldi	r31, 0x03	; 3
     42a:	dc 01       	movw	r26, r24
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	2a 95       	dec	r18
     432:	e1 f7       	brne	.-8      	; 0x42c <rfid_user_uid_buffer_init+0x10>
     434:	05 96       	adiw	r24, 0x05	; 5
     436:	84 17       	cp	r24, r20
     438:	95 07       	cpc	r25, r21
     43a:	a1 f7       	brne	.-24     	; 0x424 <rfid_user_uid_buffer_init+0x8>
     43c:	47 e4       	ldi	r20, 0x47	; 71
     43e:	51 e0       	ldi	r21, 0x01	; 1
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 05 0b 	call	0x160a	; 0x160a <i2c_lcd_string>
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	89 e6       	ldi	r24, 0x69	; 105
     44c:	98 e1       	ldi	r25, 0x18	; 24
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	80 40       	sbci	r24, 0x00	; 0
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <rfid_user_uid_buffer_init+0x32>
     456:	00 c0       	rjmp	.+0      	; 0x458 <rfid_user_uid_buffer_init+0x3c>
     458:	00 00       	nop
     45a:	08 95       	ret

0000045c <setSoundClip>:
     45c:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <TICK+0x4>
     460:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <TICK+0x5>
     464:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <TICK+0x6>
     468:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <TICK+0x7>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	99 f0       	breq	.+38     	; 0x496 <setSoundClip+0x3a>
     470:	28 f4       	brcc	.+10     	; 0x47c <setSoundClip+0x20>
     472:	88 23       	and	r24, r24
     474:	49 f0       	breq	.+18     	; 0x488 <setSoundClip+0x2c>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	51 f0       	breq	.+20     	; 0x48e <setSoundClip+0x32>
     47a:	1c c0       	rjmp	.+56     	; 0x4b4 <setSoundClip+0x58>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	99 f0       	breq	.+38     	; 0x4a6 <setSoundClip+0x4a>
     480:	70 f0       	brcs	.+28     	; 0x49e <setSoundClip+0x42>
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	a1 f0       	breq	.+40     	; 0x4ae <setSoundClip+0x52>
     486:	16 c0       	rjmp	.+44     	; 0x4b4 <setSoundClip+0x58>
     488:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <music_flag>
     48c:	13 c0       	rjmp	.+38     	; 0x4b4 <setSoundClip+0x58>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     494:	0f c0       	rjmp	.+30     	; 0x4b4 <setSoundClip+0x58>
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <setSoundClip+0x58>
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <setSoundClip+0x58>
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <setSoundClip+0x58>
     4ae:	85 e0       	ldi	r24, 0x05	; 5
     4b0:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     4b4:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <TICK+0x4>
     4b8:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <TICK+0x5>
     4bc:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <TICK+0x6>
     4c0:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <TICK+0x7>
     4c4:	08 95       	ret

000004c6 <buzz_MUTE>:
     4c6:	eb e8       	ldi	r30, 0x8B	; 139
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 7b       	andi	r24, 0xBF	; 191
     4ce:	80 83       	st	Z, r24
     4d0:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <music_flag>
     4d4:	08 95       	ret

000004d6 <setSoundNote>:
     4d6:	00 97       	sbiw	r24, 0x00	; 0
     4d8:	41 f0       	breq	.+16     	; 0x4ea <setSoundNote+0x14>
     4da:	eb e8       	ldi	r30, 0x8B	; 139
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	20 81       	ld	r18, Z
     4e0:	20 64       	ori	r18, 0x40	; 64
     4e2:	20 83       	st	Z, r18
     4e4:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <setICR3>
     4e8:	08 95       	ret
     4ea:	eb e8       	ldi	r30, 0x8B	; 139
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	8f 7b       	andi	r24, 0xBF	; 191
     4f2:	80 83       	st	Z, r24
     4f4:	08 95       	ret

000004f6 <buzz_play>:
     4f6:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <music_flag>
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	09 f4       	brne	.+2      	; 0x500 <buzz_play+0xa>
     4fe:	76 c0       	rjmp	.+236    	; 0x5ec <buzz_play+0xf6>
     500:	28 f4       	brcc	.+10     	; 0x50c <buzz_play+0x16>
     502:	88 23       	and	r24, r24
     504:	61 f0       	breq	.+24     	; 0x51e <buzz_play+0x28>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	61 f0       	breq	.+24     	; 0x522 <buzz_play+0x2c>
     50a:	08 95       	ret
     50c:	84 30       	cpi	r24, 0x04	; 4
     50e:	09 f4       	brne	.+2      	; 0x512 <buzz_play+0x1c>
     510:	37 c1       	rjmp	.+622    	; 0x780 <buzz_play+0x28a>
     512:	08 f4       	brcc	.+2      	; 0x516 <buzz_play+0x20>
     514:	d0 c0       	rjmp	.+416    	; 0x6b6 <buzz_play+0x1c0>
     516:	85 30       	cpi	r24, 0x05	; 5
     518:	09 f4       	brne	.+2      	; 0x51c <buzz_play+0x26>
     51a:	75 c1       	rjmp	.+746    	; 0x806 <buzz_play+0x310>
     51c:	08 95       	ret
     51e:	d3 cf       	rjmp	.-90     	; 0x4c6 <buzz_MUTE>
     520:	08 95       	ret
     522:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     526:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     52a:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     52e:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     532:	88 3c       	cpi	r24, 0xC8	; 200
     534:	91 05       	cpc	r25, r1
     536:	a1 05       	cpc	r26, r1
     538:	b1 05       	cpc	r27, r1
     53a:	20 f4       	brcc	.+8      	; 0x544 <buzz_play+0x4e>
     53c:	8b e9       	ldi	r24, 0x9B	; 155
     53e:	96 e0       	ldi	r25, 0x06	; 6
     540:	ca cf       	rjmp	.-108    	; 0x4d6 <setSoundNote>
     542:	08 95       	ret
     544:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     548:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     54c:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     550:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     554:	88 3c       	cpi	r24, 0xC8	; 200
     556:	91 05       	cpc	r25, r1
     558:	a1 05       	cpc	r26, r1
     55a:	b1 05       	cpc	r27, r1
     55c:	21 f4       	brne	.+8      	; 0x566 <buzz_play+0x70>
     55e:	87 ee       	ldi	r24, 0xE7	; 231
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	b9 cf       	rjmp	.-142    	; 0x4d6 <setSoundNote>
     564:	08 95       	ret
     566:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     56a:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     56e:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     572:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     576:	80 39       	cpi	r24, 0x90	; 144
     578:	91 40       	sbci	r25, 0x01	; 1
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	21 f4       	brne	.+8      	; 0x588 <buzz_play+0x92>
     580:	85 e6       	ldi	r24, 0x65	; 101
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	a8 cf       	rjmp	.-176    	; 0x4d6 <setSoundNote>
     586:	08 95       	ret
     588:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     58c:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     590:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     594:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     598:	88 35       	cpi	r24, 0x58	; 88
     59a:	92 40       	sbci	r25, 0x02	; 2
     59c:	a1 05       	cpc	r26, r1
     59e:	b1 05       	cpc	r27, r1
     5a0:	21 f4       	brne	.+8      	; 0x5aa <buzz_play+0xb4>
     5a2:	8d ef       	ldi	r24, 0xFD	; 253
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	97 cf       	rjmp	.-210    	; 0x4d6 <setSoundNote>
     5a8:	08 95       	ret
     5aa:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5ae:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5b2:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5b6:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5ba:	80 32       	cpi	r24, 0x20	; 32
     5bc:	93 40       	sbci	r25, 0x03	; 3
     5be:	a1 05       	cpc	r26, r1
     5c0:	b1 05       	cpc	r27, r1
     5c2:	21 f4       	brne	.+8      	; 0x5cc <buzz_play+0xd6>
     5c4:	88 ef       	ldi	r24, 0xF8	; 248
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	86 cf       	rjmp	.-244    	; 0x4d6 <setSoundNote>
     5ca:	08 95       	ret
     5cc:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5d0:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5d4:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5d8:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5dc:	80 3b       	cpi	r24, 0xB0	; 176
     5de:	94 40       	sbci	r25, 0x04	; 4
     5e0:	a1 05       	cpc	r26, r1
     5e2:	b1 05       	cpc	r27, r1
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <buzz_play+0xf2>
     5e6:	50 c1       	rjmp	.+672    	; 0x888 <buzz_play+0x392>
     5e8:	6e cf       	rjmp	.-292    	; 0x4c6 <buzz_MUTE>
     5ea:	08 95       	ret
     5ec:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5f0:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5f4:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5f8:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5fc:	88 3c       	cpi	r24, 0xC8	; 200
     5fe:	91 05       	cpc	r25, r1
     600:	a1 05       	cpc	r26, r1
     602:	b1 05       	cpc	r27, r1
     604:	20 f4       	brcc	.+8      	; 0x60e <buzz_play+0x118>
     606:	8b e9       	ldi	r24, 0x9B	; 155
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	65 cf       	rjmp	.-310    	; 0x4d6 <setSoundNote>
     60c:	08 95       	ret
     60e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     612:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     616:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     61a:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     61e:	82 3d       	cpi	r24, 0xD2	; 210
     620:	91 05       	cpc	r25, r1
     622:	a1 05       	cpc	r26, r1
     624:	b1 05       	cpc	r27, r1
     626:	21 f4       	brne	.+8      	; 0x630 <buzz_play+0x13a>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	54 cf       	rjmp	.-344    	; 0x4d6 <setSoundNote>
     62e:	08 95       	ret
     630:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     634:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     638:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     63c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     640:	8c 3d       	cpi	r24, 0xDC	; 220
     642:	91 05       	cpc	r25, r1
     644:	a1 05       	cpc	r26, r1
     646:	b1 05       	cpc	r27, r1
     648:	21 f4       	brne	.+8      	; 0x652 <buzz_play+0x15c>
     64a:	87 ee       	ldi	r24, 0xE7	; 231
     64c:	95 e0       	ldi	r25, 0x05	; 5
     64e:	43 cf       	rjmp	.-378    	; 0x4d6 <setSoundNote>
     650:	08 95       	ret
     652:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     656:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     65a:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     65e:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     662:	80 39       	cpi	r24, 0x90	; 144
     664:	91 40       	sbci	r25, 0x01	; 1
     666:	a1 05       	cpc	r26, r1
     668:	b1 05       	cpc	r27, r1
     66a:	21 f4       	brne	.+8      	; 0x674 <buzz_play+0x17e>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	32 cf       	rjmp	.-412    	; 0x4d6 <setSoundNote>
     672:	08 95       	ret
     674:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     678:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     67c:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     680:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     684:	8e 3a       	cpi	r24, 0xAE	; 174
     686:	91 40       	sbci	r25, 0x01	; 1
     688:	a1 05       	cpc	r26, r1
     68a:	b1 05       	cpc	r27, r1
     68c:	21 f4       	brne	.+8      	; 0x696 <buzz_play+0x1a0>
     68e:	85 e6       	ldi	r24, 0x65	; 101
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	21 cf       	rjmp	.-446    	; 0x4d6 <setSoundNote>
     694:	08 95       	ret
     696:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     69a:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     69e:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6a2:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6a6:	88 35       	cpi	r24, 0x58	; 88
     6a8:	92 40       	sbci	r25, 0x02	; 2
     6aa:	a1 05       	cpc	r26, r1
     6ac:	b1 05       	cpc	r27, r1
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <buzz_play+0x1bc>
     6b0:	eb c0       	rjmp	.+470    	; 0x888 <buzz_play+0x392>
     6b2:	09 cf       	rjmp	.-494    	; 0x4c6 <buzz_MUTE>
     6b4:	08 95       	ret
     6b6:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6ba:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     6be:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6c2:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6c6:	8b 34       	cpi	r24, 0x4B	; 75
     6c8:	91 05       	cpc	r25, r1
     6ca:	a1 05       	cpc	r26, r1
     6cc:	b1 05       	cpc	r27, r1
     6ce:	20 f4       	brcc	.+8      	; 0x6d8 <buzz_play+0x1e2>
     6d0:	82 e1       	ldi	r24, 0x12	; 18
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	00 cf       	rjmp	.-512    	; 0x4d6 <setSoundNote>
     6d6:	08 95       	ret
     6d8:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6dc:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     6e0:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6e4:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6e8:	86 39       	cpi	r24, 0x96	; 150
     6ea:	91 05       	cpc	r25, r1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	20 f4       	brcc	.+8      	; 0x6fa <buzz_play+0x204>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ef ce       	rjmp	.-546    	; 0x4d6 <setSoundNote>
     6f8:	08 95       	ret
     6fa:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6fe:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     702:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     706:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     70a:	81 3e       	cpi	r24, 0xE1	; 225
     70c:	91 05       	cpc	r25, r1
     70e:	a1 05       	cpc	r26, r1
     710:	b1 05       	cpc	r27, r1
     712:	20 f4       	brcc	.+8      	; 0x71c <buzz_play+0x226>
     714:	82 e1       	ldi	r24, 0x12	; 18
     716:	94 e0       	ldi	r25, 0x04	; 4
     718:	de ce       	rjmp	.-580    	; 0x4d6 <setSoundNote>
     71a:	08 95       	ret
     71c:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     720:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     724:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     728:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     72c:	8c 32       	cpi	r24, 0x2C	; 44
     72e:	91 40       	sbci	r25, 0x01	; 1
     730:	a1 05       	cpc	r26, r1
     732:	b1 05       	cpc	r27, r1
     734:	20 f4       	brcc	.+8      	; 0x73e <buzz_play+0x248>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	cd ce       	rjmp	.-614    	; 0x4d6 <setSoundNote>
     73c:	08 95       	ret
     73e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     742:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     746:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     74a:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     74e:	87 37       	cpi	r24, 0x77	; 119
     750:	91 40       	sbci	r25, 0x01	; 1
     752:	a1 05       	cpc	r26, r1
     754:	b1 05       	cpc	r27, r1
     756:	20 f4       	brcc	.+8      	; 0x760 <buzz_play+0x26a>
     758:	82 e1       	ldi	r24, 0x12	; 18
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	bc ce       	rjmp	.-648    	; 0x4d6 <setSoundNote>
     75e:	08 95       	ret
     760:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     764:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     768:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     76c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     770:	82 3c       	cpi	r24, 0xC2	; 194
     772:	91 40       	sbci	r25, 0x01	; 1
     774:	a1 05       	cpc	r26, r1
     776:	b1 05       	cpc	r27, r1
     778:	09 f0       	breq	.+2      	; 0x77c <buzz_play+0x286>
     77a:	86 c0       	rjmp	.+268    	; 0x888 <buzz_play+0x392>
     77c:	a4 ce       	rjmp	.-696    	; 0x4c6 <buzz_MUTE>
     77e:	08 95       	ret
     780:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     784:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     788:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     78c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     790:	84 36       	cpi	r24, 0x64	; 100
     792:	91 05       	cpc	r25, r1
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	20 f4       	brcc	.+8      	; 0x7a2 <buzz_play+0x2ac>
     79a:	82 e1       	ldi	r24, 0x12	; 18
     79c:	94 e0       	ldi	r25, 0x04	; 4
     79e:	9b ce       	rjmp	.-714    	; 0x4d6 <setSoundNote>
     7a0:	08 95       	ret
     7a2:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7a6:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7aa:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7ae:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7b2:	88 3c       	cpi	r24, 0xC8	; 200
     7b4:	91 05       	cpc	r25, r1
     7b6:	a1 05       	cpc	r26, r1
     7b8:	b1 05       	cpc	r27, r1
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <buzz_play+0x2ce>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	8a ce       	rjmp	.-748    	; 0x4d6 <setSoundNote>
     7c2:	08 95       	ret
     7c4:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7c8:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7cc:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7d0:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7d4:	8c 32       	cpi	r24, 0x2C	; 44
     7d6:	91 40       	sbci	r25, 0x01	; 1
     7d8:	a1 05       	cpc	r26, r1
     7da:	b1 05       	cpc	r27, r1
     7dc:	20 f4       	brcc	.+8      	; 0x7e6 <buzz_play+0x2f0>
     7de:	82 e1       	ldi	r24, 0x12	; 18
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	79 ce       	rjmp	.-782    	; 0x4d6 <setSoundNote>
     7e4:	08 95       	ret
     7e6:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7ea:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7ee:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7f2:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7f6:	82 3c       	cpi	r24, 0xC2	; 194
     7f8:	91 40       	sbci	r25, 0x01	; 1
     7fa:	a1 05       	cpc	r26, r1
     7fc:	b1 05       	cpc	r27, r1
     7fe:	09 f0       	breq	.+2      	; 0x802 <buzz_play+0x30c>
     800:	43 c0       	rjmp	.+134    	; 0x888 <buzz_play+0x392>
     802:	61 ce       	rjmp	.-830    	; 0x4c6 <buzz_MUTE>
     804:	08 95       	ret
     806:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     80a:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     80e:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     812:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     816:	84 36       	cpi	r24, 0x64	; 100
     818:	91 05       	cpc	r25, r1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	20 f4       	brcc	.+8      	; 0x828 <buzz_play+0x332>
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e1       	ldi	r25, 0x10	; 16
     824:	58 ce       	rjmp	.-848    	; 0x4d6 <setSoundNote>
     826:	08 95       	ret
     828:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     82c:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     830:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     834:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     838:	88 3c       	cpi	r24, 0xC8	; 200
     83a:	91 05       	cpc	r25, r1
     83c:	a1 05       	cpc	r26, r1
     83e:	b1 05       	cpc	r27, r1
     840:	20 f4       	brcc	.+8      	; 0x84a <buzz_play+0x354>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	47 ce       	rjmp	.-882    	; 0x4d6 <setSoundNote>
     848:	08 95       	ret
     84a:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     84e:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     852:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     856:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     85a:	8c 32       	cpi	r24, 0x2C	; 44
     85c:	91 40       	sbci	r25, 0x01	; 1
     85e:	a1 05       	cpc	r26, r1
     860:	b1 05       	cpc	r27, r1
     862:	20 f4       	brcc	.+8      	; 0x86c <buzz_play+0x376>
     864:	84 e2       	ldi	r24, 0x24	; 36
     866:	98 e0       	ldi	r25, 0x08	; 8
     868:	36 ce       	rjmp	.-916    	; 0x4d6 <setSoundNote>
     86a:	08 95       	ret
     86c:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     870:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     874:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     878:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     87c:	82 3c       	cpi	r24, 0xC2	; 194
     87e:	91 40       	sbci	r25, 0x01	; 1
     880:	a1 05       	cpc	r26, r1
     882:	b1 05       	cpc	r27, r1
     884:	09 f4       	brne	.+2      	; 0x888 <buzz_play+0x392>
     886:	1f ce       	rjmp	.-962    	; 0x4c6 <buzz_MUTE>
     888:	08 95       	ret

0000088a <start_timeout_count>:
     88a:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <TICK+0x10>
     88e:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <TICK+0x11>
     892:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <TICK+0x12>
     896:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <TICK+0x13>
     89a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <start_timeout_count_flag+0x1>
     89e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <start_timeout_count_flag>
     8a2:	08 95       	ret

000008a4 <request_reset_to_admin>:
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	65 97       	sbiw	r28, 0x15	; 21
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	bc 01       	movw	r22, r24
     8ba:	9a e0       	ldi	r25, 0x0A	; 10
     8bc:	ea e0       	ldi	r30, 0x0A	; 10
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	de 01       	movw	r26, r28
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	9a 95       	dec	r25
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <request_reset_to_admin+0x20>
     8cc:	fe 01       	movw	r30, r28
     8ce:	3b 96       	adiw	r30, 0x0b	; 11
     8d0:	8b e0       	ldi	r24, 0x0B	; 11
     8d2:	df 01       	movw	r26, r30
     8d4:	1d 92       	st	X+, r1
     8d6:	8a 95       	dec	r24
     8d8:	e9 f7       	brne	.-6      	; 0x8d4 <request_reset_to_admin+0x30>
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	0e 94 1c 10 	call	0x2038	; 0x2038 <strcat>
     8e2:	a2 d6       	rcall	.+3396   	; 0x1628 <i2c_lcd_clear>
     8e4:	46 e7       	ldi	r20, 0x76	; 118
     8e6:	51 e0       	ldi	r21, 0x01	; 1
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	8e d6       	rcall	.+3356   	; 0x160a <i2c_lcd_string>
     8ee:	43 e8       	ldi	r20, 0x83	; 131
     8f0:	51 e0       	ldi	r21, 0x01	; 1
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	89 d6       	rcall	.+3346   	; 0x160a <i2c_lcd_string>
     8f8:	ae 01       	movw	r20, r28
     8fa:	4f 5f       	subi	r20, 0xFF	; 255
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	83 d6       	rcall	.+3334   	; 0x160a <i2c_lcd_string>
     904:	65 96       	adiw	r28, 0x15	; 21
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <timeout_check>:
     916:	40 91 e1 06 	lds	r20, 0x06E1	; 0x8006e1 <TICK+0x10>
     91a:	50 91 e2 06 	lds	r21, 0x06E2	; 0x8006e2 <TICK+0x11>
     91e:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <TICK+0x12>
     922:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <TICK+0x13>
     926:	41 31       	cpi	r20, 0x11	; 17
     928:	57 42       	sbci	r21, 0x27	; 39
     92a:	61 05       	cpc	r22, r1
     92c:	71 05       	cpc	r23, r1
     92e:	38 f0       	brcs	.+14     	; 0x93e <timeout_check+0x28>
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <start_timeout_count_flag+0x1>
     938:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <start_timeout_count_flag>
     93c:	b3 df       	rcall	.-154    	; 0x8a4 <request_reset_to_admin>
     93e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <start_timeout_count_flag>
     942:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <start_timeout_count_flag+0x1>
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	f1 f7       	brne	.-4      	; 0x946 <timeout_check+0x30>
     94a:	08 95       	ret

0000094c <esp8266_init>:
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	7c 01       	movw	r14, r24
     95e:	6b 01       	movw	r12, r22
     960:	ea 01       	movw	r28, r20
     962:	89 01       	movw	r16, r18
     964:	92 df       	rcall	.-220    	; 0x88a <start_timeout_count>
     966:	86 e9       	ldi	r24, 0x96	; 150
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     96e:	2f ef       	ldi	r18, 0xFF	; 255
     970:	81 e1       	ldi	r24, 0x11	; 17
     972:	9a e7       	ldi	r25, 0x7A	; 122
     974:	21 50       	subi	r18, 0x01	; 1
     976:	80 40       	sbci	r24, 0x00	; 0
     978:	90 40       	sbci	r25, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <esp8266_init+0x28>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <esp8266_init+0x32>
     97e:	00 00       	nop
     980:	8f e9       	ldi	r24, 0x9F	; 159
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	c8 df       	rcall	.-112    	; 0x916 <timeout_check>
     986:	46 ea       	ldi	r20, 0xA6	; 166
     988:	51 e0       	ldi	r21, 0x01	; 1
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	3d d6       	rcall	.+3194   	; 0x160a <i2c_lcd_string>
     990:	7c df       	rcall	.-264    	; 0x88a <start_timeout_count>
     992:	8b eb       	ldi	r24, 0xBB	; 187
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     99a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     99e:	81 11       	cpse	r24, r1
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <esp8266_init+0x64>
     9a2:	84 ec       	ldi	r24, 0xC4	; 196
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	b7 df       	rcall	.-146    	; 0x916 <timeout_check>
     9a8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     9ac:	88 23       	and	r24, r24
     9ae:	c9 f3       	breq	.-14     	; 0x9a2 <esp8266_init+0x56>
     9b0:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     9b4:	6a df       	rcall	.-300    	; 0x88a <start_timeout_count>
     9b6:	8b ec       	ldi	r24, 0xCB	; 203
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	87 ea       	ldi	r24, 0xA7	; 167
     9c2:	91 e6       	ldi	r25, 0x61	; 97
     9c4:	21 50       	subi	r18, 0x01	; 1
     9c6:	80 40       	sbci	r24, 0x00	; 0
     9c8:	90 40       	sbci	r25, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <esp8266_init+0x78>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <esp8266_init+0x82>
     9ce:	00 00       	nop
     9d0:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     9d4:	89 ed       	ldi	r24, 0xD9	; 217
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9e df       	rcall	.-196    	; 0x916 <timeout_check>
     9da:	43 ee       	ldi	r20, 0xE3	; 227
     9dc:	51 e0       	ldi	r21, 0x01	; 1
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	13 d6       	rcall	.+3110   	; 0x160a <i2c_lcd_string>
     9e4:	52 df       	rcall	.-348    	; 0x88a <start_timeout_count>
     9e6:	88 ef       	ldi	r24, 0xF8	; 248
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     9ee:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     9f2:	81 11       	cpse	r24, r1
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <esp8266_init+0xb8>
     9f6:	85 e0       	ldi	r24, 0x05	; 5
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	8d df       	rcall	.-230    	; 0x916 <timeout_check>
     9fc:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a00:	88 23       	and	r24, r24
     a02:	c9 f3       	breq	.-14     	; 0x9f6 <esp8266_init+0xaa>
     a04:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a08:	40 df       	rcall	.-384    	; 0x88a <start_timeout_count>
     a0a:	80 e1       	ldi	r24, 0x10	; 16
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     a12:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a16:	81 11       	cpse	r24, r1
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <esp8266_init+0xdc>
     a1a:	8b e1       	ldi	r24, 0x1B	; 27
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	7b df       	rcall	.-266    	; 0x916 <timeout_check>
     a20:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a24:	88 23       	and	r24, r24
     a26:	c9 f3       	breq	.-14     	; 0xa1a <esp8266_init+0xce>
     a28:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a2c:	44 e2       	ldi	r20, 0x24	; 36
     a2e:	52 e0       	ldi	r21, 0x02	; 2
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	ea d5       	rcall	.+3028   	; 0x160a <i2c_lcd_string>
     a36:	29 df       	rcall	.-430    	; 0x88a <start_timeout_count>
     a38:	a6 01       	movw	r20, r12
     a3a:	b7 01       	movw	r22, r14
     a3c:	89 e3       	ldi	r24, 0x39	; 57
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <connect_to_AP>
     a44:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     a48:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a4c:	81 11       	cpse	r24, r1
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <esp8266_init+0x112>
     a50:	84 e4       	ldi	r24, 0x44	; 68
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	60 df       	rcall	.-320    	; 0x916 <timeout_check>
     a56:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a5a:	88 23       	and	r24, r24
     a5c:	c9 f3       	breq	.-14     	; 0xa50 <esp8266_init+0x104>
     a5e:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a62:	4d e4       	ldi	r20, 0x4D	; 77
     a64:	52 e0       	ldi	r21, 0x02	; 2
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	cf d5       	rcall	.+2974   	; 0x160a <i2c_lcd_string>
     a6c:	0e df       	rcall	.-484    	; 0x88a <start_timeout_count>
     a6e:	82 e6       	ldi	r24, 0x62	; 98
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     a76:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a7a:	81 11       	cpse	r24, r1
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <esp8266_init+0x140>
     a7e:	8d e6       	ldi	r24, 0x6D	; 109
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	49 df       	rcall	.-366    	; 0x916 <timeout_check>
     a84:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a88:	88 23       	and	r24, r24
     a8a:	c9 f3       	breq	.-14     	; 0xa7e <esp8266_init+0x132>
     a8c:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a90:	46 e7       	ldi	r20, 0x76	; 118
     a92:	52 e0       	ldi	r21, 0x02	; 2
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	b8 d5       	rcall	.+2928   	; 0x160a <i2c_lcd_string>
     a9a:	f7 de       	rcall	.-530    	; 0x88a <start_timeout_count>
     a9c:	b8 01       	movw	r22, r16
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <TCP_connect>
     aa4:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <uart1_tx_string>
     aa8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     aac:	81 11       	cpse	r24, r1
     aae:	07 c0       	rjmp	.+14     	; 0xabe <esp8266_init+0x172>
     ab0:	8b e8       	ldi	r24, 0x8B	; 139
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	30 df       	rcall	.-416    	; 0x916 <timeout_check>
     ab6:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     aba:	88 23       	and	r24, r24
     abc:	c9 f3       	breq	.-14     	; 0xab0 <esp8266_init+0x164>
     abe:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     ac2:	47 e9       	ldi	r20, 0x97	; 151
     ac4:	52 e0       	ldi	r21, 0x02	; 2
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	9f d5       	rcall	.+2878   	; 0x160a <i2c_lcd_string>
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	81 ee       	ldi	r24, 0xE1	; 225
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	80 40       	sbci	r24, 0x00	; 0
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <esp8266_init+0x186>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <esp8266_init+0x190>
     adc:	00 00       	nop
     ade:	4c ea       	ldi	r20, 0xAC	; 172
     ae0:	52 e0       	ldi	r21, 0x02	; 2
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	91 d5       	rcall	.+2850   	; 0x160a <i2c_lcd_string>
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	08 95       	ret

00000afa <logojector_ON>:
     afa:	ac 9a       	sbi	0x15, 4	; 21
     afc:	08 95       	ret

00000afe <logojector_OFF>:
     afe:	ac 98       	cbi	0x15, 4	; 21
     b00:	08 95       	ret

00000b02 <systems_init>:
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	64 97       	sbiw	r28, 0x14	; 20
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	78 94       	sei
     b1c:	8f e0       	ldi	r24, 0x0F	; 15
     b1e:	8a bb       	out	0x1a, r24	; 26
     b20:	a4 9a       	sbi	0x14, 4	; 20
     b22:	f8 94       	cli
     b24:	0e 94 65 0e 	call	0x1cca	; 0x1cca <timer0_init>
     b28:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <timer3_init>
     b2c:	78 94       	sei
     b2e:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <TICK>
     b32:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <TICK+0x1>
     b36:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <TICK+0x2>
     b3a:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <TICK+0x3>
     b3e:	df df       	rcall	.-66     	; 0xafe <logojector_OFF>
     b40:	60 e8       	ldi	r22, 0x80	; 128
     b42:	75 e2       	ldi	r23, 0x25	; 37
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <uart_init>
     b4c:	60 e8       	ldi	r22, 0x80	; 128
     b4e:	75 e2       	ldi	r23, 0x25	; 37
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <uart_init>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	4a d7       	rcall	.+3732   	; 0x19f0 <mfrc522_init>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	48 d7       	rcall	.+3728   	; 0x19f0 <mfrc522_init>
     b60:	c9 d4       	rcall	.+2450   	; 0x14f4 <i2c_lcd_init>
     b62:	41 ec       	ldi	r20, 0xC1	; 193
     b64:	52 e0       	ldi	r21, 0x02	; 2
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	4f d5       	rcall	.+2718   	; 0x160a <i2c_lcd_string>
     b6c:	46 ed       	ldi	r20, 0xD6	; 214
     b6e:	52 e0       	ldi	r21, 0x02	; 2
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	4a d5       	rcall	.+2708   	; 0x160a <i2c_lcd_string>
     b76:	4a ee       	ldi	r20, 0xEA	; 234
     b78:	52 e0       	ldi	r21, 0x02	; 2
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	82 e0       	ldi	r24, 0x02	; 2
     b7e:	45 d5       	rcall	.+2698   	; 0x160a <i2c_lcd_string>
     b80:	41 ec       	ldi	r20, 0xC1	; 193
     b82:	52 e0       	ldi	r21, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	40 d5       	rcall	.+2688   	; 0x160a <i2c_lcd_string>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	67 dc       	rcall	.-1842   	; 0x45c <setSoundClip>
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	81 e1       	ldi	r24, 0x11	; 17
     b92:	9a e7       	ldi	r25, 0x7A	; 122
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	80 40       	sbci	r24, 0x00	; 0
     b98:	90 40       	sbci	r25, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <systems_init+0x92>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <systems_init+0x9c>
     b9e:	00 00       	nop
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	6e d7       	rcall	.+3804   	; 0x1a80 <mfrc522_version_check>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	c2 d7       	rcall	.+3972   	; 0x1b2c <mfrc522_IRQ_enable>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	6a d7       	rcall	.+3796   	; 0x1a80 <mfrc522_version_check>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	be d7       	rcall	.+3964   	; 0x1b2c <mfrc522_IRQ_enable>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	32 e0       	ldi	r19, 0x02	; 2
     bb4:	42 e0       	ldi	r20, 0x02	; 2
     bb6:	53 e0       	ldi	r21, 0x03	; 3
     bb8:	6e e0       	ldi	r22, 0x0E	; 14
     bba:	73 e0       	ldi	r23, 0x03	; 3
     bbc:	8b e1       	ldi	r24, 0x1B	; 27
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	c5 de       	rcall	.-630    	; 0x94c <esp8266_init>
     bc2:	2c dc       	rcall	.-1960   	; 0x41c <rfid_user_uid_buffer_init>
     bc4:	8f e0       	ldi	r24, 0x0F	; 15
     bc6:	ef e1       	ldi	r30, 0x1F	; 31
     bc8:	f1 e0       	ldi	r31, 0x01	; 1
     bca:	8e 01       	movw	r16, r28
     bcc:	0f 5f       	subi	r16, 0xFF	; 255
     bce:	1f 4f       	sbci	r17, 0xFF	; 255
     bd0:	d8 01       	movw	r26, r16
     bd2:	01 90       	ld	r0, Z+
     bd4:	0d 92       	st	X+, r0
     bd6:	8a 95       	dec	r24
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <systems_init+0xd0>
     bda:	fe 01       	movw	r30, r28
     bdc:	70 96       	adiw	r30, 0x10	; 16
     bde:	85 e0       	ldi	r24, 0x05	; 5
     be0:	df 01       	movw	r26, r30
     be2:	1d 92       	st	X+, r1
     be4:	8a 95       	dec	r24
     be6:	e9 f7       	brne	.-6      	; 0xbe2 <systems_init+0xe0>
     be8:	d8 01       	movw	r26, r16
     bea:	0d 90       	ld	r0, X+
     bec:	00 20       	and	r0, r0
     bee:	e9 f7       	brne	.-6      	; 0xbea <systems_init+0xe8>
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	e2 e2       	ldi	r30, 0x22	; 34
     bf6:	f3 e0       	ldi	r31, 0x03	; 3
     bf8:	01 90       	ld	r0, Z+
     bfa:	0d 92       	st	X+, r0
     bfc:	8a 95       	dec	r24
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <systems_init+0xf6>
     c00:	41 ec       	ldi	r20, 0xC1	; 193
     c02:	52 e0       	ldi	r21, 0x02	; 2
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	00 d5       	rcall	.+2560   	; 0x160a <i2c_lcd_string>
     c0a:	48 e2       	ldi	r20, 0x28	; 40
     c0c:	53 e0       	ldi	r21, 0x03	; 3
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	fb d4       	rcall	.+2550   	; 0x160a <i2c_lcd_string>
     c14:	a8 01       	movw	r20, r16
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	f7 d4       	rcall	.+2542   	; 0x160a <i2c_lcd_string>
     c1c:	41 ec       	ldi	r20, 0xC1	; 193
     c1e:	52 e0       	ldi	r21, 0x02	; 2
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	f2 d4       	rcall	.+2532   	; 0x160a <i2c_lcd_string>
     c26:	85 e0       	ldi	r24, 0x05	; 5
     c28:	19 dc       	rcall	.-1998   	; 0x45c <setSoundClip>
     c2a:	bf ef       	ldi	r27, 0xFF	; 255
     c2c:	27 ea       	ldi	r18, 0xA7	; 167
     c2e:	81 e6       	ldi	r24, 0x61	; 97
     c30:	b1 50       	subi	r27, 0x01	; 1
     c32:	20 40       	sbci	r18, 0x00	; 0
     c34:	80 40       	sbci	r24, 0x00	; 0
     c36:	e1 f7       	brne	.-8      	; 0xc30 <systems_init+0x12e>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <systems_init+0x138>
     c3a:	00 00       	nop
     c3c:	f5 d4       	rcall	.+2538   	; 0x1628 <i2c_lcd_clear>
     c3e:	f5 d3       	rcall	.+2026   	; 0x142a <i2c_lcd_noBacklight>
     c40:	64 96       	adiw	r28, 0x14	; 20
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <flag_switch>:
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	31 f0       	breq	.+12     	; 0xc68 <flag_switch+0x12>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	91 05       	cpc	r25, r1
     c60:	69 f1       	breq	.+90     	; 0xcbc <flag_switch+0x66>
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	c9 f5       	brne	.+114    	; 0xcd8 <flag_switch+0x82>
     c66:	17 c0       	rjmp	.+46     	; 0xc96 <flag_switch+0x40>
     c68:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <start_after_exit_user_timer_flag+0x1>
     c6c:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <start_after_exit_user_timer_flag>
     c70:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <start_after_no_registered_timer_flag+0x1>
     c74:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <start_after_no_registered_timer_flag>
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <start_after_verified_timer_flag+0x1>
     c80:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <start_after_verified_timer_flag>
     c84:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <logojector_timer_flag+0x1>
     c88:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <logojector_timer_flag>
     c8c:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <lcd_timer_flag+0x1>
     c90:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <lcd_timer_flag>
     c94:	08 95       	ret
     c96:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <start_after_exit_user_timer_flag+0x1>
     c9a:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <start_after_exit_user_timer_flag>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <start_after_no_registered_timer_flag+0x1>
     ca6:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <start_after_no_registered_timer_flag>
     caa:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <start_after_verified_timer_flag+0x1>
     cae:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <start_after_verified_timer_flag>
     cb2:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <lcd_timer_flag+0x1>
     cb6:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <lcd_timer_flag>
     cba:	08 95       	ret
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <start_after_exit_user_timer_flag+0x1>
     cc4:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <start_after_exit_user_timer_flag>
     cc8:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <start_after_no_registered_timer_flag+0x1>
     ccc:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <start_after_no_registered_timer_flag>
     cd0:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <start_after_verified_timer_flag+0x1>
     cd4:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <start_after_verified_timer_flag>
     cd8:	08 95       	ret

00000cda <start_timer>:
     cda:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <TICK>
     cde:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <TICK+0x1>
     ce2:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <TICK+0x2>
     ce6:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <TICK+0x3>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	91 05       	cpc	r25, r1
     cee:	99 f0       	breq	.+38     	; 0xd16 <start_timer+0x3c>
     cf0:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <TICK+0xc>
     cf4:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <TICK+0xd>
     cf8:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <TICK+0xe>
     cfc:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <TICK+0xf>
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	91 05       	cpc	r25, r1
     d04:	41 f4       	brne	.+16     	; 0xd16 <start_timer+0x3c>
     d06:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <TICK+0x8>
     d0a:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <TICK+0x9>
     d0e:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <TICK+0xa>
     d12:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <TICK+0xb>
     d16:	9f cf       	rjmp	.-194    	; 0xc56 <flag_switch>
     d18:	08 95       	ret

00000d1a <set_step_rot>:
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	a1 f4       	brne	.+40     	; 0xd48 <set_step_rot+0x2e>
     d20:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <i.2611>
     d24:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <i.2611+0x1>
     d28:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <i.2611+0x2>
     d2c:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <i.2611+0x3>
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	a1 1d       	adc	r26, r1
     d34:	b1 1d       	adc	r27, r1
     d36:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <i.2611>
     d3a:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <i.2611+0x1>
     d3e:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <i.2611+0x2>
     d42:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <i.2611+0x3>
     d46:	1a c0       	rjmp	.+52     	; 0xd7c <set_step_rot+0x62>
     d48:	8f 3f       	cpi	r24, 0xFF	; 255
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
     d4c:	92 07       	cpc	r25, r18
     d4e:	a1 f4       	brne	.+40     	; 0xd78 <set_step_rot+0x5e>
     d50:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <i.2611>
     d54:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <i.2611+0x1>
     d58:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <i.2611+0x2>
     d5c:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <i.2611+0x3>
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	a1 09       	sbc	r26, r1
     d64:	b1 09       	sbc	r27, r1
     d66:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <i.2611>
     d6a:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <i.2611+0x1>
     d6e:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <i.2611+0x2>
     d72:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <i.2611+0x3>
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <set_step_rot+0x62>
     d78:	89 2b       	or	r24, r25
     d7a:	91 f0       	breq	.+36     	; 0xda0 <set_step_rot+0x86>
     d7c:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <i.2611>
     d80:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <i.2611+0x1>
     d84:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <i.2611+0x2>
     d88:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <i.2611+0x3>
     d8c:	83 70       	andi	r24, 0x03	; 3
     d8e:	99 27       	eor	r25, r25
     d90:	aa 27       	eor	r26, r26
     d92:	bb 27       	eor	r27, r27
     d94:	fc 01       	movw	r30, r24
     d96:	ed 5f       	subi	r30, 0xFD	; 253
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	80 81       	ld	r24, Z
     d9c:	8b bb       	out	0x1b, r24	; 27
     d9e:	08 95       	ret
     da0:	1b ba       	out	0x1b, r1	; 27
     da2:	08 95       	ret

00000da4 <motor_drive>:
     da4:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <set_motor_flag>
     da8:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <set_motor_flag+0x1>
     dac:	89 2b       	or	r24, r25
     dae:	09 f4       	brne	.+2      	; 0xdb2 <motor_drive+0xe>
     db0:	4f c0       	rjmp	.+158    	; 0xe50 <motor_drive+0xac>
     db2:	60 91 d1 06 	lds	r22, 0x06D1	; 0x8006d1 <TICK>
     db6:	70 91 d2 06 	lds	r23, 0x06D2	; 0x8006d2 <TICK+0x1>
     dba:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <TICK+0x2>
     dbe:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <TICK+0x3>
     dc2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dc6:	2b e0       	ldi	r18, 0x0B	; 11
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	24 1b       	sub	r18, r20
     dcc:	31 09       	sbc	r19, r1
     dce:	03 2e       	mov	r0, r19
     dd0:	00 0c       	add	r0, r0
     dd2:	44 0b       	sbc	r20, r20
     dd4:	55 0b       	sbc	r21, r21
     dd6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__udivmodsi4>
     dda:	67 2b       	or	r22, r23
     ddc:	68 2b       	or	r22, r24
     dde:	69 2b       	or	r22, r25
     de0:	b9 f5       	brne	.+110    	; 0xe50 <motor_drive+0xac>
     de2:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <steps>
     de6:	30 91 b0 04 	lds	r19, 0x04B0	; 0x8004b0 <steps+0x1>
     dea:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <set_step>
     dee:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <set_step+0x1>
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	0c f5       	brge	.+66     	; 0xe3a <motor_drive+0x96>
     df8:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <dir>
     dfc:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <dir+0x1>
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	21 f4       	brne	.+8      	; 0xe0c <motor_drive+0x68>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	88 df       	rcall	.-240    	; 0xd1a <set_step_rot>
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <motor_drive+0x82>
     e0c:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <dir>
     e10:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <dir+0x1>
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	21 f4       	brne	.+8      	; 0xe20 <motor_drive+0x7c>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9f ef       	ldi	r25, 0xFF	; 255
     e1c:	7e df       	rcall	.-260    	; 0xd1a <set_step_rot>
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <motor_drive+0x82>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	7a df       	rcall	.-268    	; 0xd1a <set_step_rot>
     e26:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <steps>
     e2a:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <steps+0x1>
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <steps+0x1>
     e34:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <steps>
     e38:	08 95       	ret
     e3a:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <set_motor_flag+0x1>
     e3e:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <set_motor_flag>
     e42:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <steps+0x1>
     e46:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <steps>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	65 cf       	rjmp	.-310    	; 0xd1a <set_step_rot>
     e50:	08 95       	ret

00000e52 <__vector_15>:
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	e1 ed       	ldi	r30, 0xD1	; 209
     e7a:	f6 e0       	ldi	r31, 0x06	; 6
     e7c:	84 81       	ldd	r24, Z+4	; 0x04
     e7e:	95 81       	ldd	r25, Z+5	; 0x05
     e80:	a6 81       	ldd	r26, Z+6	; 0x06
     e82:	b7 81       	ldd	r27, Z+7	; 0x07
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	a1 1d       	adc	r26, r1
     e88:	b1 1d       	adc	r27, r1
     e8a:	84 83       	std	Z+4, r24	; 0x04
     e8c:	95 83       	std	Z+5, r25	; 0x05
     e8e:	a6 83       	std	Z+6, r26	; 0x06
     e90:	b7 83       	std	Z+7, r27	; 0x07
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	a2 81       	ldd	r26, Z+2	; 0x02
     e98:	b3 81       	ldd	r27, Z+3	; 0x03
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	a1 1d       	adc	r26, r1
     e9e:	b1 1d       	adc	r27, r1
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
     ea8:	80 85       	ldd	r24, Z+8	; 0x08
     eaa:	91 85       	ldd	r25, Z+9	; 0x09
     eac:	a2 85       	ldd	r26, Z+10	; 0x0a
     eae:	b3 85       	ldd	r27, Z+11	; 0x0b
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	a1 1d       	adc	r26, r1
     eb4:	b1 1d       	adc	r27, r1
     eb6:	80 87       	std	Z+8, r24	; 0x08
     eb8:	91 87       	std	Z+9, r25	; 0x09
     eba:	a2 87       	std	Z+10, r26	; 0x0a
     ebc:	b3 87       	std	Z+11, r27	; 0x0b
     ebe:	84 85       	ldd	r24, Z+12	; 0x0c
     ec0:	95 85       	ldd	r25, Z+13	; 0x0d
     ec2:	a6 85       	ldd	r26, Z+14	; 0x0e
     ec4:	b7 85       	ldd	r27, Z+15	; 0x0f
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	a1 1d       	adc	r26, r1
     eca:	b1 1d       	adc	r27, r1
     ecc:	84 87       	std	Z+12, r24	; 0x0c
     ece:	95 87       	std	Z+13, r25	; 0x0d
     ed0:	a6 87       	std	Z+14, r26	; 0x0e
     ed2:	b7 87       	std	Z+15, r27	; 0x0f
     ed4:	80 89       	ldd	r24, Z+16	; 0x10
     ed6:	91 89       	ldd	r25, Z+17	; 0x11
     ed8:	a2 89       	ldd	r26, Z+18	; 0x12
     eda:	b3 89       	ldd	r27, Z+19	; 0x13
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	a1 1d       	adc	r26, r1
     ee0:	b1 1d       	adc	r27, r1
     ee2:	80 8b       	std	Z+16, r24	; 0x10
     ee4:	91 8b       	std	Z+17, r25	; 0x11
     ee6:	a2 8b       	std	Z+18, r26	; 0x12
     ee8:	b3 8b       	std	Z+19, r27	; 0x13
     eea:	05 db       	rcall	.-2550   	; 0x4f6 <buzz_play>
     eec:	5b df       	rcall	.-330    	; 0xda4 <motor_drive>
     eee:	ff 91       	pop	r31
     ef0:	ef 91       	pop	r30
     ef2:	bf 91       	pop	r27
     ef4:	af 91       	pop	r26
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	7f 91       	pop	r23
     efc:	6f 91       	pop	r22
     efe:	5f 91       	pop	r21
     f00:	4f 91       	pop	r20
     f02:	3f 91       	pop	r19
     f04:	2f 91       	pop	r18
     f06:	0f 90       	pop	r0
     f08:	0b be       	out	0x3b, r0	; 59
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <set_gate_motor_state>:
//  			return;
//  		}//그게 아니라면 첫 동작이므로 buff에 현재 상태를 저장하지 않는다.
// 		gate_busy_flag=1;
// 		
// 	}
	if(state==GATE_ENT_OPEN)
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	b1 f5       	brne	.+108    	; 0xf86 <set_gate_motor_state+0x72>
	{
		if(current_state_flag==GATE_ENT_OPEN) return; //중복으로 입력했다면 무시
     f1a:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
     f1e:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <set_gate_motor_state+0x16>
     f28:	9e c0       	rjmp	.+316    	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
		else//이전과 다른 명령이 들어왔다면
		{
			switch(current_state_flag){
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	92 07       	cpc	r25, r18
     f30:	99 f0       	breq	.+38     	; 0xf58 <set_gate_motor_state+0x44>
     f32:	89 2b       	or	r24, r25
     f34:	09 f5       	brne	.+66     	; 0xf78 <set_gate_motor_state+0x64>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
     f3e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
     f42:	28 ec       	ldi	r18, 0xC8	; 200
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <set_step+0x1>
     f4a:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <set_step>
	set_motor_flag=1;
     f4e:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
     f52:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
     f56:	10 c0       	rjmp	.+32     	; 0xf78 <set_gate_motor_state+0x64>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
     f60:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
     f64:	20 e9       	ldi	r18, 0x90	; 144
     f66:	31 e0       	ldi	r19, 0x01	; 1
     f68:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <set_step+0x1>
     f6c:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <set_step>
	set_motor_flag=1;
     f70:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
     f74:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
					set_step_dir_and_angle(STEP_MOTOR_CW,720);
				break;
			}	
		
		}
		current_state_flag=GATE_ENT_OPEN;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
     f80:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
     f84:	08 95       	ret
	}
	
	else if(state==GATE_CLOSE)
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	a9 f5       	brne	.+106    	; 0xff4 <set_gate_motor_state+0xe0>
	{
		if(current_state_flag==GATE_CLOSE) return;
     f8a:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
     f8e:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	09 f4       	brne	.+2      	; 0xf98 <set_gate_motor_state+0x84>
     f96:	67 c0       	rjmp	.+206    	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
		else
		{
			switch(current_state_flag){
     f98:	8f 3f       	cpi	r24, 0xFF	; 255
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	92 07       	cpc	r25, r18
     f9e:	a9 f0       	breq	.+42     	; 0xfca <set_gate_motor_state+0xb6>
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	19 f5       	brne	.+70     	; 0xfea <set_gate_motor_state+0xd6>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
     fac:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <set_step+0x1>
     fb8:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <set_step>
	set_motor_flag=1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
     fc4:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
     fc8:	10 c0       	rjmp	.+32     	; 0xfea <set_gate_motor_state+0xd6>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
     fd2:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
     fd6:	28 ec       	ldi	r18, 0xC8	; 200
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	30 93 ae 04 	sts	0x04AE, r19	; 0x8004ae <set_step+0x1>
     fde:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <set_step>
	set_motor_flag=1;
     fe2:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
     fe6:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
				case GATE_EXT_OPEN://출구오픈상태에서 닫힘명령
					set_step_dir_and_angle(STEP_MOTOR_CW,360);
				break;
			}
		}
		current_state_flag=GATE_CLOSE;
     fea:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <__data_end+0x1>
     fee:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <__data_end>
     ff2:	08 95       	ret
	}
	else if(state==GATE_EXT_OPEN)
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	b9 f5       	brne	.+110    	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
	{
		if(current_state_flag==GATE_EXT_OPEN) return;
     ff8:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
     ffc:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
    1000:	8f 3f       	cpi	r24, 0xFF	; 255
    1002:	2f ef       	ldi	r18, 0xFF	; 255
    1004:	92 07       	cpc	r25, r18
    1006:	79 f1       	breq	.+94     	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
		else
		{
			switch(current_state_flag){
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a9 f0       	breq	.+42     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	29 f5       	brne	.+74     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	9f ef       	ldi	r25, 0xFF	; 255
    1014:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
    1018:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    101c:	80 e9       	ldi	r24, 0x90	; 144
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <set_step+0x1>
    1024:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <set_step>
	set_motor_flag=1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
    1030:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
    1034:	12 c0       	rjmp	.+36     	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	9f ef       	ldi	r25, 0xFF	; 255
    103a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <dir+0x1>
    103e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    1042:	88 ec       	ldi	r24, 0xC8	; 200
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <set_step+0x1>
    104a:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <set_step>
	set_motor_flag=1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	90 93 be 04 	sts	0x04BE, r25	; 0x8004be <set_motor_flag+0x1>
    1056:	80 93 bd 04 	sts	0x04BD, r24	; 0x8004bd <set_motor_flag>
				case GATE_CLOSE: //닫힌 상태에서  출구오픈명령
				set_step_dir_and_angle(STEP_MOTOR_CCW,360);
				break;
			}
		}
		current_state_flag=GATE_EXT_OPEN;
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	9f ef       	ldi	r25, 0xFF	; 255
    105e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
    1062:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
    1066:	08 95       	ret

00001068 <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	6c 97       	sbiw	r28, 0x1c	; 28
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS)
    108a:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <received_state>
    108e:	91 30       	cpi	r25, 0x01	; 1
    1090:	09 f0       	breq	.+2      	; 0x1094 <RC522_data_state_check_and_actuate+0x2c>
    1092:	44 c1       	rjmp	.+648    	; 0x131c <__stack+0x21d>
    1094:	f9 01       	movw	r30, r18
	{//Received data service routine.
		//send to esp8266 and receive result data.
		
		static int user_count=0;//입구,출구 둘다 사용해야 하는 변수이므로 일단 여기다가 선언함.
		if((*tggl)==ENTRANCE_GATE){
    1096:	80 81       	ld	r24, Z
    1098:	81 11       	cpse	r24, r1
    109a:	12 c1       	rjmp	.+548    	; 0x12c0 <__stack+0x1c1>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
    109c:	8d e3       	ldi	r24, 0x3D	; 61
    109e:	93 e0       	ldi	r25, 0x03	; 3
    10a0:	79 d6       	rcall	.+3314   	; 0x1d94 <uart1_tx_string>
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
    10a2:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <esp8266_send_ready_flag>
    10a6:	88 23       	and	r24, r24
    10a8:	e1 f3       	breq	.-8      	; 0x10a2 <RC522_data_state_check_and_actuate+0x3a>
			esp8266_send_ready_flag=0;
    10aa:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
    10ae:	82 e3       	ldi	r24, 0x32	; 50
    10b0:	e3 e9       	ldi	r30, 0x93	; 147
    10b2:	f5 e0       	ldi	r31, 0x05	; 5
    10b4:	df 01       	movw	r26, r30
    10b6:	1d 92       	st	X+, r1
    10b8:	8a 95       	dec	r24
    10ba:	e9 f7       	brne	.-6      	; 0x10b6 <RC522_data_state_check_and_actuate+0x4e>
    10bc:	0d ea       	ldi	r16, 0xAD	; 173
    10be:	16 e0       	ldi	r17, 0x06	; 6
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f1 eb       	ldi	r31, 0xB1	; 177
    10c4:	ef 2e       	mov	r14, r31
    10c6:	f6 e0       	ldi	r31, 0x06	; 6
    10c8:	ff 2e       	mov	r15, r31
    10ca:	f0 2d       	mov	r31, r0
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
    10cc:	f8 01       	movw	r30, r16
    10ce:	81 91       	ld	r24, Z+
    10d0:	8f 01       	movw	r16, r30
    10d2:	9d d6       	rcall	.+3386   	; 0x1e0e <HexToString>
    10d4:	5f d6       	rcall	.+3262   	; 0x1d94 <uart1_tx_string>
				uart1_tx_char(' ');
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	55 d6       	rcall	.+3242   	; 0x1d84 <uart1_tx_char>
    10da:	0e 15       	cp	r16, r14
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
    10dc:	1f 05       	cpc	r17, r15
    10de:	b1 f7       	brne	.-20     	; 0x10cc <RC522_data_state_check_and_actuate+0x64>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
    10e0:	8a ea       	ldi	r24, 0xAA	; 170
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	57 d6       	rcall	.+3246   	; 0x1d94 <uart1_tx_string>
    10e6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <esp8266_receiving_flag>

			/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
			//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
    10ea:	88 23       	and	r24, r24
    10ec:	e1 f3       	breq	.-8      	; 0x10e6 <RC522_data_state_check_and_actuate+0x7e>
    10ee:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
    10f2:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <esp8266_received_data>
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
    10f6:	8f 34       	cpi	r24, 0x4F	; 79
    10f8:	09 f0       	breq	.+2      	; 0x10fc <RC522_data_state_check_and_actuate+0x94>
    10fa:	cc c0       	rjmp	.+408    	; 0x1294 <__stack+0x195>
    10fc:	80 e2       	ldi	r24, 0x20	; 32
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 들어옴

				strncpy((char*)esp8266_received_data,"  ",2);
    10fe:	90 e2       	ldi	r25, 0x20	; 32
    1100:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <esp8266_received_data+0x1>
    1104:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <esp8266_received_data>
    1108:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <rfid_user_flag+0x1>
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
    110c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <rfid_user_flag>
    1110:	07 ec       	ldi	r16, 0xC7	; 199
    1112:	14 e0       	ldi	r17, 0x04	; 4
    1114:	e1 2c       	mov	r14, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
    1116:	f1 2c       	mov	r15, r1
    1118:	cc 24       	eor	r12, r12
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
    111a:	c3 94       	inc	r12
    111c:	d1 2c       	mov	r13, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
    111e:	66 e1       	ldi	r22, 0x16	; 22
    1120:	73 e0       	ldi	r23, 0x03	; 3
    1122:	c8 01       	movw	r24, r16
    1124:	94 d7       	rcall	.+3880   	; 0x204e <strcmp>
    1126:	89 2b       	or	r24, r25
    1128:	49 f4       	brne	.+18     	; 0x113c <__stack+0x3d>
    112a:	f0 92 c6 04 	sts	0x04C6, r15	; 0x8004c6 <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
    112e:	e0 92 c5 04 	sts	0x04C5, r14	; 0x8004c5 <rfid_user_count_pointer>
    1132:	d0 92 c4 04 	sts	0x04C4, r13	; 0x8004c4 <rfid_user_flag+0x1>
						rfid_user_flag=1;
    1136:	c0 92 c3 04 	sts	0x04C3, r12	; 0x8004c3 <rfid_user_flag>
    113a:	0b c0       	rjmp	.+22     	; 0x1152 <__stack+0x53>
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
    113c:	6d ea       	ldi	r22, 0xAD	; 173
    113e:	76 e0       	ldi	r23, 0x06	; 6
    1140:	c8 01       	movw	r24, r16
    1142:	85 d7       	rcall	.+3850   	; 0x204e <strcmp>
    1144:	89 2b       	or	r24, r25
    1146:	29 f4       	brne	.+10     	; 0x1152 <__stack+0x53>
    1148:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <rfid_user_flag+0x1>
					{
						//만일 버퍼 안에 기존 유저가 들어있는 것이 확인됐을 때 
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
    114c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <rfid_user_flag>
    1150:	87 c0       	rjmp	.+270    	; 0x1260 <__stack+0x161>
    1152:	ff ef       	ldi	r31, 0xFF	; 255

				strncpy((char*)esp8266_received_data,"  ",2);
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
    1154:	ef 1a       	sub	r14, r31
    1156:	ff 0a       	sbc	r15, r31
    1158:	0b 5f       	subi	r16, 0xFB	; 251
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	84 e1       	ldi	r24, 0x14	; 20
    115e:	e8 16       	cp	r14, r24
    1160:	f1 04       	cpc	r15, r1
    1162:	e9 f6       	brne	.-70     	; 0x111e <__stack+0x1f>
    1164:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <rfid_user_flag>
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				
				
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
    1168:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <rfid_user_flag+0x1>
    116c:	89 2b       	or	r24, r25
    116e:	09 f4       	brne	.+2      	; 0x1172 <__stack+0x73>
    1170:	77 c0       	rjmp	.+238    	; 0x1260 <__stack+0x161>
    1172:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
    1176:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <rfid_user_count_pointer+0x1>
    117a:	9c 01       	movw	r18, r24
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	22 0f       	add	r18, r18
    1182:	33 1f       	adc	r19, r19
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	6d ea       	ldi	r22, 0xAD	; 173
    118a:	76 e0       	ldi	r23, 0x06	; 6
    118c:	89 53       	subi	r24, 0x39	; 57
    118e:	9b 4f       	sbci	r25, 0xFB	; 251
    1190:	67 d7       	rcall	.+3790   	; 0x2060 <strcpy>
    1192:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <user_count.2481>
					
					//사용자 인식이 정상적으로 되면 1회에 한해서 증가시킴.
					if(user_count<MAX_USER_COUNT)user_count++; //단, 주차장 최대 수용 수 보다는 작아야 함.
    1196:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <user_count.2481+0x1>
    119a:	84 31       	cpi	r24, 0x14	; 20
    119c:	91 05       	cpc	r25, r1
    119e:	2c f4       	brge	.+10     	; 0x11aa <__stack+0xab>
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <user_count.2481+0x1>
    11a6:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <user_count.2481>
							
					char MAX_USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
    11aa:	84 e1       	ldi	r24, 0x14	; 20
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	00 d6       	rcall	.+3072   	; 0x1db0 <IntToString>
    11b0:	bc 01       	movw	r22, r24
    11b2:	ce 01       	movw	r24, r28
    11b4:	49 96       	adiw	r24, 0x19	; 25
    11b6:	54 d7       	rcall	.+3752   	; 0x2060 <strcpy>
    11b8:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <user_count.2481>
					
					char USER_COUNT_STR[4];
					//char dummy_value=1;
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-user_count));
    11bc:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <user_count.2481+0x1>
    11c0:	84 e1       	ldi	r24, 0x14	; 20
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
    11c8:	f3 d5       	rcall	.+3046   	; 0x1db0 <IntToString>
    11ca:	bc 01       	movw	r22, r24
    11cc:	ce 01       	movw	r24, r28
    11ce:	45 96       	adiw	r24, 0x15	; 21
    11d0:	47 d7       	rcall	.+3726   	; 0x2060 <strcpy>
    11d2:	8e e0       	ldi	r24, 0x0E	; 14
					
					char empty_space_str[20]="Empty Space=[";
    11d4:	e3 e3       	ldi	r30, 0x33	; 51
    11d6:	f1 e0       	ldi	r31, 0x01	; 1
    11d8:	8e 01       	movw	r16, r28
    11da:	0f 5f       	subi	r16, 0xFF	; 255
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	d8 01       	movw	r26, r16
    11e0:	01 90       	ld	r0, Z+
    11e2:	0d 92       	st	X+, r0
    11e4:	8a 95       	dec	r24
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <__stack+0xe1>
    11e8:	fe 01       	movw	r30, r28
    11ea:	3f 96       	adiw	r30, 0x0f	; 15
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	df 01       	movw	r26, r30
    11f0:	1d 92       	st	X+, r1
    11f2:	8a 95       	dec	r24
    11f4:	e9 f7       	brne	.-6      	; 0x11f0 <__stack+0xf1>
					strcat((char*)empty_space_str,USER_COUNT_STR);
    11f6:	be 01       	movw	r22, r28
    11f8:	6b 5e       	subi	r22, 0xEB	; 235
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	c8 01       	movw	r24, r16
    11fe:	1c d7       	rcall	.+3640   	; 0x2038 <strcat>
    1200:	f8 01       	movw	r30, r16
					strcat((char*)empty_space_str,"/");
    1202:	01 90       	ld	r0, Z+
    1204:	00 20       	and	r0, r0
    1206:	e9 f7       	brne	.-6      	; 0x1202 <__stack+0x103>
    1208:	31 97       	sbiw	r30, 0x01	; 1
    120a:	8f e2       	ldi	r24, 0x2F	; 47
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
					strcat((char*)empty_space_str,MAX_USER_COUNT_STR);
    1212:	be 01       	movw	r22, r28
    1214:	67 5e       	subi	r22, 0xE7	; 231
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	c8 01       	movw	r24, r16
    121a:	0e d7       	rcall	.+3612   	; 0x2038 <strcat>
					strcat((char*)empty_space_str,"]");
    121c:	f8 01       	movw	r30, r16
    121e:	01 90       	ld	r0, Z+
    1220:	00 20       	and	r0, r0
    1222:	e9 f7       	brne	.-6      	; 0x121e <__stack+0x11f>
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	8d e5       	ldi	r24, 0x5D	; 93
    1228:	90 e0       	ldi	r25, 0x00	; 0
					//start_timer(); //ticktim을 0으로 클리어시킴.
					//LCD ON
					i2c_lcd_clear();
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
					i2c_lcd_string(0,0,"Welcome,");
    122e:	fc d1       	rcall	.+1016   	; 0x1628 <i2c_lcd_clear>
    1230:	4d e4       	ldi	r20, 0x4D	; 77
    1232:	53 e0       	ldi	r21, 0x03	; 3
    1234:	60 e0       	ldi	r22, 0x00	; 0
					i2c_lcd_string(1,0,(char*)esp8266_received_data);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	e8 d1       	rcall	.+976    	; 0x160a <i2c_lcd_string>
    123a:	43 e9       	ldi	r20, 0x93	; 147
    123c:	55 e0       	ldi	r21, 0x05	; 5
					i2c_lcd_string(2,0,(char*)empty_space_str);
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	e3 d1       	rcall	.+966    	; 0x160a <i2c_lcd_string>
    1244:	a8 01       	movw	r20, r16
					setSoundClip(BUZZ_SUCCESS);
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	df d1       	rcall	.+958    	; 0x160a <i2c_lcd_string>
					start_timer(AFTER_VERIFIED_EVENT); //ticktim을 0으로 클리어시킴.
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	06 d9       	rcall	.-3572   	; 0x45c <setSoundClip>
    1250:	81 e0       	ldi	r24, 0x01	; 1
					//set_step_dir_and_angle(STEP_MOTOR_CW,720);
					//gate_busy_flag=1;
					
					//if(gate_busy_flag==0)
					{
						set_gate_motor_state(GATE_ENT_OPEN); //한번 선언되면 gate_busy_flag가 활성화된다.
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	42 dd       	rcall	.-1404   	; 0xcda <start_timer>
    1256:	81 e0       	ldi	r24, 0x01	; 1
					//	gate_busy_flag=1;
					}
					//명령 동작 중에 선언되면 모터 동작하지 않고 busy buffer에 저장된다	
					//else gate_busy_buffer=GATE_ENT_OPEN;
					
					logojector_ON();
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	5c de       	rcall	.-840    	; 0xf14 <set_gate_motor_state>
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					i2c_lcd_clear();  
    125c:	4e dc       	rcall	.-1892   	; 0xafa <logojector_ON>
					i2c_lcd_string(0,0,"Welcome,");
    125e:	5e c0       	rjmp	.+188    	; 0x131c <__stack+0x21d>
    1260:	e3 d1       	rcall	.+966    	; 0x1628 <i2c_lcd_clear>
    1262:	4d e4       	ldi	r20, 0x4D	; 77
    1264:	53 e0       	ldi	r21, 0x03	; 3
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	cf d1       	rcall	.+926    	; 0x160a <i2c_lcd_string>
    126c:	43 e9       	ldi	r20, 0x93	; 147
    126e:	55 e0       	ldi	r21, 0x05	; 5
					i2c_lcd_string(2,0,"Already Recognized");
    1270:	62 e0       	ldi	r22, 0x02	; 2
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	ca d1       	rcall	.+916    	; 0x160a <i2c_lcd_string>
    1276:	46 e5       	ldi	r20, 0x56	; 86
    1278:	53 e0       	ldi	r21, 0x03	; 3
					setSoundClip(BUZZ_SUCCESS);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	82 e0       	ldi	r24, 0x02	; 2
					start_timer(AFTER_VERIFIED_EVENT); //ticktim을 0으로 클리어시킴.
    127e:	c5 d1       	rcall	.+906    	; 0x160a <i2c_lcd_string>
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	ec d8       	rcall	.-3624   	; 0x45c <setSoundClip>
					//set_step_dir_and_angle(STEP_MOTOR_CW,720);
					//gate_busy_flag=1;	
					//if(gate_busy_flag==0)
					{
						set_gate_motor_state(GATE_ENT_OPEN); //한번 선언되면 gate_busy_flag가 활성화된다.
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	28 dd       	rcall	.-1456   	; 0xcda <start_timer>
    128a:	81 e0       	ldi	r24, 0x01	; 1
					//	gate_busy_flag=1;
					}
					//타이머 동작 중에 들어오는 상황
					//else gate_busy_buffer=GATE_ENT_OPEN; //명령 동작 중에 선언되면 모터 동작하지 않고 busy buffer에 저장된다	
					
					logojector_ON();
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	42 de       	rcall	.-892    	; 0xf14 <set_gate_motor_state>
    1290:	34 dc       	rcall	.-1944   	; 0xafa <logojector_ON>
					
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				i2c_lcd_clear();
    1292:	44 c0       	rjmp	.+136    	; 0x131c <__stack+0x21d>
    1294:	c9 d1       	rcall	.+914    	; 0x1628 <i2c_lcd_clear>
				i2c_lcd_string(0,0,"Sorry,");
    1296:	49 e6       	ldi	r20, 0x69	; 105
    1298:	53 e0       	ldi	r21, 0x03	; 3
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	b5 d1       	rcall	.+874    	; 0x160a <i2c_lcd_string>
				i2c_lcd_string(1,2,"This card is");
    12a0:	40 e7       	ldi	r20, 0x70	; 112
    12a2:	53 e0       	ldi	r21, 0x03	; 3
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	b0 d1       	rcall	.+864    	; 0x160a <i2c_lcd_string>
    12aa:	4d e7       	ldi	r20, 0x7D	; 125
				i2c_lcd_string(2,2,"not registered.");
    12ac:	53 e0       	ldi	r21, 0x03	; 3
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	ab d1       	rcall	.+854    	; 0x160a <i2c_lcd_string>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
				start_timer(AFTER_NON_REGISTERED_EVENT);
    12b8:	10 dd       	rcall	.-1504   	; 0xcda <start_timer>
    12ba:	83 e0       	ldi	r24, 0x03	; 3
    12bc:	cf d8       	rcall	.-3682   	; 0x45c <setSoundClip>
    12be:	2e c0       	rjmp	.+92     	; 0x131c <__stack+0x21d>
				setSoundClip(BUZZ_NOT_REGISTERED);
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	61 f5       	brne	.+88     	; 0x131c <__stack+0x21d>
    12c4:	07 ec       	ldi	r16, 0xC7	; 199
    12c6:	14 e0       	ldi	r17, 0x04	; 4
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE)
    12c8:	0f 2e       	mov	r0, r31
    12ca:	fb e2       	ldi	r31, 0x2B	; 43
    12cc:	ef 2e       	mov	r14, r31
    12ce:	f5 e0       	ldi	r31, 0x05	; 5
    12d0:	ff 2e       	mov	r15, r31
    12d2:	f0 2d       	mov	r31, r0
    12d4:	6f eb       	ldi	r22, 0xBF	; 191
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
    12d6:	76 e0       	ldi	r23, 0x06	; 6
    12d8:	c8 01       	movw	r24, r16
    12da:	b9 d6       	rcall	.+3442   	; 0x204e <strcmp>
    12dc:	89 2b       	or	r24, r25
    12de:	c9 f4       	brne	.+50     	; 0x1312 <__stack+0x213>
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	e6 e1       	ldi	r30, 0x16	; 22
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    12e4:	f3 e0       	ldi	r31, 0x03	; 3
    12e6:	d8 01       	movw	r26, r16
    12e8:	01 90       	ld	r0, Z+
    12ea:	0d 92       	st	X+, r0
    12ec:	8a 95       	dec	r24
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <__stack+0x1e9>
    12f0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <user_count.2481>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
    12f4:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <user_count.2481+0x1>
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <user_count.2481+0x1>
    12fe:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <user_count.2481>
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	90 e0       	ldi	r25, 0x00	; 0
					start_timer(AFTER_EXIT_USER_EVENT); //ticktim을 0으로 클리어시킴.
    1306:	e9 dc       	rcall	.-1582   	; 0xcda <start_timer>
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	03 de       	rcall	.-1018   	; 0xf14 <set_gate_motor_state>
					//if(gate_busy_flag==0)
					{//한번 선언되면 gate_busy_flag가 활성화된다.
						set_gate_motor_state(GATE_EXT_OPEN);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	a5 d8       	rcall	.-3766   	; 0x45c <setSoundClip>
    1312:	0b 5f       	subi	r16, 0xFB	; 251
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
					//	gate_busy_flag=1;
					} 
					//else gate_busy_buffer = GATE_EXT_OPEN; //명령 동작 중에 선언되면 모터 동작하지 않고 busy buffer에 저장된다	
					
					//gate_busy_flag=1;
					setSoundClip(BUZZ_SUCCESS);
    1316:	e0 16       	cp	r14, r16
    1318:	f1 06       	cpc	r15, r17
    131a:	e1 f6       	brne	.-72     	; 0x12d4 <__stack+0x1d5>
    131c:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <received_state>
		{
			//esp8266에 uid와 출구게이트 정보 전송 함수
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
    1320:	6c 96       	adiw	r28, 0x1c	; 28
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
}
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <main>:
    133e:	e1 db       	rcall	.-2110   	; 0xb02 <systems_init>
    1340:	c1 ed       	ldi	r28, 0xD1	; 209
    1342:	d6 e0       	ldi	r29, 0x06	; 6
    1344:	88 ea       	ldi	r24, 0xA8	; 168
    1346:	94 e0       	ldi	r25, 0x04	; 4
		//setSoundClip(BUZZ_ON);
		
		//to use 2 RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    1348:	40 d8       	rcall	.-3968   	; 0x3ca <RC522_data_request_per_100ms>
		RC522_data_state_check_and_actuate(&toggle);
    134a:	88 ea       	ldi	r24, 0xA8	; 168
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	8c de       	rcall	.-744    	; 0x1068 <RC522_data_state_check_and_actuate>
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_timer_flag)
    1350:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <logojector_timer_flag>
    1354:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <logojector_timer_flag+0x1>
    1358:	89 2b       	or	r24, r25
    135a:	71 f0       	breq	.+28     	; 0x1378 <main+0x3a>
		{
				if(TICK.logojector_tick_1ms>30000)
    135c:	88 85       	ldd	r24, Y+8	; 0x08
    135e:	99 85       	ldd	r25, Y+9	; 0x09
    1360:	aa 85       	ldd	r26, Y+10	; 0x0a
    1362:	bb 85       	ldd	r27, Y+11	; 0x0b
    1364:	81 33       	cpi	r24, 0x31	; 49
    1366:	95 47       	sbci	r25, 0x75	; 117
    1368:	a1 05       	cpc	r26, r1
    136a:	b1 05       	cpc	r27, r1
				{
					//로고젝터 오프
					logojector_OFF();
    136c:	28 f0       	brcs	.+10     	; 0x1378 <main+0x3a>
    136e:	c7 db       	rcall	.-2162   	; 0xafe <logojector_OFF>
					logojector_timer_flag=STOP_TIMER;
    1370:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <logojector_timer_flag+0x1>
    1374:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <logojector_timer_flag>
				}
		}
		//명령이 동시에 발생할 때, 백라이트 끄는 함수가 호출되지 않는 상황이 생겼다. 이에 대한 처리코드
		//그냥 구문을 아예 따로 lcd관련해서 timer를 분리하였다.
		if(lcd_timer_flag)
    1378:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <lcd_timer_flag>
    137c:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <lcd_timer_flag+0x1>
    1380:	89 2b       	or	r24, r25
    1382:	71 f0       	breq	.+28     	; 0x13a0 <main+0x62>
		{
			if(TICK.lcd_tick_1ms==12000)
    1384:	8c 85       	ldd	r24, Y+12	; 0x0c
    1386:	9d 85       	ldd	r25, Y+13	; 0x0d
    1388:	ae 85       	ldd	r26, Y+14	; 0x0e
    138a:	bf 85       	ldd	r27, Y+15	; 0x0f
    138c:	80 3e       	cpi	r24, 0xE0	; 224
    138e:	9e 42       	sbci	r25, 0x2E	; 46
    1390:	a1 05       	cpc	r26, r1
    1392:	b1 05       	cpc	r27, r1
			{
				i2c_lcd_noBacklight();
    1394:	29 f4       	brne	.+10     	; 0x13a0 <main+0x62>
    1396:	49 d0       	rcall	.+146    	; 0x142a <i2c_lcd_noBacklight>
				lcd_timer_flag=STOP_TIMER;
    1398:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <lcd_timer_flag+0x1>
    139c:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <lcd_timer_flag>
			}
		}

		//입구에서 등록된 유저가 카드를 찍었을 때 해당 구문을 돈다.
		if(start_after_verified_timer_flag)
    13a0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <start_after_verified_timer_flag>
    13a4:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <start_after_verified_timer_flag+0x1>
    13a8:	89 2b       	or	r24, r25
    13aa:	e1 f0       	breq	.+56     	; 0x13e4 <main+0xa6>
		{//이미 인식되었던 사람들도 마찬가지 과정을 거침
			
			//가끔 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨. 
			if(TICK.tick_1ms==10000)//10초
    13ac:	88 81       	ld	r24, Y
    13ae:	99 81       	ldd	r25, Y+1	; 0x01
    13b0:	aa 81       	ldd	r26, Y+2	; 0x02
    13b2:	bb 81       	ldd	r27, Y+3	; 0x03
    13b4:	80 31       	cpi	r24, 0x10	; 16
    13b6:	97 42       	sbci	r25, 0x27	; 39
    13b8:	a1 05       	cpc	r26, r1
    13ba:	b1 05       	cpc	r27, r1
			{
				//setSoundClip(BUZZ_ON);
				//문을 닫아주는 방향으로 모터를 돌림
				set_gate_motor_state(GATE_CLOSE);
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <main+0x88>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a8 dd       	rcall	.-1200   	; 0xf14 <set_gate_motor_state>
    13c4:	bf cf       	rjmp	.-130    	; 0x1344 <main+0x6>
				//set_step_dir_and_angle(STEP_MOTOR_CCW,720);
			}
			else if(TICK.tick_1ms==12000){//12초
    13c6:	88 81       	ld	r24, Y
    13c8:	99 81       	ldd	r25, Y+1	; 0x01
    13ca:	aa 81       	ldd	r26, Y+2	; 0x02
    13cc:	bb 81       	ldd	r27, Y+3	; 0x03
    13ce:	80 3e       	cpi	r24, 0xE0	; 224
    13d0:	9e 42       	sbci	r25, 0x2E	; 46
    13d2:	a1 05       	cpc	r26, r1
    13d4:	b1 05       	cpc	r27, r1
    13d6:	09 f0       	breq	.+2      	; 0x13da <main+0x9c>
    13d8:	b5 cf       	rjmp	.-150    	; 0x1344 <main+0x6>
			
				start_after_verified_timer_flag=STOP_TIMER;
    13da:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <start_after_verified_timer_flag+0x1>
    13de:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <start_after_verified_timer_flag>
    13e2:	b0 cf       	rjmp	.-160    	; 0x1344 <main+0x6>
				//gate_busy_flag=0;
			}
			
		}
		
		else if (start_after_exit_user_timer_flag)
    13e4:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <start_after_exit_user_timer_flag>
    13e8:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <start_after_exit_user_timer_flag+0x1>
    13ec:	89 2b       	or	r24, r25
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <main+0xb4>
    13f0:	a9 cf       	rjmp	.-174    	; 0x1344 <main+0x6>
		{
			//add some codes
			//PORTF^=0x01;
			if(TICK.tick_1ms==10000)//5초
    13f2:	88 81       	ld	r24, Y
    13f4:	99 81       	ldd	r25, Y+1	; 0x01
    13f6:	aa 81       	ldd	r26, Y+2	; 0x02
    13f8:	bb 81       	ldd	r27, Y+3	; 0x03
    13fa:	80 31       	cpi	r24, 0x10	; 16
    13fc:	97 42       	sbci	r25, 0x27	; 39
    13fe:	a1 05       	cpc	r26, r1
    1400:	b1 05       	cpc	r27, r1
				//setSoundClip(BUZZ_ON); //전까진 소리 났음
				
				//테스트 라인임 없애도 됌 근데 정상적으로 동작하는지 확인하기 위함
				//set_step_dir_and_angle(STEP_MOTOR_CCW,720); //된다
				
				set_gate_motor_state(GATE_CLOSE);
    1402:	21 f4       	brne	.+8      	; 0x140c <main+0xce>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	85 dd       	rcall	.-1270   	; 0xf14 <set_gate_motor_state>
    140a:	9c cf       	rjmp	.-200    	; 0x1344 <main+0x6>
			}
			else if(TICK.tick_1ms==12000){//10초
    140c:	88 81       	ld	r24, Y
    140e:	99 81       	ldd	r25, Y+1	; 0x01
    1410:	aa 81       	ldd	r26, Y+2	; 0x02
    1412:	bb 81       	ldd	r27, Y+3	; 0x03
    1414:	80 3e       	cpi	r24, 0xE0	; 224
    1416:	9e 42       	sbci	r25, 0x2E	; 46
    1418:	a1 05       	cpc	r26, r1
    141a:	b1 05       	cpc	r27, r1
    141c:	09 f0       	breq	.+2      	; 0x1420 <main+0xe2>
    141e:	92 cf       	rjmp	.-220    	; 0x1344 <main+0x6>
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				//i2c_lcd_noBacklight();
				start_after_exit_user_timer_flag=STOP_TIMER;
    1420:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <start_after_exit_user_timer_flag+0x1>
    1424:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <start_after_exit_user_timer_flag>
    1428:	8d cf       	rjmp	.-230    	; 0x1344 <main+0x6>

0000142a <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	00 d0       	rcall	.+0      	; 0x1430 <i2c_lcd_noBacklight+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <i2c_lcd_noBacklight+0x8>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	1a 82       	std	Y+2, r1	; 0x02
    143c:	84 e1       	ldi	r24, 0x14	; 20
    143e:	8b 83       	std	Y+3, r24	; 0x03
    1440:	80 e1       	ldi	r24, 0x10	; 16
    1442:	8c 83       	std	Y+4, r24	; 0x04
    1444:	44 e0       	ldi	r20, 0x04	; 4
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	be 01       	movw	r22, r28
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1452:	4a d1       	rcall	.+660    	; 0x16e8 <i2c_transmit>
    1454:	81 11       	cpse	r24, r1
    1456:	f6 cf       	rjmp	.-20     	; 0x1444 <i2c_lcd_noBacklight+0x1a>
    1458:	8f e3       	ldi	r24, 0x3F	; 63
    145a:	9c e9       	ldi	r25, 0x9C	; 156
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <i2c_lcd_noBacklight+0x32>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <i2c_lcd_noBacklight+0x38>
    1462:	00 00       	nop
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <i2c_lcd_command_8+0x6>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    147c:	80 7f       	andi	r24, 0xF0	; 240
    147e:	98 2f       	mov	r25, r24
    1480:	9c 60       	ori	r25, 0x0C	; 12
    1482:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    1484:	88 60       	ori	r24, 0x08	; 8
    1486:	8a 83       	std	Y+2, r24	; 0x02
}

    1488:	42 e0       	ldi	r20, 0x02	; 2
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1496:	28 d1       	rcall	.+592    	; 0x16e8 <i2c_transmit>
    1498:	81 11       	cpse	r24, r1
    149a:	f6 cf       	rjmp	.-20     	; 0x1488 <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <i2c_lcd_command+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <i2c_lcd_command+0x8>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    14b2:	98 2f       	mov	r25, r24
    14b4:	90 7f       	andi	r25, 0xF0	; 240
    14b6:	29 2f       	mov	r18, r25
    14b8:	2c 60       	ori	r18, 0x0C	; 12
    14ba:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    14bc:	98 60       	ori	r25, 0x08	; 8
    14be:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    14c0:	20 e1       	ldi	r18, 0x10	; 16
    14c2:	82 9f       	mul	r24, r18
    14c4:	c0 01       	movw	r24, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	98 2f       	mov	r25, r24
    14ca:	9c 60       	ori	r25, 0x0C	; 12
    14cc:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	8c 83       	std	Y+4, r24	; 0x04
}

    14d2:	44 e0       	ldi	r20, 0x04	; 4
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	be 01       	movw	r22, r28
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    14e0:	03 d1       	rcall	.+518    	; 0x16e8 <i2c_transmit>
    14e2:	81 11       	cpse	r24, r1
    14e4:	f6 cf       	rjmp	.-20     	; 0x14d2 <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    14f4:	be d0       	rcall	.+380    	; 0x1672 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14f6:	2f ef       	ldi	r18, 0xFF	; 255
    14f8:	89 e6       	ldi	r24, 0x69	; 105
    14fa:	98 e1       	ldi	r25, 0x18	; 24
    14fc:	21 50       	subi	r18, 0x01	; 1
    14fe:	80 40       	sbci	r24, 0x00	; 0
    1500:	90 40       	sbci	r25, 0x00	; 0
    1502:	e1 f7       	brne	.-8      	; 0x14fc <i2c_lcd_init+0x8>
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <i2c_lcd_init+0x12>
    1506:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    1508:	8d e8       	ldi	r24, 0x8D	; 141
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	2d d4       	rcall	.+2138   	; 0x1d68 <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    150e:	80 e3       	ldi	r24, 0x30	; 48
    1510:	b0 df       	rcall	.-160    	; 0x1472 <i2c_lcd_command_8>
    1512:	8f e1       	ldi	r24, 0x1F	; 31
    1514:	9e e4       	ldi	r25, 0x4E	; 78
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <i2c_lcd_init+0x22>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <i2c_lcd_init+0x28>
    151c:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    151e:	80 e3       	ldi	r24, 0x30	; 48
    1520:	a8 df       	rcall	.-176    	; 0x1472 <i2c_lcd_command_8>
    1522:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <i2c_lcd_init+0x32>
    152a:	00 c0       	rjmp	.+0      	; 0x152c <i2c_lcd_init+0x38>
    152c:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    152e:	80 e3       	ldi	r24, 0x30	; 48
    1530:	a0 df       	rcall	.-192    	; 0x1472 <i2c_lcd_command_8>
    1532:	8f e8       	ldi	r24, 0x8F	; 143
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <i2c_lcd_init+0x42>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <i2c_lcd_init+0x48>
    153c:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	98 df       	rcall	.-208    	; 0x1472 <i2c_lcd_command_8>
    1542:	8f e8       	ldi	r24, 0x8F	; 143
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <i2c_lcd_init+0x52>
    154a:	00 c0       	rjmp	.+0      	; 0x154c <i2c_lcd_init+0x58>
    154c:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	aa df       	rcall	.-172    	; 0x14a6 <i2c_lcd_command>
    1552:	87 ec       	ldi	r24, 0xC7	; 199
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <i2c_lcd_init+0x62>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <i2c_lcd_init+0x68>
    155c:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	a2 df       	rcall	.-188    	; 0x14a6 <i2c_lcd_command>
    1562:	87 ec       	ldi	r24, 0xC7	; 199
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <i2c_lcd_init+0x72>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <i2c_lcd_init+0x78>
    156c:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	9a df       	rcall	.-204    	; 0x14a6 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1572:	8f ed       	ldi	r24, 0xDF	; 223
    1574:	9e e2       	ldi	r25, 0x2E	; 46
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <i2c_lcd_init+0x82>
    157a:	00 c0       	rjmp	.+0      	; 0x157c <i2c_lcd_init+0x88>
    157c:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    157e:	86 e0       	ldi	r24, 0x06	; 6
    1580:	92 df       	rcall	.-220    	; 0x14a6 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1582:	87 ec       	ldi	r24, 0xC7	; 199
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <i2c_lcd_init+0x92>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <i2c_lcd_init+0x98>
    158c:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	8a df       	rcall	.-236    	; 0x14a6 <i2c_lcd_command>
    1592:	87 ec       	ldi	r24, 0xC7	; 199
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <i2c_lcd_init+0xa2>
    159a:	00 c0       	rjmp	.+0      	; 0x159c <i2c_lcd_init+0xa8>
    159c:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    159e:	8d ea       	ldi	r24, 0xAD	; 173
    15a0:	93 e0       	ldi	r25, 0x03	; 3
    15a2:	e2 c3       	rjmp	.+1988   	; 0x1d68 <uart0_tx_string>
    15a4:	08 95       	ret

000015a6 <i2c_lcd_data>:
    15a6:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    15a8:	df 93       	push	r29
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <i2c_lcd_data+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <i2c_lcd_data+0x8>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    15b2:	98 2f       	mov	r25, r24
    15b4:	90 7f       	andi	r25, 0xF0	; 240
    15b6:	29 2f       	mov	r18, r25
    15b8:	2d 60       	ori	r18, 0x0D	; 13
    15ba:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    15bc:	99 60       	ori	r25, 0x09	; 9
    15be:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    15c0:	20 e1       	ldi	r18, 0x10	; 16
    15c2:	82 9f       	mul	r24, r18
    15c4:	c0 01       	movw	r24, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	98 2f       	mov	r25, r24
    15ca:	9d 60       	ori	r25, 0x0D	; 13
    15cc:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    15ce:	89 60       	ori	r24, 0x09	; 9
    15d0:	8c 83       	std	Y+4, r24	; 0x04
}

    15d2:	44 e0       	ldi	r20, 0x04	; 4
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	be 01       	movw	r22, r28
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    15e0:	83 d0       	rcall	.+262    	; 0x16e8 <i2c_transmit>
    15e2:	81 11       	cpse	r24, r1
    15e4:	f6 cf       	rjmp	.-20     	; 0x15d2 <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    15f4:	e8 2f       	mov	r30, r24
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	ed 53       	subi	r30, 0x3D	; 61
    15fe:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    1600:	80 81       	ld	r24, Z
    1602:	86 0f       	add	r24, r22
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	4f cf       	rjmp	.-354    	; 0x14a6 <i2c_lcd_command>
    1608:	08 95       	ret

0000160a <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    1610:	f1 df       	rcall	.-30     	; 0x15f4 <i2c_lcd_goto_XY>
	}
    1612:	88 81       	ld	r24, Y
    1614:	88 23       	and	r24, r24
    1616:	29 f0       	breq	.+10     	; 0x1622 <i2c_lcd_string+0x18>
}
    1618:	21 96       	adiw	r28, 0x01	; 1
    161a:	c5 df       	rcall	.-118    	; 0x15a6 <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    161c:	89 91       	ld	r24, Y+
    161e:	81 11       	cpse	r24, r1
    1620:	fc cf       	rjmp	.-8      	; 0x161a <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	00 d0       	rcall	.+0      	; 0x162e <i2c_lcd_clear+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <i2c_lcd_clear+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    1634:	8c e0       	ldi	r24, 0x0C	; 12
    1636:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1638:	88 e0       	ldi	r24, 0x08	; 8
    163a:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    163c:	8c e1       	ldi	r24, 0x1C	; 28
    163e:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    1640:	88 e1       	ldi	r24, 0x18	; 24
    1642:	8c 83       	std	Y+4, r24	; 0x04
    1644:	44 e0       	ldi	r20, 0x04	; 4
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	be 01       	movw	r22, r28
    164a:	6f 5f       	subi	r22, 0xFF	; 255
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1652:	4a d0       	rcall	.+148    	; 0x16e8 <i2c_transmit>
    1654:	81 11       	cpse	r24, r1
    1656:	f6 cf       	rjmp	.-20     	; 0x1644 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1658:	8f e3       	ldi	r24, 0x3F	; 63
    165a:	9c e9       	ldi	r25, 0x9C	; 156
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <i2c_lcd_clear+0x34>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <i2c_lcd_clear+0x3a>
    1662:	00 00       	nop
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    1672:	88 e4       	ldi	r24, 0x48	; 72
    1674:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1678:	08 95       	ret

0000167a <i2c_start>:
    167a:	e4 e7       	ldi	r30, 0x74	; 116
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	10 82       	st	Z, r1
    1680:	94 ea       	ldi	r25, 0xA4	; 164
    1682:	90 83       	st	Z, r25
    1684:	90 81       	ld	r25, Z
    1686:	99 23       	and	r25, r25
    1688:	ec f7       	brge	.-6      	; 0x1684 <i2c_start+0xa>
    168a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    168e:	98 7f       	andi	r25, 0xF8	; 248
    1690:	98 30       	cpi	r25, 0x08	; 8
    1692:	a1 f4       	brne	.+40     	; 0x16bc <i2c_start+0x42>
    1694:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1698:	84 e8       	ldi	r24, 0x84	; 132
    169a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    169e:	e4 e7       	ldi	r30, 0x74	; 116
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	88 23       	and	r24, r24
    16a6:	ec f7       	brge	.-6      	; 0x16a2 <i2c_start+0x28>
    16a8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    16ac:	98 7f       	andi	r25, 0xF8	; 248
    16ae:	98 31       	cpi	r25, 0x18	; 24
    16b0:	39 f0       	breq	.+14     	; 0x16c0 <i2c_start+0x46>
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 34       	cpi	r25, 0x40	; 64
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <i2c_start+0x48>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	08 95       	ret
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	08 95       	ret
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	08 95       	ret

000016c4 <i2c_write>:
    16c4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    16c8:	84 e8       	ldi	r24, 0x84	; 132
    16ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16ce:	e4 e7       	ldi	r30, 0x74	; 116
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	ec f7       	brge	.-6      	; 0x16d2 <i2c_write+0xe>
    16d8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    16dc:	98 7f       	andi	r25, 0xF8	; 248
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	98 32       	cpi	r25, 0x28	; 40
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <i2c_write+0x22>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	08 95       	ret

000016e8 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	6b 01       	movw	r12, r22
    16f8:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    16fa:	bf df       	rcall	.-130    	; 0x167a <i2c_start>
    16fc:	f8 2e       	mov	r15, r24
    16fe:	81 11       	cpse	r24, r1
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    1702:	01 15       	cp	r16, r1
    1704:	11 05       	cpc	r17, r1
    1706:	81 f0       	breq	.+32     	; 0x1728 <i2c_transmit+0x40>
    1708:	e6 01       	movw	r28, r12
    170a:	0c 0d       	add	r16, r12
    170c:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    170e:	89 91       	ld	r24, Y+
    1710:	d9 df       	rcall	.-78     	; 0x16c4 <i2c_write>
    1712:	81 11       	cpse	r24, r1
    1714:	10 c0       	rjmp	.+32     	; 0x1736 <i2c_transmit+0x4e>
    1716:	8f e9       	ldi	r24, 0x9F	; 159
    1718:	9f e0       	ldi	r25, 0x0F	; 15
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <i2c_transmit+0x32>
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <i2c_transmit+0x38>
    1720:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    1722:	0c 17       	cp	r16, r28
    1724:	1d 07       	cpc	r17, r29
    1726:	99 f7       	brne	.-26     	; 0x170e <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1728:	84 e9       	ldi	r24, 0x94	; 148
    172a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    172e:	05 c0       	rjmp	.+10     	; 0x173a <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    1730:	ff 24       	eor	r15, r15
    1732:	f3 94       	inc	r15
    1734:	02 c0       	rjmp	.+4      	; 0x173a <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1736:	ff 24       	eor	r15, r15
    1738:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    173a:	8f 2d       	mov	r24, r15
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	08 95       	ret

0000174c <mfrc522_write>:
void mfrc522_init(unsigned char ch)
{
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
	
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	16 2f       	mov	r17, r22
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
    1754:	95 b3       	in	r25, 0x15	; 21
    1756:	c1 e0       	ldi	r28, 0x01	; 1
    1758:	d0 e0       	ldi	r29, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <mfrc522_write+0x14>
    175c:	cc 0f       	add	r28, r28
    175e:	dd 1f       	adc	r29, r29
    1760:	4a 95       	dec	r20
    1762:	e2 f7       	brpl	.-8      	; 0x175c <mfrc522_write+0x10>
    1764:	2c 2f       	mov	r18, r28
    1766:	20 95       	com	r18
    1768:	92 23       	and	r25, r18
    176a:	95 bb       	out	0x15, r25	; 21
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    176c:	88 0f       	add	r24, r24
    176e:	8e 77       	andi	r24, 0x7E	; 126
    1770:	a3 d2       	rcall	.+1350   	; 0x1cb8 <spi_master_tx>
	mfrc522_reset(ch);
	
    1772:	81 2f       	mov	r24, r17
    1774:	a1 d2       	rcall	.+1346   	; 0x1cb8 <spi_master_tx>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
    1776:	85 b3       	in	r24, 0x15	; 21
    1778:	c8 2b       	or	r28, r24
    177a:	c5 bb       	out	0x15, r28	; 21
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	08 95       	ret

00001784 <mfrc522_read>:
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
	
	
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1788:	95 b3       	in	r25, 0x15	; 21
    178a:	c1 e0       	ldi	r28, 0x01	; 1
    178c:	d0 e0       	ldi	r29, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <mfrc522_read+0x10>
    1790:	cc 0f       	add	r28, r28
    1792:	dd 1f       	adc	r29, r29
    1794:	6a 95       	dec	r22
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <mfrc522_read+0xc>
    1798:	2c 2f       	mov	r18, r28
    179a:	20 95       	com	r18
    179c:	92 23       	and	r25, r18
    179e:	95 bb       	out	0x15, r25	; 21
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    17a0:	88 0f       	add	r24, r24
    17a2:	8e 77       	andi	r24, 0x7E	; 126
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	88 d2       	rcall	.+1296   	; 0x1cb8 <spi_master_tx>
	}
    17a8:	8b d2       	rcall	.+1302   	; 0x1cc0 <spi_master_rx>
    17aa:	95 b3       	in	r25, 0x15	; 21
}

    17ac:	c9 2b       	or	r28, r25
    17ae:	c5 bb       	out	0x15, r28	; 21
    17b0:	df 91       	pop	r29

void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <mfrc522_to_card>:
    17b6:	2f 92       	push	r2
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

    17b8:	3f 92       	push	r3
    17ba:	4f 92       	push	r4
    17bc:	5f 92       	push	r5
    17be:	6f 92       	push	r6
    17c0:	7f 92       	push	r7
    17c2:	8f 92       	push	r8
    17c4:	9f 92       	push	r9
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	f8 2e       	mov	r15, r24
    17dc:	a6 2e       	mov	r10, r22
    17de:	b7 2e       	mov	r11, r23
    17e0:	44 2e       	mov	r4, r20
    17e2:	22 2e       	mov	r2, r18
    17e4:	d3 2e       	mov	r13, r19
void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    17e6:	8c e0       	ldi	r24, 0x0C	; 12
    17e8:	f8 16       	cp	r15, r24
    17ea:	59 f0       	breq	.+22     	; 0x1802 <mfrc522_to_card+0x4c>
    17ec:	ee e0       	ldi	r30, 0x0E	; 14
    17ee:	fe 12       	cpse	r15, r30
    17f0:	11 c0       	rjmp	.+34     	; 0x1814 <mfrc522_to_card+0x5e>
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
	//RC522와 연결된 SS핀 HIGH출력
    17f2:	68 94       	set
    17f4:	cc 24       	eor	r12, r12
    17f6:	c4 f8       	bld	r12, 4
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    17f8:	0f 2e       	mov	r0, r31
    17fa:	f2 e1       	ldi	r31, 0x12	; 18
    17fc:	3f 2e       	mov	r3, r31
    17fe:	f0 2d       	mov	r31, r0
    1800:	0b c0       	rjmp	.+22     	; 0x1818 <mfrc522_to_card+0x62>
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}

    1802:	0f 2e       	mov	r0, r31
    1804:	f0 e3       	ldi	r31, 0x30	; 48
    1806:	cf 2e       	mov	r12, r31
    1808:	f0 2d       	mov	r31, r0
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    180a:	0f 2e       	mov	r0, r31
    180c:	f7 e7       	ldi	r31, 0x77	; 119
    180e:	3f 2e       	mov	r3, r31
    1810:	f0 2d       	mov	r31, r0


    1812:	02 c0       	rjmp	.+4      	; 0x1818 <mfrc522_to_card+0x62>
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}


    1814:	c1 2c       	mov	r12, r1
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}

    1816:	31 2c       	mov	r3, r1
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
	value = spi_master_rx(); //send dummy data and receive data.
    1818:	4e 2d       	mov	r20, r14
    181a:	63 2d       	mov	r22, r3
    181c:	60 68       	ori	r22, 0x80	; 128
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	95 df       	rcall	.-214    	; 0x174c <mfrc522_write>
	//RC522와 연결된 SS핀 HIGH출력
    1822:	6e 2d       	mov	r22, r14
    1824:	84 e0       	ldi	r24, 0x04	; 4
    1826:	ae df       	rcall	.-164    	; 0x1784 <mfrc522_read>
	SS_PORT |= (1<<channel);
    1828:	68 2f       	mov	r22, r24
    182a:	6f 77       	andi	r22, 0x7F	; 127
    182c:	4e 2d       	mov	r20, r14
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	8d df       	rcall	.-230    	; 0x174c <mfrc522_write>
	
    1832:	6e 2d       	mov	r22, r14
    1834:	8a e0       	ldi	r24, 0x0A	; 10
    1836:	a6 df       	rcall	.-180    	; 0x1784 <mfrc522_read>
    1838:	68 2f       	mov	r22, r24
	return value;
    183a:	60 68       	ori	r22, 0x80	; 128
    183c:	4e 2d       	mov	r20, r14
    183e:	8a e0       	ldi	r24, 0x0A	; 10
    1840:	85 df       	rcall	.-246    	; 0x174c <mfrc522_write>
}

    1842:	4e 2d       	mov	r20, r14
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	81 df       	rcall	.-254    	; 0x174c <mfrc522_write>
    184a:	51 2c       	mov	r5, r1
void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    184c:	61 2c       	mov	r6, r1
    184e:	71 2c       	mov	r7, r1
    1850:	41 14       	cp	r4, r1
    1852:	51 04       	cpc	r5, r1
    1854:	61 04       	cpc	r6, r1
    1856:	71 04       	cpc	r7, r1
    1858:	99 f0       	breq	.+38     	; 0x1880 <mfrc522_to_card+0xca>
    185a:	ca 2d       	mov	r28, r10
    185c:	db 2d       	mov	r29, r11
    185e:	81 2c       	mov	r8, r1
    1860:	91 2c       	mov	r9, r1
    1862:	54 01       	movw	r10, r8
	
	byte = mfrc522_read(VersionReg, ch);
    1864:	69 91       	ld	r22, Y+
    1866:	4e 2d       	mov	r20, r14
    1868:	89 e0       	ldi	r24, 0x09	; 9
    186a:	70 df       	rcall	.-288    	; 0x174c <mfrc522_write>
    186c:	ff ef       	ldi	r31, 0xFF	; 255
	return value;
}

void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    186e:	8f 1a       	sub	r8, r31
    1870:	9f 0a       	sbc	r9, r31
    1872:	af 0a       	sbc	r10, r31
    1874:	bf 0a       	sbc	r11, r31
    1876:	84 14       	cp	r8, r4
    1878:	95 04       	cpc	r9, r5
    187a:	a6 04       	cpc	r10, r6
    187c:	b7 04       	cpc	r11, r7
    187e:	90 f3       	brcs	.-28     	; 0x1864 <mfrc522_to_card+0xae>
	
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1880:	4e 2d       	mov	r20, r14
    1882:	6f 2d       	mov	r22, r15
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	62 df       	rcall	.-316    	; 0x174c <mfrc522_write>
	else uart0_tx_string("\n[channel 1");
    1888:	8c e0       	ldi	r24, 0x0C	; 12
    188a:	f8 12       	cpse	r15, r24
	
	if(byte == 0x92)
    188c:	08 c0       	rjmp	.+16     	; 0x189e <mfrc522_to_card+0xe8>
    188e:	6e 2d       	mov	r22, r14
    1890:	8d e0       	ldi	r24, 0x0D	; 13
	{
    1892:	78 df       	rcall	.-272    	; 0x1784 <mfrc522_read>
    1894:	68 2f       	mov	r22, r24
    1896:	60 68       	ori	r22, 0x80	; 128
    1898:	4e 2d       	mov	r20, r14
    189a:	8d e0       	ldi	r24, 0x0D	; 13
    189c:	57 df       	rcall	.-338    	; 0x174c <mfrc522_write>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    189e:	6e 2d       	mov	r22, r14
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	70 df       	rcall	.-288    	; 0x1784 <mfrc522_read>
    18a4:	b8 2e       	mov	r11, r24
    18a6:	c0 e0       	ldi	r28, 0x00	; 0
    18a8:	d0 e0       	ldi	r29, 0x00	; 0
	}else
	{
		uart0_tx_string(" No reader found]\n");
    18aa:	ec 2d       	mov	r30, r12
    18ac:	e1 60       	ori	r30, 0x01	; 1
    18ae:	ce 2e       	mov	r12, r30
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <mfrc522_to_card+0x110>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    18b2:	6e 2d       	mov	r22, r14
    18b4:	84 e0       	ldi	r24, 0x04	; 4
    18b6:	66 df       	rcall	.-308    	; 0x1784 <mfrc522_read>
    18b8:	b8 2e       	mov	r11, r24
    18ba:	21 96       	adiw	r28, 0x01	; 1
    18bc:	cf 3c       	cpi	r28, 0xCF	; 207
	}else
	{
		uart0_tx_string(" No reader found]\n");
    18be:	f7 e0       	ldi	r31, 0x07	; 7
    18c0:	df 07       	cpc	r29, r31
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <mfrc522_to_card+0x110>
    18c4:	68 c0       	rjmp	.+208    	; 0x1996 <mfrc522_to_card+0x1e0>
    18c6:	8c 2d       	mov	r24, r12
    18c8:	8b 21       	and	r24, r11
    18ca:	99 f3       	breq	.-26     	; 0x18b2 <mfrc522_to_card+0xfc>
    18cc:	6e c0       	rjmp	.+220    	; 0x19aa <mfrc522_to_card+0x1f4>
    18ce:	83 2d       	mov	r24, r3
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
	
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	b8 22       	and	r11, r24
    18d4:	11 f0       	breq	.+4      	; 0x18da <mfrc522_to_card+0x124>
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    18d6:	c2 e0       	ldi	r28, 0x02	; 2
	
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <mfrc522_to_card+0x126>
	
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
	byte=mfrc522_read(DivIEnReg, ch);
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}
    18da:	c1 e0       	ldi	r28, 0x01	; 1
    18dc:	8c e0       	ldi	r24, 0x0C	; 12
    18de:	f8 12       	cpse	r15, r24


    18e0:	73 c0       	rjmp	.+230    	; 0x19c8 <mfrc522_to_card+0x212>
    18e2:	6e 2d       	mov	r22, r14
    18e4:	8a e0       	ldi	r24, 0x0A	; 10
    18e6:	4e df       	rcall	.-356    	; 0x1784 <mfrc522_read>
    18e8:	88 2e       	mov	r8, r24
unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
    18ea:	6e 2d       	mov	r22, r14
    18ec:	8c e0       	ldi	r24, 0x0C	; 12
    18ee:	4a df       	rcall	.-364    	; 0x1784 <mfrc522_read>
    18f0:	28 2f       	mov	r18, r24
    18f2:	27 70       	andi	r18, 0x07	; 7
    18f4:	a9 f0       	breq	.+42     	; 0x1920 <mfrc522_to_card+0x16a>
{
    18f6:	88 2d       	mov	r24, r8
	uint8_t  status;
	uint32_t backBits;//The received data bits
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	82 0f       	add	r24, r18
    190a:	91 1d       	adc	r25, r1
    190c:	09 2e       	mov	r0, r25
    190e:	00 0c       	add	r0, r0
    1910:	aa 0b       	sbc	r26, r26
    1912:	bb 0b       	sbc	r27, r27
    1914:	f8 01       	movw	r30, r16
    1916:	80 83       	st	Z, r24
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	a2 83       	std	Z+2, r26	; 0x02
    191c:	b3 83       	std	Z+3, r27	; 0x03
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <mfrc522_to_card+0x18c>
    1920:	88 2d       	mov	r24, r8

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
	
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	09 2e       	mov	r0, r25
    1932:	00 0c       	add	r0, r0
    1934:	aa 0b       	sbc	r26, r26
    1936:	bb 0b       	sbc	r27, r27
    1938:	f8 01       	movw	r30, r16
    193a:	80 83       	st	Z, r24
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	a2 83       	std	Z+2, r26	; 0x02
    1940:	b3 83       	std	Z+3, r27	; 0x03
    1942:	88 20       	and	r8, r8
	tag_type[0] = req_mode;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);

    1944:	71 f0       	breq	.+28     	; 0x1962 <mfrc522_to_card+0x1ac>
    1946:	88 2d       	mov	r24, r8
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1948:	81 31       	cpi	r24, 0x11	; 17
    194a:	08 f0       	brcs	.+2      	; 0x194e <mfrc522_to_card+0x198>
    194c:	80 e1       	ldi	r24, 0x10	; 16
    194e:	88 2e       	mov	r8, r24
    1950:	91 2c       	mov	r9, r1
    1952:	a1 2c       	mov	r10, r1
    1954:	b1 2c       	mov	r11, r1
    1956:	81 14       	cp	r8, r1
    1958:	91 04       	cpc	r9, r1
    195a:	a1 04       	cpc	r10, r1
    195c:	b1 04       	cpc	r11, r1
    195e:	29 f4       	brne	.+10     	; 0x196a <mfrc522_to_card+0x1b4>
    1960:	33 c0       	rjmp	.+102    	; 0x19c8 <mfrc522_to_card+0x212>
    1962:	81 2c       	mov	r8, r1
    1964:	91 2c       	mov	r9, r1
    1966:	54 01       	movw	r10, r8
    1968:	83 94       	inc	r8
    196a:	02 2d       	mov	r16, r2
    196c:	1d 2d       	mov	r17, r13
    196e:	41 2c       	mov	r4, r1
    1970:	51 2c       	mov	r5, r1
    1972:	32 01       	movw	r6, r4
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1974:	6e 2d       	mov	r22, r14
    1976:	89 e0       	ldi	r24, 0x09	; 9
    1978:	05 df       	rcall	.-502    	; 0x1784 <mfrc522_read>
    197a:	f8 01       	movw	r30, r16
    197c:	81 93       	st	Z+, r24
    197e:	8f 01       	movw	r16, r30
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1980:	ff ef       	ldi	r31, 0xFF	; 255
    1982:	4f 1a       	sub	r4, r31
    1984:	5f 0a       	sbc	r5, r31
    1986:	6f 0a       	sbc	r6, r31
    1988:	7f 0a       	sbc	r7, r31
    198a:	48 14       	cp	r4, r8
    198c:	59 04       	cpc	r5, r9
    198e:	6a 04       	cpc	r6, r10
    1990:	7b 04       	cpc	r7, r11
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    1992:	80 f3       	brcs	.-32     	; 0x1974 <mfrc522_to_card+0x1be>
    1994:	19 c0       	rjmp	.+50     	; 0x19c8 <mfrc522_to_card+0x212>
    1996:	6e 2d       	mov	r22, r14
	}
    1998:	8d e0       	ldi	r24, 0x0D	; 13
    199a:	f4 de       	rcall	.-536    	; 0x1784 <mfrc522_read>
    199c:	68 2f       	mov	r22, r24
    199e:	6f 77       	andi	r22, 0x7F	; 127
    19a0:	4e 2d       	mov	r20, r14
void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}
    19a2:	8d e0       	ldi	r24, 0x0D	; 13
    19a4:	d3 de       	rcall	.-602    	; 0x174c <mfrc522_write>
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    19a6:	c3 e0       	ldi	r28, 0x03	; 3
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <mfrc522_to_card+0x212>
    19aa:	6e 2d       	mov	r22, r14
    19ac:	8d e0       	ldi	r24, 0x0D	; 13
	}
    19ae:	ea de       	rcall	.-556    	; 0x1784 <mfrc522_read>
    19b0:	68 2f       	mov	r22, r24
    19b2:	6f 77       	andi	r22, 0x7F	; 127
    19b4:	4e 2d       	mov	r20, r14
    19b6:	8d e0       	ldi	r24, 0x0D	; 13
    19b8:	c9 de       	rcall	.-622    	; 0x174c <mfrc522_write>
	
}

void mfrc522_IRQ_enable(unsigned char ch)
    19ba:	6e 2d       	mov	r22, r14
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	e2 de       	rcall	.-572    	; 0x1784 <mfrc522_read>
    19c0:	8b 71       	andi	r24, 0x1B	; 27
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <mfrc522_to_card+0x210>
    19c4:	84 cf       	rjmp	.-248    	; 0x18ce <mfrc522_to_card+0x118>
    19c6:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

    19c8:	8c 2f       	mov	r24, r28
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	3f 90       	pop	r3
    19ec:	2f 90       	pop	r2
    19ee:	08 95       	ret

000019f0 <mfrc522_init>:
    19f0:	cf 93       	push	r28
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    19f2:	c8 2f       	mov	r28, r24
			break;
		}
		default:
    19f4:	1f 92       	push	r1
    19f6:	1f 92       	push	r1
    19f8:	1f 92       	push	r1
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	8f 93       	push	r24
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	8f 93       	push	r24
    1a02:	17 d1       	rcall	.+558    	; 0x1c32 <spi_init>
		break;
	}
	
    1a04:	84 b3       	in	r24, 0x14	; 20
    1a06:	83 60       	ori	r24, 0x03	; 3
    1a08:	84 bb       	out	0x14, r24	; 20
	///////////////////////////////////////////============여기-==========//////////
    1a0a:	15 ba       	out	0x15, r1	; 21
    1a0c:	2f ef       	ldi	r18, 0xFF	; 255
    1a0e:	89 ef       	ldi	r24, 0xF9	; 249
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	21 50       	subi	r18, 0x01	; 1
    1a14:	80 40       	sbci	r24, 0x00	; 0
    1a16:	90 40       	sbci	r25, 0x00	; 0
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <mfrc522_init+0x22>
    1a1a:	00 c0       	rjmp	.+0      	; 0x1a1c <mfrc522_init+0x2c>
    1a1c:	00 00       	nop
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
	n=mfrc522_read(ComIrqReg,ch);
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1a1e:	85 b3       	in	r24, 0x15	; 21
    1a20:	83 60       	ori	r24, 0x03	; 3
    1a22:	85 bb       	out	0x15, r24	; 21
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
	
	
    1a24:	4c 2f       	mov	r20, r28
    1a26:	6f e0       	ldi	r22, 0x0F	; 15
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 de       	rcall	.-736    	; 0x174c <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
    1a2c:	4c 2f       	mov	r20, r28
    1a2e:	6d e8       	ldi	r22, 0x8D	; 141
    1a30:	8a e2       	ldi	r24, 0x2A	; 42
    1a32:	8c de       	rcall	.-744    	; 0x174c <mfrc522_write>
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1a34:	4c 2f       	mov	r20, r28
    1a36:	6e e3       	ldi	r22, 0x3E	; 62
    1a38:	8b e2       	ldi	r24, 0x2B	; 43
    1a3a:	88 de       	rcall	.-752    	; 0x174c <mfrc522_write>
	}
    1a3c:	4c 2f       	mov	r20, r28
    1a3e:	6e e1       	ldi	r22, 0x1E	; 30
    1a40:	8c e2       	ldi	r24, 0x2C	; 44
    1a42:	84 de       	rcall	.-760    	; 0x174c <mfrc522_write>

    1a44:	4c 2f       	mov	r20, r28
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	8d e2       	ldi	r24, 0x2D	; 45
    1a4a:	80 de       	rcall	.-768    	; 0x174c <mfrc522_write>
	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
	if (cmd == MFRC522_CMD_Transceive)
    1a4c:	4c 2f       	mov	r20, r28
    1a4e:	60 e4       	ldi	r22, 0x40	; 64
    1a50:	85 e1       	ldi	r24, 0x15	; 21
    1a52:	7c de       	rcall	.-776    	; 0x174c <mfrc522_write>
	{
    1a54:	4c 2f       	mov	r20, r28
    1a56:	6d e3       	ldi	r22, 0x3D	; 61
    1a58:	81 e1       	ldi	r24, 0x11	; 17
    1a5a:	78 de       	rcall	.-784    	; 0x174c <mfrc522_write>
    1a5c:	6c 2f       	mov	r22, r28
		n=mfrc522_read(BitFramingReg,ch);
		mfrc522_write(BitFramingReg,n|0x80,ch);
	}
	
    1a5e:	84 e1       	ldi	r24, 0x14	; 20
    1a60:	91 de       	rcall	.-734    	; 0x1784 <mfrc522_read>
    1a62:	98 2f       	mov	r25, r24
    1a64:	93 70       	andi	r25, 0x03	; 3
	//Waiting to receive data to complete
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <mfrc522_init+0x8c>
    1a72:	68 2f       	mov	r22, r24
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
    1a74:	63 60       	ori	r22, 0x03	; 3
    1a76:	4c 2f       	mov	r20, r28
    1a78:	84 e1       	ldi	r24, 0x14	; 20
    1a7a:	68 de       	rcall	.-816    	; 0x174c <mfrc522_write>
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <mfrc522_version_check>:
	{
		//CommIrqReg[7..0]
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1a84:	d8 2f       	mov	r29, r24

	tmp=mfrc522_read(BitFramingReg,ch);
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
	
    1a86:	68 2f       	mov	r22, r24
    1a88:	87 e3       	ldi	r24, 0x37	; 55
    1a8a:	7c de       	rcall	.-776    	; 0x1784 <mfrc522_read>
    1a8c:	c8 2f       	mov	r28, r24
    1a8e:	2f ef       	ldi	r18, 0xFF	; 255
    1a90:	89 ef       	ldi	r24, 0xF9	; 249
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	21 50       	subi	r18, 0x01	; 1
    1a96:	80 40       	sbci	r24, 0x00	; 0
    1a98:	90 40       	sbci	r25, 0x00	; 0
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <mfrc522_version_check+0x14>
    1a9c:	00 c0       	rjmp	.+0      	; 0x1a9e <mfrc522_version_check+0x1e>
    1a9e:	00 00       	nop
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
    1aa0:	d1 11       	cpse	r29, r1
    1aa2:	06 c0       	rjmp	.+12     	; 0x1ab0 <mfrc522_version_check+0x30>
    1aa4:	8b ec       	ldi	r24, 0xCB	; 203
    1aa6:	93 e0       	ldi	r25, 0x03	; 3
    1aa8:	5f d1       	rcall	.+702    	; 0x1d68 <uart0_tx_string>
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
    1aaa:	c2 39       	cpi	r28, 0x92	; 146
    1aac:	59 f5       	brne	.+86     	; 0x1b04 <mfrc522_version_check+0x84>
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <mfrc522_version_check+0x4e>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    1ab0:	87 ed       	ldi	r24, 0xD7	; 215
    1ab2:	93 e0       	ldi	r25, 0x03	; 3
    1ab4:	59 d1       	rcall	.+690    	; 0x1d68 <uart0_tx_string>
			if (n & irqEn & 0x01)
			{
    1ab6:	c2 39       	cpi	r28, 0x92	; 146
    1ab8:	91 f5       	brne	.+100    	; 0x1b1e <mfrc522_version_check+0x9e>
				if (lastBits)
				{
					*back_data_len = (n-1)*8 + lastBits;
				}
				else
				{
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <mfrc522_version_check+0x60>
    1abc:	83 ee       	ldi	r24, 0xE3	; 227
    1abe:	93 e0       	ldi	r25, 0x03	; 3
    1ac0:	53 d1       	rcall	.+678    	; 0x1d68 <uart0_tx_string>
					*back_data_len = n*8;
    1ac2:	46 ef       	ldi	r20, 0xF6	; 246
    1ac4:	53 e0       	ldi	r21, 0x03	; 3
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	9f dd       	rcall	.-1218   	; 0x160a <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1acc:	ff cf       	rjmp	.-2      	; 0x1acc <mfrc522_version_check+0x4c>
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	94 e0       	ldi	r25, 0x04	; 4

    1ad2:	4a d1       	rcall	.+660    	; 0x1d68 <uart0_tx_string>
    1ad4:	4e e2       	ldi	r20, 0x2E	; 46
    1ad6:	54 e0       	ldi	r21, 0x04	; 4
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	96 dd       	rcall	.-1236   	; 0x160a <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1ade:	23 c0       	rjmp	.+70     	; 0x1b26 <mfrc522_version_check+0xa6>
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	94 e0       	ldi	r25, 0x04	; 4

			if (cmd == MFRC522_CMD_Transceive)
    1ae4:	41 d1       	rcall	.+642    	; 0x1d68 <uart0_tx_string>
    1ae6:	43 e4       	ldi	r20, 0x43	; 67
    1ae8:	54 e0       	ldi	r21, 0x04	; 4
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	82 e0       	ldi	r24, 0x02	; 2
			{
				n = mfrc522_read(FIFOLevelReg,ch);
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1aee:	8d dd       	rcall	.-1254   	; 0x160a <i2c_lcd_string>
    1af0:	1a c0       	rjmp	.+52     	; 0x1b26 <mfrc522_version_check+0xa6>
    1af2:	88 e5       	ldi	r24, 0x58	; 88
    1af4:	94 e0       	ldi	r25, 0x04	; 4
				{
    1af6:	38 d1       	rcall	.+624    	; 0x1d68 <uart0_tx_string>
    1af8:	4e e2       	ldi	r20, 0x2E	; 46
    1afa:	54 e0       	ldi	r21, 0x04	; 4
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	84 dd       	rcall	.-1272   	; 0x160a <i2c_lcd_string>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1b02:	11 c0       	rjmp	.+34     	; 0x1b26 <mfrc522_version_check+0xa6>
    1b04:	c0 59       	subi	r28, 0x90	; 144
    1b06:	c2 30       	cpi	r28, 0x02	; 2
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1b08:	c8 f6       	brcc	.-78     	; 0x1abc <mfrc522_version_check+0x3c>
    1b0a:	f3 cf       	rjmp	.-26     	; 0x1af2 <mfrc522_version_check+0x72>
    1b0c:	88 e5       	ldi	r24, 0x58	; 88
    1b0e:	94 e0       	ldi	r25, 0x04	; 4
				{
					*back_data_len = (n-1)*8 + lastBits;
    1b10:	2b d1       	rcall	.+598    	; 0x1d68 <uart0_tx_string>
    1b12:	43 e4       	ldi	r20, 0x43	; 67
    1b14:	54 e0       	ldi	r21, 0x04	; 4
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	77 dd       	rcall	.-1298   	; 0x160a <i2c_lcd_string>
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <mfrc522_version_check+0xa6>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1b1e:	c0 59       	subi	r28, 0x90	; 144
    1b20:	c2 30       	cpi	r28, 0x02	; 2
    1b22:	60 f6       	brcc	.-104    	; 0x1abc <mfrc522_version_check+0x3c>
    1b24:	f3 cf       	rjmp	.-26     	; 0x1b0c <mfrc522_version_check+0x8c>
				{
					*back_data_len = n*8;
				}

				if (n == 0)
				{
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <mfrc522_IRQ_enable>:
					n = 1;
				}
				if (n > MAX_LEN)
    1b2c:	cf 93       	push	r28
    1b2e:	c8 2f       	mov	r28, r24
				{
					n = MAX_LEN;
				}
    1b30:	68 2f       	mov	r22, r24
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	27 de       	rcall	.-946    	; 0x1784 <mfrc522_read>
				
    1b36:	68 2f       	mov	r22, r24
    1b38:	60 62       	ori	r22, 0x20	; 32
    1b3a:	4c 2f       	mov	r20, r28
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	06 de       	rcall	.-1012   	; 0x174c <mfrc522_write>
				//Reading the received data in FIFO
    1b40:	6c 2f       	mov	r22, r28
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	1f de       	rcall	.-962    	; 0x1784 <mfrc522_read>
				for (i=0; i<n; i++)
    1b46:	68 2f       	mov	r22, r24
    1b48:	60 68       	ori	r22, 0x80	; 128
    1b4a:	4c 2f       	mov	r20, r28
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	fe dd       	rcall	.-1028   	; 0x174c <mfrc522_write>
				{
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <mfrc522_request>:
					back_data[i] = mfrc522_read(FIFODataReg,ch);
				}
			}
		}
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <mfrc522_request+0x10>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <mfrc522_request+0x12>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	18 2f       	mov	r17, r24
    1b6c:	6b 01       	movw	r12, r22
    1b6e:	e4 2e       	mov	r14, r20
		else
		{
			status = ERROR;
		}
		
    1b70:	67 e0       	ldi	r22, 0x07	; 7
    1b72:	8d e0       	ldi	r24, 0x0D	; 13
    1b74:	eb dd       	rcall	.-1066   	; 0x174c <mfrc522_write>
	}
	
    1b76:	f6 01       	movw	r30, r12
    1b78:	10 83       	st	Z, r17
// 	SetBitMask(ControlReg,0x80);           //timer stops
    1b7a:	8e 01       	movw	r16, r28
    1b7c:	0f 5f       	subi	r16, 0xFF	; 255
    1b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b80:	96 01       	movw	r18, r12
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	b6 01       	movw	r22, r12
    1b86:	8c e0       	ldi	r24, 0x0C	; 12
    1b88:	16 de       	rcall	.-980    	; 0x17b6 <mfrc522_to_card>
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	59 f4       	brne	.+22     	; 0x1ba4 <mfrc522_request+0x50>
    1b8e:	49 81       	ldd	r20, Y+1	; 0x01
    1b90:	5a 81       	ldd	r21, Y+2	; 0x02
    1b92:	6b 81       	ldd	r22, Y+3	; 0x03
    1b94:	7c 81       	ldd	r23, Y+4	; 0x04
    1b96:	40 31       	cpi	r20, 0x10	; 16
    1b98:	51 05       	cpc	r21, r1
    1b9a:	61 05       	cpc	r22, r1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <mfrc522_request+0x52>
	return status;
}
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <mfrc522_request+0x52>
    1ba4:	83 e0       	ldi	r24, 0x03	; 3


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	08 95       	ret

00001bbe <mfrc522_get_card_serial>:
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <mfrc522_get_card_serial+0x10>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <mfrc522_get_card_serial+0x12>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	6c 01       	movw	r12, r24
    1bd6:	e6 2e       	mov	r14, r22
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
	
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

    1bd8:	46 2f       	mov	r20, r22
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	8d e0       	ldi	r24, 0x0D	; 13
    1bde:	b6 dd       	rcall	.-1172   	; 0x174c <mfrc522_write>
	if (status == CARD_FOUND)
	{
    1be0:	83 e9       	ldi	r24, 0x93	; 147
    1be2:	f6 01       	movw	r30, r12
    1be4:	80 83       	st	Z, r24
		//Check card serial number
    1be6:	80 e2       	ldi	r24, 0x20	; 32
    1be8:	81 83       	std	Z+1, r24	; 0x01
		for (i=0; i<4; i++)
    1bea:	8e 01       	movw	r16, r28
    1bec:	0f 5f       	subi	r16, 0xFF	; 255
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	96 01       	movw	r18, r12
    1bf2:	42 e0       	ldi	r20, 0x02	; 2
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	8c e0       	ldi	r24, 0x0C	; 12
    1bf8:	de dd       	rcall	.-1092   	; 0x17b6 <mfrc522_to_card>
		{
			serNumCheck ^= serial_out[i];
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	71 f4       	brne	.+28     	; 0x1c1a <mfrc522_get_card_serial+0x5c>
    1bfe:	f6 01       	movw	r30, r12
    1c00:	a6 01       	movw	r20, r12
    1c02:	4c 5f       	subi	r20, 0xFC	; 252
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (serNumCheck != serial_out[i])
		{
			status = ERROR;
		}
    1c08:	21 91       	ld	r18, Z+
    1c0a:	92 27       	eor	r25, r18
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
    1c0c:	4e 17       	cp	r20, r30
    1c0e:	5f 07       	cpc	r21, r31
    1c10:	d9 f7       	brne	.-10     	; 0x1c08 <mfrc522_get_card_serial+0x4a>
			status = ERROR;
		}
	}
	return status;
    1c12:	f6 01       	movw	r30, r12
    1c14:	24 81       	ldd	r18, Z+4	; 0x04
    1c16:	92 13       	cpse	r25, r18
}

    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	cf 90       	pop	r12
    1c30:	08 95       	ret

00001c32 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <spi_init+0x6>
    1c38:	1f 92       	push	r1
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	21 f1       	breq	.+72     	; 0x1c8c <spi_init+0x5a>
    1c44:	81 11       	cpse	r24, r1
    1c46:	32 c0       	rjmp	.+100    	; 0x1cac <spi_init+0x7a>
    1c48:	29 c0       	rjmp	.+82     	; 0x1c9c <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1c4a:	9c 91       	ld	r25, X
    1c4c:	12 96       	adiw	r26, 0x02	; 2
    1c4e:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1c50:	e2 17       	cp	r30, r18
    1c52:	f3 07       	cpc	r31, r19
    1c54:	d1 f7       	brne	.-12     	; 0x1c4a <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	92 30       	cpi	r25, 0x02	; 2
    1c5a:	20 f1       	brcs	.+72     	; 0x1ca4 <spi_init+0x72>
    1c5c:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1c5e:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	71 f4       	brne	.+28     	; 0x1c80 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1c64:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1c66:	87 b3       	in	r24, 0x17	; 23
    1c68:	87 60       	ori	r24, 0x07	; 7
    1c6a:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1c6c:	99 81       	ldd	r25, Y+1	; 0x01
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	89 2b       	or	r24, r25
    1c72:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1c74:	2e b1       	in	r18, 0x0e	; 14
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	92 2b       	or	r25, r18
    1c7a:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1c7c:	8d b9       	out	0x0d, r24	; 13
    1c7e:	16 c0       	rjmp	.+44     	; 0x1cac <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1c80:	81 11       	cpse	r24, r1
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1c84:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1c86:	80 e4       	ldi	r24, 0x40	; 64
    1c88:	8d b9       	out	0x0d, r24	; 13
    1c8a:	10 c0       	rjmp	.+32     	; 0x1cac <spi_init+0x7a>
    1c8c:	de 01       	movw	r26, r28
    1c8e:	19 96       	adiw	r26, 0x09	; 9
    1c90:	fe 01       	movw	r30, r28
    1c92:	31 96       	adiw	r30, 0x01	; 1
    1c94:	9e 01       	movw	r18, r28
    1c96:	2c 5f       	subi	r18, 0xFC	; 252
    1c98:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9a:	d7 cf       	rjmp	.-82     	; 0x1c4a <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	92 30       	cpi	r25, 0x02	; 2
    1ca0:	e8 f6       	brcc	.-70     	; 0x1c5c <spi_init+0x2a>
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1ca4:	1d b8       	out	0x0d, r1	; 13
    1ca6:	de cf       	rjmp	.-68     	; 0x1c64 <spi_init+0x32>
    1ca8:	1d b8       	out	0x0d, r1	; 13
    1caa:	ec cf       	rjmp	.-40     	; 0x1c84 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1cb8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1cba:	77 9b       	sbis	0x0e, 7	; 14
    1cbc:	fe cf       	rjmp	.-4      	; 0x1cba <spi_master_tx+0x2>
}
    1cbe:	08 95       	ret

00001cc0 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1cc0:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1cc2:	77 9b       	sbis	0x0e, 7	; 14
    1cc4:	fe cf       	rjmp	.-4      	; 0x1cc2 <spi_master_rx+0x2>
	
	return SPDR;
    1cc6:	8f b1       	in	r24, 0x0f	; 15
}
    1cc8:	08 95       	ret

00001cca <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1cca:	bc 9a       	sbi	0x17, 4	; 23
    1ccc:	8c e0       	ldi	r24, 0x0C	; 12
    1cce:	83 bf       	out	0x33, r24	; 51
    1cd0:	8a ef       	ldi	r24, 0xFA	; 250
    1cd2:	81 bf       	out	0x31, r24	; 49
    1cd4:	87 b7       	in	r24, 0x37	; 55
    1cd6:	82 60       	ori	r24, 0x02	; 2
    1cd8:	87 bf       	out	0x37, r24	; 55
    1cda:	08 95       	ret

00001cdc <timer3_init>:
    1cdc:	13 9a       	sbi	0x02, 3	; 2
    1cde:	80 e4       	ldi	r24, 0x40	; 64
    1ce0:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1ce4:	8a e1       	ldi	r24, 0x1A	; 26
    1ce6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cea:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cee:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cf2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1cf6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1cfa:	08 95       	ret

00001cfc <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1cfc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1d00:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d04:	08 95       	ret

00001d06 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	ec 01       	movw	r28, r24
    1d0c:	9b 01       	movw	r18, r22
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	60 e4       	ldi	r22, 0x40	; 64
    1d14:	72 e4       	ldi	r23, 0x42	; 66
    1d16:	8f e0       	ldi	r24, 0x0F	; 15
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	4f d1       	rcall	.+670    	; 0x1fba <__udivmodsi4>
    1d1c:	21 50       	subi	r18, 0x01	; 1
    1d1e:	31 09       	sbc	r19, r1
    1d20:	20 97       	sbiw	r28, 0x00	; 0
    1d22:	59 f4       	brne	.+22     	; 0x1d3a <uart_init+0x34>
    1d24:	10 98       	cbi	0x02, 0	; 2
    1d26:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1d2a:	29 b9       	out	0x09, r18	; 9
    1d2c:	88 e1       	ldi	r24, 0x18	; 24
    1d2e:	8a b9       	out	0x0a, r24	; 10
    1d30:	57 9a       	sbi	0x0a, 7	; 10
    1d32:	86 e0       	ldi	r24, 0x06	; 6
    1d34:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1d38:	10 c0       	rjmp	.+32     	; 0x1d5a <uart_init+0x54>
    1d3a:	21 97       	sbiw	r28, 0x01	; 1
    1d3c:	71 f4       	brne	.+28     	; 0x1d5a <uart_init+0x54>
    1d3e:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1d42:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1d46:	ea e9       	ldi	r30, 0x9A	; 154
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	88 e1       	ldi	r24, 0x18	; 24
    1d4c:	80 83       	st	Z, r24
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 68       	ori	r24, 0x80	; 128
    1d52:	80 83       	st	Z, r24
    1d54:	86 e0       	ldi	r24, 0x06	; 6
    1d56:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	08 95       	ret

00001d60 <uart0_tx_char>:
    1d60:	5d 9b       	sbis	0x0b, 5	; 11
    1d62:	fe cf       	rjmp	.-4      	; 0x1d60 <uart0_tx_char>
    1d64:	8c b9       	out	0x0c, r24	; 12
    1d66:	08 95       	ret

00001d68 <uart0_tx_string>:
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
    1d6e:	88 81       	ld	r24, Y
    1d70:	88 23       	and	r24, r24
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <uart0_tx_string+0x16>
    1d74:	21 96       	adiw	r28, 0x01	; 1
    1d76:	f4 df       	rcall	.-24     	; 0x1d60 <uart0_tx_char>
    1d78:	89 91       	ld	r24, Y+
    1d7a:	81 11       	cpse	r24, r1
    1d7c:	fc cf       	rjmp	.-8      	; 0x1d76 <uart0_tx_string+0xe>
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <uart1_tx_char>:
    1d84:	eb e9       	ldi	r30, 0x9B	; 155
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	90 81       	ld	r25, Z
    1d8a:	95 ff       	sbrs	r25, 5
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <uart1_tx_char+0x4>
    1d8e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1d92:	08 95       	ret

00001d94 <uart1_tx_string>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
    1d9a:	88 81       	ld	r24, Y
    1d9c:	88 23       	and	r24, r24
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <uart1_tx_string+0x16>
    1da0:	21 96       	adiw	r28, 0x01	; 1
    1da2:	f0 df       	rcall	.-32     	; 0x1d84 <uart1_tx_char>
    1da4:	89 91       	ld	r24, Y+
    1da6:	81 11       	cpse	r24, r1
    1da8:	fc cf       	rjmp	.-8      	; 0x1da2 <uart1_tx_string+0xe>
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <IntToString>:

char * IntToString(int num)
{
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	64 97       	sbiw	r28, 0x14	; 20
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1dc8:	9f 93       	push	r25
    1dca:	8f 93       	push	r24
    1dcc:	8c e7       	ldi	r24, 0x7C	; 124
    1dce:	94 e0       	ldi	r25, 0x04	; 4
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	0f 5f       	subi	r16, 0xFF	; 255
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	1f 93       	push	r17
    1ddc:	0f 93       	push	r16
    1dde:	4f d1       	rcall	.+670    	; 0x207e <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1de0:	b8 01       	movw	r22, r16
    1de2:	8d e2       	ldi	r24, 0x2D	; 45
    1de4:	96 e0       	ldi	r25, 0x06	; 6
    1de6:	3c d1       	rcall	.+632    	; 0x2060 <strcpy>
	
	return (buff.itos_buff);
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
}
    1df4:	8d e2       	ldi	r24, 0x2D	; 45
    1df6:	96 e0       	ldi	r25, 0x06	; 6
    1df8:	64 96       	adiw	r28, 0x14	; 20
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	08 95       	ret

00001e0e <HexToString>:
 
 char * HexToString(char num)
 {
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	64 97       	sbiw	r28, 0x14	; 20
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1e26:	1f 92       	push	r1
    1e28:	8f 93       	push	r24
    1e2a:	81 e8       	ldi	r24, 0x81	; 129
    1e2c:	94 e0       	ldi	r25, 0x04	; 4
    1e2e:	9f 93       	push	r25
    1e30:	8f 93       	push	r24
    1e32:	8e 01       	movw	r16, r28
    1e34:	0f 5f       	subi	r16, 0xFF	; 255
    1e36:	1f 4f       	sbci	r17, 0xFF	; 255
    1e38:	1f 93       	push	r17
    1e3a:	0f 93       	push	r16
    1e3c:	20 d1       	rcall	.+576    	; 0x207e <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1e3e:	b8 01       	movw	r22, r16
    1e40:	8d e2       	ldi	r24, 0x2D	; 45
    1e42:	96 e0       	ldi	r25, 0x06	; 6
    1e44:	0d d1       	rcall	.+538    	; 0x2060 <strcpy>
	 
	 return (buff.itos_buff);
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
 }
    1e52:	8d e2       	ldi	r24, 0x2D	; 45
    1e54:	96 e0       	ldi	r25, 0x06	; 6
    1e56:	64 96       	adiw	r28, 0x14	; 20
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	c0 54       	subi	r28, 0x40	; 64
    1e82:	d1 09       	sbc	r29, r1
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	6b 01       	movw	r12, r22
    1e90:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1e92:	20 e4       	ldi	r18, 0x40	; 64
    1e94:	ed e6       	ldi	r30, 0x6D	; 109
    1e96:	f6 e0       	ldi	r31, 0x06	; 6
    1e98:	df 01       	movw	r26, r30
    1e9a:	1d 92       	st	X+, r1
    1e9c:	2a 95       	dec	r18
    1e9e:	e9 f7       	brne	.-6      	; 0x1e9a <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	0f 5f       	subi	r16, 0xFF	; 255
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	da d0       	rcall	.+436    	; 0x2060 <strcpy>
	strcat(buf,ssid);
    1eac:	b6 01       	movw	r22, r12
    1eae:	c8 01       	movw	r24, r16
    1eb0:	c3 d0       	rcall	.+390    	; 0x2038 <strcat>
	strcat(buf,"\",\"");
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	01 90       	ld	r0, Z+
    1eb6:	00 20       	and	r0, r0
    1eb8:	e9 f7       	brne	.-6      	; 0x1eb4 <connect_to_AP+0x48>
    1eba:	31 97       	sbiw	r30, 0x01	; 1
    1ebc:	82 e2       	ldi	r24, 0x22	; 34
    1ebe:	9c e2       	ldi	r25, 0x2C	; 44
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	82 e2       	ldi	r24, 0x22	; 34
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	93 83       	std	Z+3, r25	; 0x03
    1eca:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1ecc:	b7 01       	movw	r22, r14
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b3 d0       	rcall	.+358    	; 0x2038 <strcat>
	strcat(buf,"\"\r\n");
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	01 90       	ld	r0, Z+
    1ed6:	00 20       	and	r0, r0
    1ed8:	e9 f7       	brne	.-6      	; 0x1ed4 <connect_to_AP+0x68>
    1eda:	31 97       	sbiw	r30, 0x01	; 1
    1edc:	82 e2       	ldi	r24, 0x22	; 34
    1ede:	9d e0       	ldi	r25, 0x0D	; 13
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
    1ee4:	8a e0       	ldi	r24, 0x0A	; 10
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	93 83       	std	Z+3, r25	; 0x03
    1eea:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1eec:	b8 01       	movw	r22, r16
    1eee:	8d e6       	ldi	r24, 0x6D	; 109
    1ef0:	96 e0       	ldi	r25, 0x06	; 6
    1ef2:	b6 d0       	rcall	.+364    	; 0x2060 <strcpy>
	return buff.esp_buff;
	
}
    1ef4:	8d e6       	ldi	r24, 0x6D	; 109
    1ef6:	96 e0       	ldi	r25, 0x06	; 6
    1ef8:	c0 5c       	subi	r28, 0xC0	; 192
    1efa:	df 4f       	sbci	r29, 0xFF	; 255
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	08 95       	ret

00001f18 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	c0 54       	subi	r28, 0x40	; 64
    1f2a:	d1 09       	sbc	r29, r1
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	9c 01       	movw	r18, r24
    1f38:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1f3a:	80 e4       	ldi	r24, 0x40	; 64
    1f3c:	ed e6       	ldi	r30, 0x6D	; 109
    1f3e:	f6 e0       	ldi	r31, 0x06	; 6
    1f40:	df 01       	movw	r26, r30
    1f42:	1d 92       	st	X+, r1
    1f44:	8a 95       	dec	r24
    1f46:	e9 f7       	brne	.-6      	; 0x1f42 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1f48:	94 e1       	ldi	r25, 0x14	; 20
    1f4a:	e6 e8       	ldi	r30, 0x86	; 134
    1f4c:	f4 e0       	ldi	r31, 0x04	; 4
    1f4e:	8e 01       	movw	r16, r28
    1f50:	0f 5f       	subi	r16, 0xFF	; 255
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	d8 01       	movw	r26, r16
    1f56:	01 90       	ld	r0, Z+
    1f58:	0d 92       	st	X+, r0
    1f5a:	9a 95       	dec	r25
    1f5c:	e1 f7       	brne	.-8      	; 0x1f56 <TCP_connect+0x3e>
	strcat(buf,ip);
    1f5e:	b9 01       	movw	r22, r18
    1f60:	c8 01       	movw	r24, r16
    1f62:	6a d0       	rcall	.+212    	; 0x2038 <strcat>
	strcat(buf,"\",");
    1f64:	f8 01       	movw	r30, r16
    1f66:	01 90       	ld	r0, Z+
    1f68:	00 20       	and	r0, r0
    1f6a:	e9 f7       	brne	.-6      	; 0x1f66 <TCP_connect+0x4e>
    1f6c:	31 97       	sbiw	r30, 0x01	; 1
    1f6e:	82 e2       	ldi	r24, 0x22	; 34
    1f70:	9c e2       	ldi	r25, 0x2C	; 44
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1f78:	b7 01       	movw	r22, r14
    1f7a:	c8 01       	movw	r24, r16
    1f7c:	5d d0       	rcall	.+186    	; 0x2038 <strcat>
	strcat(buf,"\r\n");
    1f7e:	f8 01       	movw	r30, r16
    1f80:	01 90       	ld	r0, Z+
    1f82:	00 20       	and	r0, r0
    1f84:	e9 f7       	brne	.-6      	; 0x1f80 <TCP_connect+0x68>
    1f86:	31 97       	sbiw	r30, 0x01	; 1
    1f88:	8d e0       	ldi	r24, 0x0D	; 13
    1f8a:	9a e0       	ldi	r25, 0x0A	; 10
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1f92:	b8 01       	movw	r22, r16
    1f94:	8d e6       	ldi	r24, 0x6D	; 109
    1f96:	96 e0       	ldi	r25, 0x06	; 6
    1f98:	63 d0       	rcall	.+198    	; 0x2060 <strcpy>
	
	return buff.esp_buff;
	
}
    1f9a:	8d e6       	ldi	r24, 0x6D	; 109
    1f9c:	96 e0       	ldi	r25, 0x06	; 6
    1f9e:	c0 5c       	subi	r28, 0xC0	; 192
    1fa0:	df 4f       	sbci	r29, 0xFF	; 255
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	08 95       	ret

00001fba <__udivmodsi4>:
    1fba:	a1 e2       	ldi	r26, 0x21	; 33
    1fbc:	1a 2e       	mov	r1, r26
    1fbe:	aa 1b       	sub	r26, r26
    1fc0:	bb 1b       	sub	r27, r27
    1fc2:	fd 01       	movw	r30, r26
    1fc4:	0d c0       	rjmp	.+26     	; 0x1fe0 <__udivmodsi4_ep>

00001fc6 <__udivmodsi4_loop>:
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	ee 1f       	adc	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	a2 17       	cp	r26, r18
    1fd0:	b3 07       	cpc	r27, r19
    1fd2:	e4 07       	cpc	r30, r20
    1fd4:	f5 07       	cpc	r31, r21
    1fd6:	20 f0       	brcs	.+8      	; 0x1fe0 <__udivmodsi4_ep>
    1fd8:	a2 1b       	sub	r26, r18
    1fda:	b3 0b       	sbc	r27, r19
    1fdc:	e4 0b       	sbc	r30, r20
    1fde:	f5 0b       	sbc	r31, r21

00001fe0 <__udivmodsi4_ep>:
    1fe0:	66 1f       	adc	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	88 1f       	adc	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	1a 94       	dec	r1
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <__udivmodsi4_loop>
    1fec:	60 95       	com	r22
    1fee:	70 95       	com	r23
    1ff0:	80 95       	com	r24
    1ff2:	90 95       	com	r25
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	bd 01       	movw	r22, r26
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	08 95       	ret

00001ffe <atoi>:
    1ffe:	fc 01       	movw	r30, r24
    2000:	88 27       	eor	r24, r24
    2002:	99 27       	eor	r25, r25
    2004:	e8 94       	clt
    2006:	21 91       	ld	r18, Z+
    2008:	20 32       	cpi	r18, 0x20	; 32
    200a:	e9 f3       	breq	.-6      	; 0x2006 <atoi+0x8>
    200c:	29 30       	cpi	r18, 0x09	; 9
    200e:	10 f0       	brcs	.+4      	; 0x2014 <atoi+0x16>
    2010:	2e 30       	cpi	r18, 0x0E	; 14
    2012:	c8 f3       	brcs	.-14     	; 0x2006 <atoi+0x8>
    2014:	2b 32       	cpi	r18, 0x2B	; 43
    2016:	39 f0       	breq	.+14     	; 0x2026 <atoi+0x28>
    2018:	2d 32       	cpi	r18, 0x2D	; 45
    201a:	31 f4       	brne	.+12     	; 0x2028 <atoi+0x2a>
    201c:	68 94       	set
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <atoi+0x28>
    2020:	26 d0       	rcall	.+76     	; 0x206e <__mulhi_const_10>
    2022:	82 0f       	add	r24, r18
    2024:	91 1d       	adc	r25, r1
    2026:	21 91       	ld	r18, Z+
    2028:	20 53       	subi	r18, 0x30	; 48
    202a:	2a 30       	cpi	r18, 0x0A	; 10
    202c:	c8 f3       	brcs	.-14     	; 0x2020 <atoi+0x22>
    202e:	1e f4       	brtc	.+6      	; 0x2036 <atoi+0x38>
    2030:	90 95       	com	r25
    2032:	81 95       	neg	r24
    2034:	9f 4f       	sbci	r25, 0xFF	; 255
    2036:	08 95       	ret

00002038 <strcat>:
    2038:	fb 01       	movw	r30, r22
    203a:	dc 01       	movw	r26, r24
    203c:	0d 90       	ld	r0, X+
    203e:	00 20       	and	r0, r0
    2040:	e9 f7       	brne	.-6      	; 0x203c <strcat+0x4>
    2042:	11 97       	sbiw	r26, 0x01	; 1
    2044:	01 90       	ld	r0, Z+
    2046:	0d 92       	st	X+, r0
    2048:	00 20       	and	r0, r0
    204a:	e1 f7       	brne	.-8      	; 0x2044 <strcat+0xc>
    204c:	08 95       	ret

0000204e <strcmp>:
    204e:	fb 01       	movw	r30, r22
    2050:	dc 01       	movw	r26, r24
    2052:	8d 91       	ld	r24, X+
    2054:	01 90       	ld	r0, Z+
    2056:	80 19       	sub	r24, r0
    2058:	01 10       	cpse	r0, r1
    205a:	d9 f3       	breq	.-10     	; 0x2052 <strcmp+0x4>
    205c:	99 0b       	sbc	r25, r25
    205e:	08 95       	ret

00002060 <strcpy>:
    2060:	fb 01       	movw	r30, r22
    2062:	dc 01       	movw	r26, r24
    2064:	01 90       	ld	r0, Z+
    2066:	0d 92       	st	X+, r0
    2068:	00 20       	and	r0, r0
    206a:	e1 f7       	brne	.-8      	; 0x2064 <strcpy+0x4>
    206c:	08 95       	ret

0000206e <__mulhi_const_10>:
    206e:	7a e0       	ldi	r23, 0x0A	; 10
    2070:	97 9f       	mul	r25, r23
    2072:	90 2d       	mov	r25, r0
    2074:	87 9f       	mul	r24, r23
    2076:	80 2d       	mov	r24, r0
    2078:	91 0d       	add	r25, r1
    207a:	11 24       	eor	r1, r1
    207c:	08 95       	ret

0000207e <sprintf>:
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	2e 97       	sbiw	r28, 0x0e	; 14
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	0d 89       	ldd	r16, Y+21	; 0x15
    2098:	1e 89       	ldd	r17, Y+22	; 0x16
    209a:	86 e0       	ldi	r24, 0x06	; 6
    209c:	8c 83       	std	Y+4, r24	; 0x04
    209e:	1a 83       	std	Y+2, r17	; 0x02
    20a0:	09 83       	std	Y+1, r16	; 0x01
    20a2:	8f ef       	ldi	r24, 0xFF	; 255
    20a4:	9f e7       	ldi	r25, 0x7F	; 127
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	ae 01       	movw	r20, r28
    20ac:	47 5e       	subi	r20, 0xE7	; 231
    20ae:	5f 4f       	sbci	r21, 0xFF	; 255
    20b0:	6f 89       	ldd	r22, Y+23	; 0x17
    20b2:	78 8d       	ldd	r23, Y+24	; 0x18
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	10 d0       	rcall	.+32     	; 0x20da <vfprintf>
    20ba:	ef 81       	ldd	r30, Y+7	; 0x07
    20bc:	f8 85       	ldd	r31, Y+8	; 0x08
    20be:	e0 0f       	add	r30, r16
    20c0:	f1 1f       	adc	r31, r17
    20c2:	10 82       	st	Z, r1
    20c4:	2e 96       	adiw	r28, 0x0e	; 14
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	08 95       	ret

000020da <vfprintf>:
    20da:	2f 92       	push	r2
    20dc:	3f 92       	push	r3
    20de:	4f 92       	push	r4
    20e0:	5f 92       	push	r5
    20e2:	6f 92       	push	r6
    20e4:	7f 92       	push	r7
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	2b 97       	sbiw	r28, 0x0b	; 11
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	6c 01       	movw	r12, r24
    2110:	7b 01       	movw	r14, r22
    2112:	8a 01       	movw	r16, r20
    2114:	fc 01       	movw	r30, r24
    2116:	17 82       	std	Z+7, r1	; 0x07
    2118:	16 82       	std	Z+6, r1	; 0x06
    211a:	83 81       	ldd	r24, Z+3	; 0x03
    211c:	81 ff       	sbrs	r24, 1
    211e:	bf c1       	rjmp	.+894    	; 0x249e <vfprintf+0x3c4>
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	3c 01       	movw	r6, r24
    2126:	f6 01       	movw	r30, r12
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	f7 01       	movw	r30, r14
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	7f 01       	movw	r14, r30
    2136:	88 23       	and	r24, r24
    2138:	09 f4       	brne	.+2      	; 0x213c <vfprintf+0x62>
    213a:	ad c1       	rjmp	.+858    	; 0x2496 <vfprintf+0x3bc>
    213c:	85 32       	cpi	r24, 0x25	; 37
    213e:	39 f4       	brne	.+14     	; 0x214e <vfprintf+0x74>
    2140:	93 fd       	sbrc	r25, 3
    2142:	85 91       	lpm	r24, Z+
    2144:	93 ff       	sbrs	r25, 3
    2146:	81 91       	ld	r24, Z+
    2148:	7f 01       	movw	r14, r30
    214a:	85 32       	cpi	r24, 0x25	; 37
    214c:	21 f4       	brne	.+8      	; 0x2156 <vfprintf+0x7c>
    214e:	b6 01       	movw	r22, r12
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	d6 d1       	rcall	.+940    	; 0x2500 <fputc>
    2154:	e8 cf       	rjmp	.-48     	; 0x2126 <vfprintf+0x4c>
    2156:	91 2c       	mov	r9, r1
    2158:	21 2c       	mov	r2, r1
    215a:	31 2c       	mov	r3, r1
    215c:	ff e1       	ldi	r31, 0x1F	; 31
    215e:	f3 15       	cp	r31, r3
    2160:	d8 f0       	brcs	.+54     	; 0x2198 <vfprintf+0xbe>
    2162:	8b 32       	cpi	r24, 0x2B	; 43
    2164:	79 f0       	breq	.+30     	; 0x2184 <vfprintf+0xaa>
    2166:	38 f4       	brcc	.+14     	; 0x2176 <vfprintf+0x9c>
    2168:	80 32       	cpi	r24, 0x20	; 32
    216a:	79 f0       	breq	.+30     	; 0x218a <vfprintf+0xb0>
    216c:	83 32       	cpi	r24, 0x23	; 35
    216e:	a1 f4       	brne	.+40     	; 0x2198 <vfprintf+0xbe>
    2170:	23 2d       	mov	r18, r3
    2172:	20 61       	ori	r18, 0x10	; 16
    2174:	1d c0       	rjmp	.+58     	; 0x21b0 <vfprintf+0xd6>
    2176:	8d 32       	cpi	r24, 0x2D	; 45
    2178:	61 f0       	breq	.+24     	; 0x2192 <vfprintf+0xb8>
    217a:	80 33       	cpi	r24, 0x30	; 48
    217c:	69 f4       	brne	.+26     	; 0x2198 <vfprintf+0xbe>
    217e:	23 2d       	mov	r18, r3
    2180:	21 60       	ori	r18, 0x01	; 1
    2182:	16 c0       	rjmp	.+44     	; 0x21b0 <vfprintf+0xd6>
    2184:	83 2d       	mov	r24, r3
    2186:	82 60       	ori	r24, 0x02	; 2
    2188:	38 2e       	mov	r3, r24
    218a:	e3 2d       	mov	r30, r3
    218c:	e4 60       	ori	r30, 0x04	; 4
    218e:	3e 2e       	mov	r3, r30
    2190:	2a c0       	rjmp	.+84     	; 0x21e6 <vfprintf+0x10c>
    2192:	f3 2d       	mov	r31, r3
    2194:	f8 60       	ori	r31, 0x08	; 8
    2196:	1d c0       	rjmp	.+58     	; 0x21d2 <vfprintf+0xf8>
    2198:	37 fc       	sbrc	r3, 7
    219a:	2d c0       	rjmp	.+90     	; 0x21f6 <vfprintf+0x11c>
    219c:	20 ed       	ldi	r18, 0xD0	; 208
    219e:	28 0f       	add	r18, r24
    21a0:	2a 30       	cpi	r18, 0x0A	; 10
    21a2:	40 f0       	brcs	.+16     	; 0x21b4 <vfprintf+0xda>
    21a4:	8e 32       	cpi	r24, 0x2E	; 46
    21a6:	b9 f4       	brne	.+46     	; 0x21d6 <vfprintf+0xfc>
    21a8:	36 fc       	sbrc	r3, 6
    21aa:	75 c1       	rjmp	.+746    	; 0x2496 <vfprintf+0x3bc>
    21ac:	23 2d       	mov	r18, r3
    21ae:	20 64       	ori	r18, 0x40	; 64
    21b0:	32 2e       	mov	r3, r18
    21b2:	19 c0       	rjmp	.+50     	; 0x21e6 <vfprintf+0x10c>
    21b4:	36 fe       	sbrs	r3, 6
    21b6:	06 c0       	rjmp	.+12     	; 0x21c4 <vfprintf+0xea>
    21b8:	8a e0       	ldi	r24, 0x0A	; 10
    21ba:	98 9e       	mul	r9, r24
    21bc:	20 0d       	add	r18, r0
    21be:	11 24       	eor	r1, r1
    21c0:	92 2e       	mov	r9, r18
    21c2:	11 c0       	rjmp	.+34     	; 0x21e6 <vfprintf+0x10c>
    21c4:	ea e0       	ldi	r30, 0x0A	; 10
    21c6:	2e 9e       	mul	r2, r30
    21c8:	20 0d       	add	r18, r0
    21ca:	11 24       	eor	r1, r1
    21cc:	22 2e       	mov	r2, r18
    21ce:	f3 2d       	mov	r31, r3
    21d0:	f0 62       	ori	r31, 0x20	; 32
    21d2:	3f 2e       	mov	r3, r31
    21d4:	08 c0       	rjmp	.+16     	; 0x21e6 <vfprintf+0x10c>
    21d6:	8c 36       	cpi	r24, 0x6C	; 108
    21d8:	21 f4       	brne	.+8      	; 0x21e2 <vfprintf+0x108>
    21da:	83 2d       	mov	r24, r3
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	38 2e       	mov	r3, r24
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <vfprintf+0x10c>
    21e2:	88 36       	cpi	r24, 0x68	; 104
    21e4:	41 f4       	brne	.+16     	; 0x21f6 <vfprintf+0x11c>
    21e6:	f7 01       	movw	r30, r14
    21e8:	93 fd       	sbrc	r25, 3
    21ea:	85 91       	lpm	r24, Z+
    21ec:	93 ff       	sbrs	r25, 3
    21ee:	81 91       	ld	r24, Z+
    21f0:	7f 01       	movw	r14, r30
    21f2:	81 11       	cpse	r24, r1
    21f4:	b3 cf       	rjmp	.-154    	; 0x215c <vfprintf+0x82>
    21f6:	98 2f       	mov	r25, r24
    21f8:	9f 7d       	andi	r25, 0xDF	; 223
    21fa:	95 54       	subi	r25, 0x45	; 69
    21fc:	93 30       	cpi	r25, 0x03	; 3
    21fe:	28 f4       	brcc	.+10     	; 0x220a <vfprintf+0x130>
    2200:	0c 5f       	subi	r16, 0xFC	; 252
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	9f e3       	ldi	r25, 0x3F	; 63
    2206:	99 83       	std	Y+1, r25	; 0x01
    2208:	0d c0       	rjmp	.+26     	; 0x2224 <vfprintf+0x14a>
    220a:	83 36       	cpi	r24, 0x63	; 99
    220c:	31 f0       	breq	.+12     	; 0x221a <vfprintf+0x140>
    220e:	83 37       	cpi	r24, 0x73	; 115
    2210:	71 f0       	breq	.+28     	; 0x222e <vfprintf+0x154>
    2212:	83 35       	cpi	r24, 0x53	; 83
    2214:	09 f0       	breq	.+2      	; 0x2218 <vfprintf+0x13e>
    2216:	55 c0       	rjmp	.+170    	; 0x22c2 <vfprintf+0x1e8>
    2218:	20 c0       	rjmp	.+64     	; 0x225a <vfprintf+0x180>
    221a:	f8 01       	movw	r30, r16
    221c:	80 81       	ld	r24, Z
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	0e 5f       	subi	r16, 0xFE	; 254
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	88 24       	eor	r8, r8
    2226:	83 94       	inc	r8
    2228:	91 2c       	mov	r9, r1
    222a:	53 01       	movw	r10, r6
    222c:	12 c0       	rjmp	.+36     	; 0x2252 <vfprintf+0x178>
    222e:	28 01       	movw	r4, r16
    2230:	f2 e0       	ldi	r31, 0x02	; 2
    2232:	4f 0e       	add	r4, r31
    2234:	51 1c       	adc	r5, r1
    2236:	f8 01       	movw	r30, r16
    2238:	a0 80       	ld	r10, Z
    223a:	b1 80       	ldd	r11, Z+1	; 0x01
    223c:	36 fe       	sbrs	r3, 6
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <vfprintf+0x16c>
    2240:	69 2d       	mov	r22, r9
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	02 c0       	rjmp	.+4      	; 0x224a <vfprintf+0x170>
    2246:	6f ef       	ldi	r22, 0xFF	; 255
    2248:	7f ef       	ldi	r23, 0xFF	; 255
    224a:	c5 01       	movw	r24, r10
    224c:	4e d1       	rcall	.+668    	; 0x24ea <strnlen>
    224e:	4c 01       	movw	r8, r24
    2250:	82 01       	movw	r16, r4
    2252:	f3 2d       	mov	r31, r3
    2254:	ff 77       	andi	r31, 0x7F	; 127
    2256:	3f 2e       	mov	r3, r31
    2258:	15 c0       	rjmp	.+42     	; 0x2284 <vfprintf+0x1aa>
    225a:	28 01       	movw	r4, r16
    225c:	22 e0       	ldi	r18, 0x02	; 2
    225e:	42 0e       	add	r4, r18
    2260:	51 1c       	adc	r5, r1
    2262:	f8 01       	movw	r30, r16
    2264:	a0 80       	ld	r10, Z
    2266:	b1 80       	ldd	r11, Z+1	; 0x01
    2268:	36 fe       	sbrs	r3, 6
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <vfprintf+0x198>
    226c:	69 2d       	mov	r22, r9
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <vfprintf+0x19c>
    2272:	6f ef       	ldi	r22, 0xFF	; 255
    2274:	7f ef       	ldi	r23, 0xFF	; 255
    2276:	c5 01       	movw	r24, r10
    2278:	2d d1       	rcall	.+602    	; 0x24d4 <strnlen_P>
    227a:	4c 01       	movw	r8, r24
    227c:	f3 2d       	mov	r31, r3
    227e:	f0 68       	ori	r31, 0x80	; 128
    2280:	3f 2e       	mov	r3, r31
    2282:	82 01       	movw	r16, r4
    2284:	33 fc       	sbrc	r3, 3
    2286:	19 c0       	rjmp	.+50     	; 0x22ba <vfprintf+0x1e0>
    2288:	82 2d       	mov	r24, r2
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	88 16       	cp	r8, r24
    228e:	99 06       	cpc	r9, r25
    2290:	a0 f4       	brcc	.+40     	; 0x22ba <vfprintf+0x1e0>
    2292:	b6 01       	movw	r22, r12
    2294:	80 e2       	ldi	r24, 0x20	; 32
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	33 d1       	rcall	.+614    	; 0x2500 <fputc>
    229a:	2a 94       	dec	r2
    229c:	f5 cf       	rjmp	.-22     	; 0x2288 <vfprintf+0x1ae>
    229e:	f5 01       	movw	r30, r10
    22a0:	37 fc       	sbrc	r3, 7
    22a2:	85 91       	lpm	r24, Z+
    22a4:	37 fe       	sbrs	r3, 7
    22a6:	81 91       	ld	r24, Z+
    22a8:	5f 01       	movw	r10, r30
    22aa:	b6 01       	movw	r22, r12
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	28 d1       	rcall	.+592    	; 0x2500 <fputc>
    22b0:	21 10       	cpse	r2, r1
    22b2:	2a 94       	dec	r2
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	82 1a       	sub	r8, r18
    22b8:	91 08       	sbc	r9, r1
    22ba:	81 14       	cp	r8, r1
    22bc:	91 04       	cpc	r9, r1
    22be:	79 f7       	brne	.-34     	; 0x229e <vfprintf+0x1c4>
    22c0:	e1 c0       	rjmp	.+450    	; 0x2484 <vfprintf+0x3aa>
    22c2:	84 36       	cpi	r24, 0x64	; 100
    22c4:	11 f0       	breq	.+4      	; 0x22ca <vfprintf+0x1f0>
    22c6:	89 36       	cpi	r24, 0x69	; 105
    22c8:	39 f5       	brne	.+78     	; 0x2318 <vfprintf+0x23e>
    22ca:	f8 01       	movw	r30, r16
    22cc:	37 fe       	sbrs	r3, 7
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <vfprintf+0x204>
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	0c 5f       	subi	r16, 0xFC	; 252
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <vfprintf+0x214>
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	07 2e       	mov	r0, r23
    22e4:	00 0c       	add	r0, r0
    22e6:	88 0b       	sbc	r24, r24
    22e8:	99 0b       	sbc	r25, r25
    22ea:	0e 5f       	subi	r16, 0xFE	; 254
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	f3 2d       	mov	r31, r3
    22f0:	ff 76       	andi	r31, 0x6F	; 111
    22f2:	3f 2e       	mov	r3, r31
    22f4:	97 ff       	sbrs	r25, 7
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <vfprintf+0x230>
    22f8:	90 95       	com	r25
    22fa:	80 95       	com	r24
    22fc:	70 95       	com	r23
    22fe:	61 95       	neg	r22
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	8f 4f       	sbci	r24, 0xFF	; 255
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	f0 68       	ori	r31, 0x80	; 128
    2308:	3f 2e       	mov	r3, r31
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	a3 01       	movw	r20, r6
    2310:	33 d1       	rcall	.+614    	; 0x2578 <__ultoa_invert>
    2312:	88 2e       	mov	r8, r24
    2314:	86 18       	sub	r8, r6
    2316:	44 c0       	rjmp	.+136    	; 0x23a0 <vfprintf+0x2c6>
    2318:	85 37       	cpi	r24, 0x75	; 117
    231a:	31 f4       	brne	.+12     	; 0x2328 <vfprintf+0x24e>
    231c:	23 2d       	mov	r18, r3
    231e:	2f 7e       	andi	r18, 0xEF	; 239
    2320:	b2 2e       	mov	r11, r18
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	25 c0       	rjmp	.+74     	; 0x2372 <vfprintf+0x298>
    2328:	93 2d       	mov	r25, r3
    232a:	99 7f       	andi	r25, 0xF9	; 249
    232c:	b9 2e       	mov	r11, r25
    232e:	8f 36       	cpi	r24, 0x6F	; 111
    2330:	c1 f0       	breq	.+48     	; 0x2362 <vfprintf+0x288>
    2332:	18 f4       	brcc	.+6      	; 0x233a <vfprintf+0x260>
    2334:	88 35       	cpi	r24, 0x58	; 88
    2336:	79 f0       	breq	.+30     	; 0x2356 <vfprintf+0x27c>
    2338:	ae c0       	rjmp	.+348    	; 0x2496 <vfprintf+0x3bc>
    233a:	80 37       	cpi	r24, 0x70	; 112
    233c:	19 f0       	breq	.+6      	; 0x2344 <vfprintf+0x26a>
    233e:	88 37       	cpi	r24, 0x78	; 120
    2340:	21 f0       	breq	.+8      	; 0x234a <vfprintf+0x270>
    2342:	a9 c0       	rjmp	.+338    	; 0x2496 <vfprintf+0x3bc>
    2344:	e9 2f       	mov	r30, r25
    2346:	e0 61       	ori	r30, 0x10	; 16
    2348:	be 2e       	mov	r11, r30
    234a:	b4 fe       	sbrs	r11, 4
    234c:	0d c0       	rjmp	.+26     	; 0x2368 <vfprintf+0x28e>
    234e:	fb 2d       	mov	r31, r11
    2350:	f4 60       	ori	r31, 0x04	; 4
    2352:	bf 2e       	mov	r11, r31
    2354:	09 c0       	rjmp	.+18     	; 0x2368 <vfprintf+0x28e>
    2356:	34 fe       	sbrs	r3, 4
    2358:	0a c0       	rjmp	.+20     	; 0x236e <vfprintf+0x294>
    235a:	29 2f       	mov	r18, r25
    235c:	26 60       	ori	r18, 0x06	; 6
    235e:	b2 2e       	mov	r11, r18
    2360:	06 c0       	rjmp	.+12     	; 0x236e <vfprintf+0x294>
    2362:	28 e0       	ldi	r18, 0x08	; 8
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <vfprintf+0x298>
    2368:	20 e1       	ldi	r18, 0x10	; 16
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x298>
    236e:	20 e1       	ldi	r18, 0x10	; 16
    2370:	32 e0       	ldi	r19, 0x02	; 2
    2372:	f8 01       	movw	r30, r16
    2374:	b7 fe       	sbrs	r11, 7
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <vfprintf+0x2ac>
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	0c 5f       	subi	r16, 0xFC	; 252
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	06 c0       	rjmp	.+12     	; 0x2392 <vfprintf+0x2b8>
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	a3 01       	movw	r20, r6
    2394:	f1 d0       	rcall	.+482    	; 0x2578 <__ultoa_invert>
    2396:	88 2e       	mov	r8, r24
    2398:	86 18       	sub	r8, r6
    239a:	fb 2d       	mov	r31, r11
    239c:	ff 77       	andi	r31, 0x7F	; 127
    239e:	3f 2e       	mov	r3, r31
    23a0:	36 fe       	sbrs	r3, 6
    23a2:	0d c0       	rjmp	.+26     	; 0x23be <vfprintf+0x2e4>
    23a4:	23 2d       	mov	r18, r3
    23a6:	2e 7f       	andi	r18, 0xFE	; 254
    23a8:	a2 2e       	mov	r10, r18
    23aa:	89 14       	cp	r8, r9
    23ac:	58 f4       	brcc	.+22     	; 0x23c4 <vfprintf+0x2ea>
    23ae:	34 fe       	sbrs	r3, 4
    23b0:	0b c0       	rjmp	.+22     	; 0x23c8 <vfprintf+0x2ee>
    23b2:	32 fc       	sbrc	r3, 2
    23b4:	09 c0       	rjmp	.+18     	; 0x23c8 <vfprintf+0x2ee>
    23b6:	83 2d       	mov	r24, r3
    23b8:	8e 7e       	andi	r24, 0xEE	; 238
    23ba:	a8 2e       	mov	r10, r24
    23bc:	05 c0       	rjmp	.+10     	; 0x23c8 <vfprintf+0x2ee>
    23be:	b8 2c       	mov	r11, r8
    23c0:	a3 2c       	mov	r10, r3
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <vfprintf+0x2f0>
    23c4:	b8 2c       	mov	r11, r8
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <vfprintf+0x2f0>
    23c8:	b9 2c       	mov	r11, r9
    23ca:	a4 fe       	sbrs	r10, 4
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <vfprintf+0x312>
    23ce:	fe 01       	movw	r30, r28
    23d0:	e8 0d       	add	r30, r8
    23d2:	f1 1d       	adc	r31, r1
    23d4:	80 81       	ld	r24, Z
    23d6:	80 33       	cpi	r24, 0x30	; 48
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <vfprintf+0x308>
    23da:	9a 2d       	mov	r25, r10
    23dc:	99 7e       	andi	r25, 0xE9	; 233
    23de:	a9 2e       	mov	r10, r25
    23e0:	09 c0       	rjmp	.+18     	; 0x23f4 <vfprintf+0x31a>
    23e2:	a2 fe       	sbrs	r10, 2
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <vfprintf+0x318>
    23e6:	b3 94       	inc	r11
    23e8:	b3 94       	inc	r11
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <vfprintf+0x31a>
    23ec:	8a 2d       	mov	r24, r10
    23ee:	86 78       	andi	r24, 0x86	; 134
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <vfprintf+0x31a>
    23f2:	b3 94       	inc	r11
    23f4:	a3 fc       	sbrc	r10, 3
    23f6:	10 c0       	rjmp	.+32     	; 0x2418 <vfprintf+0x33e>
    23f8:	a0 fe       	sbrs	r10, 0
    23fa:	06 c0       	rjmp	.+12     	; 0x2408 <vfprintf+0x32e>
    23fc:	b2 14       	cp	r11, r2
    23fe:	80 f4       	brcc	.+32     	; 0x2420 <vfprintf+0x346>
    2400:	28 0c       	add	r2, r8
    2402:	92 2c       	mov	r9, r2
    2404:	9b 18       	sub	r9, r11
    2406:	0d c0       	rjmp	.+26     	; 0x2422 <vfprintf+0x348>
    2408:	b2 14       	cp	r11, r2
    240a:	58 f4       	brcc	.+22     	; 0x2422 <vfprintf+0x348>
    240c:	b6 01       	movw	r22, r12
    240e:	80 e2       	ldi	r24, 0x20	; 32
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	76 d0       	rcall	.+236    	; 0x2500 <fputc>
    2414:	b3 94       	inc	r11
    2416:	f8 cf       	rjmp	.-16     	; 0x2408 <vfprintf+0x32e>
    2418:	b2 14       	cp	r11, r2
    241a:	18 f4       	brcc	.+6      	; 0x2422 <vfprintf+0x348>
    241c:	2b 18       	sub	r2, r11
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0x34a>
    2420:	98 2c       	mov	r9, r8
    2422:	21 2c       	mov	r2, r1
    2424:	a4 fe       	sbrs	r10, 4
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <vfprintf+0x36c>
    2428:	b6 01       	movw	r22, r12
    242a:	80 e3       	ldi	r24, 0x30	; 48
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	68 d0       	rcall	.+208    	; 0x2500 <fputc>
    2430:	a2 fe       	sbrs	r10, 2
    2432:	16 c0       	rjmp	.+44     	; 0x2460 <vfprintf+0x386>
    2434:	a1 fc       	sbrc	r10, 1
    2436:	03 c0       	rjmp	.+6      	; 0x243e <vfprintf+0x364>
    2438:	88 e7       	ldi	r24, 0x78	; 120
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <vfprintf+0x368>
    243e:	88 e5       	ldi	r24, 0x58	; 88
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	b6 01       	movw	r22, r12
    2444:	0c c0       	rjmp	.+24     	; 0x245e <vfprintf+0x384>
    2446:	8a 2d       	mov	r24, r10
    2448:	86 78       	andi	r24, 0x86	; 134
    244a:	51 f0       	breq	.+20     	; 0x2460 <vfprintf+0x386>
    244c:	a1 fe       	sbrs	r10, 1
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <vfprintf+0x37a>
    2450:	8b e2       	ldi	r24, 0x2B	; 43
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <vfprintf+0x37c>
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	a7 fc       	sbrc	r10, 7
    2458:	8d e2       	ldi	r24, 0x2D	; 45
    245a:	b6 01       	movw	r22, r12
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	50 d0       	rcall	.+160    	; 0x2500 <fputc>
    2460:	89 14       	cp	r8, r9
    2462:	30 f4       	brcc	.+12     	; 0x2470 <vfprintf+0x396>
    2464:	b6 01       	movw	r22, r12
    2466:	80 e3       	ldi	r24, 0x30	; 48
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	4a d0       	rcall	.+148    	; 0x2500 <fputc>
    246c:	9a 94       	dec	r9
    246e:	f8 cf       	rjmp	.-16     	; 0x2460 <vfprintf+0x386>
    2470:	8a 94       	dec	r8
    2472:	f3 01       	movw	r30, r6
    2474:	e8 0d       	add	r30, r8
    2476:	f1 1d       	adc	r31, r1
    2478:	80 81       	ld	r24, Z
    247a:	b6 01       	movw	r22, r12
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	40 d0       	rcall	.+128    	; 0x2500 <fputc>
    2480:	81 10       	cpse	r8, r1
    2482:	f6 cf       	rjmp	.-20     	; 0x2470 <vfprintf+0x396>
    2484:	22 20       	and	r2, r2
    2486:	09 f4       	brne	.+2      	; 0x248a <vfprintf+0x3b0>
    2488:	4e ce       	rjmp	.-868    	; 0x2126 <vfprintf+0x4c>
    248a:	b6 01       	movw	r22, r12
    248c:	80 e2       	ldi	r24, 0x20	; 32
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	37 d0       	rcall	.+110    	; 0x2500 <fputc>
    2492:	2a 94       	dec	r2
    2494:	f7 cf       	rjmp	.-18     	; 0x2484 <vfprintf+0x3aa>
    2496:	f6 01       	movw	r30, r12
    2498:	86 81       	ldd	r24, Z+6	; 0x06
    249a:	97 81       	ldd	r25, Z+7	; 0x07
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <vfprintf+0x3c8>
    249e:	8f ef       	ldi	r24, 0xFF	; 255
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	2b 96       	adiw	r28, 0x0b	; 11
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	9f 90       	pop	r9
    24c4:	8f 90       	pop	r8
    24c6:	7f 90       	pop	r7
    24c8:	6f 90       	pop	r6
    24ca:	5f 90       	pop	r5
    24cc:	4f 90       	pop	r4
    24ce:	3f 90       	pop	r3
    24d0:	2f 90       	pop	r2
    24d2:	08 95       	ret

000024d4 <strnlen_P>:
    24d4:	fc 01       	movw	r30, r24
    24d6:	05 90       	lpm	r0, Z+
    24d8:	61 50       	subi	r22, 0x01	; 1
    24da:	70 40       	sbci	r23, 0x00	; 0
    24dc:	01 10       	cpse	r0, r1
    24de:	d8 f7       	brcc	.-10     	; 0x24d6 <strnlen_P+0x2>
    24e0:	80 95       	com	r24
    24e2:	90 95       	com	r25
    24e4:	8e 0f       	add	r24, r30
    24e6:	9f 1f       	adc	r25, r31
    24e8:	08 95       	ret

000024ea <strnlen>:
    24ea:	fc 01       	movw	r30, r24
    24ec:	61 50       	subi	r22, 0x01	; 1
    24ee:	70 40       	sbci	r23, 0x00	; 0
    24f0:	01 90       	ld	r0, Z+
    24f2:	01 10       	cpse	r0, r1
    24f4:	d8 f7       	brcc	.-10     	; 0x24ec <strnlen+0x2>
    24f6:	80 95       	com	r24
    24f8:	90 95       	com	r25
    24fa:	8e 0f       	add	r24, r30
    24fc:	9f 1f       	adc	r25, r31
    24fe:	08 95       	ret

00002500 <fputc>:
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	fb 01       	movw	r30, r22
    250a:	23 81       	ldd	r18, Z+3	; 0x03
    250c:	21 fd       	sbrc	r18, 1
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <fputc+0x16>
    2510:	8f ef       	ldi	r24, 0xFF	; 255
    2512:	9f ef       	ldi	r25, 0xFF	; 255
    2514:	2c c0       	rjmp	.+88     	; 0x256e <fputc+0x6e>
    2516:	22 ff       	sbrs	r18, 2
    2518:	16 c0       	rjmp	.+44     	; 0x2546 <fputc+0x46>
    251a:	46 81       	ldd	r20, Z+6	; 0x06
    251c:	57 81       	ldd	r21, Z+7	; 0x07
    251e:	24 81       	ldd	r18, Z+4	; 0x04
    2520:	35 81       	ldd	r19, Z+5	; 0x05
    2522:	42 17       	cp	r20, r18
    2524:	53 07       	cpc	r21, r19
    2526:	44 f4       	brge	.+16     	; 0x2538 <fputc+0x38>
    2528:	a0 81       	ld	r26, Z
    252a:	b1 81       	ldd	r27, Z+1	; 0x01
    252c:	9d 01       	movw	r18, r26
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	31 83       	std	Z+1, r19	; 0x01
    2534:	20 83       	st	Z, r18
    2536:	8c 93       	st	X, r24
    2538:	26 81       	ldd	r18, Z+6	; 0x06
    253a:	37 81       	ldd	r19, Z+7	; 0x07
    253c:	2f 5f       	subi	r18, 0xFF	; 255
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	37 83       	std	Z+7, r19	; 0x07
    2542:	26 83       	std	Z+6, r18	; 0x06
    2544:	14 c0       	rjmp	.+40     	; 0x256e <fputc+0x6e>
    2546:	8b 01       	movw	r16, r22
    2548:	ec 01       	movw	r28, r24
    254a:	fb 01       	movw	r30, r22
    254c:	00 84       	ldd	r0, Z+8	; 0x08
    254e:	f1 85       	ldd	r31, Z+9	; 0x09
    2550:	e0 2d       	mov	r30, r0
    2552:	09 95       	icall
    2554:	89 2b       	or	r24, r25
    2556:	e1 f6       	brne	.-72     	; 0x2510 <fputc+0x10>
    2558:	d8 01       	movw	r26, r16
    255a:	16 96       	adiw	r26, 0x06	; 6
    255c:	8d 91       	ld	r24, X+
    255e:	9c 91       	ld	r25, X
    2560:	17 97       	sbiw	r26, 0x07	; 7
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	17 96       	adiw	r26, 0x07	; 7
    2566:	9c 93       	st	X, r25
    2568:	8e 93       	st	-X, r24
    256a:	16 97       	sbiw	r26, 0x06	; 6
    256c:	ce 01       	movw	r24, r28
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	08 95       	ret

00002578 <__ultoa_invert>:
    2578:	fa 01       	movw	r30, r20
    257a:	aa 27       	eor	r26, r26
    257c:	28 30       	cpi	r18, 0x08	; 8
    257e:	51 f1       	breq	.+84     	; 0x25d4 <__ultoa_invert+0x5c>
    2580:	20 31       	cpi	r18, 0x10	; 16
    2582:	81 f1       	breq	.+96     	; 0x25e4 <__ultoa_invert+0x6c>
    2584:	e8 94       	clt
    2586:	6f 93       	push	r22
    2588:	6e 7f       	andi	r22, 0xFE	; 254
    258a:	6e 5f       	subi	r22, 0xFE	; 254
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	8f 4f       	sbci	r24, 0xFF	; 255
    2590:	9f 4f       	sbci	r25, 0xFF	; 255
    2592:	af 4f       	sbci	r26, 0xFF	; 255
    2594:	b1 e0       	ldi	r27, 0x01	; 1
    2596:	3e d0       	rcall	.+124    	; 0x2614 <__ultoa_invert+0x9c>
    2598:	b4 e0       	ldi	r27, 0x04	; 4
    259a:	3c d0       	rcall	.+120    	; 0x2614 <__ultoa_invert+0x9c>
    259c:	67 0f       	add	r22, r23
    259e:	78 1f       	adc	r23, r24
    25a0:	89 1f       	adc	r24, r25
    25a2:	9a 1f       	adc	r25, r26
    25a4:	a1 1d       	adc	r26, r1
    25a6:	68 0f       	add	r22, r24
    25a8:	79 1f       	adc	r23, r25
    25aa:	8a 1f       	adc	r24, r26
    25ac:	91 1d       	adc	r25, r1
    25ae:	a1 1d       	adc	r26, r1
    25b0:	6a 0f       	add	r22, r26
    25b2:	71 1d       	adc	r23, r1
    25b4:	81 1d       	adc	r24, r1
    25b6:	91 1d       	adc	r25, r1
    25b8:	a1 1d       	adc	r26, r1
    25ba:	20 d0       	rcall	.+64     	; 0x25fc <__ultoa_invert+0x84>
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <__ultoa_invert+0x48>
    25be:	68 94       	set
    25c0:	3f 91       	pop	r19
    25c2:	2a e0       	ldi	r18, 0x0A	; 10
    25c4:	26 9f       	mul	r18, r22
    25c6:	11 24       	eor	r1, r1
    25c8:	30 19       	sub	r19, r0
    25ca:	30 5d       	subi	r19, 0xD0	; 208
    25cc:	31 93       	st	Z+, r19
    25ce:	de f6       	brtc	.-74     	; 0x2586 <__ultoa_invert+0xe>
    25d0:	cf 01       	movw	r24, r30
    25d2:	08 95       	ret
    25d4:	46 2f       	mov	r20, r22
    25d6:	47 70       	andi	r20, 0x07	; 7
    25d8:	40 5d       	subi	r20, 0xD0	; 208
    25da:	41 93       	st	Z+, r20
    25dc:	b3 e0       	ldi	r27, 0x03	; 3
    25de:	0f d0       	rcall	.+30     	; 0x25fe <__ultoa_invert+0x86>
    25e0:	c9 f7       	brne	.-14     	; 0x25d4 <__ultoa_invert+0x5c>
    25e2:	f6 cf       	rjmp	.-20     	; 0x25d0 <__ultoa_invert+0x58>
    25e4:	46 2f       	mov	r20, r22
    25e6:	4f 70       	andi	r20, 0x0F	; 15
    25e8:	40 5d       	subi	r20, 0xD0	; 208
    25ea:	4a 33       	cpi	r20, 0x3A	; 58
    25ec:	18 f0       	brcs	.+6      	; 0x25f4 <__ultoa_invert+0x7c>
    25ee:	49 5d       	subi	r20, 0xD9	; 217
    25f0:	31 fd       	sbrc	r19, 1
    25f2:	40 52       	subi	r20, 0x20	; 32
    25f4:	41 93       	st	Z+, r20
    25f6:	02 d0       	rcall	.+4      	; 0x25fc <__ultoa_invert+0x84>
    25f8:	a9 f7       	brne	.-22     	; 0x25e4 <__ultoa_invert+0x6c>
    25fa:	ea cf       	rjmp	.-44     	; 0x25d0 <__ultoa_invert+0x58>
    25fc:	b4 e0       	ldi	r27, 0x04	; 4
    25fe:	a6 95       	lsr	r26
    2600:	97 95       	ror	r25
    2602:	87 95       	ror	r24
    2604:	77 95       	ror	r23
    2606:	67 95       	ror	r22
    2608:	ba 95       	dec	r27
    260a:	c9 f7       	brne	.-14     	; 0x25fe <__ultoa_invert+0x86>
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	61 05       	cpc	r22, r1
    2610:	71 05       	cpc	r23, r1
    2612:	08 95       	ret
    2614:	9b 01       	movw	r18, r22
    2616:	ac 01       	movw	r20, r24
    2618:	0a 2e       	mov	r0, r26
    261a:	06 94       	lsr	r0
    261c:	57 95       	ror	r21
    261e:	47 95       	ror	r20
    2620:	37 95       	ror	r19
    2622:	27 95       	ror	r18
    2624:	ba 95       	dec	r27
    2626:	c9 f7       	brne	.-14     	; 0x261a <__ultoa_invert+0xa2>
    2628:	62 0f       	add	r22, r18
    262a:	73 1f       	adc	r23, r19
    262c:	84 1f       	adc	r24, r20
    262e:	95 1f       	adc	r25, r21
    2630:	a0 1d       	adc	r26, r0
    2632:	08 95       	ret

00002634 <_exit>:
    2634:	f8 94       	cli

00002636 <__stop_program>:
    2636:	ff cf       	rjmp	.-2      	; 0x2636 <__stop_program>
