
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000326  00800100  000020a4  00002138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ef  00800426  00800426  0000245e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000420c  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130d  00000000  00000000  000069b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f9c  00000000  00000000  00007cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  00009c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b93  00000000  00000000  0000a524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a41  00000000  00000000  0000b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000daf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c4       	rjmp	.+2528   	; 0xa1e <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ea       	ldi	r30, 0xA4	; 164
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 31       	cpi	r26, 0x15	; 21
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ff d4       	rcall	.+2558   	; 0xac2 <main>
      c4:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_18>:
	TICK.tick_1ms++;
	buzz_play(); //
}

ISR(USART0_RX_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	uint8_t buff=UDR0;
      f0:	8c b1       	in	r24, 0x0c	; 12
	uart0.buf=buff;
      f2:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <uart0+0x66>
	
	uart1_tx_char(buff);
      f6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <uart1_tx_char>
}
      fa:	ff 91       	pop	r31
      fc:	ef 91       	pop	r30
      fe:	bf 91       	pop	r27
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0b be       	out	0x3b, r0	; 59
     116:	0f 90       	pop	r0
     118:	0f be       	out	0x3f, r0	; 63
     11a:	0f 90       	pop	r0
     11c:	1f 90       	pop	r1
     11e:	18 95       	reti

00000120 <__vector_30>:

//여기에 들어가있는 코드는 완전 뒤죽박죽임. 수정해야할 상황이 생긴다면, 차라리 새로짜는게 더 낫습니다.
ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
     120:	1f 92       	push	r1
     122:	0f 92       	push	r0
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	0f 92       	push	r0
     128:	11 24       	eor	r1, r1
     12a:	0b b6       	in	r0, 0x3b	; 59
     12c:	0f 92       	push	r0
     12e:	1f 93       	push	r17
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	00 d0       	rcall	.+0      	; 0x14e <__vector_30+0x2e>
     14e:	1f 92       	push	r1
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cnt=0;
	//static uint8_t receive_length=0;
	static uint8_t parse_cnt=0;
	static uint8_t data_cnt=0;
	static uint8_t parse_data_flag=0;
	uint8_t buff=UDR1;
     154:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
     158:	1e 33       	cpi	r17, 0x3E	; 62
     15a:	21 f4       	brne	.+8      	; 0x164 <__vector_30+0x44>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <esp8266_send_ready_flag>
     162:	42 c0       	rjmp	.+132    	; 0x1e8 <__vector_30+0xc8>
	
	else if(buff=='O') cnt=1;
     164:	1f 34       	cpi	r17, 0x4F	; 79
     166:	21 f4       	brne	.+8      	; 0x170 <__vector_30+0x50>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <cnt.2422>
     16e:	3c c0       	rjmp	.+120    	; 0x1e8 <__vector_30+0xc8>
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
     170:	1b 34       	cpi	r17, 0x4B	; 75
     172:	51 f4       	brne	.+20     	; 0x188 <__vector_30+0x68>
     174:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <cnt.2422>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <__vector_30+0x5e>
     17c:	75 c0       	rjmp	.+234    	; 0x268 <__vector_30+0x148>
     17e:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <esp8266_return_result_flag>
     182:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2422>
     186:	30 c0       	rjmp	.+96     	; 0x1e8 <__vector_30+0xc8>
	else cnt=0;
     188:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2422>
// 	else if(buff=='}')esp8266_receiving_flag=0;
// 	else if(buff=='{')esp8266_receiving_flag=1;
	
	if(buff=='+')parse_cnt=1;//
     18c:	1b 32       	cpi	r17, 0x2B	; 43
     18e:	21 f4       	brne	.+8      	; 0x198 <__vector_30+0x78>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     196:	64 c0       	rjmp	.+200    	; 0x260 <__vector_30+0x140>
	else if(buff=='I'&&parse_cnt==1)parse_cnt++; //cnt=2
     198:	19 34       	cpi	r17, 0x49	; 73
     19a:	41 f4       	brne	.+16     	; 0x1ac <__vector_30+0x8c>
     19c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2423>
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	11 f5       	brne	.+68     	; 0x1e8 <__vector_30+0xc8>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     1aa:	5a c0       	rjmp	.+180    	; 0x260 <__vector_30+0x140>
	else if(buff=='P'&&parse_cnt==2)parse_cnt++; //cnt=3
     1ac:	10 35       	cpi	r17, 0x50	; 80
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <__vector_30+0xa0>
     1b0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2423>
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	c1 f4       	brne	.+48     	; 0x1e8 <__vector_30+0xc8>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     1be:	50 c0       	rjmp	.+160    	; 0x260 <__vector_30+0x140>
	else if(buff=='D'&&parse_cnt==3)parse_cnt++; //cnt=4
     1c0:	14 34       	cpi	r17, 0x44	; 68
     1c2:	41 f4       	brne	.+16     	; 0x1d4 <__vector_30+0xb4>
     1c4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2423>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_30+0xc8>
     1cc:	84 e0       	ldi	r24, 0x04	; 4
     1ce:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     1d2:	46 c0       	rjmp	.+140    	; 0x260 <__vector_30+0x140>
	else if(buff==','&&parse_cnt==4)parse_cnt++;	
     1d4:	1c 32       	cpi	r17, 0x2C	; 44
     1d6:	41 f4       	brne	.+16     	; 0x1e8 <__vector_30+0xc8>
     1d8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2423>
     1dc:	84 30       	cpi	r24, 0x04	; 4
     1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_30+0xc8>
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     1e6:	3c c0       	rjmp	.+120    	; 0x260 <__vector_30+0x140>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
     1e8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2423>
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	31 f4       	brne	.+12     	; 0x1fc <__vector_30+0xdc>
	{
		receive_length=buff; parse_cnt++; 
     1f0:	10 93 31 04 	sts	0x0431, r17	; 0x800431 <receive_length>
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2423>
     1fa:	32 c0       	rjmp	.+100    	; 0x260 <__vector_30+0x140>
	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
     1fc:	86 30       	cpi	r24, 0x06	; 6
     1fe:	b1 f4       	brne	.+44     	; 0x22c <__vector_30+0x10c>
     200:	1a 33       	cpi	r17, 0x3A	; 58
     202:	61 f0       	breq	.+24     	; 0x21c <__vector_30+0xfc>
	{
		char buf[3]={receive_length,buff,0};
     204:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <receive_length>
     208:	89 83       	std	Y+1, r24	; 0x01
     20a:	1a 83       	std	Y+2, r17	; 0x02
     20c:	1b 82       	std	Y+3, r1	; 0x03
		receive_length = atoi((char*)buf);
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <atoi>
     216:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <receive_length>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
	{
		receive_length=buff; parse_cnt++; 
	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
	{
     21a:	22 c0       	rjmp	.+68     	; 0x260 <__vector_30+0x140>
		memset(buf,0,sizeof(buf));
	}
	else if(parse_cnt==6) //:가 들어왔을 때 
	{
		//esp8266_receiving_flag=1;
		parse_cnt=0; data_cnt=0; parse_data_flag=1;
     21c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2423>
     220:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <data_cnt.2424>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <parse_data_flag.2425>
     22a:	1a c0       	rjmp	.+52     	; 0x260 <__vector_30+0x140>
	}
	else if(parse_data_flag){ //길이가 4인 데이터
     22c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <parse_data_flag.2425>
     230:	88 23       	and	r24, r24
     232:	a1 f0       	breq	.+40     	; 0x25c <__vector_30+0x13c>
		esp8266_received_data[data_cnt]=buff;
     234:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <data_cnt.2424>
     238:	e8 2f       	mov	r30, r24
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	ed 52       	subi	r30, 0x2D	; 45
     23e:	fb 4f       	sbci	r31, 0xFB	; 251
     240:	10 83       	st	Z, r17
		data_cnt++;
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <data_cnt.2424>
		if(data_cnt==receive_length) {esp8266_receiving_flag=1; parse_data_flag=0; }
     248:	90 91 31 04 	lds	r25, 0x0431	; 0x800431 <receive_length>
     24c:	89 13       	cpse	r24, r25
     24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_30+0x140>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <esp8266_receiving_flag>
     256:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <parse_data_flag.2425>
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__vector_30+0x140>
	}
	else parse_cnt=0;
     25c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2423>
	//if(buff=='{')esp8266_receiving_flag=1;
	
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
     260:	81 2f       	mov	r24, r17
     262:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
	
}
     266:	03 c0       	rjmp	.+6      	; 0x26e <__vector_30+0x14e>
	uint8_t buff=UDR1;
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
	
	else if(buff=='O') cnt=1;
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
	else cnt=0;
     268:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2422>
     26c:	bd cf       	rjmp	.-134    	; 0x1e8 <__vector_30+0xc8>
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
	
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	7f 91       	pop	r23
     286:	6f 91       	pop	r22
     288:	5f 91       	pop	r21
     28a:	4f 91       	pop	r20
     28c:	3f 91       	pop	r19
     28e:	2f 91       	pop	r18
     290:	1f 91       	pop	r17
     292:	0f 90       	pop	r0
     294:	0b be       	out	0x3b, r0	; 59
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <rfid_user_uid_buffer_init>:
	

}

void rfid_user_uid_buffer_init(void)
{
     2a0:	89 e3       	ldi	r24, 0x39	; 57
     2a2:	94 e0       	ldi	r25, 0x04	; 4
     2a4:	4b e6       	ldi	r20, 0x6B	; 107
     2a6:	54 e0       	ldi	r21, 0x04	; 4
	for(int i=0; i<MAX_USER_COUNT;i++)
	{
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
     2a8:	25 e0       	ldi	r18, 0x05	; 5
     2aa:	e0 e9       	ldi	r30, 0x90	; 144
     2ac:	f2 e0       	ldi	r31, 0x02	; 2
     2ae:	dc 01       	movw	r26, r24
     2b0:	01 90       	ld	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	2a 95       	dec	r18
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <rfid_user_uid_buffer_init+0x10>
     2b8:	05 96       	adiw	r24, 0x05	; 5

}

void rfid_user_uid_buffer_init(void)
{
	for(int i=0; i<MAX_USER_COUNT;i++)
     2ba:	84 17       	cp	r24, r20
     2bc:	95 07       	cpc	r25, r21
     2be:	a1 f7       	brne	.-24     	; 0x2a8 <rfid_user_uid_buffer_init+0x8>
	{
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
	}
	i2c_lcd_string(2,0,"     OOOOOOOOOO     ");
     2c0:	45 e0       	ldi	r20, 0x05	; 5
     2c2:	51 e0       	ldi	r21, 0x01	; 1
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	d9 d6       	rcall	.+3506   	; 0x107c <i2c_lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	89 e6       	ldi	r24, 0x69	; 105
     2ce:	98 e1       	ldi	r25, 0x18	; 24
     2d0:	21 50       	subi	r18, 0x01	; 1
     2d2:	80 40       	sbci	r24, 0x00	; 0
     2d4:	90 40       	sbci	r25, 0x00	; 0
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <rfid_user_uid_buffer_init+0x30>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <rfid_user_uid_buffer_init+0x3a>
     2da:	00 00       	nop
     2dc:	08 95       	ret

000002de <mfrc_print_serial>:
	_delay_ms(500);
}

void mfrc_print_serial(int _type, unsigned char ch)
{
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	c6 2f       	mov	r28, r22
	switch(_type)
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	91 05       	cpc	r25, r1
     2f2:	69 f1       	breq	.+90     	; 0x34e <mfrc_print_serial+0x70>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	91 05       	cpc	r25, r1
     2f8:	09 f4       	brne	.+2      	; 0x2fc <mfrc_print_serial+0x1e>
     2fa:	55 c0       	rjmp	.+170    	; 0x3a6 <mfrc_print_serial+0xc8>
     2fc:	89 2b       	or	r24, r25
     2fe:	09 f0       	breq	.+2      	; 0x302 <mfrc_print_serial+0x24>
     300:	7e c0       	rjmp	.+252    	; 0x3fe <mfrc_print_serial+0x120>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     302:	8a e1       	ldi	r24, 0x1A	; 26
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     30a:	0b ee       	ldi	r16, 0xEB	; 235
     30c:	15 e0       	ldi	r17, 0x05	; 5
     30e:	0f 2e       	mov	r0, r31
     310:	fd ef       	ldi	r31, 0xFD	; 253
     312:	ef 2e       	mov	r14, r31
     314:	f5 e0       	ldi	r31, 0x05	; 5
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	0f 2e       	mov	r0, r31
     31c:	ff ee       	ldi	r31, 0xEF	; 239
     31e:	cf 2e       	mov	r12, r31
     320:	f5 e0       	ldi	r31, 0x05	; 5
     322:	df 2e       	mov	r13, r31
     324:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     326:	c1 11       	cpse	r28, r1
     328:	05 c0       	rjmp	.+10     	; 0x334 <mfrc_print_serial+0x56>
     32a:	f8 01       	movw	r30, r16
     32c:	80 81       	ld	r24, Z
     32e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
     332:	04 c0       	rjmp	.+8      	; 0x33c <mfrc_print_serial+0x5e>
			else uart0_tx_char(rfid_uid_ch1[i]);
     334:	f7 01       	movw	r30, r14
     336:	80 81       	ld	r24, Z
     338:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
     33c:	0f 5f       	subi	r16, 0xFF	; 255
     33e:	1f 4f       	sbci	r17, 0xFF	; 255
     340:	ff ef       	ldi	r31, 0xFF	; 255
     342:	ef 1a       	sub	r14, r31
     344:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     346:	0c 15       	cp	r16, r12
     348:	1d 05       	cpc	r17, r13
     34a:	69 f7       	brne	.-38     	; 0x326 <mfrc_print_serial+0x48>
     34c:	58 c0       	rjmp	.+176    	; 0x3fe <mfrc_print_serial+0x120>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     34e:	84 e2       	ldi	r24, 0x24	; 36
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     356:	0b ee       	ldi	r16, 0xEB	; 235
     358:	15 e0       	ldi	r17, 0x05	; 5
     35a:	0f 2e       	mov	r0, r31
     35c:	fd ef       	ldi	r31, 0xFD	; 253
     35e:	ef 2e       	mov	r14, r31
     360:	f5 e0       	ldi	r31, 0x05	; 5
     362:	ff 2e       	mov	r15, r31
     364:	f0 2d       	mov	r31, r0
     366:	0f 2e       	mov	r0, r31
     368:	ff ee       	ldi	r31, 0xEF	; 239
     36a:	cf 2e       	mov	r12, r31
     36c:	f5 e0       	ldi	r31, 0x05	; 5
     36e:	df 2e       	mov	r13, r31
     370:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     372:	c1 11       	cpse	r28, r1
     374:	08 c0       	rjmp	.+16     	; 0x386 <mfrc_print_serial+0xa8>
     376:	f8 01       	movw	r30, r16
     378:	80 81       	ld	r24, Z
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 0e 0c 	call	0x181c	; 0x181c <IntToString>
     380:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     384:	07 c0       	rjmp	.+14     	; 0x394 <mfrc_print_serial+0xb6>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     386:	f7 01       	movw	r30, r14
     388:	80 81       	ld	r24, Z
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 0e 0c 	call	0x181c	; 0x181c <IntToString>
     390:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     394:	0f 5f       	subi	r16, 0xFF	; 255
     396:	1f 4f       	sbci	r17, 0xFF	; 255
     398:	ff ef       	ldi	r31, 0xFF	; 255
     39a:	ef 1a       	sub	r14, r31
     39c:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     39e:	0c 15       	cp	r16, r12
     3a0:	1d 05       	cpc	r17, r13
     3a2:	39 f7       	brne	.-50     	; 0x372 <mfrc_print_serial+0x94>
     3a4:	2c c0       	rjmp	.+88     	; 0x3fe <mfrc_print_serial+0x120>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     3a6:	8c e2       	ldi	r24, 0x2C	; 44
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     3ae:	0b ee       	ldi	r16, 0xEB	; 235
     3b0:	15 e0       	ldi	r17, 0x05	; 5
     3b2:	0f 2e       	mov	r0, r31
     3b4:	fd ef       	ldi	r31, 0xFD	; 253
     3b6:	ef 2e       	mov	r14, r31
     3b8:	f5 e0       	ldi	r31, 0x05	; 5
     3ba:	ff 2e       	mov	r15, r31
     3bc:	f0 2d       	mov	r31, r0
     3be:	0f 2e       	mov	r0, r31
     3c0:	ff ee       	ldi	r31, 0xEF	; 239
     3c2:	cf 2e       	mov	r12, r31
     3c4:	f5 e0       	ldi	r31, 0x05	; 5
     3c6:	df 2e       	mov	r13, r31
     3c8:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     3ca:	c1 11       	cpse	r28, r1
     3cc:	07 c0       	rjmp	.+14     	; 0x3dc <mfrc_print_serial+0xfe>
     3ce:	f8 01       	movw	r30, r16
     3d0:	80 81       	ld	r24, Z
     3d2:	0e 94 3d 0c 	call	0x187a	; 0x187a <HexToString>
     3d6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <mfrc_print_serial+0x10a>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     3dc:	f7 01       	movw	r30, r14
     3de:	80 81       	ld	r24, Z
     3e0:	0e 94 3d 0c 	call	0x187a	; 0x187a <HexToString>
     3e4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
			uart0_tx_char(' ');
     3e8:	80 e2       	ldi	r24, 0x20	; 32
     3ea:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
     3ee:	0f 5f       	subi	r16, 0xFF	; 255
     3f0:	1f 4f       	sbci	r17, 0xFF	; 255
     3f2:	ff ef       	ldi	r31, 0xFF	; 255
     3f4:	ef 1a       	sub	r14, r31
     3f6:	ff 0a       	sbc	r15, r31
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     3f8:	0c 15       	cp	r16, r12
     3fa:	1d 05       	cpc	r17, r13
     3fc:	31 f7       	brne	.-52     	; 0x3ca <mfrc_print_serial+0xec>
		
		break;
		
	}
	
}
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	08 95       	ret

0000040e <mfrc_check_and_data_receive_ch0>:
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
}

char mfrc_check_and_data_receive_ch0(void){ 
     40e:	cf 93       	push	r28
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     410:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <noise_flag.2462>
     414:	81 11       	cpse	r24, r1
     416:	09 c0       	rjmp	.+18     	; 0x42a <mfrc_check_and_data_receive_ch0+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	6b ee       	ldi	r22, 0xEB	; 235
     41c:	75 e0       	ldi	r23, 0x05	; 5
     41e:	82 e5       	ldi	r24, 0x52	; 82
     420:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     424:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2464>
     428:	1d c0       	rjmp	.+58     	; 0x464 <mfrc_check_and_data_receive_ch0+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     42a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <toggle_flag.2463>
     42e:	88 23       	and	r24, r24
     430:	39 f0       	breq	.+14     	; 0x440 <mfrc_check_and_data_receive_ch0+0x32>
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	6b ee       	ldi	r22, 0xEB	; 235
     436:	75 e0       	ldi	r23, 0x05	; 5
     438:	82 e5       	ldi	r24, 0x52	; 82
     43a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     43e:	0c c0       	rjmp	.+24     	; 0x458 <mfrc_check_and_data_receive_ch0+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	6b ee       	ldi	r22, 0xEB	; 235
     444:	75 e0       	ldi	r23, 0x05	; 5
     446:	82 e5       	ldi	r24, 0x52	; 82
     448:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     44c:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2464>
			if(_byte==ERROR) noise_flag=0;
     450:	83 30       	cpi	r24, 0x03	; 3
     452:	11 f4       	brne	.+4      	; 0x458 <mfrc_check_and_data_receive_ch0+0x4a>
     454:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <noise_flag.2462>
		}
			
		toggle_flag^=0x01;
     458:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <toggle_flag.2463>
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	89 27       	eor	r24, r25
     460:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2463>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     464:	c0 91 2a 04 	lds	r28, 0x042A	; 0x80042a <_byte.2464>
     468:	c1 30       	cpi	r28, 0x01	; 1
     46a:	29 f0       	breq	.+10     	; 0x476 <mfrc_check_and_data_receive_ch0+0x68>
	{
		detected_flag_ch0=NON_DETECTED;  
     46c:	88 e5       	ldi	r24, 0x58	; 88
     46e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		return RECEIVE_NONE;
     472:	c0 e0       	ldi	r28, 0x00	; 0
     474:	2c c0       	rjmp	.+88     	; 0x4ce <mfrc_check_and_data_receive_ch0+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     476:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     47a:	88 35       	cpi	r24, 0x58	; 88
     47c:	29 f5       	brne	.+74     	; 0x4c8 <mfrc_check_and_data_receive_ch0+0xba>
	{
		detected_flag_ch0=DETECED;
     47e:	8f e4       	ldi	r24, 0x4F	; 79
     480:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <noise_flag.2462>
		toggle_flag=1;
     48a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2463>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	8b ee       	ldi	r24, 0xEB	; 235
     492:	95 e0       	ldi	r25, 0x05	; 5
     494:	0e 94 15 0b 	call	0x162a	; 0x162a <mfrc522_get_card_serial>
     498:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2464>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	b1 f4       	brne	.+44     	; 0x4cc <mfrc_check_and_data_receive_ch0+0xbe>

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			if(DUMMY_TEST_SERIAL){
				uart0_tx_string("[CHECK UID(CH0)]: ");
     4a0:	84 e3       	ldi	r24, 0x34	; 52
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
				mfrc_print_serial(ASCII_TYPE,CH0);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	17 df       	rcall	.-466    	; 0x2de <mfrc_print_serial>
				mfrc_print_serial(DECIMAL_TYPE,CH0);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	13 df       	rcall	.-474    	; 0x2de <mfrc_print_serial>
				mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0f df       	rcall	.-482    	; 0x2de <mfrc_print_serial>
				uart0_tx_char('\n');
     4c0:	8a e0       	ldi	r24, 0x0A	; 10
     4c2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
			}
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <mfrc_check_and_data_receive_ch0+0xc0>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     4c8:	c0 e0       	ldi	r28, 0x00	; 0
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <mfrc_check_and_data_receive_ch0+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     4cc:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     4ce:	8c 2f       	mov	r24, r28
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     4d4:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     4d6:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noise_flag.2468>
     4da:	81 11       	cpse	r24, r1
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <mfrc_check_and_data_receive_ch1+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	6d ef       	ldi	r22, 0xFD	; 253
     4e2:	75 e0       	ldi	r23, 0x05	; 5
     4e4:	82 e5       	ldi	r24, 0x52	; 82
     4e6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     4ea:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2470>
     4ee:	1d c0       	rjmp	.+58     	; 0x52a <mfrc_check_and_data_receive_ch1+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     4f0:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     4f4:	88 23       	and	r24, r24
     4f6:	39 f0       	breq	.+14     	; 0x506 <mfrc_check_and_data_receive_ch1+0x32>
     4f8:	41 e0       	ldi	r20, 0x01	; 1
     4fa:	6d ef       	ldi	r22, 0xFD	; 253
     4fc:	75 e0       	ldi	r23, 0x05	; 5
     4fe:	82 e5       	ldi	r24, 0x52	; 82
     500:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     504:	0c c0       	rjmp	.+24     	; 0x51e <mfrc_check_and_data_receive_ch1+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	6d ef       	ldi	r22, 0xFD	; 253
     50a:	75 e0       	ldi	r23, 0x05	; 5
     50c:	82 e5       	ldi	r24, 0x52	; 82
     50e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <mfrc522_request>
     512:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2470>
			if(_byte==ERROR) noise_flag=0;
     516:	83 30       	cpi	r24, 0x03	; 3
     518:	11 f4       	brne	.+4      	; 0x51e <mfrc_check_and_data_receive_ch1+0x4a>
     51a:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <noise_flag.2468>
		}
		toggle_flag^=0x01;
     51e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <__data_end>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	89 27       	eor	r24, r25
     526:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     52a:	c0 91 27 04 	lds	r28, 0x0427	; 0x800427 <_byte.2470>
     52e:	c1 30       	cpi	r28, 0x01	; 1
     530:	29 f0       	breq	.+10     	; 0x53c <mfrc_check_and_data_receive_ch1+0x68>
	{
		detected_flag_ch1=NON_DETECTED;  
     532:	88 e5       	ldi	r24, 0x58	; 88
     534:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		return RECEIVE_NONE;
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	2c c0       	rjmp	.+88     	; 0x594 <mfrc_check_and_data_receive_ch1+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     53c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     540:	88 35       	cpi	r24, 0x58	; 88
     542:	29 f5       	brne	.+74     	; 0x58e <mfrc_check_and_data_receive_ch1+0xba>
	{
		detected_flag_ch1=DETECED;
     544:	8f e4       	ldi	r24, 0x4F	; 79
     546:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		noise_flag=1; //얘가 첫 순간임.
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <noise_flag.2468>
		toggle_flag=1;
     550:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	8d ef       	ldi	r24, 0xFD	; 253
     558:	95 e0       	ldi	r25, 0x05	; 5
     55a:	0e 94 15 0b 	call	0x162a	; 0x162a <mfrc522_get_card_serial>
     55e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2470>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	b1 f4       	brne	.+44     	; 0x592 <mfrc_check_and_data_receive_ch1+0xbe>
			if(DUMMY_TEST_SERIAL){
						uart0_tx_string("[CHECK UID(CH1)]: ");
     566:	87 e4       	ldi	r24, 0x47	; 71
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <uart0_tx_string>
						mfrc_print_serial(ASCII_TYPE,CH1);
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	b4 de       	rcall	.-664    	; 0x2de <mfrc_print_serial>
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	b0 de       	rcall	.-672    	; 0x2de <mfrc_print_serial>
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	ac de       	rcall	.-680    	; 0x2de <mfrc_print_serial>
						uart0_tx_char('\n');
     586:	8a e0       	ldi	r24, 0x0A	; 10
     588:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart0_tx_char>
			}
			return RECEIVE_SUCCESS;
     58c:	03 c0       	rjmp	.+6      	; 0x594 <mfrc_check_and_data_receive_ch1+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     58e:	c0 e0       	ldi	r28, 0x00	; 0
     590:	01 c0       	rjmp	.+2      	; 0x594 <mfrc_check_and_data_receive_ch1+0xc0>
						uart0_tx_char('\n');
			}
			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     592:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     594:	8c 2f       	mov	r24, r28
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <esp8266_init>:

//AP 끊는함수하고, TCP끊는거, 다시연결하는거 등등 > 터미널환경에서 가능케 할수도 있어야함
//리셋, 실패시 ssid, passward 묻고, 마찬가지로 TCP연결 실패시 또한 다시 ip, port 묻는다

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port)
{
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	7c 01       	movw	r14, r24
     5ac:	6b 01       	movw	r12, r22
     5ae:	ea 01       	movw	r28, r20
     5b0:	89 01       	movw	r16, r18
	uart1_tx_string("AT+RST\r\n");	 //리셋 신호 이후 추가 데이터가 들어와서, 딜레이로 강제 정지 시켜줘야 함
     5b2:	8a e5       	ldi	r24, 0x5A	; 90
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	81 e1       	ldi	r24, 0x11	; 17
     5be:	9a e7       	ldi	r25, 0x7A	; 122
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <esp8266_init+0x26>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <esp8266_init+0x30>
     5ca:	00 00       	nop
	_delay_ms(2500);
	i2c_lcd_string(2,0,"     OOO_______     ");
     5cc:	43 e6       	ldi	r20, 0x63	; 99
     5ce:	51 e0       	ldi	r21, 0x01	; 1
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	53 d5       	rcall	.+2726   	; 0x107c <i2c_lcd_string>
	
	uart1_tx_string("AT+GMR\r\n");
     5d6:	88 e7       	ldi	r24, 0x78	; 120
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     5de:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     5e2:	88 23       	and	r24, r24
     5e4:	e1 f3       	breq	.-8      	; 0x5de <esp8266_init+0x44>
	esp8266_return_result_flag=0;
     5e6:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWMODE=1\r\n"); // OK sign 말고도 다른 신호도 들어오기 때문에 걸어놓음
     5ea:	81 e8       	ldi	r24, 0x81	; 129
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	87 ea       	ldi	r24, 0xA7	; 167
     5f6:	91 e6       	ldi	r25, 0x61	; 97
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	80 40       	sbci	r24, 0x00	; 0
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <esp8266_init+0x5e>
     600:	00 c0       	rjmp	.+0      	; 0x602 <esp8266_init+0x68>
     602:	00 00       	nop
	_delay_ms(2000);
	esp8266_return_result_flag=0;
     604:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOO______     ");
     608:	4f e8       	ldi	r20, 0x8F	; 143
     60a:	51 e0       	ldi	r21, 0x01	; 1
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	35 d5       	rcall	.+2666   	; 0x107c <i2c_lcd_string>
	
	//
	uart1_tx_string("AT+CWMODE?\r\n");
     612:	84 ea       	ldi	r24, 0xA4	; 164
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     61a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     61e:	88 23       	and	r24, r24
     620:	e1 f3       	breq	.-8      	; 0x61a <esp8266_init+0x80>
	esp8266_return_result_flag=0;
     622:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWLAP\r\n");
     626:	81 eb       	ldi	r24, 0xB1	; 177
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     62e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     632:	88 23       	and	r24, r24
     634:	e1 f3       	breq	.-8      	; 0x62e <esp8266_init+0x94>
	esp8266_return_result_flag=0;
     636:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOO_____     ");
     63a:	4c eb       	ldi	r20, 0xBC	; 188
     63c:	51 e0       	ldi	r21, 0x01	; 1
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	1c d5       	rcall	.+2616   	; 0x107c <i2c_lcd_string>
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
     644:	a6 01       	movw	r20, r12
     646:	b7 01       	movw	r22, r14
     648:	81 ed       	ldi	r24, 0xD1	; 209
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <connect_to_AP>
     650:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     654:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     658:	88 23       	and	r24, r24
     65a:	e1 f3       	breq	.-8      	; 0x654 <esp8266_init+0xba>
	esp8266_return_result_flag=0;
     65c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOO____     ");
     660:	4c ed       	ldi	r20, 0xDC	; 220
     662:	51 e0       	ldi	r21, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	09 d5       	rcall	.+2578   	; 0x107c <i2c_lcd_string>
	//AT+SWQAP  AP 접속 끊기
	uart1_tx_string("AT+CIFSR\r\n");
     66a:	81 ef       	ldi	r24, 0xF1	; 241
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     672:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     676:	88 23       	and	r24, r24
     678:	e1 f3       	breq	.-8      	; 0x672 <esp8266_init+0xd8>
	esp8266_return_result_flag=0;
     67a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOO___     ");
     67e:	4c ef       	ldi	r20, 0xFC	; 252
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	fa d4       	rcall	.+2548   	; 0x107c <i2c_lcd_string>
	
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
     688:	b8 01       	movw	r22, r16
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <TCP_connect>
     690:	0e 94 00 0c 	call	0x1800	; 0x1800 <uart1_tx_string>
	//AT+CIPCLOSE 
	//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     694:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     698:	88 23       	and	r24, r24
     69a:	e1 f3       	breq	.-8      	; 0x694 <esp8266_init+0xfa>
	esp8266_return_result_flag=0;
     69c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOOO__     ");
     6a0:	41 e1       	ldi	r20, 0x11	; 17
     6a2:	52 e0       	ldi	r21, 0x02	; 2
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	e9 d4       	rcall	.+2514   	; 0x107c <i2c_lcd_string>
     6aa:	2f ef       	ldi	r18, 0xFF	; 255
     6ac:	81 ee       	ldi	r24, 0xE1	; 225
     6ae:	94 e0       	ldi	r25, 0x04	; 4
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	80 40       	sbci	r24, 0x00	; 0
     6b4:	90 40       	sbci	r25, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <esp8266_init+0x116>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <esp8266_init+0x120>
	//1byte당 해봐야 1ms 정도밖에 소요되지 않는다.
	_delay_ms(100);// OK sign 말고도 Linked sign까지 들어온다. 이 문자까지 잡아내려면 또 구문을 추가해야되는데, 번거로워서 일단 딜레이로 처리함.

	i2c_lcd_string(2,0,"     OOOOOOOOO_     ");
     6ba:	00 00       	nop
     6bc:	46 e2       	ldi	r20, 0x26	; 38
     6be:	52 e0       	ldi	r21, 0x02	; 2
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	db d4       	rcall	.+2486   	; 0x107c <i2c_lcd_string>
	
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	08 95       	ret

000006d8 <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 switch(clip)
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	91 f0       	breq	.+36     	; 0x700 <setSoundClip+0x28>
     6dc:	28 f4       	brcc	.+10     	; 0x6e8 <setSoundClip+0x10>
     6de:	88 23       	and	r24, r24
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <setSoundClip+0x1a>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	49 f0       	breq	.+18     	; 0x6f8 <setSoundClip+0x20>
     6e6:	17 c0       	rjmp	.+46     	; 0x716 <setSoundClip+0x3e>
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	71 f0       	breq	.+28     	; 0x708 <setSoundClip+0x30>
     6ec:	84 30       	cpi	r24, 0x04	; 4
     6ee:	81 f0       	breq	.+32     	; 0x710 <setSoundClip+0x38>
     6f0:	12 c0       	rjmp	.+36     	; 0x716 <setSoundClip+0x3e>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     6f2:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <music_flag>
     6f6:	0f c0       	rjmp	.+30     	; 0x716 <setSoundClip+0x3e>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <music_flag>
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <setSoundClip+0x3e>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <music_flag>
     706:	07 c0       	rjmp	.+14     	; 0x716 <setSoundClip+0x3e>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <music_flag>
     70e:	03 c0       	rjmp	.+6      	; 0x716 <setSoundClip+0x3e>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <music_flag>
	 }
	 TICK.buzz_1ms=0;
     716:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <TICK+0x4>
     71a:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <TICK+0x5>
     71e:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <TICK+0x6>
     722:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <TICK+0x7>
     726:	08 95       	ret

00000728 <buzz_MUTE>:
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     728:	eb e8       	ldi	r30, 0x8B	; 139
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 81       	ld	r24, Z
     72e:	8f 7b       	andi	r24, 0xBF	; 191
     730:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     732:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <music_flag>
     736:	08 95       	ret

00000738 <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	41 f0       	breq	.+16     	; 0x74c <setSoundNote+0x14>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     73c:	eb e8       	ldi	r30, 0x8B	; 139
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	20 81       	ld	r18, Z
     742:	20 64       	ori	r18, 0x40	; 64
     744:	20 83       	st	Z, r18
     746:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <setICR3>
     74a:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     74c:	eb e8       	ldi	r30, 0x8B	; 139
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	8f 7b       	andi	r24, 0xBF	; 191
     754:	80 83       	st	Z, r24
     756:	08 95       	ret

00000758 <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     758:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <music_flag>
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	09 f4       	brne	.+2      	; 0x762 <buzz_play+0xa>
     760:	74 c0       	rjmp	.+232    	; 0x84a <buzz_play+0xf2>
     762:	28 f4       	brcc	.+10     	; 0x76e <buzz_play+0x16>
     764:	88 23       	and	r24, r24
     766:	51 f0       	breq	.+20     	; 0x77c <buzz_play+0x24>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	51 f0       	breq	.+20     	; 0x780 <buzz_play+0x28>
     76c:	08 95       	ret
     76e:	83 30       	cpi	r24, 0x03	; 3
     770:	09 f4       	brne	.+2      	; 0x774 <buzz_play+0x1c>
     772:	d0 c0       	rjmp	.+416    	; 0x914 <buzz_play+0x1bc>
     774:	84 30       	cpi	r24, 0x04	; 4
     776:	09 f4       	brne	.+2      	; 0x77a <buzz_play+0x22>
     778:	10 c1       	rjmp	.+544    	; 0x99a <buzz_play+0x242>
     77a:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     77c:	d5 cf       	rjmp	.-86     	; 0x728 <buzz_MUTE>
     77e:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     780:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     784:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     788:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     78c:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     790:	88 3c       	cpi	r24, 0xC8	; 200
     792:	91 05       	cpc	r25, r1
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	20 f4       	brcc	.+8      	; 0x7a2 <buzz_play+0x4a>
     79a:	8b e9       	ldi	r24, 0x9B	; 155
     79c:	96 e0       	ldi	r25, 0x06	; 6
     79e:	cc cf       	rjmp	.-104    	; 0x738 <setSoundNote>
     7a0:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     7a2:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     7a6:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     7aa:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     7ae:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     7b2:	88 3c       	cpi	r24, 0xC8	; 200
     7b4:	91 05       	cpc	r25, r1
     7b6:	a1 05       	cpc	r26, r1
     7b8:	b1 05       	cpc	r27, r1
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <buzz_play+0x6c>
     7bc:	87 ee       	ldi	r24, 0xE7	; 231
     7be:	95 e0       	ldi	r25, 0x05	; 5
     7c0:	bb cf       	rjmp	.-138    	; 0x738 <setSoundNote>
     7c2:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     7c4:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     7c8:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     7cc:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     7d0:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     7d4:	80 39       	cpi	r24, 0x90	; 144
     7d6:	91 40       	sbci	r25, 0x01	; 1
     7d8:	a1 05       	cpc	r26, r1
     7da:	b1 05       	cpc	r27, r1
     7dc:	21 f4       	brne	.+8      	; 0x7e6 <buzz_play+0x8e>
     7de:	85 e6       	ldi	r24, 0x65	; 101
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	aa cf       	rjmp	.-172    	; 0x738 <setSoundNote>
     7e4:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     7e6:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     7ea:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     7ee:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     7f2:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     7f6:	88 35       	cpi	r24, 0x58	; 88
     7f8:	92 40       	sbci	r25, 0x02	; 2
     7fa:	a1 05       	cpc	r26, r1
     7fc:	b1 05       	cpc	r27, r1
     7fe:	21 f4       	brne	.+8      	; 0x808 <buzz_play+0xb0>
     800:	8d ef       	ldi	r24, 0xFD	; 253
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	99 cf       	rjmp	.-206    	; 0x738 <setSoundNote>
     806:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     808:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     80c:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     810:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     814:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     818:	80 32       	cpi	r24, 0x20	; 32
     81a:	93 40       	sbci	r25, 0x03	; 3
     81c:	a1 05       	cpc	r26, r1
     81e:	b1 05       	cpc	r27, r1
     820:	21 f4       	brne	.+8      	; 0x82a <buzz_play+0xd2>
     822:	88 ef       	ldi	r24, 0xF8	; 248
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	88 cf       	rjmp	.-240    	; 0x738 <setSoundNote>
     828:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     82a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     82e:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     832:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     836:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     83a:	80 3b       	cpi	r24, 0xB0	; 176
     83c:	94 40       	sbci	r25, 0x04	; 4
     83e:	a1 05       	cpc	r26, r1
     840:	b1 05       	cpc	r27, r1
     842:	09 f0       	breq	.+2      	; 0x846 <buzz_play+0xee>
     844:	eb c0       	rjmp	.+470    	; 0xa1c <buzz_play+0x2c4>
     846:	70 cf       	rjmp	.-288    	; 0x728 <buzz_MUTE>
     848:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     84a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     84e:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     852:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     856:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     85a:	88 3c       	cpi	r24, 0xC8	; 200
     85c:	91 05       	cpc	r25, r1
     85e:	a1 05       	cpc	r26, r1
     860:	b1 05       	cpc	r27, r1
     862:	20 f4       	brcc	.+8      	; 0x86c <buzz_play+0x114>
     864:	8b e9       	ldi	r24, 0x9B	; 155
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	67 cf       	rjmp	.-306    	; 0x738 <setSoundNote>
     86a:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     86c:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     870:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     874:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     878:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     87c:	82 3d       	cpi	r24, 0xD2	; 210
     87e:	91 05       	cpc	r25, r1
     880:	a1 05       	cpc	r26, r1
     882:	b1 05       	cpc	r27, r1
     884:	21 f4       	brne	.+8      	; 0x88e <buzz_play+0x136>
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	56 cf       	rjmp	.-340    	; 0x738 <setSoundNote>
     88c:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     88e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     892:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     896:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     89a:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     89e:	8c 3d       	cpi	r24, 0xDC	; 220
     8a0:	91 05       	cpc	r25, r1
     8a2:	a1 05       	cpc	r26, r1
     8a4:	b1 05       	cpc	r27, r1
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <buzz_play+0x158>
     8a8:	87 ee       	ldi	r24, 0xE7	; 231
     8aa:	95 e0       	ldi	r25, 0x05	; 5
     8ac:	45 cf       	rjmp	.-374    	; 0x738 <setSoundNote>
     8ae:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     8b0:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     8b4:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     8b8:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     8bc:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     8c0:	80 39       	cpi	r24, 0x90	; 144
     8c2:	91 40       	sbci	r25, 0x01	; 1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <buzz_play+0x17a>
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	34 cf       	rjmp	.-408    	; 0x738 <setSoundNote>
     8d0:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     8d2:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     8d6:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     8da:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     8de:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     8e2:	8e 3a       	cpi	r24, 0xAE	; 174
     8e4:	91 40       	sbci	r25, 0x01	; 1
     8e6:	a1 05       	cpc	r26, r1
     8e8:	b1 05       	cpc	r27, r1
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <buzz_play+0x19c>
     8ec:	85 e6       	ldi	r24, 0x65	; 101
     8ee:	94 e0       	ldi	r25, 0x04	; 4
     8f0:	23 cf       	rjmp	.-442    	; 0x738 <setSoundNote>
     8f2:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     8f4:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     8f8:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     8fc:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     900:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     904:	88 35       	cpi	r24, 0x58	; 88
     906:	92 40       	sbci	r25, 0x02	; 2
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	09 f0       	breq	.+2      	; 0x910 <buzz_play+0x1b8>
     90e:	86 c0       	rjmp	.+268    	; 0xa1c <buzz_play+0x2c4>
     910:	0b cf       	rjmp	.-490    	; 0x728 <buzz_MUTE>
     912:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     914:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     918:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     91c:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     920:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     924:	84 36       	cpi	r24, 0x64	; 100
     926:	91 05       	cpc	r25, r1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	20 f4       	brcc	.+8      	; 0x936 <buzz_play+0x1de>
     92e:	82 e1       	ldi	r24, 0x12	; 18
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	02 cf       	rjmp	.-508    	; 0x738 <setSoundNote>
     934:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     936:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     93a:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     93e:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     942:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     946:	88 3c       	cpi	r24, 0xC8	; 200
     948:	91 05       	cpc	r25, r1
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	20 f4       	brcc	.+8      	; 0x958 <buzz_play+0x200>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	f1 ce       	rjmp	.-542    	; 0x738 <setSoundNote>
     956:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     958:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     95c:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     960:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     964:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     968:	8c 32       	cpi	r24, 0x2C	; 44
     96a:	91 40       	sbci	r25, 0x01	; 1
     96c:	a1 05       	cpc	r26, r1
     96e:	b1 05       	cpc	r27, r1
     970:	20 f4       	brcc	.+8      	; 0x97a <buzz_play+0x222>
     972:	82 e1       	ldi	r24, 0x12	; 18
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	e0 ce       	rjmp	.-576    	; 0x738 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     978:	08 95       	ret
     97a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     97e:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     982:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     986:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     98a:	82 3c       	cpi	r24, 0xC2	; 194
     98c:	91 40       	sbci	r25, 0x01	; 1
     98e:	a1 05       	cpc	r26, r1
     990:	b1 05       	cpc	r27, r1
     992:	09 f0       	breq	.+2      	; 0x996 <buzz_play+0x23e>
     994:	43 c0       	rjmp	.+134    	; 0xa1c <buzz_play+0x2c4>
     996:	c8 ce       	rjmp	.-624    	; 0x728 <buzz_MUTE>
		  break;
		  case BUZZ_ESP8266_CONNECTED:
		  if(TICK.buzz_1ms<100)setSoundNote(BUZZ_240Hz);
     998:	08 95       	ret
     99a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     99e:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     9a2:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     9a6:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     9aa:	84 36       	cpi	r24, 0x64	; 100
     9ac:	91 05       	cpc	r25, r1
     9ae:	a1 05       	cpc	r26, r1
     9b0:	b1 05       	cpc	r27, r1
     9b2:	20 f4       	brcc	.+8      	; 0x9bc <buzz_play+0x264>
     9b4:	87 e4       	ldi	r24, 0x47	; 71
     9b6:	90 e1       	ldi	r25, 0x10	; 16
     9b8:	bf ce       	rjmp	.-642    	; 0x738 <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     9ba:	08 95       	ret
     9bc:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     9c0:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     9c4:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     9c8:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     9cc:	88 3c       	cpi	r24, 0xC8	; 200
     9ce:	91 05       	cpc	r25, r1
     9d0:	a1 05       	cpc	r26, r1
     9d2:	b1 05       	cpc	r27, r1
     9d4:	20 f4       	brcc	.+8      	; 0x9de <buzz_play+0x286>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	ae ce       	rjmp	.-676    	; 0x738 <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_480Hz);
     9dc:	08 95       	ret
     9de:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     9e2:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     9e6:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     9ea:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     9ee:	8c 32       	cpi	r24, 0x2C	; 44
     9f0:	91 40       	sbci	r25, 0x01	; 1
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	20 f4       	brcc	.+8      	; 0xa00 <buzz_play+0x2a8>
     9f8:	84 e2       	ldi	r24, 0x24	; 36
     9fa:	98 e0       	ldi	r25, 0x08	; 8
     9fc:	9d ce       	rjmp	.-710    	; 0x738 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     9fe:	08 95       	ret
     a00:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <TICK+0x4>
     a04:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <TICK+0x5>
     a08:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <TICK+0x6>
     a0c:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <TICK+0x7>
     a10:	82 3c       	cpi	r24, 0xC2	; 194
     a12:	91 40       	sbci	r25, 0x01	; 1
     a14:	a1 05       	cpc	r26, r1
     a16:	b1 05       	cpc	r27, r1
     a18:	09 f4       	brne	.+2      	; 0xa1c <buzz_play+0x2c4>
     a1a:	86 ce       	rjmp	.-756    	; 0x728 <buzz_MUTE>
     a1c:	08 95       	ret

00000a1e <__vector_15>:
void logojector_ON();
void logojector_OFF();

int start_timer_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	0b b6       	in	r0, 0x3b	; 59
     a2a:	0f 92       	push	r0
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     a44:	ed e0       	ldi	r30, 0x0D	; 13
     a46:	f6 e0       	ldi	r31, 0x06	; 6
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	95 81       	ldd	r25, Z+5	; 0x05
     a4c:	a6 81       	ldd	r26, Z+6	; 0x06
     a4e:	b7 81       	ldd	r27, Z+7	; 0x07
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	a1 1d       	adc	r26, r1
     a54:	b1 1d       	adc	r27, r1
     a56:	84 83       	std	Z+4, r24	; 0x04
     a58:	95 83       	std	Z+5, r25	; 0x05
     a5a:	a6 83       	std	Z+6, r26	; 0x06
     a5c:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	a2 81       	ldd	r26, Z+2	; 0x02
     a64:	b3 81       	ldd	r27, Z+3	; 0x03
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	a1 1d       	adc	r26, r1
     a6a:	b1 1d       	adc	r27, r1
     a6c:	80 83       	st	Z, r24
     a6e:	91 83       	std	Z+1, r25	; 0x01
     a70:	a2 83       	std	Z+2, r26	; 0x02
     a72:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     a74:	71 de       	rcall	.-798    	; 0x758 <buzz_play>
}
     a76:	ff 91       	pop	r31
     a78:	ef 91       	pop	r30
     a7a:	bf 91       	pop	r27
     a7c:	af 91       	pop	r26
     a7e:	9f 91       	pop	r25
     a80:	8f 91       	pop	r24
     a82:	7f 91       	pop	r23
     a84:	6f 91       	pop	r22
     a86:	5f 91       	pop	r21
     a88:	4f 91       	pop	r20
     a8a:	3f 91       	pop	r19
     a8c:	2f 91       	pop	r18
     a8e:	0f 90       	pop	r0
     a90:	0b be       	out	0x3b, r0	; 59
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <start_timer>:
	 
}

void start_timer()
{
	TICK.tick_1ms=0;
     a9c:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <TICK>
     aa0:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <TICK+0x1>
     aa4:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <TICK+0x2>
     aa8:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <TICK+0x3>
	start_timer_flag=1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ab4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab8:	08 95       	ret

00000aba <logojector_ON>:
}


void logojector_ON(){
	PORTA|=0x80;	
     aba:	df 9a       	sbi	0x1b, 7	; 27
     abc:	08 95       	ret

00000abe <logojector_OFF>:
}
void logojector_OFF(){
	PORTA&=~(0x80);
     abe:	df 98       	cbi	0x1b, 7	; 27
     ac0:	08 95       	ret

00000ac2 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     ac2:	78 94       	sei
	//DDRA|=0x03; //test Port
	//7번비트	: 릴레이스위치
	//0~3번비트	: 스테핑모터 제어 
	DDRA|=0x8f; 
     ac4:	8a b3       	in	r24, 0x1a	; 26
     ac6:	8f 68       	ori	r24, 0x8F	; 143
     ac8:	8a bb       	out	0x1a, r24	; 26
	
	//사용하는 기능들 초기화 작업
	logojector_OFF();
     aca:	f9 df       	rcall	.-14     	; 0xabe <logojector_OFF>
	
	mfrc522_init(CH0);
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	ab d3       	rcall	.+1878   	; 0x1226 <mfrc522_init>
	mfrc522_init(CH1);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	a9 d3       	rcall	.+1874   	; 0x1226 <mfrc522_init>
     ad4:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(0,BAUD_9600); //debug channel
     ad6:	75 e2       	ldi	r23, 0x25	; 37
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	4a d6       	rcall	.+3220   	; 0x1772 <uart_init>
     ade:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
     ae0:	75 e2       	ldi	r23, 0x25	; 37
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
	i2c_lcd_init();
     ae6:	45 d6       	rcall	.+3210   	; 0x1772 <uart_init>
     ae8:	3e d2       	rcall	.+1148   	; 0xf66 <i2c_lcd_init>
	cli(); //전역 인터럽트 해제
     aea:	f8 94       	cli
	
	timer0_init();
     aec:	24 d6       	rcall	.+3144   	; 0x1736 <timer0_init>
     aee:	2c d6       	rcall	.+3160   	; 0x1748 <timer3_init>
	timer3_init();
     af0:	78 94       	sei
     af2:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <TICK>
	sei(); //전역 인터럽트 허용
	TICK.tick_1ms=0;
     af6:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <TICK+0x1>
     afa:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <TICK+0x2>
     afe:	10 92 10 06 	sts	0x0610, r1	; 0x800610 <TICK+0x3>
     b02:	2f ef       	ldi	r18, 0xFF	; 255
     b04:	81 ee       	ldi	r24, 0xE1	; 225
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	21 50       	subi	r18, 0x01	; 1
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	90 40       	sbci	r25, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <main+0x46>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <main+0x50>
     b12:	00 00       	nop
     b14:	4b e3       	ldi	r20, 0x3B	; 59
	
	_delay_ms(100);
	
	i2c_lcd_string(0,0,"====================");
     b16:	52 e0       	ldi	r21, 0x02	; 2
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	af d2       	rcall	.+1374   	; 0x107c <i2c_lcd_string>
     b1e:	40 e5       	ldi	r20, 0x50	; 80
	i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
     b20:	52 e0       	ldi	r21, 0x02	; 2
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	aa d2       	rcall	.+1364   	; 0x107c <i2c_lcd_string>
     b28:	44 e6       	ldi	r20, 0x64	; 100
	i2c_lcd_string(2,0,"     __________     ");
     b2a:	52 e0       	ldi	r21, 0x02	; 2
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	a5 d2       	rcall	.+1354   	; 0x107c <i2c_lcd_string>
     b32:	4b e3       	ldi	r20, 0x3B	; 59
	i2c_lcd_string(3,0,"====================");
     b34:	52 e0       	ldi	r21, 0x02	; 2
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	83 e0       	ldi	r24, 0x03	; 3
     b3a:	a0 d2       	rcall	.+1344   	; 0x107c <i2c_lcd_string>
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	cc dd       	rcall	.-1128   	; 0x6d8 <setSoundClip>
	setSoundClip(BUZZ_ON);
     b40:	ef ef       	ldi	r30, 0xFF	; 255
     b42:	f7 ea       	ldi	r31, 0xA7	; 167
     b44:	21 e6       	ldi	r18, 0x61	; 97
     b46:	e1 50       	subi	r30, 0x01	; 1
     b48:	f0 40       	sbci	r31, 0x00	; 0
     b4a:	20 40       	sbci	r18, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0x84>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <main+0x8e>
     b50:	00 00       	nop
	_delay_ms(2000);
	
	mfrc522_version_check(CH0);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	ae d3       	rcall	.+1884   	; 0x12b2 <mfrc522_version_check>
     b56:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
     b58:	02 d4       	rcall	.+2052   	; 0x135e <mfrc522_IRQ_enable>
	//dummy code
	mfrc522_version_check(CH1);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	aa d3       	rcall	.+1876   	; 0x12b2 <mfrc522_version_check>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
	mfrc522_IRQ_enable(CH1);
     b60:	fe d3       	rcall	.+2044   	; 0x135e <mfrc522_IRQ_enable>
     b62:	29 e7       	ldi	r18, 0x79	; 121
     b64:	32 e0       	ldi	r19, 0x02	; 2
	
	//uart1_tx_string("AT\r\n");
	//while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	//esp8266_return_result_flag=0; 
	
	esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
     b66:	4c e7       	ldi	r20, 0x7C	; 124
     b68:	52 e0       	ldi	r21, 0x02	; 2
     b6a:	68 e8       	ldi	r22, 0x88	; 136
     b6c:	72 e0       	ldi	r23, 0x02	; 2
     b6e:	85 e9       	ldi	r24, 0x95	; 149
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	13 dd       	rcall	.-1498   	; 0x59a <esp8266_init>
     b74:	95 db       	rcall	.-2262   	; 0x2a0 <rfid_user_uid_buffer_init>
     b76:	8f ef       	ldi	r24, 0xFF	; 255
	rfid_user_uid_buffer_init();
     b78:	99 ef       	ldi	r25, 0xF9	; 249
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	90 40       	sbci	r25, 0x00	; 0
     b80:	e0 40       	sbci	r30, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <main+0xba>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <main+0xc4>
     b86:	00 00       	nop
     b88:	4b e3       	ldi	r20, 0x3B	; 59
	
	//여기서 워치독 타이머 활성화 시켜야 함
	_delay_ms(20);
	
	
		i2c_lcd_string(0,0,"====================");
     b8a:	52 e0       	ldi	r21, 0x02	; 2
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	75 d2       	rcall	.+1258   	; 0x107c <i2c_lcd_string>
		i2c_lcd_string(1,0," Firmware Ver 1.85  ");
     b92:	4c e9       	ldi	r20, 0x9C	; 156
     b94:	52 e0       	ldi	r21, 0x02	; 2
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	70 d2       	rcall	.+1248   	; 0x107c <i2c_lcd_string>
     b9c:	41 eb       	ldi	r20, 0xB1	; 177
		i2c_lcd_string(2,0,"      Welcome       ");
     b9e:	52 e0       	ldi	r21, 0x02	; 2
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	6b d2       	rcall	.+1238   	; 0x107c <i2c_lcd_string>
     ba6:	4b e3       	ldi	r20, 0x3B	; 59
		i2c_lcd_string(3,0,"====================");
     ba8:	52 e0       	ldi	r21, 0x02	; 2
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	66 d2       	rcall	.+1228   	; 0x107c <i2c_lcd_string>
     bb0:	84 e0       	ldi	r24, 0x04	; 4
	setSoundClip(BUZZ_ESP8266_CONNECTED);
     bb2:	92 dd       	rcall	.-1244   	; 0x6d8 <setSoundClip>
     bb4:	ff ef       	ldi	r31, 0xFF	; 255
     bb6:	27 ea       	ldi	r18, 0xA7	; 167
     bb8:	81 e6       	ldi	r24, 0x61	; 97
     bba:	f1 50       	subi	r31, 0x01	; 1
     bbc:	20 40       	sbci	r18, 0x00	; 0
     bbe:	80 40       	sbci	r24, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0xf8>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <main+0x102>
     bc4:	00 00       	nop
     bc6:	69 d2       	rcall	.+1234   	; 0x109a <i2c_lcd_clear>
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
	//main loop start.
	_delay_ms(2000);
	i2c_lcd_clear();
     bca:	e3 ed       	ldi	r30, 0xD3	; 211
     bcc:	f0 e3       	ldi	r31, 0x30	; 48
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	e0 40       	sbci	r30, 0x00	; 0
     bd2:	f0 40       	sbci	r31, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <main+0x10c>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <main+0x116>
     bd8:	00 00       	nop
     bda:	66 d1       	rcall	.+716    	; 0xea8 <i2c_lcd_noBacklight>
     bdc:	cd e0       	ldi	r28, 0x0D	; 13
     bde:	d6 e0       	ldi	r29, 0x06	; 6
    _delay_ms(1000);
	i2c_lcd_noBacklight();
     be0:	77 24       	eor	r7, r7
     be2:	73 94       	inc	r7
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		
		//every 100ms, return RFID Reader state
		if((TICK.tick_1ms % 100) ==0) {
     be4:	0f 2e       	mov	r0, r31
     be6:	fd ef       	ldi	r31, 0xFD	; 253
			
				//toggle = 0 : entrance gate
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
     be8:	af 2e       	mov	r10, r31
     bea:	f5 e0       	ldi	r31, 0x05	; 5
				received_state = mfrc_check_and_data_receive_ch0();
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
			}//RFID check and receive UID data per 100ms
			else {
				received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
				rfid_uid_ch1[4]=0;
     bec:	bf 2e       	mov	r11, r31
     bee:	f0 2d       	mov	r31, r0
     bf0:	0f 2e       	mov	r0, r31
     bf2:	fb ee       	ldi	r31, 0xEB	; 235
     bf4:	8f 2e       	mov	r8, r31
     bf6:	f5 e0       	ldi	r31, 0x05	; 5
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
		
			if(toggle==0){
				received_state = mfrc_check_and_data_receive_ch0();
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
     bf8:	9f 2e       	mov	r9, r31
     bfa:	f0 2d       	mov	r31, r0
     bfc:	0f 2e       	mov	r0, r31
     bfe:	fb e6       	ldi	r31, 0x6B	; 107
     c00:	cf 2e       	mov	r12, r31
     c02:	f4 e0       	ldi	r31, 0x04	; 4
     c04:	df 2e       	mov	r13, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	0f 2e       	mov	r0, r31
     c0a:	ff ee       	ldi	r31, 0xEF	; 239
     c0c:	4f 2e       	mov	r4, r31
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
     c10:	5f 2e       	mov	r5, r31
     c12:	f0 2d       	mov	r31, r0
     c14:	0f 2e       	mov	r0, r31
     c16:	f3 ed       	ldi	r31, 0xD3	; 211
     c18:	2f 2e       	mov	r2, r31
				/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
				//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
				while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
				esp8266_receiving_flag=0;
				//esp8266_receive_complete_flag=0;
				if(esp8266_received_data[0]=='O'){
     c1a:	f4 e0       	ldi	r31, 0x04	; 4
     c1c:	3f 2e       	mov	r3, r31
     c1e:	f0 2d       	mov	r31, r0
     c20:	68 81       	ld	r22, Y
     c22:	79 81       	ldd	r23, Y+1	; 0x01
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		
		//every 100ms, return RFID Reader state
		if((TICK.tick_1ms % 100) ==0) {
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	9b 81       	ldd	r25, Y+3	; 0x03
     c28:	24 e6       	ldi	r18, 0x64	; 100
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	fa d6       	rcall	.+3572   	; 0x1a26 <__udivmodsi4>
     c32:	67 2b       	or	r22, r23
     c34:	68 2b       	or	r22, r24
     c36:	69 2b       	or	r22, r25
     c38:	91 f4       	brne	.+36     	; 0xc5e <main+0x19c>
     c3a:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <toggle.2431>
			
				//toggle = 0 : entrance gate
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
     c3e:	87 25       	eor	r24, r7
     c40:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <toggle.2431>
     c44:	81 11       	cpse	r24, r1
		
			if(toggle==0){
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <main+0x192>
     c48:	e2 db       	rcall	.-2108   	; 0x40e <mfrc_check_and_data_receive_ch0>
				received_state = mfrc_check_and_data_receive_ch0();
     c4a:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <received_state>
     c4e:	f4 01       	movw	r30, r8
     c50:	14 82       	std	Z+4, r1	; 0x04
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <main+0x19c>
     c54:	3f dc       	rcall	.-1922   	; 0x4d4 <mfrc_check_and_data_receive_ch1>
     c56:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <received_state>
			}//RFID check and receive UID data per 100ms
			else {
				received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
     c5a:	f5 01       	movw	r30, r10
				rfid_uid_ch1[4]=0;
     c5c:	14 82       	std	Z+4, r1	; 0x04
     c5e:	80 91 fb 05 	lds	r24, 0x05FB	; 0x8005fb <received_state>
			}
		}
		if(received_state==RECEIVE_NONE); //do nothing
		else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	09 f0       	breq	.+2      	; 0xc68 <main+0x1a6>
     c66:	f0 c0       	rjmp	.+480    	; 0xe48 <main+0x386>
			//send to esp8266 and receive result data.
			if(toggle==ENTRANCE_GATE){
     c68:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <toggle.2431>
     c6c:	81 11       	cpse	r24, r1
     c6e:	c0 c0       	rjmp	.+384    	; 0xdf0 <main+0x32e>
				//esp8266에 uid와 입구게이트 정보 전송 함수
				//while(전송 완료될 때 까지 대기)???
				
				
				/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
				uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     c70:	86 ec       	ldi	r24, 0xC6	; 198
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	c5 d5       	rcall	.+2954   	; 0x1800 <uart1_tx_string>
     c76:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <esp8266_send_ready_flag>
				//_delay_ms(20); //위 데이터 다 보낼때 까지 대기해야 하는데, 사실 없어도 되는 라인
				// '>' 문자가 확인될 때까지 대기
				while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     c7a:	88 23       	and	r24, r24
     c7c:	e1 f3       	breq	.-8      	; 0xc76 <main+0x1b4>
				esp8266_send_ready_flag=0;
     c7e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <esp8266_send_ready_flag>
     c82:	0b ee       	ldi	r16, 0xEB	; 235
     c84:	15 e0       	ldi	r17, 0x05	; 5
				 
				//esp8266으로 uid데이터 전송
				for(int i=0; i<4; i++)
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     c86:	f8 01       	movw	r30, r16
     c88:	81 91       	ld	r24, Z+
     c8a:	8f 01       	movw	r16, r30
     c8c:	f6 d5       	rcall	.+3052   	; 0x187a <HexToString>
     c8e:	b8 d5       	rcall	.+2928   	; 0x1800 <uart1_tx_string>
     c90:	80 e2       	ldi	r24, 0x20	; 32
     c92:	ae d5       	rcall	.+2908   	; 0x17f0 <uart1_tx_char>
					uart1_tx_char(' ');
     c94:	04 15       	cp	r16, r4
     c96:	15 05       	cpc	r17, r5
     c98:	b1 f7       	brne	.-20     	; 0xc86 <main+0x1c4>
				// '>' 문자가 확인될 때까지 대기
				while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
				esp8266_send_ready_flag=0;
				 
				//esp8266으로 uid데이터 전송
				for(int i=0; i<4; i++)
     c9a:	86 e3       	ldi	r24, 0x36	; 54
     c9c:	93 e0       	ldi	r25, 0x03	; 3
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
					uart1_tx_char(' ');
				}
				uart1_tx_string("\r\n");
     c9e:	b0 d5       	rcall	.+2912   	; 0x1800 <uart1_tx_string>
     ca0:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <esp8266_receiving_flag>
     ca4:	88 23       	and	r24, r24


				/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
				//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
				while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     ca6:	e1 f3       	breq	.-8      	; 0xca0 <main+0x1de>
     ca8:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <esp8266_receiving_flag>
     cac:	f1 01       	movw	r30, r2
				esp8266_receiving_flag=0;
     cae:	80 81       	ld	r24, Z
     cb0:	8f 34       	cpi	r24, 0x4F	; 79
				//esp8266_receive_complete_flag=0;
				if(esp8266_received_data[0]=='O'){
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <main+0x1f4>
     cb4:	79 c0       	rjmp	.+242    	; 0xda8 <main+0x2e6>
     cb6:	01 df       	rcall	.-510    	; 0xaba <logojector_ON>
     cb8:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
					//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
					
					logojector_ON();
     cbc:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
					//현재 입장객 버퍼 비어있는 인덱스 체크
					rfid_user_flag=0;
     cc0:	0f 2e       	mov	r0, r31
     cc2:	f9 e3       	ldi	r31, 0x39	; 57
     cc4:	ef 2e       	mov	r14, r31
     cc6:	f4 e0       	ldi	r31, 0x04	; 4
     cc8:	ff 2e       	mov	r15, r31
     cca:	f0 2d       	mov	r31, r0
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	60 e9       	ldi	r22, 0x90	; 144
					for(int i=0; i<MAX_USER_COUNT;i++)
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	c7 01       	movw	r24, r14
					{
						
						//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
						// 다시 카드 인식시키지 않도록 구현
						
						if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     cd6:	f1 d6       	rcall	.+3554   	; 0x1aba <strcmp>
     cd8:	89 2b       	or	r24, r25
     cda:	59 f4       	brne	.+22     	; 0xcf2 <main+0x230>
     cdc:	10 93 38 04 	sts	0x0438, r17	; 0x800438 <rfid_user_count_pointer+0x1>
     ce0:	00 93 37 04 	sts	0x0437, r16	; 0x800437 <rfid_user_count_pointer>
							//해당 위치의 버퍼가 비어있는 것이 확인된다면
							rfid_user_count_pointer=i;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <rfid_user_flag+0x1>
							rfid_user_flag=1;
     cec:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <rfid_user_flag>
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <main+0x244>
     cf2:	b4 01       	movw	r22, r8
     cf4:	c7 01       	movw	r24, r14
     cf6:	e1 d6       	rcall	.+3522   	; 0x1aba <strcmp>
     cf8:	89 2b       	or	r24, r25
							//i=MAX_USER_COUNT;//루프를 나오기 위함
						}else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0){ 
     cfa:	29 f4       	brne	.+10     	; 0xd06 <main+0x244>
     cfc:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
     d00:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
							//만일 버퍼 안에 기존 유저가 들어있다면
							i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
							rfid_user_flag=0;
     d04:	3b c0       	rjmp	.+118    	; 0xd7c <main+0x2ba>
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	95 e0       	ldi	r25, 0x05	; 5
					//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
					
					logojector_ON();
					//현재 입장객 버퍼 비어있는 인덱스 체크
					rfid_user_flag=0;
					for(int i=0; i<MAX_USER_COUNT;i++)
     d0c:	e9 0e       	add	r14, r25
     d0e:	f1 1c       	adc	r15, r1
     d10:	0a 30       	cpi	r16, 0x0A	; 10
     d12:	11 05       	cpc	r17, r1
     d14:	e9 f6       	brne	.-70     	; 0xcd0 <main+0x20e>
     d16:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <rfid_user_flag>
							rfid_user_flag=0;
						}
						//else rfid_user_flag=0;//모두 꽉 차 있음. 
						
					}
					if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     d1a:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <rfid_user_flag+0x1>
     d1e:	89 2b       	or	r24, r25
     d20:	69 f1       	breq	.+90     	; 0xd7c <main+0x2ba>
     d22:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rfid_user_count_pointer>
						strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0); 
     d26:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rfid_user_count_pointer+0x1>
     d2a:	9c 01       	movw	r18, r24
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	b4 01       	movw	r22, r8
     d3a:	87 5c       	subi	r24, 0xC7	; 199
     d3c:	9b 4f       	sbci	r25, 0xFB	; 251
						//LCD ON
				
						
						start_timer(); //ticktim을 0으로 클리어시킴.
     d3e:	c6 d6       	rcall	.+3468   	; 0x1acc <strcpy>
     d40:	ad de       	rcall	.-678    	; 0xa9c <start_timer>
						
						
						i2c_lcd_clear();
     d42:	ab d1       	rcall	.+854    	; 0x109a <i2c_lcd_clear>
     d44:	ef e3       	ldi	r30, 0x3F	; 63
     d46:	fc e9       	ldi	r31, 0x9C	; 156
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x286>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <main+0x28c>
						_delay_ms(10);
						i2c_lcd_string(0,0,"Welcome,");
     d4e:	00 00       	nop
     d50:	46 ed       	ldi	r20, 0xD6	; 214
     d52:	52 e0       	ldi	r21, 0x02	; 2
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
						i2c_lcd_string(1,2,(char*)esp8266_received_data);
     d58:	91 d1       	rcall	.+802    	; 0x107c <i2c_lcd_string>
     d5a:	a1 01       	movw	r20, r2
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	87 2d       	mov	r24, r7
     d60:	8d d1       	rcall	.+794    	; 0x107c <i2c_lcd_string>
						i2c_lcd_string(2,0,"Empty Space=[00 /42]");
     d62:	4f ed       	ldi	r20, 0xDF	; 223
     d64:	52 e0       	ldi	r21, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	88 d1       	rcall	.+784    	; 0x107c <i2c_lcd_string>
						i2c_lcd_string(2,13,"40");
     d6c:	44 ef       	ldi	r20, 0xF4	; 244
     d6e:	52 e0       	ldi	r21, 0x02	; 2
     d70:	6d e0       	ldi	r22, 0x0D	; 13
     d72:	82 e0       	ldi	r24, 0x02	; 2
						setSoundClip(BUZZ_SUCCESS);
     d74:	83 d1       	rcall	.+774    	; 0x107c <i2c_lcd_string>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	af dc       	rcall	.-1698   	; 0x6d8 <setSoundClip>
					}
					else {//한 번 초과로 인식시켰을 때 지나는 구문
						i2c_lcd_clear();
     d7a:	18 c0       	rjmp	.+48     	; 0xdac <main+0x2ea>
     d7c:	8e d1       	rcall	.+796    	; 0x109a <i2c_lcd_clear>
     d7e:	8f e3       	ldi	r24, 0x3F	; 63
     d80:	9c e9       	ldi	r25, 0x9C	; 156
     d82:	01 97       	sbiw	r24, 0x01	; 1
						_delay_ms(10);
						i2c_lcd_string(0,0,"Welcome,");
     d84:	f1 f7       	brne	.-4      	; 0xd82 <main+0x2c0>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <main+0x2c6>
     d88:	00 00       	nop
     d8a:	46 ed       	ldi	r20, 0xD6	; 214
     d8c:	52 e0       	ldi	r21, 0x02	; 2
     d8e:	60 e0       	ldi	r22, 0x00	; 0
						i2c_lcd_string(1,2,(char*)esp8266_received_data);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	74 d1       	rcall	.+744    	; 0x107c <i2c_lcd_string>
     d94:	a1 01       	movw	r20, r2
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	87 2d       	mov	r24, r7
						i2c_lcd_string(2,0,"Already Recognized");
     d9a:	70 d1       	rcall	.+736    	; 0x107c <i2c_lcd_string>
     d9c:	47 ef       	ldi	r20, 0xF7	; 247
     d9e:	52 e0       	ldi	r21, 0x02	; 2
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	6b d1       	rcall	.+726    	; 0x107c <i2c_lcd_string>
						
					}
				}//if(esp8266_received_data[0]=='O') end
				else if(esp8266_received_data[0]!='O') setSoundClip(BUZZ_FAIL);
     da6:	02 c0       	rjmp	.+4      	; 0xdac <main+0x2ea>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	96 dc       	rcall	.-1748   	; 0x6d8 <setSoundClip>
     dac:	9f ef       	ldi	r25, 0xFF	; 255
     dae:	e9 ef       	ldi	r30, 0xF9	; 249
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	91 50       	subi	r25, 0x01	; 1
     db4:	e0 40       	sbci	r30, 0x00	; 0
     db6:	f0 40       	sbci	r31, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x2f0>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <main+0x2fa>
				
				_delay_ms(20);
				//dummy test code (서버로부터 결과 값 수신 결과 확인)
				uart0_tx_char('\n');
     dbc:	00 00       	nop
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	05 d5       	rcall	.+2570   	; 0x17cc <uart0_tx_char>
				uart0_tx_string("From server : ");
     dc2:	8a e0       	ldi	r24, 0x0A	; 10
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	06 d5       	rcall	.+2572   	; 0x17d4 <uart0_tx_string>
				uart0_tx_string((char*)esp8266_received_data);
     dc8:	c1 01       	movw	r24, r2
     dca:	04 d5       	rcall	.+2568   	; 0x17d4 <uart0_tx_string>
				uart0_tx_char('\n');
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	fe d4       	rcall	.+2556   	; 0x17cc <uart0_tx_char>
     dd0:	09 e3       	ldi	r16, 0x39	; 57
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');uart0_tx_string((char*)rfid_user_uid_buffer[i]);uart0_tx_char(']');
     dd2:	14 e0       	ldi	r17, 0x04	; 4
     dd4:	8b e5       	ldi	r24, 0x5B	; 91
     dd6:	fa d4       	rcall	.+2548   	; 0x17cc <uart0_tx_char>
     dd8:	c8 01       	movw	r24, r16
     dda:	fc d4       	rcall	.+2552   	; 0x17d4 <uart0_tx_string>
     ddc:	8d e5       	ldi	r24, 0x5D	; 93
     dde:	f6 d4       	rcall	.+2540   	; 0x17cc <uart0_tx_char>
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	f4 d4       	rcall	.+2536   	; 0x17cc <uart0_tx_char>
					uart0_tx_char('\n');
     de4:	0b 5f       	subi	r16, 0xFB	; 251
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	c0 16       	cp	r12, r16
     dea:	d1 06       	cpc	r13, r17
     dec:	99 f7       	brne	.-26     	; 0xdd4 <main+0x312>
				uart0_tx_string("From server : ");
				uart0_tx_string((char*)esp8266_received_data);
				uart0_tx_char('\n');
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
     dee:	2c c0       	rjmp	.+88     	; 0xe48 <main+0x386>
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	51 f5       	brne	.+84     	; 0xe48 <main+0x386>
     df4:	0f 2e       	mov	r0, r31
				
				//LCD 뷰어 및 5초 카운트 후 다시 리셋
				
			}//if(toggle==ENTRANCE_GATE) end
			
			else if(toggle==EXIT_GATE){
     df6:	f9 e3       	ldi	r31, 0x39	; 57
     df8:	ef 2e       	mov	r14, r31
     dfa:	f4 e0       	ldi	r31, 0x04	; 4
     dfc:	ff 2e       	mov	r15, r31
     dfe:	f0 2d       	mov	r31, r0
     e00:	87 01       	movw	r16, r14
     e02:	b5 01       	movw	r22, r10
     e04:	c8 01       	movw	r24, r16
				
				//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
				//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
     e06:	59 d6       	rcall	.+3250   	; 0x1aba <strcmp>
     e08:	89 2b       	or	r24, r25
     e0a:	59 f4       	brne	.+22     	; 0xe22 <main+0x360>
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	e0 e9       	ldi	r30, 0x90	; 144
     e10:	f2 e0       	ldi	r31, 0x02	; 2
						strcpy((char*)rfid_user_uid_buffer[i],"0000");
     e12:	d8 01       	movw	r26, r16
     e14:	01 90       	ld	r0, Z+
     e16:	0d 92       	st	X+, r0
     e18:	8a 95       	dec	r24
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0x352>
     e1c:	3f de       	rcall	.-898    	; 0xa9c <start_timer>
     e1e:	82 e0       	ldi	r24, 0x02	; 2
						//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
						start_timer(); //ticktim을 0으로 클리어시킴. 
     e20:	5b dc       	rcall	.-1866   	; 0x6d8 <setSoundClip>
     e22:	0b 5f       	subi	r16, 0xFB	; 251
						setSoundClip(BUZZ_SUCCESS);
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	c0 16       	cp	r12, r16
     e28:	d1 06       	cpc	r13, r17
     e2a:	59 f7       	brne	.-42     	; 0xe02 <main+0x340>
				// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
				
				
				//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
				//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
				for(int i=0; i<MAX_USER_COUNT;i++)
     e2c:	8b e5       	ldi	r24, 0x5B	; 91
     e2e:	ce d4       	rcall	.+2460   	; 0x17cc <uart0_tx_char>
     e30:	c7 01       	movw	r24, r14
					
				}
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
					
					uart0_tx_char('[');uart0_tx_string((char*)rfid_user_uid_buffer[i]);uart0_tx_char(']');
     e32:	d0 d4       	rcall	.+2464   	; 0x17d4 <uart0_tx_string>
     e34:	8d e5       	ldi	r24, 0x5D	; 93
     e36:	ca d4       	rcall	.+2452   	; 0x17cc <uart0_tx_char>
     e38:	8a e0       	ldi	r24, 0x0A	; 10
     e3a:	c8 d4       	rcall	.+2448   	; 0x17cc <uart0_tx_char>
     e3c:	25 e0       	ldi	r18, 0x05	; 5
     e3e:	e2 0e       	add	r14, r18
     e40:	f1 1c       	adc	r15, r1
     e42:	ce 14       	cp	r12, r14
					uart0_tx_char('\n');
     e44:	df 04       	cpc	r13, r15
     e46:	91 f7       	brne	.-28     	; 0xe2c <main+0x36a>
     e48:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <received_state>
     e4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
						setSoundClip(BUZZ_SUCCESS);
					}//그곳 버퍼를 비움
					
				}
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
     e50:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e54:	01 97       	sbiw	r24, 0x01	; 1
			//i2c_lcd_string(1,2,esp8266_received_data);
			i2c_lcd_string(2,0,"Plz, Re-tagging. :^)");
			
		}
		
		received_state=RECEIVE_NONE;
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0x398>
     e58:	e3 ce       	rjmp	.-570    	; 0xc20 <main+0x15e>
		
		if(start_timer_flag==1)
     e5a:	88 81       	ld	r24, Y
     e5c:	99 81       	ldd	r25, Y+1	; 0x01
     e5e:	aa 81       	ldd	r26, Y+2	; 0x02
     e60:	bb 81       	ldd	r27, Y+3	; 0x03
     e62:	88 38       	cpi	r24, 0x88	; 136
     e64:	93 41       	sbci	r25, 0x13	; 19
     e66:	a1 05       	cpc	r26, r1
		{
			if(TICK.tick_1ms==5000)//5초
     e68:	b1 05       	cpc	r27, r1
     e6a:	19 f4       	brne	.+6      	; 0xe72 <main+0x3b0>
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	34 dc       	rcall	.-1944   	; 0x6d8 <setSoundClip>
     e70:	d7 ce       	rjmp	.-594    	; 0xc20 <main+0x15e>
     e72:	88 81       	ld	r24, Y
     e74:	99 81       	ldd	r25, Y+1	; 0x01
     e76:	aa 81       	ldd	r26, Y+2	; 0x02
     e78:	bb 81       	ldd	r27, Y+3	; 0x03
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				setSoundClip(BUZZ_FAIL);
     e7a:	80 34       	cpi	r24, 0x40	; 64
     e7c:	9f 41       	sbci	r25, 0x1F	; 31
     e7e:	a1 05       	cpc	r26, r1
     e80:	b1 05       	cpc	r27, r1
				
			}
			else if(TICK.tick_1ms==8000){//10초
     e82:	11 f4       	brne	.+4      	; 0xe88 <main+0x3c6>
     e84:	11 d0       	rcall	.+34     	; 0xea8 <i2c_lcd_noBacklight>
     e86:	cc ce       	rjmp	.-616    	; 0xc20 <main+0x15e>
     e88:	88 81       	ld	r24, Y
     e8a:	99 81       	ldd	r25, Y+1	; 0x01
     e8c:	aa 81       	ldd	r26, Y+2	; 0x02
     e8e:	bb 81       	ldd	r27, Y+3	; 0x03
     e90:	80 31       	cpi	r24, 0x10	; 16
     e92:	97 42       	sbci	r25, 0x27	; 39
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
     e94:	a1 05       	cpc	r26, r1
     e96:	b1 05       	cpc	r27, r1
     e98:	09 f0       	breq	.+2      	; 0xe9c <main+0x3da>
			}
			else if(TICK.tick_1ms==10000)
     e9a:	c2 ce       	rjmp	.-636    	; 0xc20 <main+0x15e>
     e9c:	10 de       	rcall	.-992    	; 0xabe <logojector_OFF>
     e9e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ea2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     ea6:	bc ce       	rjmp	.-648    	; 0xc20 <main+0x15e>

00000ea8 <i2c_lcd_noBacklight>:
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	00 d0       	rcall	.+0      	; 0xeae <i2c_lcd_noBacklight+0x6>
			{
				//로고젝터 오프 
				logojector_OFF();
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <i2c_lcd_noBacklight+0x8>
     eb0:	cd b7       	in	r28, 0x3d	; 61
				start_timer_flag=0;
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	84 e1       	ldi	r24, 0x14	; 20
			c_buf[0] = (0&0xF0) | RS0_EN1 | 0;
			c_buf[1] = (0&0xF0) | RS0_EN0 | 0;
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
     ebc:	8b 83       	std	Y+3, r24	; 0x03
     ebe:	80 e1       	ldi	r24, 0x10	; 16
     ec0:	8c 83       	std	Y+4, r24	; 0x04
     ec2:	44 e0       	ldi	r20, 0x04	; 4
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     ed0:	3e d1       	rcall	.+636    	; 0x114e <i2c_transmit>
     ed2:	81 11       	cpse	r24, r1
     ed4:	f6 cf       	rjmp	.-20     	; 0xec2 <i2c_lcd_noBacklight+0x1a>
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <i2c_lcd_command_8>:
void i2c_lcd_command_8(uint8_t command)
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	00 d0       	rcall	.+0      	; 0xeea <i2c_lcd_command_8+0x6>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
     eee:	80 7f       	andi	r24, 0xF0	; 240
     ef0:	98 2f       	mov	r25, r24
     ef2:	9c 60       	ori	r25, 0x0C	; 12
     ef4:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
     efa:	42 e0       	ldi	r20, 0x02	; 2
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	be 01       	movw	r22, r28
     f00:	6f 5f       	subi	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     f08:	22 d1       	rcall	.+580    	; 0x114e <i2c_transmit>
     f0a:	81 11       	cpse	r24, r1
     f0c:	f6 cf       	rjmp	.-20     	; 0xefa <i2c_lcd_command_8+0x16>
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <i2c_lcd_command+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <i2c_lcd_command+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
     f24:	98 2f       	mov	r25, r24
     f26:	90 7f       	andi	r25, 0xF0	; 240
     f28:	29 2f       	mov	r18, r25
     f2a:	2c 60       	ori	r18, 0x0C	; 12
     f2c:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
     f2e:	98 60       	ori	r25, 0x08	; 8
     f30:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
     f32:	20 e1       	ldi	r18, 0x10	; 16
     f34:	82 9f       	mul	r24, r18
     f36:	c0 01       	movw	r24, r0
     f38:	11 24       	eor	r1, r1
     f3a:	98 2f       	mov	r25, r24
     f3c:	9c 60       	ori	r25, 0x0C	; 12
     f3e:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
     f44:	44 e0       	ldi	r20, 0x04	; 4
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     f52:	fd d0       	rcall	.+506    	; 0x114e <i2c_transmit>
     f54:	81 11       	cpse	r24, r1
     f56:	f6 cf       	rjmp	.-20     	; 0xf44 <i2c_lcd_command+0x2c>
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
     f66:	b8 d0       	rcall	.+368    	; 0x10d8 <i2c_init>
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	89 e6       	ldi	r24, 0x69	; 105
     f6c:	98 e1       	ldi	r25, 0x18	; 24
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	80 40       	sbci	r24, 0x00	; 0
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <i2c_lcd_init+0x8>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <i2c_lcd_init+0x12>
     f78:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
     f7a:	89 e1       	ldi	r24, 0x19	; 25
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	2a d4       	rcall	.+2132   	; 0x17d4 <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	b0 df       	rcall	.-160    	; 0xee4 <i2c_lcd_command_8>
     f84:	8f e1       	ldi	r24, 0x1F	; 31
     f86:	9e e4       	ldi	r25, 0x4E	; 78
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <i2c_lcd_init+0x22>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <i2c_lcd_init+0x28>
     f8e:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	a8 df       	rcall	.-176    	; 0xee4 <i2c_lcd_command_8>
     f94:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <i2c_lcd_init+0x32>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <i2c_lcd_init+0x38>
     f9e:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
     fa0:	80 e3       	ldi	r24, 0x30	; 48
     fa2:	a0 df       	rcall	.-192    	; 0xee4 <i2c_lcd_command_8>
     fa4:	8f e8       	ldi	r24, 0x8F	; 143
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <i2c_lcd_init+0x42>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <i2c_lcd_init+0x48>
     fae:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	98 df       	rcall	.-208    	; 0xee4 <i2c_lcd_command_8>
     fb4:	8f e8       	ldi	r24, 0x8F	; 143
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <i2c_lcd_init+0x52>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <i2c_lcd_init+0x58>
     fbe:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
     fc0:	88 e2       	ldi	r24, 0x28	; 40
     fc2:	aa df       	rcall	.-172    	; 0xf18 <i2c_lcd_command>
     fc4:	87 ec       	ldi	r24, 0xC7	; 199
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <i2c_lcd_init+0x62>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <i2c_lcd_init+0x68>
     fce:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	a2 df       	rcall	.-188    	; 0xf18 <i2c_lcd_command>
     fd4:	87 ec       	ldi	r24, 0xC7	; 199
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <i2c_lcd_init+0x72>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <i2c_lcd_init+0x78>
     fde:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	9a df       	rcall	.-204    	; 0xf18 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fe4:	8f ed       	ldi	r24, 0xDF	; 223
     fe6:	9e e2       	ldi	r25, 0x2E	; 46
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <i2c_lcd_init+0x82>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <i2c_lcd_init+0x88>
     fee:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
     ff0:	86 e0       	ldi	r24, 0x06	; 6
     ff2:	92 df       	rcall	.-220    	; 0xf18 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ff4:	87 ec       	ldi	r24, 0xC7	; 199
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <i2c_lcd_init+0x92>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <i2c_lcd_init+0x98>
     ffe:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    1000:	8c e0       	ldi	r24, 0x0C	; 12
    1002:	8a df       	rcall	.-236    	; 0xf18 <i2c_lcd_command>
    1004:	87 ec       	ldi	r24, 0xC7	; 199
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    100e:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    1010:	89 e3       	ldi	r24, 0x39	; 57
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	df c3       	rjmp	.+1982   	; 0x17d4 <uart0_tx_string>
    1016:	08 95       	ret

00001018 <i2c_lcd_data>:
    1018:	cf 93       	push	r28
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
    101a:	df 93       	push	r29
    101c:	00 d0       	rcall	.+0      	; 0x101e <i2c_lcd_data+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <i2c_lcd_data+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
    1024:	98 2f       	mov	r25, r24
    1026:	90 7f       	andi	r25, 0xF0	; 240
    1028:	29 2f       	mov	r18, r25
    102a:	2d 60       	ori	r18, 0x0D	; 13
    102c:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
    102e:	99 60       	ori	r25, 0x09	; 9
    1030:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    1032:	20 e1       	ldi	r18, 0x10	; 16
    1034:	82 9f       	mul	r24, r18
    1036:	c0 01       	movw	r24, r0
    1038:	11 24       	eor	r1, r1
    103a:	98 2f       	mov	r25, r24
    103c:	9d 60       	ori	r25, 0x0D	; 13
    103e:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
    1040:	89 60       	ori	r24, 0x09	; 9
    1042:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    1044:	44 e0       	ldi	r20, 0x04	; 4
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	be 01       	movw	r22, r28
    104a:	6f 5f       	subi	r22, 0xFF	; 255
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1052:	7d d0       	rcall	.+250    	; 0x114e <i2c_transmit>
    1054:	81 11       	cpse	r24, r1
    1056:	f6 cf       	rjmp	.-20     	; 0x1044 <i2c_lcd_data+0x2c>
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <i2c_lcd_goto_XY>:

void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
    1066:	e8 2f       	mov	r30, r24
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	e1 5b       	subi	r30, 0xB1	; 177
    1070:	fc 4f       	sbci	r31, 0xFC	; 252
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
    1072:	80 81       	ld	r24, Z
    1074:	86 0f       	add	r24, r22
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	4f cf       	rjmp	.-354    	; 0xf18 <i2c_lcd_command>
    107a:	08 95       	ret

0000107c <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
    1082:	f1 df       	rcall	.-30     	; 0x1066 <i2c_lcd_goto_XY>
	while(*string) {
    1084:	88 81       	ld	r24, Y
    1086:	88 23       	and	r24, r24
    1088:	29 f0       	breq	.+10     	; 0x1094 <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
    108a:	21 96       	adiw	r28, 0x01	; 1
    108c:	c5 df       	rcall	.-118    	; 0x1018 <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    108e:	89 91       	ld	r24, Y+
    1090:	81 11       	cpse	r24, r1
    1092:	fc cf       	rjmp	.-8      	; 0x108c <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <i2c_lcd_clear>:
void i2c_lcd_clear()
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <i2c_lcd_clear+0x6>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <i2c_lcd_clear+0x8>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
		uint8_t c_buf[4];
		
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
    10a6:	8c e0       	ldi	r24, 0x0C	; 12
    10a8:	89 83       	std	Y+1, r24	; 0x01
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
    10aa:	88 e0       	ldi	r24, 0x08	; 8
    10ac:	8a 83       	std	Y+2, r24	; 0x02
		
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    10ae:	8c e1       	ldi	r24, 0x1C	; 28
    10b0:	8b 83       	std	Y+3, r24	; 0x03
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
    10b2:	88 e1       	ldi	r24, 0x18	; 24
    10b4:	8c 83       	std	Y+4, r24	; 0x04
		
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    10b6:	44 e0       	ldi	r20, 0x04	; 4
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	be 01       	movw	r22, r28
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    10c4:	44 d0       	rcall	.+136    	; 0x114e <i2c_transmit>
    10c6:	81 11       	cpse	r24, r1
    10c8:	f6 cf       	rjmp	.-20     	; 0x10b6 <i2c_lcd_clear+0x1c>
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    10d8:	88 e4       	ldi	r24, 0x48	; 72
    10da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    10de:	08 95       	ret

000010e0 <i2c_start>:
    10e0:	e4 e7       	ldi	r30, 0x74	; 116
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	10 82       	st	Z, r1
    10e6:	94 ea       	ldi	r25, 0xA4	; 164
    10e8:	90 83       	st	Z, r25
    10ea:	90 81       	ld	r25, Z
    10ec:	99 23       	and	r25, r25
    10ee:	ec f7       	brge	.-6      	; 0x10ea <i2c_start+0xa>
    10f0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    10f4:	98 7f       	andi	r25, 0xF8	; 248
    10f6:	98 30       	cpi	r25, 0x08	; 8
    10f8:	a1 f4       	brne	.+40     	; 0x1122 <__stack+0x23>
    10fa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    10fe:	84 e8       	ldi	r24, 0x84	; 132
    1100:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1104:	e4 e7       	ldi	r30, 0x74	; 116
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 23       	and	r24, r24
    110c:	ec f7       	brge	.-6      	; 0x1108 <__stack+0x9>
    110e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1112:	98 7f       	andi	r25, 0xF8	; 248
    1114:	98 31       	cpi	r25, 0x18	; 24
    1116:	39 f0       	breq	.+14     	; 0x1126 <__stack+0x27>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 34       	cpi	r25, 0x40	; 64
    111c:	29 f4       	brne	.+10     	; 0x1128 <__stack+0x29>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	08 95       	ret
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	08 95       	ret

0000112a <i2c_write>:
    112a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    112e:	84 e8       	ldi	r24, 0x84	; 132
    1130:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1134:	e4 e7       	ldi	r30, 0x74	; 116
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 23       	and	r24, r24
    113c:	ec f7       	brge	.-6      	; 0x1138 <i2c_write+0xe>
    113e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1142:	98 7f       	andi	r25, 0xF8	; 248
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	98 32       	cpi	r25, 0x28	; 40
    1148:	09 f4       	brne	.+2      	; 0x114c <i2c_write+0x22>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	6b 01       	movw	r12, r22
    115e:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    1160:	bf df       	rcall	.-130    	; 0x10e0 <i2c_start>
    1162:	f8 2e       	mov	r15, r24
    1164:	81 11       	cpse	r24, r1
    1166:	17 c0       	rjmp	.+46     	; 0x1196 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    1168:	01 15       	cp	r16, r1
    116a:	11 05       	cpc	r17, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <i2c_transmit+0x40>
    116e:	e6 01       	movw	r28, r12
    1170:	0c 0d       	add	r16, r12
    1172:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    1174:	89 91       	ld	r24, Y+
    1176:	d9 df       	rcall	.-78     	; 0x112a <i2c_write>
    1178:	81 11       	cpse	r24, r1
    117a:	10 c0       	rjmp	.+32     	; 0x119c <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    117c:	8f e9       	ldi	r24, 0x9F	; 159
    117e:	9f e0       	ldi	r25, 0x0F	; 15
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <i2c_transmit+0x32>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <i2c_transmit+0x38>
    1186:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    1188:	0c 17       	cp	r16, r28
    118a:	1d 07       	cpc	r17, r29
    118c:	99 f7       	brne	.-26     	; 0x1174 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    118e:	84 e9       	ldi	r24, 0x94	; 148
    1190:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    1196:	ff 24       	eor	r15, r15
    1198:	f3 94       	inc	r15
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    119c:	ff 24       	eor	r15, r15
    119e:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    11a0:	8f 2d       	mov	r24, r15
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	08 95       	ret

000011b2 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	16 2f       	mov	r17, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    11ba:	95 b3       	in	r25, 0x15	; 21
    11bc:	c1 e0       	ldi	r28, 0x01	; 1
    11be:	d0 e0       	ldi	r29, 0x00	; 0
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <mfrc522_write+0x14>
    11c2:	cc 0f       	add	r28, r28
    11c4:	dd 1f       	adc	r29, r29
    11c6:	4a 95       	dec	r20
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <mfrc522_write+0x10>
    11ca:	2c 2f       	mov	r18, r28
    11cc:	20 95       	com	r18
    11ce:	92 23       	and	r25, r18
    11d0:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    11d2:	88 0f       	add	r24, r24
    11d4:	8e 77       	andi	r24, 0x7E	; 126
    11d6:	a6 d2       	rcall	.+1356   	; 0x1724 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    11d8:	81 2f       	mov	r24, r17
    11da:	a4 d2       	rcall	.+1352   	; 0x1724 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    11dc:	85 b3       	in	r24, 0x15	; 21
    11de:	c8 2b       	or	r28, r24
    11e0:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	08 95       	ret

000011ea <mfrc522_reset>:


void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	
    11ea:	48 2f       	mov	r20, r24
    11ec:	6f e0       	ldi	r22, 0x0F	; 15
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	e0 cf       	rjmp	.-64     	; 0x11b2 <mfrc522_write>
    11f2:	08 95       	ret

000011f4 <mfrc522_read>:
			
		
}


unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    11f8:	95 b3       	in	r25, 0x15	; 21
    11fa:	c1 e0       	ldi	r28, 0x01	; 1
    11fc:	d0 e0       	ldi	r29, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <mfrc522_read+0x10>
    1200:	cc 0f       	add	r28, r28
    1202:	dd 1f       	adc	r29, r29
    1204:	6a 95       	dec	r22
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <mfrc522_read+0xc>
    1208:	2c 2f       	mov	r18, r28
    120a:	20 95       	com	r18
    120c:	92 23       	and	r25, r18
    120e:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    1210:	88 0f       	add	r24, r24
    1212:	8e 77       	andi	r24, 0x7E	; 126
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	86 d2       	rcall	.+1292   	; 0x1724 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    1218:	89 d2       	rcall	.+1298   	; 0x172c <spi_master_rx>
    121a:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    121c:	c9 2b       	or	r28, r25
    121e:	c5 bb       	out	0x15, r28	; 21
    1220:	df 91       	pop	r29
	
	return value;
}
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <mfrc522_init>:
    1226:	cf 93       	push	r28
#include "clcd_i2c.h"
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
void mfrc522_init(unsigned char ch)
{
    1228:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    122a:	1f 92       	push	r1
    122c:	1f 92       	push	r1
    122e:	1f 92       	push	r1
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	8f 93       	push	r24
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	8f 93       	push	r24
    1238:	32 d2       	rcall	.+1124   	; 0x169e <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    123a:	84 b3       	in	r24, 0x14	; 20
    123c:	83 60       	ori	r24, 0x03	; 3
    123e:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    1240:	15 ba       	out	0x15, r1	; 21
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	89 ef       	ldi	r24, 0xF9	; 249
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	80 40       	sbci	r24, 0x00	; 0
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <mfrc522_init+0x22>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <mfrc522_init+0x2c>
    1252:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1254:	85 b3       	in	r24, 0x15	; 21
    1256:	83 60       	ori	r24, 0x03	; 3
    1258:	85 bb       	out	0x15, r24	; 21
	mfrc522_reset(ch);
    125a:	8c 2f       	mov	r24, r28
    125c:	c6 df       	rcall	.-116    	; 0x11ea <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    125e:	4c 2f       	mov	r20, r28
    1260:	6d e8       	ldi	r22, 0x8D	; 141
    1262:	8a e2       	ldi	r24, 0x2A	; 42
    1264:	a6 df       	rcall	.-180    	; 0x11b2 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    1266:	4c 2f       	mov	r20, r28
    1268:	6e e3       	ldi	r22, 0x3E	; 62
    126a:	8b e2       	ldi	r24, 0x2B	; 43
    126c:	a2 df       	rcall	.-188    	; 0x11b2 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    126e:	4c 2f       	mov	r20, r28
    1270:	6e e1       	ldi	r22, 0x1E	; 30
    1272:	8c e2       	ldi	r24, 0x2C	; 44
    1274:	9e df       	rcall	.-196    	; 0x11b2 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    1276:	4c 2f       	mov	r20, r28
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	8d e2       	ldi	r24, 0x2D	; 45
    127c:	9a df       	rcall	.-204    	; 0x11b2 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    127e:	4c 2f       	mov	r20, r28
    1280:	60 e4       	ldi	r22, 0x40	; 64
    1282:	85 e1       	ldi	r24, 0x15	; 21
    1284:	96 df       	rcall	.-212    	; 0x11b2 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    1286:	4c 2f       	mov	r20, r28
    1288:	6d e3       	ldi	r22, 0x3D	; 61
    128a:	81 e1       	ldi	r24, 0x11	; 17
    128c:	92 df       	rcall	.-220    	; 0x11b2 <mfrc522_write>
    128e:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    1290:	84 e1       	ldi	r24, 0x14	; 20
    1292:	b0 df       	rcall	.-160    	; 0x11f4 <mfrc522_read>
    1294:	98 2f       	mov	r25, r24
    1296:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	29 f4       	brne	.+10     	; 0x12ae <mfrc522_init+0x88>
    12a4:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    12a6:	63 60       	ori	r22, 0x03	; 3
    12a8:	4c 2f       	mov	r20, r28
    12aa:	84 e1       	ldi	r24, 0x14	; 20
    12ac:	82 df       	rcall	.-252    	; 0x11b2 <mfrc522_write>
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <mfrc522_version_check>:
	}
}
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
	SS_PORT |= (1<<channel);
	
	return value;
}

void mfrc522_version_check(unsigned char ch){
    12b6:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    12b8:	68 2f       	mov	r22, r24
    12ba:	87 e3       	ldi	r24, 0x37	; 55
    12bc:	9b df       	rcall	.-202    	; 0x11f4 <mfrc522_read>
    12be:	c8 2f       	mov	r28, r24
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	89 ef       	ldi	r24, 0xF9	; 249
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	21 50       	subi	r18, 0x01	; 1
    12c8:	80 40       	sbci	r24, 0x00	; 0
    12ca:	90 40       	sbci	r25, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <mfrc522_version_check+0x14>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <mfrc522_version_check+0x1e>
    12d0:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    12d2:	d1 11       	cpse	r29, r1
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <mfrc522_version_check+0x30>
    12d6:	87 e5       	ldi	r24, 0x57	; 87
    12d8:	93 e0       	ldi	r25, 0x03	; 3
    12da:	7c d2       	rcall	.+1272   	; 0x17d4 <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    12dc:	c2 39       	cpi	r28, 0x92	; 146
    12de:	59 f5       	brne	.+86     	; 0x1336 <mfrc522_version_check+0x84>
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    12e2:	83 e6       	ldi	r24, 0x63	; 99
    12e4:	93 e0       	ldi	r25, 0x03	; 3
    12e6:	76 d2       	rcall	.+1260   	; 0x17d4 <uart0_tx_string>
	
	if(byte == 0x92)
    12e8:	c2 39       	cpi	r28, 0x92	; 146
    12ea:	91 f5       	brne	.+100    	; 0x1350 <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    12ec:	12 c0       	rjmp	.+36     	; 0x1312 <mfrc522_version_check+0x60>
    12ee:	8f e6       	ldi	r24, 0x6F	; 111
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	70 d2       	rcall	.+1248   	; 0x17d4 <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    12f4:	42 e8       	ldi	r20, 0x82	; 130
    12f6:	53 e0       	ldi	r21, 0x03	; 3
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	bf de       	rcall	.-642    	; 0x107c <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <mfrc522_version_check+0x4c>
    1300:	86 e9       	ldi	r24, 0x96	; 150
    1302:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1304:	67 d2       	rcall	.+1230   	; 0x17d4 <uart0_tx_string>
    1306:	4a eb       	ldi	r20, 0xBA	; 186
    1308:	53 e0       	ldi	r21, 0x03	; 3
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	b6 de       	rcall	.-660    	; 0x107c <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1310:	23 c0       	rjmp	.+70     	; 0x1358 <mfrc522_version_check+0xa6>
    1312:	86 e9       	ldi	r24, 0x96	; 150
    1314:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1316:	5e d2       	rcall	.+1212   	; 0x17d4 <uart0_tx_string>
    1318:	4f ec       	ldi	r20, 0xCF	; 207
    131a:	53 e0       	ldi	r21, 0x03	; 3
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1320:	ad de       	rcall	.-678    	; 0x107c <i2c_lcd_string>
    1322:	1a c0       	rjmp	.+52     	; 0x1358 <mfrc522_version_check+0xa6>
    1324:	84 ee       	ldi	r24, 0xE4	; 228
    1326:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1328:	55 d2       	rcall	.+1194   	; 0x17d4 <uart0_tx_string>
    132a:	4a eb       	ldi	r20, 0xBA	; 186
    132c:	53 e0       	ldi	r21, 0x03	; 3
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	a4 de       	rcall	.-696    	; 0x107c <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1334:	11 c0       	rjmp	.+34     	; 0x1358 <mfrc522_version_check+0xa6>
    1336:	c0 59       	subi	r28, 0x90	; 144
    1338:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    133a:	c8 f6       	brcc	.-78     	; 0x12ee <mfrc522_version_check+0x3c>
    133c:	f3 cf       	rjmp	.-26     	; 0x1324 <mfrc522_version_check+0x72>
    133e:	84 ee       	ldi	r24, 0xE4	; 228
    1340:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1342:	48 d2       	rcall	.+1168   	; 0x17d4 <uart0_tx_string>
    1344:	4f ec       	ldi	r20, 0xCF	; 207
    1346:	53 e0       	ldi	r21, 0x03	; 3
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	97 de       	rcall	.-722    	; 0x107c <i2c_lcd_string>
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1350:	c0 59       	subi	r28, 0x90	; 144
    1352:	c2 30       	cpi	r28, 0x02	; 2
    1354:	60 f6       	brcc	.-104    	; 0x12ee <mfrc522_version_check+0x3c>
    1356:	f3 cf       	rjmp	.-26     	; 0x133e <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    135e:	cf 93       	push	r28
    1360:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    1362:	68 2f       	mov	r22, r24
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	46 df       	rcall	.-372    	; 0x11f4 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    1368:	68 2f       	mov	r22, r24
    136a:	60 62       	ori	r22, 0x20	; 32
    136c:	4c 2f       	mov	r20, r28
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	20 df       	rcall	.-448    	; 0x11b2 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    1372:	6c 2f       	mov	r22, r28
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	3e df       	rcall	.-388    	; 0x11f4 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    1378:	68 2f       	mov	r22, r24
    137a:	60 68       	ori	r22, 0x80	; 128
    137c:	4c 2f       	mov	r20, r28
    137e:	83 e0       	ldi	r24, 0x03	; 3
    1380:	18 df       	rcall	.-464    	; 0x11b2 <mfrc522_write>
}
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1386:	2f 92       	push	r2
    1388:	3f 92       	push	r3
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	f8 2e       	mov	r15, r24
    13ac:	a6 2e       	mov	r10, r22
    13ae:	b7 2e       	mov	r11, r23
    13b0:	44 2e       	mov	r4, r20
    13b2:	22 2e       	mov	r2, r18
    13b4:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    13b6:	8c e0       	ldi	r24, 0x0C	; 12
    13b8:	f8 16       	cp	r15, r24
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <mfrc522_to_card+0x4c>
    13bc:	ee e0       	ldi	r30, 0x0E	; 14
    13be:	fe 12       	cpse	r15, r30
    13c0:	11 c0       	rjmp	.+34     	; 0x13e4 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    13c2:	68 94       	set
    13c4:	cc 24       	eor	r12, r12
    13c6:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    13c8:	0f 2e       	mov	r0, r31
    13ca:	f2 e1       	ldi	r31, 0x12	; 18
    13cc:	3f 2e       	mov	r3, r31
    13ce:	f0 2d       	mov	r31, r0
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    13d2:	0f 2e       	mov	r0, r31
    13d4:	f0 e3       	ldi	r31, 0x30	; 48
    13d6:	cf 2e       	mov	r12, r31
    13d8:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    13da:	0f 2e       	mov	r0, r31
    13dc:	f7 e7       	ldi	r31, 0x77	; 119
    13de:	3f 2e       	mov	r3, r31
    13e0:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <mfrc522_to_card+0x62>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    13e4:	c1 2c       	mov	r12, r1
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    13e6:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    13e8:	4e 2d       	mov	r20, r14
    13ea:	63 2d       	mov	r22, r3
    13ec:	60 68       	ori	r22, 0x80	; 128
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	e0 de       	rcall	.-576    	; 0x11b2 <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    13f2:	6e 2d       	mov	r22, r14
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	fe de       	rcall	.-516    	; 0x11f4 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    13f8:	68 2f       	mov	r22, r24
    13fa:	6f 77       	andi	r22, 0x7F	; 127
    13fc:	4e 2d       	mov	r20, r14
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	d8 de       	rcall	.-592    	; 0x11b2 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    1402:	6e 2d       	mov	r22, r14
    1404:	8a e0       	ldi	r24, 0x0A	; 10
    1406:	f6 de       	rcall	.-532    	; 0x11f4 <mfrc522_read>
    1408:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    140a:	60 68       	ori	r22, 0x80	; 128
    140c:	4e 2d       	mov	r20, r14
    140e:	8a e0       	ldi	r24, 0x0A	; 10
    1410:	d0 de       	rcall	.-608    	; 0x11b2 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    1412:	4e 2d       	mov	r20, r14
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	cc de       	rcall	.-616    	; 0x11b2 <mfrc522_write>
    141a:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    141c:	61 2c       	mov	r6, r1
    141e:	71 2c       	mov	r7, r1
    1420:	41 14       	cp	r4, r1
    1422:	51 04       	cpc	r5, r1
    1424:	61 04       	cpc	r6, r1
    1426:	71 04       	cpc	r7, r1
    1428:	99 f0       	breq	.+38     	; 0x1450 <mfrc522_to_card+0xca>
    142a:	ca 2d       	mov	r28, r10
    142c:	db 2d       	mov	r29, r11
    142e:	81 2c       	mov	r8, r1
    1430:	91 2c       	mov	r9, r1
    1432:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1434:	69 91       	ld	r22, Y+
    1436:	4e 2d       	mov	r20, r14
    1438:	89 e0       	ldi	r24, 0x09	; 9
    143a:	bb de       	rcall	.-650    	; 0x11b2 <mfrc522_write>
    143c:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    143e:	8f 1a       	sub	r8, r31
    1440:	9f 0a       	sbc	r9, r31
    1442:	af 0a       	sbc	r10, r31
    1444:	bf 0a       	sbc	r11, r31
    1446:	84 14       	cp	r8, r4
    1448:	95 04       	cpc	r9, r5
    144a:	a6 04       	cpc	r10, r6
    144c:	b7 04       	cpc	r11, r7
    144e:	90 f3       	brcs	.-28     	; 0x1434 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    1450:	4e 2d       	mov	r20, r14
    1452:	6f 2d       	mov	r22, r15
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	ad de       	rcall	.-678    	; 0x11b2 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    1458:	8c e0       	ldi	r24, 0x0C	; 12
    145a:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    145c:	08 c0       	rjmp	.+16     	; 0x146e <mfrc522_to_card+0xe8>
    145e:	6e 2d       	mov	r22, r14
    1460:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    1462:	c8 de       	rcall	.-624    	; 0x11f4 <mfrc522_read>
    1464:	68 2f       	mov	r22, r24
    1466:	60 68       	ori	r22, 0x80	; 128
    1468:	4e 2d       	mov	r20, r14
    146a:	8d e0       	ldi	r24, 0x0D	; 13
    146c:	a2 de       	rcall	.-700    	; 0x11b2 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    146e:	6e 2d       	mov	r22, r14
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	c0 de       	rcall	.-640    	; 0x11f4 <mfrc522_read>
    1474:	b8 2e       	mov	r11, r24
    1476:	c0 e0       	ldi	r28, 0x00	; 0
    1478:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    147a:	ec 2d       	mov	r30, r12
    147c:	e1 60       	ori	r30, 0x01	; 1
    147e:	ce 2e       	mov	r12, r30
    1480:	0a c0       	rjmp	.+20     	; 0x1496 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1482:	6e 2d       	mov	r22, r14
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	b6 de       	rcall	.-660    	; 0x11f4 <mfrc522_read>
    1488:	b8 2e       	mov	r11, r24
    148a:	21 96       	adiw	r28, 0x01	; 1
    148c:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    148e:	f7 e0       	ldi	r31, 0x07	; 7
    1490:	df 07       	cpc	r29, r31
    1492:	09 f4       	brne	.+2      	; 0x1496 <mfrc522_to_card+0x110>
    1494:	68 c0       	rjmp	.+208    	; 0x1566 <mfrc522_to_card+0x1e0>
    1496:	8c 2d       	mov	r24, r12
    1498:	8b 21       	and	r24, r11
    149a:	99 f3       	breq	.-26     	; 0x1482 <mfrc522_to_card+0xfc>
    149c:	6e c0       	rjmp	.+220    	; 0x157a <mfrc522_to_card+0x1f4>
    149e:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    14a0:	81 70       	andi	r24, 0x01	; 1
    14a2:	b8 22       	and	r11, r24
    14a4:	11 f0       	breq	.+4      	; 0x14aa <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    14a6:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    14aa:	c1 e0       	ldi	r28, 0x01	; 1
    14ac:	8c e0       	ldi	r24, 0x0C	; 12
    14ae:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    14b0:	73 c0       	rjmp	.+230    	; 0x1598 <mfrc522_to_card+0x212>
    14b2:	6e 2d       	mov	r22, r14
    14b4:	8a e0       	ldi	r24, 0x0A	; 10
    14b6:	9e de       	rcall	.-708    	; 0x11f4 <mfrc522_read>
    14b8:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    14ba:	6e 2d       	mov	r22, r14
    14bc:	8c e0       	ldi	r24, 0x0C	; 12
    14be:	9a de       	rcall	.-716    	; 0x11f4 <mfrc522_read>
    14c0:	28 2f       	mov	r18, r24
    14c2:	27 70       	andi	r18, 0x07	; 7
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <mfrc522_to_card+0x16a>
				if (lastBits)
    14c6:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	82 0f       	add	r24, r18
    14da:	91 1d       	adc	r25, r1
    14dc:	09 2e       	mov	r0, r25
    14de:	00 0c       	add	r0, r0
    14e0:	aa 0b       	sbc	r26, r26
    14e2:	bb 0b       	sbc	r27, r27
    14e4:	f8 01       	movw	r30, r16
    14e6:	80 83       	st	Z, r24
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	a2 83       	std	Z+2, r26	; 0x02
    14ec:	b3 83       	std	Z+3, r27	; 0x03
    14ee:	11 c0       	rjmp	.+34     	; 0x1512 <mfrc522_to_card+0x18c>
    14f0:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	09 2e       	mov	r0, r25
    1502:	00 0c       	add	r0, r0
    1504:	aa 0b       	sbc	r26, r26
    1506:	bb 0b       	sbc	r27, r27
    1508:	f8 01       	movw	r30, r16
    150a:	80 83       	st	Z, r24
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	a2 83       	std	Z+2, r26	; 0x02
    1510:	b3 83       	std	Z+3, r27	; 0x03
    1512:	88 20       	and	r8, r8
				}

				if (n == 0)
    1514:	71 f0       	breq	.+28     	; 0x1532 <mfrc522_to_card+0x1ac>
    1516:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1518:	81 31       	cpi	r24, 0x11	; 17
    151a:	08 f0       	brcs	.+2      	; 0x151e <mfrc522_to_card+0x198>
    151c:	80 e1       	ldi	r24, 0x10	; 16
    151e:	88 2e       	mov	r8, r24
    1520:	91 2c       	mov	r9, r1
    1522:	a1 2c       	mov	r10, r1
    1524:	b1 2c       	mov	r11, r1
    1526:	81 14       	cp	r8, r1
    1528:	91 04       	cpc	r9, r1
    152a:	a1 04       	cpc	r10, r1
    152c:	b1 04       	cpc	r11, r1
    152e:	29 f4       	brne	.+10     	; 0x153a <mfrc522_to_card+0x1b4>
    1530:	33 c0       	rjmp	.+102    	; 0x1598 <mfrc522_to_card+0x212>
    1532:	81 2c       	mov	r8, r1
    1534:	91 2c       	mov	r9, r1
    1536:	54 01       	movw	r10, r8
    1538:	83 94       	inc	r8
    153a:	02 2d       	mov	r16, r2
    153c:	1d 2d       	mov	r17, r13
    153e:	41 2c       	mov	r4, r1
    1540:	51 2c       	mov	r5, r1
    1542:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    1544:	6e 2d       	mov	r22, r14
    1546:	89 e0       	ldi	r24, 0x09	; 9
    1548:	55 de       	rcall	.-854    	; 0x11f4 <mfrc522_read>
    154a:	f8 01       	movw	r30, r16
    154c:	81 93       	st	Z+, r24
    154e:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1550:	ff ef       	ldi	r31, 0xFF	; 255
    1552:	4f 1a       	sub	r4, r31
    1554:	5f 0a       	sbc	r5, r31
    1556:	6f 0a       	sbc	r6, r31
    1558:	7f 0a       	sbc	r7, r31
    155a:	48 14       	cp	r4, r8
    155c:	59 04       	cpc	r5, r9
    155e:	6a 04       	cpc	r6, r10
    1560:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1562:	80 f3       	brcs	.-32     	; 0x1544 <mfrc522_to_card+0x1be>
    1564:	19 c0       	rjmp	.+50     	; 0x1598 <mfrc522_to_card+0x212>
    1566:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1568:	8d e0       	ldi	r24, 0x0D	; 13
    156a:	44 de       	rcall	.-888    	; 0x11f4 <mfrc522_read>
    156c:	68 2f       	mov	r22, r24
    156e:	6f 77       	andi	r22, 0x7F	; 127
    1570:	4e 2d       	mov	r20, r14
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    1572:	8d e0       	ldi	r24, 0x0D	; 13
    1574:	1e de       	rcall	.-964    	; 0x11b2 <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1576:	c3 e0       	ldi	r28, 0x03	; 3
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <mfrc522_to_card+0x212>
    157a:	6e 2d       	mov	r22, r14
    157c:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    157e:	3a de       	rcall	.-908    	; 0x11f4 <mfrc522_read>
    1580:	68 2f       	mov	r22, r24
    1582:	6f 77       	andi	r22, 0x7F	; 127
    1584:	4e 2d       	mov	r20, r14
    1586:	8d e0       	ldi	r24, 0x0D	; 13
    1588:	14 de       	rcall	.-984    	; 0x11b2 <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    158a:	6e 2d       	mov	r22, r14
    158c:	86 e0       	ldi	r24, 0x06	; 6
    158e:	32 de       	rcall	.-924    	; 0x11f4 <mfrc522_read>
    1590:	8b 71       	andi	r24, 0x1B	; 27
    1592:	09 f4       	brne	.+2      	; 0x1596 <mfrc522_to_card+0x210>
    1594:	84 cf       	rjmp	.-248    	; 0x149e <mfrc522_to_card+0x118>
    1596:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    1598:	8c 2f       	mov	r24, r28
	
// 	SetBitMask(ControlReg,0x80);           //timer stops
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	8f 90       	pop	r8
    15b2:	7f 90       	pop	r7
    15b4:	6f 90       	pop	r6
    15b6:	5f 90       	pop	r5
    15b8:	4f 90       	pop	r4
    15ba:	3f 90       	pop	r3
    15bc:	2f 90       	pop	r2
    15be:	08 95       	ret

000015c0 <mfrc522_request>:
    15c0:	cf 92       	push	r12
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <mfrc522_request+0x10>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <mfrc522_request+0x12>
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	18 2f       	mov	r17, r24
    15d8:	6b 01       	movw	r12, r22
    15da:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    15dc:	67 e0       	ldi	r22, 0x07	; 7
    15de:	8d e0       	ldi	r24, 0x0D	; 13
    15e0:	e8 dd       	rcall	.-1072   	; 0x11b2 <mfrc522_write>
	
	tag_type[0] = req_mode;
    15e2:	f6 01       	movw	r30, r12
    15e4:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    15e6:	8e 01       	movw	r16, r28
    15e8:	0f 5f       	subi	r16, 0xFF	; 255
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	96 01       	movw	r18, r12
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	b6 01       	movw	r22, r12
    15f2:	8c e0       	ldi	r24, 0x0C	; 12
    15f4:	c8 de       	rcall	.-624    	; 0x1386 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	59 f4       	brne	.+22     	; 0x1610 <mfrc522_request+0x50>
    15fa:	49 81       	ldd	r20, Y+1	; 0x01
    15fc:	5a 81       	ldd	r21, Y+2	; 0x02
    15fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1600:	7c 81       	ldd	r23, Y+4	; 0x04
    1602:	40 31       	cpi	r20, 0x10	; 16
    1604:	51 05       	cpc	r21, r1
    1606:	61 05       	cpc	r22, r1
    1608:	71 05       	cpc	r23, r1
    160a:	19 f0       	breq	.+6      	; 0x1612 <mfrc522_request+0x52>
	{
		status = ERROR;
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <mfrc522_request+0x52>
    1610:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	08 95       	ret

0000162a <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	00 d0       	rcall	.+0      	; 0x163a <mfrc522_get_card_serial+0x10>
    163a:	00 d0       	rcall	.+0      	; 0x163c <mfrc522_get_card_serial+0x12>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	6c 01       	movw	r12, r24
    1642:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    1644:	46 2f       	mov	r20, r22
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	8d e0       	ldi	r24, 0x0D	; 13
    164a:	b3 dd       	rcall	.-1178   	; 0x11b2 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    164c:	83 e9       	ldi	r24, 0x93	; 147
    164e:	f6 01       	movw	r30, r12
    1650:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    1656:	8e 01       	movw	r16, r28
    1658:	0f 5f       	subi	r16, 0xFF	; 255
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	96 01       	movw	r18, r12
    165e:	42 e0       	ldi	r20, 0x02	; 2
    1660:	b6 01       	movw	r22, r12
    1662:	8c e0       	ldi	r24, 0x0C	; 12
    1664:	90 de       	rcall	.-736    	; 0x1386 <mfrc522_to_card>

	if (status == CARD_FOUND)
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	71 f4       	brne	.+28     	; 0x1686 <mfrc522_get_card_serial+0x5c>
    166a:	f6 01       	movw	r30, r12
    166c:	a6 01       	movw	r20, r12
    166e:	4c 5f       	subi	r20, 0xFC	; 252
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    1674:	21 91       	ld	r18, Z+
    1676:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    1678:	4e 17       	cp	r20, r30
    167a:	5f 07       	cpc	r21, r31
    167c:	d9 f7       	brne	.-10     	; 0x1674 <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    167e:	f6 01       	movw	r30, r12
    1680:	24 81       	ldd	r18, Z+4	; 0x04
    1682:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    1684:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ef 90       	pop	r14
    1698:	df 90       	pop	r13
    169a:	cf 90       	pop	r12
    169c:	08 95       	ret

0000169e <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <spi_init+0x6>
    16a4:	1f 92       	push	r1
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	21 f1       	breq	.+72     	; 0x16f8 <spi_init+0x5a>
    16b0:	81 11       	cpse	r24, r1
    16b2:	32 c0       	rjmp	.+100    	; 0x1718 <spi_init+0x7a>
    16b4:	29 c0       	rjmp	.+82     	; 0x1708 <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    16b6:	9c 91       	ld	r25, X
    16b8:	12 96       	adiw	r26, 0x02	; 2
    16ba:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    16bc:	e2 17       	cp	r30, r18
    16be:	f3 07       	cpc	r31, r19
    16c0:	d1 f7       	brne	.-12     	; 0x16b6 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	92 30       	cpi	r25, 0x02	; 2
    16c6:	20 f1       	brcs	.+72     	; 0x1710 <spi_init+0x72>
    16c8:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    16ca:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	71 f4       	brne	.+28     	; 0x16ec <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    16d0:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    16d2:	87 b3       	in	r24, 0x17	; 23
    16d4:	87 60       	ori	r24, 0x07	; 7
    16d6:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    16d8:	99 81       	ldd	r25, Y+1	; 0x01
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	89 2b       	or	r24, r25
    16de:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    16e0:	2e b1       	in	r18, 0x0e	; 14
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	92 2b       	or	r25, r18
    16e6:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    16e8:	8d b9       	out	0x0d, r24	; 13
    16ea:	16 c0       	rjmp	.+44     	; 0x1718 <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    16ec:	81 11       	cpse	r24, r1
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    16f0:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    16f2:	80 e4       	ldi	r24, 0x40	; 64
    16f4:	8d b9       	out	0x0d, r24	; 13
    16f6:	10 c0       	rjmp	.+32     	; 0x1718 <spi_init+0x7a>
    16f8:	de 01       	movw	r26, r28
    16fa:	19 96       	adiw	r26, 0x09	; 9
    16fc:	fe 01       	movw	r30, r28
    16fe:	31 96       	adiw	r30, 0x01	; 1
    1700:	9e 01       	movw	r18, r28
    1702:	2c 5f       	subi	r18, 0xFC	; 252
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	d7 cf       	rjmp	.-82     	; 0x16b6 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	92 30       	cpi	r25, 0x02	; 2
    170c:	e8 f6       	brcc	.-70     	; 0x16c8 <spi_init+0x2a>
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1710:	1d b8       	out	0x0d, r1	; 13
    1712:	de cf       	rjmp	.-68     	; 0x16d0 <spi_init+0x32>
    1714:	1d b8       	out	0x0d, r1	; 13
    1716:	ec cf       	rjmp	.-40     	; 0x16f0 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1724:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1726:	77 9b       	sbis	0x0e, 7	; 14
    1728:	fe cf       	rjmp	.-4      	; 0x1726 <spi_master_tx+0x2>
}
    172a:	08 95       	ret

0000172c <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    172c:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    172e:	77 9b       	sbis	0x0e, 7	; 14
    1730:	fe cf       	rjmp	.-4      	; 0x172e <spi_master_rx+0x2>
	
	return SPDR;
    1732:	8f b1       	in	r24, 0x0f	; 15
}
    1734:	08 95       	ret

00001736 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1736:	bc 9a       	sbi	0x17, 4	; 23
    1738:	8c e0       	ldi	r24, 0x0C	; 12
    173a:	83 bf       	out	0x33, r24	; 51
    173c:	8a ef       	ldi	r24, 0xFA	; 250
    173e:	81 bf       	out	0x31, r24	; 49
    1740:	87 b7       	in	r24, 0x37	; 55
    1742:	82 60       	ori	r24, 0x02	; 2
    1744:	87 bf       	out	0x37, r24	; 55
    1746:	08 95       	ret

00001748 <timer3_init>:
    1748:	13 9a       	sbi	0x02, 3	; 2
    174a:	80 e4       	ldi	r24, 0x40	; 64
    174c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1750:	8a e1       	ldi	r24, 0x1A	; 26
    1752:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1756:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    175a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    175e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1762:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1766:	08 95       	ret

00001768 <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1768:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    176c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1770:	08 95       	ret

00001772 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	9b 01       	movw	r18, r22
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	60 e4       	ldi	r22, 0x40	; 64
    1780:	72 e4       	ldi	r23, 0x42	; 66
    1782:	8f e0       	ldi	r24, 0x0F	; 15
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	4f d1       	rcall	.+670    	; 0x1a26 <__udivmodsi4>
    1788:	21 50       	subi	r18, 0x01	; 1
    178a:	31 09       	sbc	r19, r1
    178c:	20 97       	sbiw	r28, 0x00	; 0
    178e:	59 f4       	brne	.+22     	; 0x17a6 <uart_init+0x34>
    1790:	10 98       	cbi	0x02, 0	; 2
    1792:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1796:	29 b9       	out	0x09, r18	; 9
    1798:	88 e1       	ldi	r24, 0x18	; 24
    179a:	8a b9       	out	0x0a, r24	; 10
    179c:	57 9a       	sbi	0x0a, 7	; 10
    179e:	86 e0       	ldi	r24, 0x06	; 6
    17a0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    17a4:	10 c0       	rjmp	.+32     	; 0x17c6 <uart_init+0x54>
    17a6:	21 97       	sbiw	r28, 0x01	; 1
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <uart_init+0x54>
    17aa:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    17ae:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    17b2:	ea e9       	ldi	r30, 0x9A	; 154
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	88 e1       	ldi	r24, 0x18	; 24
    17b8:	80 83       	st	Z, r24
    17ba:	80 81       	ld	r24, Z
    17bc:	80 68       	ori	r24, 0x80	; 128
    17be:	80 83       	st	Z, r24
    17c0:	86 e0       	ldi	r24, 0x06	; 6
    17c2:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <uart0_tx_char>:
    17cc:	5d 9b       	sbis	0x0b, 5	; 11
    17ce:	fe cf       	rjmp	.-4      	; 0x17cc <uart0_tx_char>
    17d0:	8c b9       	out	0x0c, r24	; 12
    17d2:	08 95       	ret

000017d4 <uart0_tx_string>:
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	ec 01       	movw	r28, r24
    17da:	88 81       	ld	r24, Y
    17dc:	88 23       	and	r24, r24
    17de:	29 f0       	breq	.+10     	; 0x17ea <uart0_tx_string+0x16>
    17e0:	21 96       	adiw	r28, 0x01	; 1
    17e2:	f4 df       	rcall	.-24     	; 0x17cc <uart0_tx_char>
    17e4:	89 91       	ld	r24, Y+
    17e6:	81 11       	cpse	r24, r1
    17e8:	fc cf       	rjmp	.-8      	; 0x17e2 <uart0_tx_string+0xe>
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <uart1_tx_char>:
    17f0:	eb e9       	ldi	r30, 0x9B	; 155
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	95 ff       	sbrs	r25, 5
    17f8:	fd cf       	rjmp	.-6      	; 0x17f4 <uart1_tx_char+0x4>
    17fa:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    17fe:	08 95       	ret

00001800 <uart1_tx_string>:
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	88 81       	ld	r24, Y
    1808:	88 23       	and	r24, r24
    180a:	29 f0       	breq	.+10     	; 0x1816 <uart1_tx_string+0x16>
    180c:	21 96       	adiw	r28, 0x01	; 1
    180e:	f0 df       	rcall	.-32     	; 0x17f0 <uart1_tx_char>
    1810:	89 91       	ld	r24, Y+
    1812:	81 11       	cpse	r24, r1
    1814:	fc cf       	rjmp	.-8      	; 0x180e <uart1_tx_string+0xe>
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <IntToString>:

char * IntToString(int num)
{
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	64 97       	sbiw	r28, 0x14	; 20
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d ",num); //고유 자릿값
    1834:	9f 93       	push	r25
    1836:	8f 93       	push	r24
    1838:	88 e0       	ldi	r24, 0x08	; 8
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	9f 93       	push	r25
    183e:	8f 93       	push	r24
    1840:	8e 01       	movw	r16, r28
    1842:	0f 5f       	subi	r16, 0xFF	; 255
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	1f 93       	push	r17
    1848:	0f 93       	push	r16
    184a:	4f d1       	rcall	.+670    	; 0x1aea <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    184c:	b8 01       	movw	r22, r16
    184e:	8b e6       	ldi	r24, 0x6B	; 107
    1850:	95 e0       	ldi	r25, 0x05	; 5
    1852:	3c d1       	rcall	.+632    	; 0x1acc <strcpy>
	
	return (buff.itos_buff);
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
}
    1860:	8b e6       	ldi	r24, 0x6B	; 107
    1862:	95 e0       	ldi	r25, 0x05	; 5
    1864:	64 96       	adiw	r28, 0x14	; 20
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <HexToString>:
 
 char * HexToString(char num)
 {
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	64 97       	sbiw	r28, 0x14	; 20
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1892:	1f 92       	push	r1
    1894:	8f 93       	push	r24
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	94 e0       	ldi	r25, 0x04	; 4
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	8e 01       	movw	r16, r28
    18a0:	0f 5f       	subi	r16, 0xFF	; 255
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	1f 93       	push	r17
    18a6:	0f 93       	push	r16
    18a8:	20 d1       	rcall	.+576    	; 0x1aea <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    18aa:	b8 01       	movw	r22, r16
    18ac:	8b e6       	ldi	r24, 0x6B	; 107
    18ae:	95 e0       	ldi	r25, 0x05	; 5
    18b0:	0d d1       	rcall	.+538    	; 0x1acc <strcpy>
	 
	 return (buff.itos_buff);
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
 }
    18be:	8b e6       	ldi	r24, 0x6B	; 107
    18c0:	95 e0       	ldi	r25, 0x05	; 5
    18c2:	64 96       	adiw	r28, 0x14	; 20
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	08 95       	ret

000018d8 <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	c0 54       	subi	r28, 0x40	; 64
    18ee:	d1 09       	sbc	r29, r1
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	6b 01       	movw	r12, r22
    18fc:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    18fe:	20 e4       	ldi	r18, 0x40	; 64
    1900:	eb ea       	ldi	r30, 0xAB	; 171
    1902:	f5 e0       	ldi	r31, 0x05	; 5
    1904:	df 01       	movw	r26, r30
    1906:	1d 92       	st	X+, r1
    1908:	2a 95       	dec	r18
    190a:	e9 f7       	brne	.-6      	; 0x1906 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    190c:	bc 01       	movw	r22, r24
    190e:	8e 01       	movw	r16, r28
    1910:	0f 5f       	subi	r16, 0xFF	; 255
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	c8 01       	movw	r24, r16
    1916:	da d0       	rcall	.+436    	; 0x1acc <strcpy>
	strcat(buf,ssid);
    1918:	b6 01       	movw	r22, r12
    191a:	c8 01       	movw	r24, r16
    191c:	c3 d0       	rcall	.+390    	; 0x1aa4 <strcat>
	strcat(buf,"\",\"");
    191e:	f8 01       	movw	r30, r16
    1920:	01 90       	ld	r0, Z+
    1922:	00 20       	and	r0, r0
    1924:	e9 f7       	brne	.-6      	; 0x1920 <connect_to_AP+0x48>
    1926:	31 97       	sbiw	r30, 0x01	; 1
    1928:	82 e2       	ldi	r24, 0x22	; 34
    192a:	9c e2       	ldi	r25, 0x2C	; 44
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	82 e2       	ldi	r24, 0x22	; 34
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	93 83       	std	Z+3, r25	; 0x03
    1936:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1938:	b7 01       	movw	r22, r14
    193a:	c8 01       	movw	r24, r16
    193c:	b3 d0       	rcall	.+358    	; 0x1aa4 <strcat>
	strcat(buf,"\"\r\n");
    193e:	f8 01       	movw	r30, r16
    1940:	01 90       	ld	r0, Z+
    1942:	00 20       	and	r0, r0
    1944:	e9 f7       	brne	.-6      	; 0x1940 <connect_to_AP+0x68>
    1946:	31 97       	sbiw	r30, 0x01	; 1
    1948:	82 e2       	ldi	r24, 0x22	; 34
    194a:	9d e0       	ldi	r25, 0x0D	; 13
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	8a e0       	ldi	r24, 0x0A	; 10
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	93 83       	std	Z+3, r25	; 0x03
    1956:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1958:	b8 01       	movw	r22, r16
    195a:	8b ea       	ldi	r24, 0xAB	; 171
    195c:	95 e0       	ldi	r25, 0x05	; 5
    195e:	b6 d0       	rcall	.+364    	; 0x1acc <strcpy>
	return buff.esp_buff;
	
}
    1960:	8b ea       	ldi	r24, 0xAB	; 171
    1962:	95 e0       	ldi	r25, 0x05	; 5
    1964:	c0 5c       	subi	r28, 0xC0	; 192
    1966:	df 4f       	sbci	r29, 0xFF	; 255
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret

00001984 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	c0 54       	subi	r28, 0x40	; 64
    1996:	d1 09       	sbc	r29, r1
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	9c 01       	movw	r18, r24
    19a4:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    19a6:	80 e4       	ldi	r24, 0x40	; 64
    19a8:	eb ea       	ldi	r30, 0xAB	; 171
    19aa:	f5 e0       	ldi	r31, 0x05	; 5
    19ac:	df 01       	movw	r26, r30
    19ae:	1d 92       	st	X+, r1
    19b0:	8a 95       	dec	r24
    19b2:	e9 f7       	brne	.-6      	; 0x19ae <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    19b4:	94 e1       	ldi	r25, 0x14	; 20
    19b6:	e1 e1       	ldi	r30, 0x11	; 17
    19b8:	f4 e0       	ldi	r31, 0x04	; 4
    19ba:	8e 01       	movw	r16, r28
    19bc:	0f 5f       	subi	r16, 0xFF	; 255
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	d8 01       	movw	r26, r16
    19c2:	01 90       	ld	r0, Z+
    19c4:	0d 92       	st	X+, r0
    19c6:	9a 95       	dec	r25
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <TCP_connect+0x3e>
	strcat(buf,ip);
    19ca:	b9 01       	movw	r22, r18
    19cc:	c8 01       	movw	r24, r16
    19ce:	6a d0       	rcall	.+212    	; 0x1aa4 <strcat>
	strcat(buf,"\",");
    19d0:	f8 01       	movw	r30, r16
    19d2:	01 90       	ld	r0, Z+
    19d4:	00 20       	and	r0, r0
    19d6:	e9 f7       	brne	.-6      	; 0x19d2 <TCP_connect+0x4e>
    19d8:	31 97       	sbiw	r30, 0x01	; 1
    19da:	82 e2       	ldi	r24, 0x22	; 34
    19dc:	9c e2       	ldi	r25, 0x2C	; 44
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
    19e2:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    19e4:	b7 01       	movw	r22, r14
    19e6:	c8 01       	movw	r24, r16
    19e8:	5d d0       	rcall	.+186    	; 0x1aa4 <strcat>
	strcat(buf,"\r\n");
    19ea:	f8 01       	movw	r30, r16
    19ec:	01 90       	ld	r0, Z+
    19ee:	00 20       	and	r0, r0
    19f0:	e9 f7       	brne	.-6      	; 0x19ec <TCP_connect+0x68>
    19f2:	31 97       	sbiw	r30, 0x01	; 1
    19f4:	8d e0       	ldi	r24, 0x0D	; 13
    19f6:	9a e0       	ldi	r25, 0x0A	; 10
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    19fe:	b8 01       	movw	r22, r16
    1a00:	8b ea       	ldi	r24, 0xAB	; 171
    1a02:	95 e0       	ldi	r25, 0x05	; 5
    1a04:	63 d0       	rcall	.+198    	; 0x1acc <strcpy>
	
	return buff.esp_buff;
	
}
    1a06:	8b ea       	ldi	r24, 0xAB	; 171
    1a08:	95 e0       	ldi	r25, 0x05	; 5
    1a0a:	c0 5c       	subi	r28, 0xC0	; 192
    1a0c:	df 4f       	sbci	r29, 0xFF	; 255
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	08 95       	ret

00001a26 <__udivmodsi4>:
    1a26:	a1 e2       	ldi	r26, 0x21	; 33
    1a28:	1a 2e       	mov	r1, r26
    1a2a:	aa 1b       	sub	r26, r26
    1a2c:	bb 1b       	sub	r27, r27
    1a2e:	fd 01       	movw	r30, r26
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <__udivmodsi4_ep>

00001a32 <__udivmodsi4_loop>:
    1a32:	aa 1f       	adc	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	ee 1f       	adc	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	a2 17       	cp	r26, r18
    1a3c:	b3 07       	cpc	r27, r19
    1a3e:	e4 07       	cpc	r30, r20
    1a40:	f5 07       	cpc	r31, r21
    1a42:	20 f0       	brcs	.+8      	; 0x1a4c <__udivmodsi4_ep>
    1a44:	a2 1b       	sub	r26, r18
    1a46:	b3 0b       	sbc	r27, r19
    1a48:	e4 0b       	sbc	r30, r20
    1a4a:	f5 0b       	sbc	r31, r21

00001a4c <__udivmodsi4_ep>:
    1a4c:	66 1f       	adc	r22, r22
    1a4e:	77 1f       	adc	r23, r23
    1a50:	88 1f       	adc	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	1a 94       	dec	r1
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <__udivmodsi4_loop>
    1a58:	60 95       	com	r22
    1a5a:	70 95       	com	r23
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	bd 01       	movw	r22, r26
    1a66:	cf 01       	movw	r24, r30
    1a68:	08 95       	ret

00001a6a <atoi>:
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	88 27       	eor	r24, r24
    1a6e:	99 27       	eor	r25, r25
    1a70:	e8 94       	clt
    1a72:	21 91       	ld	r18, Z+
    1a74:	20 32       	cpi	r18, 0x20	; 32
    1a76:	e9 f3       	breq	.-6      	; 0x1a72 <atoi+0x8>
    1a78:	29 30       	cpi	r18, 0x09	; 9
    1a7a:	10 f0       	brcs	.+4      	; 0x1a80 <atoi+0x16>
    1a7c:	2e 30       	cpi	r18, 0x0E	; 14
    1a7e:	c8 f3       	brcs	.-14     	; 0x1a72 <atoi+0x8>
    1a80:	2b 32       	cpi	r18, 0x2B	; 43
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <atoi+0x28>
    1a84:	2d 32       	cpi	r18, 0x2D	; 45
    1a86:	31 f4       	brne	.+12     	; 0x1a94 <atoi+0x2a>
    1a88:	68 94       	set
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <atoi+0x28>
    1a8c:	26 d0       	rcall	.+76     	; 0x1ada <__mulhi_const_10>
    1a8e:	82 0f       	add	r24, r18
    1a90:	91 1d       	adc	r25, r1
    1a92:	21 91       	ld	r18, Z+
    1a94:	20 53       	subi	r18, 0x30	; 48
    1a96:	2a 30       	cpi	r18, 0x0A	; 10
    1a98:	c8 f3       	brcs	.-14     	; 0x1a8c <atoi+0x22>
    1a9a:	1e f4       	brtc	.+6      	; 0x1aa2 <atoi+0x38>
    1a9c:	90 95       	com	r25
    1a9e:	81 95       	neg	r24
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	08 95       	ret

00001aa4 <strcat>:
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	0d 90       	ld	r0, X+
    1aaa:	00 20       	and	r0, r0
    1aac:	e9 f7       	brne	.-6      	; 0x1aa8 <strcat+0x4>
    1aae:	11 97       	sbiw	r26, 0x01	; 1
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	0d 92       	st	X+, r0
    1ab4:	00 20       	and	r0, r0
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <strcat+0xc>
    1ab8:	08 95       	ret

00001aba <strcmp>:
    1aba:	fb 01       	movw	r30, r22
    1abc:	dc 01       	movw	r26, r24
    1abe:	8d 91       	ld	r24, X+
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	80 19       	sub	r24, r0
    1ac4:	01 10       	cpse	r0, r1
    1ac6:	d9 f3       	breq	.-10     	; 0x1abe <strcmp+0x4>
    1ac8:	99 0b       	sbc	r25, r25
    1aca:	08 95       	ret

00001acc <strcpy>:
    1acc:	fb 01       	movw	r30, r22
    1ace:	dc 01       	movw	r26, r24
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	0d 92       	st	X+, r0
    1ad4:	00 20       	and	r0, r0
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <strcpy+0x4>
    1ad8:	08 95       	ret

00001ada <__mulhi_const_10>:
    1ada:	7a e0       	ldi	r23, 0x0A	; 10
    1adc:	97 9f       	mul	r25, r23
    1ade:	90 2d       	mov	r25, r0
    1ae0:	87 9f       	mul	r24, r23
    1ae2:	80 2d       	mov	r24, r0
    1ae4:	91 0d       	add	r25, r1
    1ae6:	11 24       	eor	r1, r1
    1ae8:	08 95       	ret

00001aea <sprintf>:
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	2e 97       	sbiw	r28, 0x0e	; 14
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	0d 89       	ldd	r16, Y+21	; 0x15
    1b04:	1e 89       	ldd	r17, Y+22	; 0x16
    1b06:	86 e0       	ldi	r24, 0x06	; 6
    1b08:	8c 83       	std	Y+4, r24	; 0x04
    1b0a:	1a 83       	std	Y+2, r17	; 0x02
    1b0c:	09 83       	std	Y+1, r16	; 0x01
    1b0e:	8f ef       	ldi	r24, 0xFF	; 255
    1b10:	9f e7       	ldi	r25, 0x7F	; 127
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	ae 01       	movw	r20, r28
    1b18:	47 5e       	subi	r20, 0xE7	; 231
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	6f 89       	ldd	r22, Y+23	; 0x17
    1b1e:	78 8d       	ldd	r23, Y+24	; 0x18
    1b20:	ce 01       	movw	r24, r28
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	10 d0       	rcall	.+32     	; 0x1b46 <vfprintf>
    1b26:	ef 81       	ldd	r30, Y+7	; 0x07
    1b28:	f8 85       	ldd	r31, Y+8	; 0x08
    1b2a:	e0 0f       	add	r30, r16
    1b2c:	f1 1f       	adc	r31, r17
    1b2e:	10 82       	st	Z, r1
    1b30:	2e 96       	adiw	r28, 0x0e	; 14
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <vfprintf>:
    1b46:	2f 92       	push	r2
    1b48:	3f 92       	push	r3
    1b4a:	4f 92       	push	r4
    1b4c:	5f 92       	push	r5
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	2b 97       	sbiw	r28, 0x0b	; 11
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	6c 01       	movw	r12, r24
    1b7c:	7b 01       	movw	r14, r22
    1b7e:	8a 01       	movw	r16, r20
    1b80:	fc 01       	movw	r30, r24
    1b82:	17 82       	std	Z+7, r1	; 0x07
    1b84:	16 82       	std	Z+6, r1	; 0x06
    1b86:	83 81       	ldd	r24, Z+3	; 0x03
    1b88:	81 ff       	sbrs	r24, 1
    1b8a:	bf c1       	rjmp	.+894    	; 0x1f0a <vfprintf+0x3c4>
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	3c 01       	movw	r6, r24
    1b92:	f6 01       	movw	r30, r12
    1b94:	93 81       	ldd	r25, Z+3	; 0x03
    1b96:	f7 01       	movw	r30, r14
    1b98:	93 fd       	sbrc	r25, 3
    1b9a:	85 91       	lpm	r24, Z+
    1b9c:	93 ff       	sbrs	r25, 3
    1b9e:	81 91       	ld	r24, Z+
    1ba0:	7f 01       	movw	r14, r30
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <vfprintf+0x62>
    1ba6:	ad c1       	rjmp	.+858    	; 0x1f02 <vfprintf+0x3bc>
    1ba8:	85 32       	cpi	r24, 0x25	; 37
    1baa:	39 f4       	brne	.+14     	; 0x1bba <vfprintf+0x74>
    1bac:	93 fd       	sbrc	r25, 3
    1bae:	85 91       	lpm	r24, Z+
    1bb0:	93 ff       	sbrs	r25, 3
    1bb2:	81 91       	ld	r24, Z+
    1bb4:	7f 01       	movw	r14, r30
    1bb6:	85 32       	cpi	r24, 0x25	; 37
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <vfprintf+0x7c>
    1bba:	b6 01       	movw	r22, r12
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	d6 d1       	rcall	.+940    	; 0x1f6c <fputc>
    1bc0:	e8 cf       	rjmp	.-48     	; 0x1b92 <vfprintf+0x4c>
    1bc2:	91 2c       	mov	r9, r1
    1bc4:	21 2c       	mov	r2, r1
    1bc6:	31 2c       	mov	r3, r1
    1bc8:	ff e1       	ldi	r31, 0x1F	; 31
    1bca:	f3 15       	cp	r31, r3
    1bcc:	d8 f0       	brcs	.+54     	; 0x1c04 <vfprintf+0xbe>
    1bce:	8b 32       	cpi	r24, 0x2B	; 43
    1bd0:	79 f0       	breq	.+30     	; 0x1bf0 <vfprintf+0xaa>
    1bd2:	38 f4       	brcc	.+14     	; 0x1be2 <vfprintf+0x9c>
    1bd4:	80 32       	cpi	r24, 0x20	; 32
    1bd6:	79 f0       	breq	.+30     	; 0x1bf6 <vfprintf+0xb0>
    1bd8:	83 32       	cpi	r24, 0x23	; 35
    1bda:	a1 f4       	brne	.+40     	; 0x1c04 <vfprintf+0xbe>
    1bdc:	23 2d       	mov	r18, r3
    1bde:	20 61       	ori	r18, 0x10	; 16
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <vfprintf+0xd6>
    1be2:	8d 32       	cpi	r24, 0x2D	; 45
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <vfprintf+0xb8>
    1be6:	80 33       	cpi	r24, 0x30	; 48
    1be8:	69 f4       	brne	.+26     	; 0x1c04 <vfprintf+0xbe>
    1bea:	23 2d       	mov	r18, r3
    1bec:	21 60       	ori	r18, 0x01	; 1
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <vfprintf+0xd6>
    1bf0:	83 2d       	mov	r24, r3
    1bf2:	82 60       	ori	r24, 0x02	; 2
    1bf4:	38 2e       	mov	r3, r24
    1bf6:	e3 2d       	mov	r30, r3
    1bf8:	e4 60       	ori	r30, 0x04	; 4
    1bfa:	3e 2e       	mov	r3, r30
    1bfc:	2a c0       	rjmp	.+84     	; 0x1c52 <vfprintf+0x10c>
    1bfe:	f3 2d       	mov	r31, r3
    1c00:	f8 60       	ori	r31, 0x08	; 8
    1c02:	1d c0       	rjmp	.+58     	; 0x1c3e <vfprintf+0xf8>
    1c04:	37 fc       	sbrc	r3, 7
    1c06:	2d c0       	rjmp	.+90     	; 0x1c62 <vfprintf+0x11c>
    1c08:	20 ed       	ldi	r18, 0xD0	; 208
    1c0a:	28 0f       	add	r18, r24
    1c0c:	2a 30       	cpi	r18, 0x0A	; 10
    1c0e:	40 f0       	brcs	.+16     	; 0x1c20 <vfprintf+0xda>
    1c10:	8e 32       	cpi	r24, 0x2E	; 46
    1c12:	b9 f4       	brne	.+46     	; 0x1c42 <vfprintf+0xfc>
    1c14:	36 fc       	sbrc	r3, 6
    1c16:	75 c1       	rjmp	.+746    	; 0x1f02 <vfprintf+0x3bc>
    1c18:	23 2d       	mov	r18, r3
    1c1a:	20 64       	ori	r18, 0x40	; 64
    1c1c:	32 2e       	mov	r3, r18
    1c1e:	19 c0       	rjmp	.+50     	; 0x1c52 <vfprintf+0x10c>
    1c20:	36 fe       	sbrs	r3, 6
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0xea>
    1c24:	8a e0       	ldi	r24, 0x0A	; 10
    1c26:	98 9e       	mul	r9, r24
    1c28:	20 0d       	add	r18, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	92 2e       	mov	r9, r18
    1c2e:	11 c0       	rjmp	.+34     	; 0x1c52 <vfprintf+0x10c>
    1c30:	ea e0       	ldi	r30, 0x0A	; 10
    1c32:	2e 9e       	mul	r2, r30
    1c34:	20 0d       	add	r18, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	22 2e       	mov	r2, r18
    1c3a:	f3 2d       	mov	r31, r3
    1c3c:	f0 62       	ori	r31, 0x20	; 32
    1c3e:	3f 2e       	mov	r3, r31
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <vfprintf+0x10c>
    1c42:	8c 36       	cpi	r24, 0x6C	; 108
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <vfprintf+0x108>
    1c46:	83 2d       	mov	r24, r3
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	38 2e       	mov	r3, r24
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfprintf+0x10c>
    1c4e:	88 36       	cpi	r24, 0x68	; 104
    1c50:	41 f4       	brne	.+16     	; 0x1c62 <vfprintf+0x11c>
    1c52:	f7 01       	movw	r30, r14
    1c54:	93 fd       	sbrc	r25, 3
    1c56:	85 91       	lpm	r24, Z+
    1c58:	93 ff       	sbrs	r25, 3
    1c5a:	81 91       	ld	r24, Z+
    1c5c:	7f 01       	movw	r14, r30
    1c5e:	81 11       	cpse	r24, r1
    1c60:	b3 cf       	rjmp	.-154    	; 0x1bc8 <vfprintf+0x82>
    1c62:	98 2f       	mov	r25, r24
    1c64:	9f 7d       	andi	r25, 0xDF	; 223
    1c66:	95 54       	subi	r25, 0x45	; 69
    1c68:	93 30       	cpi	r25, 0x03	; 3
    1c6a:	28 f4       	brcc	.+10     	; 0x1c76 <vfprintf+0x130>
    1c6c:	0c 5f       	subi	r16, 0xFC	; 252
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	9f e3       	ldi	r25, 0x3F	; 63
    1c72:	99 83       	std	Y+1, r25	; 0x01
    1c74:	0d c0       	rjmp	.+26     	; 0x1c90 <vfprintf+0x14a>
    1c76:	83 36       	cpi	r24, 0x63	; 99
    1c78:	31 f0       	breq	.+12     	; 0x1c86 <vfprintf+0x140>
    1c7a:	83 37       	cpi	r24, 0x73	; 115
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <vfprintf+0x154>
    1c7e:	83 35       	cpi	r24, 0x53	; 83
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <vfprintf+0x13e>
    1c82:	55 c0       	rjmp	.+170    	; 0x1d2e <vfprintf+0x1e8>
    1c84:	20 c0       	rjmp	.+64     	; 0x1cc6 <vfprintf+0x180>
    1c86:	f8 01       	movw	r30, r16
    1c88:	80 81       	ld	r24, Z
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	0e 5f       	subi	r16, 0xFE	; 254
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	88 24       	eor	r8, r8
    1c92:	83 94       	inc	r8
    1c94:	91 2c       	mov	r9, r1
    1c96:	53 01       	movw	r10, r6
    1c98:	12 c0       	rjmp	.+36     	; 0x1cbe <vfprintf+0x178>
    1c9a:	28 01       	movw	r4, r16
    1c9c:	f2 e0       	ldi	r31, 0x02	; 2
    1c9e:	4f 0e       	add	r4, r31
    1ca0:	51 1c       	adc	r5, r1
    1ca2:	f8 01       	movw	r30, r16
    1ca4:	a0 80       	ld	r10, Z
    1ca6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca8:	36 fe       	sbrs	r3, 6
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <vfprintf+0x16c>
    1cac:	69 2d       	mov	r22, r9
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x170>
    1cb2:	6f ef       	ldi	r22, 0xFF	; 255
    1cb4:	7f ef       	ldi	r23, 0xFF	; 255
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	4e d1       	rcall	.+668    	; 0x1f56 <strnlen>
    1cba:	4c 01       	movw	r8, r24
    1cbc:	82 01       	movw	r16, r4
    1cbe:	f3 2d       	mov	r31, r3
    1cc0:	ff 77       	andi	r31, 0x7F	; 127
    1cc2:	3f 2e       	mov	r3, r31
    1cc4:	15 c0       	rjmp	.+42     	; 0x1cf0 <vfprintf+0x1aa>
    1cc6:	28 01       	movw	r4, r16
    1cc8:	22 e0       	ldi	r18, 0x02	; 2
    1cca:	42 0e       	add	r4, r18
    1ccc:	51 1c       	adc	r5, r1
    1cce:	f8 01       	movw	r30, r16
    1cd0:	a0 80       	ld	r10, Z
    1cd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd4:	36 fe       	sbrs	r3, 6
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <vfprintf+0x198>
    1cd8:	69 2d       	mov	r22, r9
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0x19c>
    1cde:	6f ef       	ldi	r22, 0xFF	; 255
    1ce0:	7f ef       	ldi	r23, 0xFF	; 255
    1ce2:	c5 01       	movw	r24, r10
    1ce4:	2d d1       	rcall	.+602    	; 0x1f40 <strnlen_P>
    1ce6:	4c 01       	movw	r8, r24
    1ce8:	f3 2d       	mov	r31, r3
    1cea:	f0 68       	ori	r31, 0x80	; 128
    1cec:	3f 2e       	mov	r3, r31
    1cee:	82 01       	movw	r16, r4
    1cf0:	33 fc       	sbrc	r3, 3
    1cf2:	19 c0       	rjmp	.+50     	; 0x1d26 <vfprintf+0x1e0>
    1cf4:	82 2d       	mov	r24, r2
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	88 16       	cp	r8, r24
    1cfa:	99 06       	cpc	r9, r25
    1cfc:	a0 f4       	brcc	.+40     	; 0x1d26 <vfprintf+0x1e0>
    1cfe:	b6 01       	movw	r22, r12
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	33 d1       	rcall	.+614    	; 0x1f6c <fputc>
    1d06:	2a 94       	dec	r2
    1d08:	f5 cf       	rjmp	.-22     	; 0x1cf4 <vfprintf+0x1ae>
    1d0a:	f5 01       	movw	r30, r10
    1d0c:	37 fc       	sbrc	r3, 7
    1d0e:	85 91       	lpm	r24, Z+
    1d10:	37 fe       	sbrs	r3, 7
    1d12:	81 91       	ld	r24, Z+
    1d14:	5f 01       	movw	r10, r30
    1d16:	b6 01       	movw	r22, r12
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	28 d1       	rcall	.+592    	; 0x1f6c <fputc>
    1d1c:	21 10       	cpse	r2, r1
    1d1e:	2a 94       	dec	r2
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	82 1a       	sub	r8, r18
    1d24:	91 08       	sbc	r9, r1
    1d26:	81 14       	cp	r8, r1
    1d28:	91 04       	cpc	r9, r1
    1d2a:	79 f7       	brne	.-34     	; 0x1d0a <vfprintf+0x1c4>
    1d2c:	e1 c0       	rjmp	.+450    	; 0x1ef0 <vfprintf+0x3aa>
    1d2e:	84 36       	cpi	r24, 0x64	; 100
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <vfprintf+0x1f0>
    1d32:	89 36       	cpi	r24, 0x69	; 105
    1d34:	39 f5       	brne	.+78     	; 0x1d84 <vfprintf+0x23e>
    1d36:	f8 01       	movw	r30, r16
    1d38:	37 fe       	sbrs	r3, 7
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <vfprintf+0x204>
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0c 5f       	subi	r16, 0xFC	; 252
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	08 c0       	rjmp	.+16     	; 0x1d5a <vfprintf+0x214>
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	07 2e       	mov	r0, r23
    1d50:	00 0c       	add	r0, r0
    1d52:	88 0b       	sbc	r24, r24
    1d54:	99 0b       	sbc	r25, r25
    1d56:	0e 5f       	subi	r16, 0xFE	; 254
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	f3 2d       	mov	r31, r3
    1d5c:	ff 76       	andi	r31, 0x6F	; 111
    1d5e:	3f 2e       	mov	r3, r31
    1d60:	97 ff       	sbrs	r25, 7
    1d62:	09 c0       	rjmp	.+18     	; 0x1d76 <vfprintf+0x230>
    1d64:	90 95       	com	r25
    1d66:	80 95       	com	r24
    1d68:	70 95       	com	r23
    1d6a:	61 95       	neg	r22
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	f0 68       	ori	r31, 0x80	; 128
    1d74:	3f 2e       	mov	r3, r31
    1d76:	2a e0       	ldi	r18, 0x0A	; 10
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	a3 01       	movw	r20, r6
    1d7c:	33 d1       	rcall	.+614    	; 0x1fe4 <__ultoa_invert>
    1d7e:	88 2e       	mov	r8, r24
    1d80:	86 18       	sub	r8, r6
    1d82:	44 c0       	rjmp	.+136    	; 0x1e0c <vfprintf+0x2c6>
    1d84:	85 37       	cpi	r24, 0x75	; 117
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <vfprintf+0x24e>
    1d88:	23 2d       	mov	r18, r3
    1d8a:	2f 7e       	andi	r18, 0xEF	; 239
    1d8c:	b2 2e       	mov	r11, r18
    1d8e:	2a e0       	ldi	r18, 0x0A	; 10
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	25 c0       	rjmp	.+74     	; 0x1dde <vfprintf+0x298>
    1d94:	93 2d       	mov	r25, r3
    1d96:	99 7f       	andi	r25, 0xF9	; 249
    1d98:	b9 2e       	mov	r11, r25
    1d9a:	8f 36       	cpi	r24, 0x6F	; 111
    1d9c:	c1 f0       	breq	.+48     	; 0x1dce <vfprintf+0x288>
    1d9e:	18 f4       	brcc	.+6      	; 0x1da6 <vfprintf+0x260>
    1da0:	88 35       	cpi	r24, 0x58	; 88
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <vfprintf+0x27c>
    1da4:	ae c0       	rjmp	.+348    	; 0x1f02 <vfprintf+0x3bc>
    1da6:	80 37       	cpi	r24, 0x70	; 112
    1da8:	19 f0       	breq	.+6      	; 0x1db0 <vfprintf+0x26a>
    1daa:	88 37       	cpi	r24, 0x78	; 120
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <vfprintf+0x270>
    1dae:	a9 c0       	rjmp	.+338    	; 0x1f02 <vfprintf+0x3bc>
    1db0:	e9 2f       	mov	r30, r25
    1db2:	e0 61       	ori	r30, 0x10	; 16
    1db4:	be 2e       	mov	r11, r30
    1db6:	b4 fe       	sbrs	r11, 4
    1db8:	0d c0       	rjmp	.+26     	; 0x1dd4 <vfprintf+0x28e>
    1dba:	fb 2d       	mov	r31, r11
    1dbc:	f4 60       	ori	r31, 0x04	; 4
    1dbe:	bf 2e       	mov	r11, r31
    1dc0:	09 c0       	rjmp	.+18     	; 0x1dd4 <vfprintf+0x28e>
    1dc2:	34 fe       	sbrs	r3, 4
    1dc4:	0a c0       	rjmp	.+20     	; 0x1dda <vfprintf+0x294>
    1dc6:	29 2f       	mov	r18, r25
    1dc8:	26 60       	ori	r18, 0x06	; 6
    1dca:	b2 2e       	mov	r11, r18
    1dcc:	06 c0       	rjmp	.+12     	; 0x1dda <vfprintf+0x294>
    1dce:	28 e0       	ldi	r18, 0x08	; 8
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <vfprintf+0x298>
    1dd4:	20 e1       	ldi	r18, 0x10	; 16
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <vfprintf+0x298>
    1dda:	20 e1       	ldi	r18, 0x10	; 16
    1ddc:	32 e0       	ldi	r19, 0x02	; 2
    1dde:	f8 01       	movw	r30, r16
    1de0:	b7 fe       	sbrs	r11, 7
    1de2:	07 c0       	rjmp	.+14     	; 0x1df2 <vfprintf+0x2ac>
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	0c 5f       	subi	r16, 0xFC	; 252
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <vfprintf+0x2b8>
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 5f       	subi	r16, 0xFE	; 254
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	a3 01       	movw	r20, r6
    1e00:	f1 d0       	rcall	.+482    	; 0x1fe4 <__ultoa_invert>
    1e02:	88 2e       	mov	r8, r24
    1e04:	86 18       	sub	r8, r6
    1e06:	fb 2d       	mov	r31, r11
    1e08:	ff 77       	andi	r31, 0x7F	; 127
    1e0a:	3f 2e       	mov	r3, r31
    1e0c:	36 fe       	sbrs	r3, 6
    1e0e:	0d c0       	rjmp	.+26     	; 0x1e2a <vfprintf+0x2e4>
    1e10:	23 2d       	mov	r18, r3
    1e12:	2e 7f       	andi	r18, 0xFE	; 254
    1e14:	a2 2e       	mov	r10, r18
    1e16:	89 14       	cp	r8, r9
    1e18:	58 f4       	brcc	.+22     	; 0x1e30 <vfprintf+0x2ea>
    1e1a:	34 fe       	sbrs	r3, 4
    1e1c:	0b c0       	rjmp	.+22     	; 0x1e34 <vfprintf+0x2ee>
    1e1e:	32 fc       	sbrc	r3, 2
    1e20:	09 c0       	rjmp	.+18     	; 0x1e34 <vfprintf+0x2ee>
    1e22:	83 2d       	mov	r24, r3
    1e24:	8e 7e       	andi	r24, 0xEE	; 238
    1e26:	a8 2e       	mov	r10, r24
    1e28:	05 c0       	rjmp	.+10     	; 0x1e34 <vfprintf+0x2ee>
    1e2a:	b8 2c       	mov	r11, r8
    1e2c:	a3 2c       	mov	r10, r3
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <vfprintf+0x2f0>
    1e30:	b8 2c       	mov	r11, r8
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <vfprintf+0x2f0>
    1e34:	b9 2c       	mov	r11, r9
    1e36:	a4 fe       	sbrs	r10, 4
    1e38:	0f c0       	rjmp	.+30     	; 0x1e58 <vfprintf+0x312>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e8 0d       	add	r30, r8
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	80 81       	ld	r24, Z
    1e42:	80 33       	cpi	r24, 0x30	; 48
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <vfprintf+0x308>
    1e46:	9a 2d       	mov	r25, r10
    1e48:	99 7e       	andi	r25, 0xE9	; 233
    1e4a:	a9 2e       	mov	r10, r25
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <vfprintf+0x31a>
    1e4e:	a2 fe       	sbrs	r10, 2
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <vfprintf+0x318>
    1e52:	b3 94       	inc	r11
    1e54:	b3 94       	inc	r11
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <vfprintf+0x31a>
    1e58:	8a 2d       	mov	r24, r10
    1e5a:	86 78       	andi	r24, 0x86	; 134
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <vfprintf+0x31a>
    1e5e:	b3 94       	inc	r11
    1e60:	a3 fc       	sbrc	r10, 3
    1e62:	10 c0       	rjmp	.+32     	; 0x1e84 <vfprintf+0x33e>
    1e64:	a0 fe       	sbrs	r10, 0
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x32e>
    1e68:	b2 14       	cp	r11, r2
    1e6a:	80 f4       	brcc	.+32     	; 0x1e8c <vfprintf+0x346>
    1e6c:	28 0c       	add	r2, r8
    1e6e:	92 2c       	mov	r9, r2
    1e70:	9b 18       	sub	r9, r11
    1e72:	0d c0       	rjmp	.+26     	; 0x1e8e <vfprintf+0x348>
    1e74:	b2 14       	cp	r11, r2
    1e76:	58 f4       	brcc	.+22     	; 0x1e8e <vfprintf+0x348>
    1e78:	b6 01       	movw	r22, r12
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	76 d0       	rcall	.+236    	; 0x1f6c <fputc>
    1e80:	b3 94       	inc	r11
    1e82:	f8 cf       	rjmp	.-16     	; 0x1e74 <vfprintf+0x32e>
    1e84:	b2 14       	cp	r11, r2
    1e86:	18 f4       	brcc	.+6      	; 0x1e8e <vfprintf+0x348>
    1e88:	2b 18       	sub	r2, r11
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <vfprintf+0x34a>
    1e8c:	98 2c       	mov	r9, r8
    1e8e:	21 2c       	mov	r2, r1
    1e90:	a4 fe       	sbrs	r10, 4
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <vfprintf+0x36c>
    1e94:	b6 01       	movw	r22, r12
    1e96:	80 e3       	ldi	r24, 0x30	; 48
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	68 d0       	rcall	.+208    	; 0x1f6c <fputc>
    1e9c:	a2 fe       	sbrs	r10, 2
    1e9e:	16 c0       	rjmp	.+44     	; 0x1ecc <vfprintf+0x386>
    1ea0:	a1 fc       	sbrc	r10, 1
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <vfprintf+0x364>
    1ea4:	88 e7       	ldi	r24, 0x78	; 120
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <vfprintf+0x368>
    1eaa:	88 e5       	ldi	r24, 0x58	; 88
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	b6 01       	movw	r22, r12
    1eb0:	0c c0       	rjmp	.+24     	; 0x1eca <vfprintf+0x384>
    1eb2:	8a 2d       	mov	r24, r10
    1eb4:	86 78       	andi	r24, 0x86	; 134
    1eb6:	51 f0       	breq	.+20     	; 0x1ecc <vfprintf+0x386>
    1eb8:	a1 fe       	sbrs	r10, 1
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <vfprintf+0x37a>
    1ebc:	8b e2       	ldi	r24, 0x2B	; 43
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <vfprintf+0x37c>
    1ec0:	80 e2       	ldi	r24, 0x20	; 32
    1ec2:	a7 fc       	sbrc	r10, 7
    1ec4:	8d e2       	ldi	r24, 0x2D	; 45
    1ec6:	b6 01       	movw	r22, r12
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	50 d0       	rcall	.+160    	; 0x1f6c <fputc>
    1ecc:	89 14       	cp	r8, r9
    1ece:	30 f4       	brcc	.+12     	; 0x1edc <vfprintf+0x396>
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	80 e3       	ldi	r24, 0x30	; 48
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	4a d0       	rcall	.+148    	; 0x1f6c <fputc>
    1ed8:	9a 94       	dec	r9
    1eda:	f8 cf       	rjmp	.-16     	; 0x1ecc <vfprintf+0x386>
    1edc:	8a 94       	dec	r8
    1ede:	f3 01       	movw	r30, r6
    1ee0:	e8 0d       	add	r30, r8
    1ee2:	f1 1d       	adc	r31, r1
    1ee4:	80 81       	ld	r24, Z
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	40 d0       	rcall	.+128    	; 0x1f6c <fputc>
    1eec:	81 10       	cpse	r8, r1
    1eee:	f6 cf       	rjmp	.-20     	; 0x1edc <vfprintf+0x396>
    1ef0:	22 20       	and	r2, r2
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <vfprintf+0x3b0>
    1ef4:	4e ce       	rjmp	.-868    	; 0x1b92 <vfprintf+0x4c>
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	37 d0       	rcall	.+110    	; 0x1f6c <fputc>
    1efe:	2a 94       	dec	r2
    1f00:	f7 cf       	rjmp	.-18     	; 0x1ef0 <vfprintf+0x3aa>
    1f02:	f6 01       	movw	r30, r12
    1f04:	86 81       	ldd	r24, Z+6	; 0x06
    1f06:	97 81       	ldd	r25, Z+7	; 0x07
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <vfprintf+0x3c8>
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	2b 96       	adiw	r28, 0x0b	; 11
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	bf 90       	pop	r11
    1f2c:	af 90       	pop	r10
    1f2e:	9f 90       	pop	r9
    1f30:	8f 90       	pop	r8
    1f32:	7f 90       	pop	r7
    1f34:	6f 90       	pop	r6
    1f36:	5f 90       	pop	r5
    1f38:	4f 90       	pop	r4
    1f3a:	3f 90       	pop	r3
    1f3c:	2f 90       	pop	r2
    1f3e:	08 95       	ret

00001f40 <strnlen_P>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	05 90       	lpm	r0, Z+
    1f44:	61 50       	subi	r22, 0x01	; 1
    1f46:	70 40       	sbci	r23, 0x00	; 0
    1f48:	01 10       	cpse	r0, r1
    1f4a:	d8 f7       	brcc	.-10     	; 0x1f42 <strnlen_P+0x2>
    1f4c:	80 95       	com	r24
    1f4e:	90 95       	com	r25
    1f50:	8e 0f       	add	r24, r30
    1f52:	9f 1f       	adc	r25, r31
    1f54:	08 95       	ret

00001f56 <strnlen>:
    1f56:	fc 01       	movw	r30, r24
    1f58:	61 50       	subi	r22, 0x01	; 1
    1f5a:	70 40       	sbci	r23, 0x00	; 0
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	01 10       	cpse	r0, r1
    1f60:	d8 f7       	brcc	.-10     	; 0x1f58 <strnlen+0x2>
    1f62:	80 95       	com	r24
    1f64:	90 95       	com	r25
    1f66:	8e 0f       	add	r24, r30
    1f68:	9f 1f       	adc	r25, r31
    1f6a:	08 95       	ret

00001f6c <fputc>:
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	fb 01       	movw	r30, r22
    1f76:	23 81       	ldd	r18, Z+3	; 0x03
    1f78:	21 fd       	sbrc	r18, 1
    1f7a:	03 c0       	rjmp	.+6      	; 0x1f82 <fputc+0x16>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	2c c0       	rjmp	.+88     	; 0x1fda <fputc+0x6e>
    1f82:	22 ff       	sbrs	r18, 2
    1f84:	16 c0       	rjmp	.+44     	; 0x1fb2 <fputc+0x46>
    1f86:	46 81       	ldd	r20, Z+6	; 0x06
    1f88:	57 81       	ldd	r21, Z+7	; 0x07
    1f8a:	24 81       	ldd	r18, Z+4	; 0x04
    1f8c:	35 81       	ldd	r19, Z+5	; 0x05
    1f8e:	42 17       	cp	r20, r18
    1f90:	53 07       	cpc	r21, r19
    1f92:	44 f4       	brge	.+16     	; 0x1fa4 <fputc+0x38>
    1f94:	a0 81       	ld	r26, Z
    1f96:	b1 81       	ldd	r27, Z+1	; 0x01
    1f98:	9d 01       	movw	r18, r26
    1f9a:	2f 5f       	subi	r18, 0xFF	; 255
    1f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9e:	31 83       	std	Z+1, r19	; 0x01
    1fa0:	20 83       	st	Z, r18
    1fa2:	8c 93       	st	X, r24
    1fa4:	26 81       	ldd	r18, Z+6	; 0x06
    1fa6:	37 81       	ldd	r19, Z+7	; 0x07
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	37 83       	std	Z+7, r19	; 0x07
    1fae:	26 83       	std	Z+6, r18	; 0x06
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <fputc+0x6e>
    1fb2:	8b 01       	movw	r16, r22
    1fb4:	ec 01       	movw	r28, r24
    1fb6:	fb 01       	movw	r30, r22
    1fb8:	00 84       	ldd	r0, Z+8	; 0x08
    1fba:	f1 85       	ldd	r31, Z+9	; 0x09
    1fbc:	e0 2d       	mov	r30, r0
    1fbe:	09 95       	icall
    1fc0:	89 2b       	or	r24, r25
    1fc2:	e1 f6       	brne	.-72     	; 0x1f7c <fputc+0x10>
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	16 96       	adiw	r26, 0x06	; 6
    1fc8:	8d 91       	ld	r24, X+
    1fca:	9c 91       	ld	r25, X
    1fcc:	17 97       	sbiw	r26, 0x07	; 7
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	17 96       	adiw	r26, 0x07	; 7
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
    1fd6:	16 97       	sbiw	r26, 0x06	; 6
    1fd8:	ce 01       	movw	r24, r28
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	08 95       	ret

00001fe4 <__ultoa_invert>:
    1fe4:	fa 01       	movw	r30, r20
    1fe6:	aa 27       	eor	r26, r26
    1fe8:	28 30       	cpi	r18, 0x08	; 8
    1fea:	51 f1       	breq	.+84     	; 0x2040 <__ultoa_invert+0x5c>
    1fec:	20 31       	cpi	r18, 0x10	; 16
    1fee:	81 f1       	breq	.+96     	; 0x2050 <__ultoa_invert+0x6c>
    1ff0:	e8 94       	clt
    1ff2:	6f 93       	push	r22
    1ff4:	6e 7f       	andi	r22, 0xFE	; 254
    1ff6:	6e 5f       	subi	r22, 0xFE	; 254
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffe:	af 4f       	sbci	r26, 0xFF	; 255
    2000:	b1 e0       	ldi	r27, 0x01	; 1
    2002:	3e d0       	rcall	.+124    	; 0x2080 <__ultoa_invert+0x9c>
    2004:	b4 e0       	ldi	r27, 0x04	; 4
    2006:	3c d0       	rcall	.+120    	; 0x2080 <__ultoa_invert+0x9c>
    2008:	67 0f       	add	r22, r23
    200a:	78 1f       	adc	r23, r24
    200c:	89 1f       	adc	r24, r25
    200e:	9a 1f       	adc	r25, r26
    2010:	a1 1d       	adc	r26, r1
    2012:	68 0f       	add	r22, r24
    2014:	79 1f       	adc	r23, r25
    2016:	8a 1f       	adc	r24, r26
    2018:	91 1d       	adc	r25, r1
    201a:	a1 1d       	adc	r26, r1
    201c:	6a 0f       	add	r22, r26
    201e:	71 1d       	adc	r23, r1
    2020:	81 1d       	adc	r24, r1
    2022:	91 1d       	adc	r25, r1
    2024:	a1 1d       	adc	r26, r1
    2026:	20 d0       	rcall	.+64     	; 0x2068 <__ultoa_invert+0x84>
    2028:	09 f4       	brne	.+2      	; 0x202c <__ultoa_invert+0x48>
    202a:	68 94       	set
    202c:	3f 91       	pop	r19
    202e:	2a e0       	ldi	r18, 0x0A	; 10
    2030:	26 9f       	mul	r18, r22
    2032:	11 24       	eor	r1, r1
    2034:	30 19       	sub	r19, r0
    2036:	30 5d       	subi	r19, 0xD0	; 208
    2038:	31 93       	st	Z+, r19
    203a:	de f6       	brtc	.-74     	; 0x1ff2 <__ultoa_invert+0xe>
    203c:	cf 01       	movw	r24, r30
    203e:	08 95       	ret
    2040:	46 2f       	mov	r20, r22
    2042:	47 70       	andi	r20, 0x07	; 7
    2044:	40 5d       	subi	r20, 0xD0	; 208
    2046:	41 93       	st	Z+, r20
    2048:	b3 e0       	ldi	r27, 0x03	; 3
    204a:	0f d0       	rcall	.+30     	; 0x206a <__ultoa_invert+0x86>
    204c:	c9 f7       	brne	.-14     	; 0x2040 <__ultoa_invert+0x5c>
    204e:	f6 cf       	rjmp	.-20     	; 0x203c <__ultoa_invert+0x58>
    2050:	46 2f       	mov	r20, r22
    2052:	4f 70       	andi	r20, 0x0F	; 15
    2054:	40 5d       	subi	r20, 0xD0	; 208
    2056:	4a 33       	cpi	r20, 0x3A	; 58
    2058:	18 f0       	brcs	.+6      	; 0x2060 <__ultoa_invert+0x7c>
    205a:	49 5d       	subi	r20, 0xD9	; 217
    205c:	31 fd       	sbrc	r19, 1
    205e:	40 52       	subi	r20, 0x20	; 32
    2060:	41 93       	st	Z+, r20
    2062:	02 d0       	rcall	.+4      	; 0x2068 <__ultoa_invert+0x84>
    2064:	a9 f7       	brne	.-22     	; 0x2050 <__ultoa_invert+0x6c>
    2066:	ea cf       	rjmp	.-44     	; 0x203c <__ultoa_invert+0x58>
    2068:	b4 e0       	ldi	r27, 0x04	; 4
    206a:	a6 95       	lsr	r26
    206c:	97 95       	ror	r25
    206e:	87 95       	ror	r24
    2070:	77 95       	ror	r23
    2072:	67 95       	ror	r22
    2074:	ba 95       	dec	r27
    2076:	c9 f7       	brne	.-14     	; 0x206a <__ultoa_invert+0x86>
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	61 05       	cpc	r22, r1
    207c:	71 05       	cpc	r23, r1
    207e:	08 95       	ret
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	0a 2e       	mov	r0, r26
    2086:	06 94       	lsr	r0
    2088:	57 95       	ror	r21
    208a:	47 95       	ror	r20
    208c:	37 95       	ror	r19
    208e:	27 95       	ror	r18
    2090:	ba 95       	dec	r27
    2092:	c9 f7       	brne	.-14     	; 0x2086 <__ultoa_invert+0xa2>
    2094:	62 0f       	add	r22, r18
    2096:	73 1f       	adc	r23, r19
    2098:	84 1f       	adc	r24, r20
    209a:	95 1f       	adc	r25, r21
    209c:	a0 1d       	adc	r26, r0
    209e:	08 95       	ret

000020a0 <_exit>:
    20a0:	f8 94       	cli

000020a2 <__stop_program>:
    20a2:	ff cf       	rjmp	.-2      	; 0x20a2 <__stop_program>
