
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000326  00800100  0000210a  0000219e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000210a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d8  00800426  00800426  000024c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042aa  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130d  00000000  00000000  00006aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002011  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c0  00000000  00000000  00009dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb2  00000000  00000000  0000a698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a59  00000000  00000000  0000b24a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000dca3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0a c5       	rjmp	.+2580   	; 0xa52 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3f       	cpi	r26, 0xFE	; 254
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	19 d5       	rcall	.+2610   	; 0xaf6 <main>
      c4:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_18>:
	TICK.tick_1ms++;
	buzz_play(); //
}

ISR(USART0_RX_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	uint8_t buff=UDR0;
      f0:	8c b1       	in	r24, 0x0c	; 12
	uart0.buf=buff;
      f2:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uart0+0x66>
	
	uart1_tx_char(buff);
      f6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <uart1_tx_char>
}
      fa:	ff 91       	pop	r31
      fc:	ef 91       	pop	r30
      fe:	bf 91       	pop	r27
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0b be       	out	0x3b, r0	; 59
     116:	0f 90       	pop	r0
     118:	0f be       	out	0x3f, r0	; 63
     11a:	0f 90       	pop	r0
     11c:	1f 90       	pop	r1
     11e:	18 95       	reti

00000120 <__vector_30>:

//여기에 들어가있는 코드는 완전 뒤죽박죽임. 수정해야할 상황이 생긴다면, 차라리 새로짜는게 더 낫습니다.
ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
     120:	1f 92       	push	r1
     122:	0f 92       	push	r0
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	0f 92       	push	r0
     128:	11 24       	eor	r1, r1
     12a:	0b b6       	in	r0, 0x3b	; 59
     12c:	0f 92       	push	r0
     12e:	1f 93       	push	r17
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	00 d0       	rcall	.+0      	; 0x14e <__vector_30+0x2e>
     14e:	1f 92       	push	r1
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cnt=0;
	//static uint8_t receive_length=0;
	static uint8_t parse_cnt=0;
	static uint8_t data_cnt=0;
	static uint8_t parse_data_flag=0;
	uint8_t buff=UDR1;
     154:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
     158:	1e 33       	cpi	r17, 0x3E	; 62
     15a:	21 f4       	brne	.+8      	; 0x164 <__vector_30+0x44>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <esp8266_send_ready_flag>
     162:	42 c0       	rjmp	.+132    	; 0x1e8 <__vector_30+0xc8>
	
	else if(buff=='O') cnt=1;
     164:	1f 34       	cpi	r17, 0x4F	; 79
     166:	21 f4       	brne	.+8      	; 0x170 <__vector_30+0x50>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <cnt.2423>
     16e:	3c c0       	rjmp	.+120    	; 0x1e8 <__vector_30+0xc8>
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
     170:	1b 34       	cpi	r17, 0x4B	; 75
     172:	51 f4       	brne	.+20     	; 0x188 <__vector_30+0x68>
     174:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <cnt.2423>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <__vector_30+0x5e>
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__vector_30+0x16c>
     17e:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <esp8266_return_result_flag>
     182:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2423>
     186:	30 c0       	rjmp	.+96     	; 0x1e8 <__vector_30+0xc8>
	else cnt=0;
     188:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2423>
// 	else if(buff=='}')esp8266_receiving_flag=0;
// 	else if(buff=='{')esp8266_receiving_flag=1;
	
	if(buff=='+')parse_cnt=1;//
     18c:	1b 32       	cpi	r17, 0x2B	; 43
     18e:	21 f4       	brne	.+8      	; 0x198 <__vector_30+0x78>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
     196:	76 c0       	rjmp	.+236    	; 0x284 <__vector_30+0x164>
	else if(buff=='I'&&parse_cnt==1)parse_cnt++; //cnt=2
     198:	19 34       	cpi	r17, 0x49	; 73
     19a:	41 f4       	brne	.+16     	; 0x1ac <__vector_30+0x8c>
     19c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2424>
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	11 f5       	brne	.+68     	; 0x1e8 <__vector_30+0xc8>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
     1aa:	6c c0       	rjmp	.+216    	; 0x284 <__vector_30+0x164>
	else if(buff=='P'&&parse_cnt==2)parse_cnt++; //cnt=3
     1ac:	10 35       	cpi	r17, 0x50	; 80
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <__vector_30+0xa0>
     1b0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2424>
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	c1 f4       	brne	.+48     	; 0x1e8 <__vector_30+0xc8>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
     1be:	62 c0       	rjmp	.+196    	; 0x284 <__vector_30+0x164>
	else if(buff=='D'&&parse_cnt==3)parse_cnt++; //cnt=4
     1c0:	14 34       	cpi	r17, 0x44	; 68
     1c2:	41 f4       	brne	.+16     	; 0x1d4 <__vector_30+0xb4>
     1c4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2424>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_30+0xc8>
     1cc:	84 e0       	ldi	r24, 0x04	; 4
     1ce:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
     1d2:	58 c0       	rjmp	.+176    	; 0x284 <__vector_30+0x164>
	else if(buff==','&&parse_cnt==4)parse_cnt++;	
     1d4:	1c 32       	cpi	r17, 0x2C	; 44
     1d6:	41 f4       	brne	.+16     	; 0x1e8 <__vector_30+0xc8>
     1d8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2424>
     1dc:	84 30       	cpi	r24, 0x04	; 4
     1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_30+0xc8>
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
     1e6:	4e c0       	rjmp	.+156    	; 0x284 <__vector_30+0x164>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
     1e8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2424>
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	91 f4       	brne	.+36     	; 0x214 <__vector_30+0xf4>
	{
		receive_length=buff; parse_cnt++; //
     1f0:	10 93 31 04 	sts	0x0431, r17	; 0x800431 <receive_length>
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2424>
		char buf_1[2]= {receive_length,0};
     1fa:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <receive_length>
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	1a 82       	std	Y+2, r1	; 0x02
		receive_length_int=atoi((char*)buf_1);
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <atoi>
     20a:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <receive_length_int+0x1>
     20e:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <receive_length_int>
     212:	38 c0       	rjmp	.+112    	; 0x284 <__vector_30+0x164>
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
     214:	86 30       	cpi	r24, 0x06	; 6
     216:	c1 f4       	brne	.+48     	; 0x248 <__vector_30+0x128>
     218:	1a 33       	cpi	r17, 0x3A	; 58
     21a:	71 f0       	breq	.+28     	; 0x238 <__vector_30+0x118>
	{
		char buf_2[3]={receive_length,buff,0};
     21c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <receive_length>
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	1a 83       	std	Y+2, r17	; 0x02
     224:	1b 82       	std	Y+3, r1	; 0x03
		receive_length_int = atoi((char*)buf_2);
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <atoi>
     22e:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <receive_length_int+0x1>
     232:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <receive_length_int>
		receive_length_int=atoi((char*)buf_1);
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
	{
     236:	26 c0       	rjmp	.+76     	; 0x284 <__vector_30+0x164>
		memset(buf_2,0,sizeof(buf_2));
	}
	else if(parse_cnt==6) //:가 들어왔을 때 
	{
		//esp8266_receiving_flag=1;
		parse_cnt=0; data_cnt=0; parse_data_flag=1;
     238:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2424>
     23c:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <data_cnt.2425>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <parse_data_flag.2426>
     246:	1e c0       	rjmp	.+60     	; 0x284 <__vector_30+0x164>
	}
	else if(parse_data_flag){ //길이가 4인 데이터
     248:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <parse_data_flag.2426>
     24c:	88 23       	and	r24, r24
     24e:	c1 f0       	breq	.+48     	; 0x280 <__vector_30+0x160>
		esp8266_received_data[data_cnt]=buff;
     250:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <data_cnt.2425>
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e6 54       	subi	r30, 0x46	; 70
     25a:	fb 4f       	sbci	r31, 0xFB	; 251
     25c:	10 83       	st	Z, r17
		data_cnt++;
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <data_cnt.2425>
		if(data_cnt==receive_length_int) {esp8266_receiving_flag=1; parse_data_flag=0; }
     264:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <receive_length_int>
     268:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <receive_length_int+0x1>
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	41 f4       	brne	.+16     	; 0x284 <__vector_30+0x164>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <esp8266_receiving_flag>
     27a:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <parse_data_flag.2426>
     27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_30+0x164>
	}
	else parse_cnt=0;
     280:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2424>
	//if(buff=='{')esp8266_receiving_flag=1;
	
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
     284:	81 2f       	mov	r24, r17
     286:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
	
}
     28a:	03 c0       	rjmp	.+6      	; 0x292 <__vector_30+0x172>
	uint8_t buff=UDR1;
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
	
	else if(buff=='O') cnt=1;
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
	else cnt=0;
     28c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2423>
     290:	ab cf       	rjmp	.-170    	; 0x1e8 <__vector_30+0xc8>
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
	
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	1f 91       	pop	r17
     2b6:	0f 90       	pop	r0
     2b8:	0b be       	out	0x3b, r0	; 59
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <rfid_user_uid_buffer_init>:
	

}

void rfid_user_uid_buffer_init(void)
{
     2c4:	89 e3       	ldi	r24, 0x39	; 57
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	42 e5       	ldi	r20, 0x52	; 82
     2ca:	54 e0       	ldi	r21, 0x04	; 4
	for(int i=0; i<MAX_USER_COUNT;i++)
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	e0 e9       	ldi	r30, 0x90	; 144
     2d0:	f2 e0       	ldi	r31, 0x02	; 2
     2d2:	dc 01       	movw	r26, r24
     2d4:	01 90       	ld	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	2a 95       	dec	r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <rfid_user_uid_buffer_init+0x10>
     2dc:	05 96       	adiw	r24, 0x05	; 5

}

void rfid_user_uid_buffer_init(void)
{
	for(int i=0; i<MAX_USER_COUNT;i++)
     2de:	84 17       	cp	r24, r20
     2e0:	95 07       	cpc	r25, r21
     2e2:	a1 f7       	brne	.-24     	; 0x2cc <rfid_user_uid_buffer_init+0x8>
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
	}
	i2c_lcd_string(2,0,"     OOOOOOOOOO     ");
     2e4:	45 e0       	ldi	r20, 0x05	; 5
     2e6:	51 e0       	ldi	r21, 0x01	; 1
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	fa d6       	rcall	.+3572   	; 0x10e2 <i2c_lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	89 e6       	ldi	r24, 0x69	; 105
     2f2:	98 e1       	ldi	r25, 0x18	; 24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	90 40       	sbci	r25, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <rfid_user_uid_buffer_init+0x30>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <rfid_user_uid_buffer_init+0x3a>
     2fe:	00 00       	nop
     300:	08 95       	ret

00000302 <mfrc_print_serial>:
	_delay_ms(500);
}

void mfrc_print_serial(int _type, unsigned char ch)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	c6 2f       	mov	r28, r22
	switch(_type)
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	69 f1       	breq	.+90     	; 0x372 <mfrc_print_serial+0x70>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 05       	cpc	r25, r1
     31c:	09 f4       	brne	.+2      	; 0x320 <mfrc_print_serial+0x1e>
     31e:	55 c0       	rjmp	.+170    	; 0x3ca <mfrc_print_serial+0xc8>
     320:	89 2b       	or	r24, r25
     322:	09 f0       	breq	.+2      	; 0x326 <mfrc_print_serial+0x24>
     324:	7e c0       	rjmp	.+252    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     326:	8a e1       	ldi	r24, 0x1A	; 26
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     32e:	02 ed       	ldi	r16, 0xD2	; 210
     330:	15 e0       	ldi	r17, 0x05	; 5
     332:	0f 2e       	mov	r0, r31
     334:	f4 ee       	ldi	r31, 0xE4	; 228
     336:	ef 2e       	mov	r14, r31
     338:	f5 e0       	ldi	r31, 0x05	; 5
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	0f 2e       	mov	r0, r31
     340:	f6 ed       	ldi	r31, 0xD6	; 214
     342:	cf 2e       	mov	r12, r31
     344:	f5 e0       	ldi	r31, 0x05	; 5
     346:	df 2e       	mov	r13, r31
     348:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     34a:	c1 11       	cpse	r28, r1
     34c:	05 c0       	rjmp	.+10     	; 0x358 <mfrc_print_serial+0x56>
     34e:	f8 01       	movw	r30, r16
     350:	80 81       	ld	r24, Z
     352:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
     356:	04 c0       	rjmp	.+8      	; 0x360 <mfrc_print_serial+0x5e>
			else uart0_tx_char(rfid_uid_ch1[i]);
     358:	f7 01       	movw	r30, r14
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	ff ef       	ldi	r31, 0xFF	; 255
     366:	ef 1a       	sub	r14, r31
     368:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     36a:	0c 15       	cp	r16, r12
     36c:	1d 05       	cpc	r17, r13
     36e:	69 f7       	brne	.-38     	; 0x34a <mfrc_print_serial+0x48>
     370:	58 c0       	rjmp	.+176    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     372:	84 e2       	ldi	r24, 0x24	; 36
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     37a:	02 ed       	ldi	r16, 0xD2	; 210
     37c:	15 e0       	ldi	r17, 0x05	; 5
     37e:	0f 2e       	mov	r0, r31
     380:	f4 ee       	ldi	r31, 0xE4	; 228
     382:	ef 2e       	mov	r14, r31
     384:	f5 e0       	ldi	r31, 0x05	; 5
     386:	ff 2e       	mov	r15, r31
     388:	f0 2d       	mov	r31, r0
     38a:	0f 2e       	mov	r0, r31
     38c:	f6 ed       	ldi	r31, 0xD6	; 214
     38e:	cf 2e       	mov	r12, r31
     390:	f5 e0       	ldi	r31, 0x05	; 5
     392:	df 2e       	mov	r13, r31
     394:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     396:	c1 11       	cpse	r28, r1
     398:	08 c0       	rjmp	.+16     	; 0x3aa <mfrc_print_serial+0xa8>
     39a:	f8 01       	movw	r30, r16
     39c:	80 81       	ld	r24, Z
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 41 0c 	call	0x1882	; 0x1882 <IntToString>
     3a4:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <mfrc_print_serial+0xb6>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     3aa:	f7 01       	movw	r30, r14
     3ac:	80 81       	ld	r24, Z
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 41 0c 	call	0x1882	; 0x1882 <IntToString>
     3b4:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ff ef       	ldi	r31, 0xFF	; 255
     3be:	ef 1a       	sub	r14, r31
     3c0:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     3c2:	0c 15       	cp	r16, r12
     3c4:	1d 05       	cpc	r17, r13
     3c6:	39 f7       	brne	.-50     	; 0x396 <mfrc_print_serial+0x94>
     3c8:	2c c0       	rjmp	.+88     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     3ca:	8c e2       	ldi	r24, 0x2C	; 44
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     3d2:	02 ed       	ldi	r16, 0xD2	; 210
     3d4:	15 e0       	ldi	r17, 0x05	; 5
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f4 ee       	ldi	r31, 0xE4	; 228
     3da:	ef 2e       	mov	r14, r31
     3dc:	f5 e0       	ldi	r31, 0x05	; 5
     3de:	ff 2e       	mov	r15, r31
     3e0:	f0 2d       	mov	r31, r0
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f6 ed       	ldi	r31, 0xD6	; 214
     3e6:	cf 2e       	mov	r12, r31
     3e8:	f5 e0       	ldi	r31, 0x05	; 5
     3ea:	df 2e       	mov	r13, r31
     3ec:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     3ee:	c1 11       	cpse	r28, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f2:	f8 01       	movw	r30, r16
     3f4:	80 81       	ld	r24, Z
     3f6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HexToString>
     3fa:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     400:	f7 01       	movw	r30, r14
     402:	80 81       	ld	r24, Z
     404:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <HexToString>
     408:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
			uart0_tx_char(' ');
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
     412:	0f 5f       	subi	r16, 0xFF	; 255
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	ff ef       	ldi	r31, 0xFF	; 255
     418:	ef 1a       	sub	r14, r31
     41a:	ff 0a       	sbc	r15, r31
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     41c:	0c 15       	cp	r16, r12
     41e:	1d 05       	cpc	r17, r13
     420:	31 f7       	brne	.-52     	; 0x3ee <mfrc_print_serial+0xec>
		
		break;
		
	}
	
}
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <mfrc_check_and_data_receive_ch0>:
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
}

char mfrc_check_and_data_receive_ch0(void){ 
     432:	cf 93       	push	r28
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     434:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <noise_flag.2472>
     438:	81 11       	cpse	r24, r1
     43a:	09 c0       	rjmp	.+18     	; 0x44e <mfrc_check_and_data_receive_ch0+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	62 ed       	ldi	r22, 0xD2	; 210
     440:	75 e0       	ldi	r23, 0x05	; 5
     442:	82 e5       	ldi	r24, 0x52	; 82
     444:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     448:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2474>
     44c:	1d c0       	rjmp	.+58     	; 0x488 <mfrc_check_and_data_receive_ch0+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     44e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <toggle_flag.2473>
     452:	88 23       	and	r24, r24
     454:	39 f0       	breq	.+14     	; 0x464 <mfrc_check_and_data_receive_ch0+0x32>
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	62 ed       	ldi	r22, 0xD2	; 210
     45a:	75 e0       	ldi	r23, 0x05	; 5
     45c:	82 e5       	ldi	r24, 0x52	; 82
     45e:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     462:	0c c0       	rjmp	.+24     	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	62 ed       	ldi	r22, 0xD2	; 210
     468:	75 e0       	ldi	r23, 0x05	; 5
     46a:	82 e5       	ldi	r24, 0x52	; 82
     46c:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     470:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2474>
			if(_byte==ERROR) noise_flag=0;
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	11 f4       	brne	.+4      	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
     478:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <noise_flag.2472>
		}
			
		toggle_flag^=0x01;
     47c:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <toggle_flag.2473>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	89 27       	eor	r24, r25
     484:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2473>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     488:	c0 91 2a 04 	lds	r28, 0x042A	; 0x80042a <_byte.2474>
     48c:	c1 30       	cpi	r28, 0x01	; 1
     48e:	29 f0       	breq	.+10     	; 0x49a <mfrc_check_and_data_receive_ch0+0x68>
	{
		detected_flag_ch0=NON_DETECTED;  
     490:	88 e5       	ldi	r24, 0x58	; 88
     492:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		return RECEIVE_NONE;
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     49a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     49e:	88 35       	cpi	r24, 0x58	; 88
     4a0:	29 f5       	brne	.+74     	; 0x4ec <mfrc_check_and_data_receive_ch0+0xba>
	{
		detected_flag_ch0=DETECED;
     4a2:	8f e4       	ldi	r24, 0x4F	; 79
     4a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <noise_flag.2472>
		toggle_flag=1;
     4ae:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2473>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	82 ed       	ldi	r24, 0xD2	; 210
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	0e 94 48 0b 	call	0x1690	; 0x1690 <mfrc522_get_card_serial>
     4bc:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2474>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	b1 f4       	brne	.+44     	; 0x4f0 <mfrc_check_and_data_receive_ch0+0xbe>

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			if(DUMMY_TEST_SERIAL){
				uart0_tx_string("[CHECK UID(CH0)]: ");
     4c4:	84 e3       	ldi	r24, 0x34	; 52
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
				mfrc_print_serial(ASCII_TYPE,CH0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	17 df       	rcall	.-466    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(DECIMAL_TYPE,CH0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	13 df       	rcall	.-474    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0f df       	rcall	.-482    	; 0x302 <mfrc_print_serial>
				uart0_tx_char('\n');
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
			}
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     4f0:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     4f2:	8c 2f       	mov	r24, r28
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     4f8:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     4fa:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noise_flag.2478>
     4fe:	81 11       	cpse	r24, r1
     500:	09 c0       	rjmp	.+18     	; 0x514 <mfrc_check_and_data_receive_ch1+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	64 ee       	ldi	r22, 0xE4	; 228
     506:	75 e0       	ldi	r23, 0x05	; 5
     508:	82 e5       	ldi	r24, 0x52	; 82
     50a:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     50e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2480>
     512:	1d c0       	rjmp	.+58     	; 0x54e <mfrc_check_and_data_receive_ch1+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     514:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     518:	88 23       	and	r24, r24
     51a:	39 f0       	breq	.+14     	; 0x52a <mfrc_check_and_data_receive_ch1+0x32>
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	64 ee       	ldi	r22, 0xE4	; 228
     520:	75 e0       	ldi	r23, 0x05	; 5
     522:	82 e5       	ldi	r24, 0x52	; 82
     524:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     528:	0c c0       	rjmp	.+24     	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	64 ee       	ldi	r22, 0xE4	; 228
     52e:	75 e0       	ldi	r23, 0x05	; 5
     530:	82 e5       	ldi	r24, 0x52	; 82
     532:	0e 94 13 0b 	call	0x1626	; 0x1626 <mfrc522_request>
     536:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2480>
			if(_byte==ERROR) noise_flag=0;
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	11 f4       	brne	.+4      	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
     53e:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <noise_flag.2478>
		}
		toggle_flag^=0x01;
     542:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <__data_end>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 27       	eor	r24, r25
     54a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     54e:	c0 91 27 04 	lds	r28, 0x0427	; 0x800427 <_byte.2480>
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	29 f0       	breq	.+10     	; 0x560 <mfrc_check_and_data_receive_ch1+0x68>
	{
		detected_flag_ch1=NON_DETECTED;  
     556:	88 e5       	ldi	r24, 0x58	; 88
     558:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		return RECEIVE_NONE;
     55c:	c0 e0       	ldi	r28, 0x00	; 0
     55e:	2c c0       	rjmp	.+88     	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     560:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     564:	88 35       	cpi	r24, 0x58	; 88
     566:	29 f5       	brne	.+74     	; 0x5b2 <mfrc_check_and_data_receive_ch1+0xba>
	{
		detected_flag_ch1=DETECED;
     568:	8f e4       	ldi	r24, 0x4F	; 79
     56a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		noise_flag=1; //얘가 첫 순간임.
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <noise_flag.2478>
		toggle_flag=1;
     574:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	84 ee       	ldi	r24, 0xE4	; 228
     57c:	95 e0       	ldi	r25, 0x05	; 5
     57e:	0e 94 48 0b 	call	0x1690	; 0x1690 <mfrc522_get_card_serial>
     582:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2480>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	b1 f4       	brne	.+44     	; 0x5b6 <mfrc_check_and_data_receive_ch1+0xbe>
			if(DUMMY_TEST_SERIAL){
						uart0_tx_string("[CHECK UID(CH1)]: ");
     58a:	87 e4       	ldi	r24, 0x47	; 71
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 1d 0c 	call	0x183a	; 0x183a <uart0_tx_string>
						mfrc_print_serial(ASCII_TYPE,CH1);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	b4 de       	rcall	.-664    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	b0 de       	rcall	.-672    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	ac de       	rcall	.-680    	; 0x302 <mfrc_print_serial>
						uart0_tx_char('\n');
     5aa:	8a e0       	ldi	r24, 0x0A	; 10
     5ac:	0e 94 19 0c 	call	0x1832	; 0x1832 <uart0_tx_char>
			}
			return RECEIVE_SUCCESS;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
						uart0_tx_char('\n');
			}
			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     5b6:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     5b8:	8c 2f       	mov	r24, r28
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <esp8266_init>:

//AP 끊는함수하고, TCP끊는거, 다시연결하는거 등등 > 터미널환경에서 가능케 할수도 있어야함
//리셋, 실패시 ssid, passward 묻고, 마찬가지로 TCP연결 실패시 또한 다시 ip, port 묻는다

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port)
{
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	7c 01       	movw	r14, r24
     5d0:	6b 01       	movw	r12, r22
     5d2:	ea 01       	movw	r28, r20
     5d4:	89 01       	movw	r16, r18
	uart1_tx_string("AT+RST\r\n");	 //리셋 신호 이후 추가 데이터가 들어와서, 딜레이로 강제 정지 시켜줘야 함
     5d6:	8a e5       	ldi	r24, 0x5A	; 90
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
     5de:	2f ef       	ldi	r18, 0xFF	; 255
     5e0:	81 e1       	ldi	r24, 0x11	; 17
     5e2:	9a e7       	ldi	r25, 0x7A	; 122
     5e4:	21 50       	subi	r18, 0x01	; 1
     5e6:	80 40       	sbci	r24, 0x00	; 0
     5e8:	90 40       	sbci	r25, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <esp8266_init+0x26>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <esp8266_init+0x30>
     5ee:	00 00       	nop
	_delay_ms(2500);
	i2c_lcd_string(2,0,"     OOO_______     ");
     5f0:	43 e6       	ldi	r20, 0x63	; 99
     5f2:	51 e0       	ldi	r21, 0x01	; 1
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	74 d5       	rcall	.+2792   	; 0x10e2 <i2c_lcd_string>
	
	uart1_tx_string("AT+GMR\r\n");
     5fa:	88 e7       	ldi	r24, 0x78	; 120
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     602:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     606:	88 23       	and	r24, r24
     608:	e1 f3       	breq	.-8      	; 0x602 <esp8266_init+0x44>
	esp8266_return_result_flag=0;
     60a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWMODE=1\r\n"); // OK sign 말고도 다른 신호도 들어오기 때문에 걸어놓음
     60e:	81 e8       	ldi	r24, 0x81	; 129
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
     616:	2f ef       	ldi	r18, 0xFF	; 255
     618:	87 ea       	ldi	r24, 0xA7	; 167
     61a:	91 e6       	ldi	r25, 0x61	; 97
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	90 40       	sbci	r25, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <esp8266_init+0x5e>
     624:	00 c0       	rjmp	.+0      	; 0x626 <esp8266_init+0x68>
     626:	00 00       	nop
	_delay_ms(2000);
	esp8266_return_result_flag=0;
     628:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOO______     ");
     62c:	4f e8       	ldi	r20, 0x8F	; 143
     62e:	51 e0       	ldi	r21, 0x01	; 1
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	56 d5       	rcall	.+2732   	; 0x10e2 <i2c_lcd_string>
	
	//
	uart1_tx_string("AT+CWMODE?\r\n");
     636:	84 ea       	ldi	r24, 0xA4	; 164
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     63e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     642:	88 23       	and	r24, r24
     644:	e1 f3       	breq	.-8      	; 0x63e <esp8266_init+0x80>
	esp8266_return_result_flag=0;
     646:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWLAP\r\n");
     64a:	81 eb       	ldi	r24, 0xB1	; 177
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     652:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     656:	88 23       	and	r24, r24
     658:	e1 f3       	breq	.-8      	; 0x652 <esp8266_init+0x94>
	esp8266_return_result_flag=0;
     65a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOO_____     ");
     65e:	4c eb       	ldi	r20, 0xBC	; 188
     660:	51 e0       	ldi	r21, 0x01	; 1
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	3d d5       	rcall	.+2682   	; 0x10e2 <i2c_lcd_string>
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
     668:	a6 01       	movw	r20, r12
     66a:	b7 01       	movw	r22, r14
     66c:	81 ed       	ldi	r24, 0xD1	; 209
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 9f 0c 	call	0x193e	; 0x193e <connect_to_AP>
     674:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     678:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     67c:	88 23       	and	r24, r24
     67e:	e1 f3       	breq	.-8      	; 0x678 <esp8266_init+0xba>
	esp8266_return_result_flag=0;
     680:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOO____     ");
     684:	4c ed       	ldi	r20, 0xDC	; 220
     686:	51 e0       	ldi	r21, 0x01	; 1
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	2a d5       	rcall	.+2644   	; 0x10e2 <i2c_lcd_string>
	//AT+SWQAP  AP 접속 끊기
	uart1_tx_string("AT+CIFSR\r\n");
     68e:	81 ef       	ldi	r24, 0xF1	; 241
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     696:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     69a:	88 23       	and	r24, r24
     69c:	e1 f3       	breq	.-8      	; 0x696 <esp8266_init+0xd8>
	esp8266_return_result_flag=0;
     69e:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOO___     ");
     6a2:	4c ef       	ldi	r20, 0xFC	; 252
     6a4:	51 e0       	ldi	r21, 0x01	; 1
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	1b d5       	rcall	.+2614   	; 0x10e2 <i2c_lcd_string>
	
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
     6ac:	b8 01       	movw	r22, r16
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TCP_connect>
     6b4:	0e 94 33 0c 	call	0x1866	; 0x1866 <uart1_tx_string>
	//AT+CIPCLOSE 
	//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     6b8:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     6bc:	88 23       	and	r24, r24
     6be:	e1 f3       	breq	.-8      	; 0x6b8 <esp8266_init+0xfa>
	esp8266_return_result_flag=0;
     6c0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOOO__     ");
     6c4:	41 e1       	ldi	r20, 0x11	; 17
     6c6:	52 e0       	ldi	r21, 0x02	; 2
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0a d5       	rcall	.+2580   	; 0x10e2 <i2c_lcd_string>
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	81 ee       	ldi	r24, 0xE1	; 225
     6d2:	94 e0       	ldi	r25, 0x04	; 4
     6d4:	21 50       	subi	r18, 0x01	; 1
     6d6:	80 40       	sbci	r24, 0x00	; 0
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <esp8266_init+0x116>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <esp8266_init+0x120>
	//1byte당 해봐야 1ms 정도밖에 소요되지 않는다.
	_delay_ms(100);// OK sign 말고도 Linked sign까지 들어온다. 이 문자까지 잡아내려면 또 구문을 추가해야되는데, 번거로워서 일단 딜레이로 처리함.

	i2c_lcd_string(2,0,"     OOOOOOOOO_     ");
     6de:	00 00       	nop
     6e0:	46 e2       	ldi	r20, 0x26	; 38
     6e2:	52 e0       	ldi	r21, 0x02	; 2
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	fc d4       	rcall	.+2552   	; 0x10e2 <i2c_lcd_string>
	
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	08 95       	ret

000006fc <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 TICK.buzz_1ms=0;
     6fc:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <TICK+0x4>
     700:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <TICK+0x5>
     704:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <TICK+0x6>
     708:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <TICK+0x7>
	 switch(clip)
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	91 f0       	breq	.+36     	; 0x734 <setSoundClip+0x38>
     710:	28 f4       	brcc	.+10     	; 0x71c <setSoundClip+0x20>
     712:	88 23       	and	r24, r24
     714:	41 f0       	breq	.+16     	; 0x726 <setSoundClip+0x2a>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	49 f0       	breq	.+18     	; 0x72c <setSoundClip+0x30>
     71a:	17 c0       	rjmp	.+46     	; 0x74a <setSoundClip+0x4e>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	71 f0       	breq	.+28     	; 0x73c <setSoundClip+0x40>
     720:	84 30       	cpi	r24, 0x04	; 4
     722:	81 f0       	breq	.+32     	; 0x744 <setSoundClip+0x48>
     724:	12 c0       	rjmp	.+36     	; 0x74a <setSoundClip+0x4e>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     726:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <music_flag>
     72a:	0f c0       	rjmp	.+30     	; 0x74a <setSoundClip+0x4e>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     732:	0b c0       	rjmp	.+22     	; 0x74a <setSoundClip+0x4e>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     73a:	07 c0       	rjmp	.+14     	; 0x74a <setSoundClip+0x4e>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     742:	03 c0       	rjmp	.+6      	; 0x74a <setSoundClip+0x4e>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
	 }
	 TICK.buzz_1ms=0;
     74a:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <TICK+0x4>
     74e:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <TICK+0x5>
     752:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <TICK+0x6>
     756:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <TICK+0x7>
     75a:	08 95       	ret

0000075c <buzz_MUTE>:
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     75c:	eb e8       	ldi	r30, 0x8B	; 139
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	8f 7b       	andi	r24, 0xBF	; 191
     764:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     766:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <music_flag>
     76a:	08 95       	ret

0000076c <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	41 f0       	breq	.+16     	; 0x780 <setSoundNote+0x14>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     770:	eb e8       	ldi	r30, 0x8B	; 139
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	20 81       	ld	r18, Z
     776:	20 64       	ori	r18, 0x40	; 64
     778:	20 83       	st	Z, r18
     77a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <setICR3>
     77e:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     780:	eb e8       	ldi	r30, 0x8B	; 139
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8f 7b       	andi	r24, 0xBF	; 191
     788:	80 83       	st	Z, r24
     78a:	08 95       	ret

0000078c <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     78c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <music_flag>
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	09 f4       	brne	.+2      	; 0x796 <buzz_play+0xa>
     794:	74 c0       	rjmp	.+232    	; 0x87e <buzz_play+0xf2>
     796:	28 f4       	brcc	.+10     	; 0x7a2 <buzz_play+0x16>
     798:	88 23       	and	r24, r24
     79a:	51 f0       	breq	.+20     	; 0x7b0 <buzz_play+0x24>
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	51 f0       	breq	.+20     	; 0x7b4 <buzz_play+0x28>
     7a0:	08 95       	ret
     7a2:	83 30       	cpi	r24, 0x03	; 3
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <buzz_play+0x1c>
     7a6:	d0 c0       	rjmp	.+416    	; 0x948 <buzz_play+0x1bc>
     7a8:	84 30       	cpi	r24, 0x04	; 4
     7aa:	09 f4       	brne	.+2      	; 0x7ae <buzz_play+0x22>
     7ac:	10 c1       	rjmp	.+544    	; 0x9ce <buzz_play+0x242>
     7ae:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     7b0:	d5 cf       	rjmp	.-86     	; 0x75c <buzz_MUTE>
     7b2:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     7b4:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     7b8:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     7bc:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     7c0:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     7c4:	88 3c       	cpi	r24, 0xC8	; 200
     7c6:	91 05       	cpc	r25, r1
     7c8:	a1 05       	cpc	r26, r1
     7ca:	b1 05       	cpc	r27, r1
     7cc:	20 f4       	brcc	.+8      	; 0x7d6 <buzz_play+0x4a>
     7ce:	8b e9       	ldi	r24, 0x9B	; 155
     7d0:	96 e0       	ldi	r25, 0x06	; 6
     7d2:	cc cf       	rjmp	.-104    	; 0x76c <setSoundNote>
     7d4:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     7d6:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     7da:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     7de:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     7e2:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     7e6:	88 3c       	cpi	r24, 0xC8	; 200
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <buzz_play+0x6c>
     7f0:	87 ee       	ldi	r24, 0xE7	; 231
     7f2:	95 e0       	ldi	r25, 0x05	; 5
     7f4:	bb cf       	rjmp	.-138    	; 0x76c <setSoundNote>
     7f6:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     7f8:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     7fc:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     800:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     804:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     808:	80 39       	cpi	r24, 0x90	; 144
     80a:	91 40       	sbci	r25, 0x01	; 1
     80c:	a1 05       	cpc	r26, r1
     80e:	b1 05       	cpc	r27, r1
     810:	21 f4       	brne	.+8      	; 0x81a <buzz_play+0x8e>
     812:	85 e6       	ldi	r24, 0x65	; 101
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	aa cf       	rjmp	.-172    	; 0x76c <setSoundNote>
     818:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     81a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     81e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     822:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     826:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     82a:	88 35       	cpi	r24, 0x58	; 88
     82c:	92 40       	sbci	r25, 0x02	; 2
     82e:	a1 05       	cpc	r26, r1
     830:	b1 05       	cpc	r27, r1
     832:	21 f4       	brne	.+8      	; 0x83c <buzz_play+0xb0>
     834:	8d ef       	ldi	r24, 0xFD	; 253
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	99 cf       	rjmp	.-206    	; 0x76c <setSoundNote>
     83a:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     83c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     840:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     844:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     848:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     84c:	80 32       	cpi	r24, 0x20	; 32
     84e:	93 40       	sbci	r25, 0x03	; 3
     850:	a1 05       	cpc	r26, r1
     852:	b1 05       	cpc	r27, r1
     854:	21 f4       	brne	.+8      	; 0x85e <buzz_play+0xd2>
     856:	88 ef       	ldi	r24, 0xF8	; 248
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	88 cf       	rjmp	.-240    	; 0x76c <setSoundNote>
     85c:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     85e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     862:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     866:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     86a:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     86e:	80 3b       	cpi	r24, 0xB0	; 176
     870:	94 40       	sbci	r25, 0x04	; 4
     872:	a1 05       	cpc	r26, r1
     874:	b1 05       	cpc	r27, r1
     876:	09 f0       	breq	.+2      	; 0x87a <buzz_play+0xee>
     878:	eb c0       	rjmp	.+470    	; 0xa50 <buzz_play+0x2c4>
     87a:	70 cf       	rjmp	.-288    	; 0x75c <buzz_MUTE>
     87c:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     87e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     882:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     886:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     88a:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     88e:	88 3c       	cpi	r24, 0xC8	; 200
     890:	91 05       	cpc	r25, r1
     892:	a1 05       	cpc	r26, r1
     894:	b1 05       	cpc	r27, r1
     896:	20 f4       	brcc	.+8      	; 0x8a0 <buzz_play+0x114>
     898:	8b e9       	ldi	r24, 0x9B	; 155
     89a:	96 e0       	ldi	r25, 0x06	; 6
     89c:	67 cf       	rjmp	.-306    	; 0x76c <setSoundNote>
     89e:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     8a0:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8a4:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8a8:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8ac:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8b0:	82 3d       	cpi	r24, 0xD2	; 210
     8b2:	91 05       	cpc	r25, r1
     8b4:	a1 05       	cpc	r26, r1
     8b6:	b1 05       	cpc	r27, r1
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <buzz_play+0x136>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	56 cf       	rjmp	.-340    	; 0x76c <setSoundNote>
     8c0:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     8c2:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8c6:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8ca:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8ce:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8d2:	8c 3d       	cpi	r24, 0xDC	; 220
     8d4:	91 05       	cpc	r25, r1
     8d6:	a1 05       	cpc	r26, r1
     8d8:	b1 05       	cpc	r27, r1
     8da:	21 f4       	brne	.+8      	; 0x8e4 <buzz_play+0x158>
     8dc:	87 ee       	ldi	r24, 0xE7	; 231
     8de:	95 e0       	ldi	r25, 0x05	; 5
     8e0:	45 cf       	rjmp	.-374    	; 0x76c <setSoundNote>
     8e2:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     8e4:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8e8:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8ec:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8f0:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8f4:	80 39       	cpi	r24, 0x90	; 144
     8f6:	91 40       	sbci	r25, 0x01	; 1
     8f8:	a1 05       	cpc	r26, r1
     8fa:	b1 05       	cpc	r27, r1
     8fc:	21 f4       	brne	.+8      	; 0x906 <buzz_play+0x17a>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	34 cf       	rjmp	.-408    	; 0x76c <setSoundNote>
     904:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     906:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     90a:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     90e:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     912:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     916:	8e 3a       	cpi	r24, 0xAE	; 174
     918:	91 40       	sbci	r25, 0x01	; 1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	21 f4       	brne	.+8      	; 0x928 <buzz_play+0x19c>
     920:	85 e6       	ldi	r24, 0x65	; 101
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	23 cf       	rjmp	.-442    	; 0x76c <setSoundNote>
     926:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     928:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     92c:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     930:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     934:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     938:	88 35       	cpi	r24, 0x58	; 88
     93a:	92 40       	sbci	r25, 0x02	; 2
     93c:	a1 05       	cpc	r26, r1
     93e:	b1 05       	cpc	r27, r1
     940:	09 f0       	breq	.+2      	; 0x944 <buzz_play+0x1b8>
     942:	86 c0       	rjmp	.+268    	; 0xa50 <buzz_play+0x2c4>
     944:	0b cf       	rjmp	.-490    	; 0x75c <buzz_MUTE>
     946:	08 95       	ret
		  break;
		  
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     948:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     94c:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     950:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     954:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     958:	84 36       	cpi	r24, 0x64	; 100
     95a:	91 05       	cpc	r25, r1
     95c:	a1 05       	cpc	r26, r1
     95e:	b1 05       	cpc	r27, r1
     960:	20 f4       	brcc	.+8      	; 0x96a <buzz_play+0x1de>
     962:	82 e1       	ldi	r24, 0x12	; 18
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	02 cf       	rjmp	.-508    	; 0x76c <setSoundNote>
     968:	08 95       	ret
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     96a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     96e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     972:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     976:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     97a:	88 3c       	cpi	r24, 0xC8	; 200
     97c:	91 05       	cpc	r25, r1
     97e:	a1 05       	cpc	r26, r1
     980:	b1 05       	cpc	r27, r1
     982:	20 f4       	brcc	.+8      	; 0x98c <buzz_play+0x200>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	f1 ce       	rjmp	.-542    	; 0x76c <setSoundNote>
     98a:	08 95       	ret
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     98c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     990:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     994:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     998:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     99c:	8c 32       	cpi	r24, 0x2C	; 44
     99e:	91 40       	sbci	r25, 0x01	; 1
     9a0:	a1 05       	cpc	r26, r1
     9a2:	b1 05       	cpc	r27, r1
     9a4:	20 f4       	brcc	.+8      	; 0x9ae <buzz_play+0x222>
     9a6:	82 e1       	ldi	r24, 0x12	; 18
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	e0 ce       	rjmp	.-576    	; 0x76c <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     9ac:	08 95       	ret
     9ae:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9b2:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9b6:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9ba:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     9be:	82 3c       	cpi	r24, 0xC2	; 194
     9c0:	91 40       	sbci	r25, 0x01	; 1
     9c2:	a1 05       	cpc	r26, r1
     9c4:	b1 05       	cpc	r27, r1
     9c6:	09 f0       	breq	.+2      	; 0x9ca <buzz_play+0x23e>
     9c8:	43 c0       	rjmp	.+134    	; 0xa50 <buzz_play+0x2c4>
     9ca:	c8 ce       	rjmp	.-624    	; 0x75c <buzz_MUTE>
		  break;
		  case BUZZ_ESP8266_CONNECTED:
		  if(TICK.buzz_1ms<100)setSoundNote(BUZZ_240Hz);
     9cc:	08 95       	ret
     9ce:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9d2:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9d6:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9da:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     9de:	84 36       	cpi	r24, 0x64	; 100
     9e0:	91 05       	cpc	r25, r1
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	20 f4       	brcc	.+8      	; 0x9f0 <buzz_play+0x264>
     9e8:	87 e4       	ldi	r24, 0x47	; 71
     9ea:	90 e1       	ldi	r25, 0x10	; 16
     9ec:	bf ce       	rjmp	.-642    	; 0x76c <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     9ee:	08 95       	ret
     9f0:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9f4:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9f8:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9fc:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a00:	88 3c       	cpi	r24, 0xC8	; 200
     a02:	91 05       	cpc	r25, r1
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	20 f4       	brcc	.+8      	; 0xa12 <buzz_play+0x286>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	ae ce       	rjmp	.-676    	; 0x76c <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_480Hz);
     a10:	08 95       	ret
     a12:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a16:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a1a:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a1e:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a22:	8c 32       	cpi	r24, 0x2C	; 44
     a24:	91 40       	sbci	r25, 0x01	; 1
     a26:	a1 05       	cpc	r26, r1
     a28:	b1 05       	cpc	r27, r1
     a2a:	20 f4       	brcc	.+8      	; 0xa34 <buzz_play+0x2a8>
     a2c:	84 e2       	ldi	r24, 0x24	; 36
     a2e:	98 e0       	ldi	r25, 0x08	; 8
     a30:	9d ce       	rjmp	.-710    	; 0x76c <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     a32:	08 95       	ret
     a34:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a38:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a3c:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a40:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a44:	82 3c       	cpi	r24, 0xC2	; 194
     a46:	91 40       	sbci	r25, 0x01	; 1
     a48:	a1 05       	cpc	r26, r1
     a4a:	b1 05       	cpc	r27, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <buzz_play+0x2c4>
     a4e:	86 ce       	rjmp	.-756    	; 0x75c <buzz_MUTE>
     a50:	08 95       	ret

00000a52 <__vector_15>:
void logojector_ON();
void logojector_OFF();

int start_timer_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	0b b6       	in	r0, 0x3b	; 59
     a5e:	0f 92       	push	r0
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     a78:	e6 ef       	ldi	r30, 0xF6	; 246
     a7a:	f5 e0       	ldi	r31, 0x05	; 5
     a7c:	84 81       	ldd	r24, Z+4	; 0x04
     a7e:	95 81       	ldd	r25, Z+5	; 0x05
     a80:	a6 81       	ldd	r26, Z+6	; 0x06
     a82:	b7 81       	ldd	r27, Z+7	; 0x07
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	a1 1d       	adc	r26, r1
     a88:	b1 1d       	adc	r27, r1
     a8a:	84 83       	std	Z+4, r24	; 0x04
     a8c:	95 83       	std	Z+5, r25	; 0x05
     a8e:	a6 83       	std	Z+6, r26	; 0x06
     a90:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	a2 81       	ldd	r26, Z+2	; 0x02
     a98:	b3 81       	ldd	r27, Z+3	; 0x03
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	a1 1d       	adc	r26, r1
     a9e:	b1 1d       	adc	r27, r1
     aa0:	80 83       	st	Z, r24
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	a2 83       	std	Z+2, r26	; 0x02
     aa6:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     aa8:	71 de       	rcall	.-798    	; 0x78c <buzz_play>
}
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	bf 91       	pop	r27
     ab0:	af 91       	pop	r26
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	7f 91       	pop	r23
     ab8:	6f 91       	pop	r22
     aba:	5f 91       	pop	r21
     abc:	4f 91       	pop	r20
     abe:	3f 91       	pop	r19
     ac0:	2f 91       	pop	r18
     ac2:	0f 90       	pop	r0
     ac4:	0b be       	out	0x3b, r0	; 59
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <start_timer>:
	 
}

void start_timer()
{
	TICK.tick_1ms=0;
     ad0:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <TICK>
     ad4:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <TICK+0x1>
     ad8:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <TICK+0x2>
     adc:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <TICK+0x3>
	start_timer_flag=1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ae8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aec:	08 95       	ret

00000aee <logojector_ON>:
}


void logojector_ON(){
	PORTA|=0x80;	
     aee:	df 9a       	sbi	0x1b, 7	; 27
     af0:	08 95       	ret

00000af2 <logojector_OFF>:
}
void logojector_OFF(){
	PORTA&=~(0x80);
     af2:	df 98       	cbi	0x1b, 7	; 27
     af4:	08 95       	ret

00000af6 <main>:
	
}
int main(void)
{
    /* Replace with your application code */
	sei();
     af6:	78 94       	sei
	//DDRA|=0x03; //test Port
	//7번비트	: 릴레이스위치
	//0~3번비트	: 스테핑모터 제어 
	DDRA|=0x8f; 
     af8:	8a b3       	in	r24, 0x1a	; 26
     afa:	8f 68       	ori	r24, 0x8F	; 143
     afc:	8a bb       	out	0x1a, r24	; 26
	
	//사용하는 기능들 초기화 작업
	logojector_OFF();
     afe:	f9 df       	rcall	.-14     	; 0xaf2 <logojector_OFF>
	
	mfrc522_init(CH0);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	c4 d3       	rcall	.+1928   	; 0x128c <mfrc522_init>
	mfrc522_init(CH1);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	c2 d3       	rcall	.+1924   	; 0x128c <mfrc522_init>
     b08:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(0,BAUD_9600); //debug channel
     b0a:	75 e2       	ldi	r23, 0x25	; 37
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	63 d6       	rcall	.+3270   	; 0x17d8 <uart_init>
     b12:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
     b14:	75 e2       	ldi	r23, 0x25	; 37
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
	i2c_lcd_init();
     b1a:	5e d6       	rcall	.+3260   	; 0x17d8 <uart_init>
     b1c:	57 d2       	rcall	.+1198   	; 0xfcc <i2c_lcd_init>
	cli(); //전역 인터럽트 해제
     b1e:	f8 94       	cli
	
	timer0_init();
     b20:	3d d6       	rcall	.+3194   	; 0x179c <timer0_init>
     b22:	45 d6       	rcall	.+3210   	; 0x17ae <timer3_init>
	timer3_init();
     b24:	78 94       	sei
     b26:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <TICK>
	sei(); //전역 인터럽트 허용
	TICK.tick_1ms=0;
     b2a:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <TICK+0x1>
     b2e:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <TICK+0x2>
     b32:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <TICK+0x3>
     b36:	4b e3       	ldi	r20, 0x3B	; 59
	
	i2c_lcd_string(0,0,"====================");
     b38:	52 e0       	ldi	r21, 0x02	; 2
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	d1 d2       	rcall	.+1442   	; 0x10e2 <i2c_lcd_string>
     b40:	40 e5       	ldi	r20, 0x50	; 80
	i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
     b42:	52 e0       	ldi	r21, 0x02	; 2
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	cc d2       	rcall	.+1432   	; 0x10e2 <i2c_lcd_string>
     b4a:	44 e6       	ldi	r20, 0x64	; 100
	i2c_lcd_string(2,0,"     __________     ");
     b4c:	52 e0       	ldi	r21, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	c7 d2       	rcall	.+1422   	; 0x10e2 <i2c_lcd_string>
     b54:	4b e3       	ldi	r20, 0x3B	; 59
	i2c_lcd_string(3,0,"====================");
     b56:	52 e0       	ldi	r21, 0x02	; 2
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	c2 d2       	rcall	.+1412   	; 0x10e2 <i2c_lcd_string>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	cd dd       	rcall	.-1126   	; 0x6fc <setSoundClip>
	setSoundClip(BUZZ_ON);
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	81 e1       	ldi	r24, 0x11	; 17
     b66:	9a e7       	ldi	r25, 0x7A	; 122
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	90 40       	sbci	r25, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0x72>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x7c>
     b72:	00 00       	nop
	_delay_ms(2500);
	
	//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
	mfrc522_version_check(CH0);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	d0 d3       	rcall	.+1952   	; 0x1318 <mfrc522_version_check>
     b78:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
     b7a:	24 d4       	rcall	.+2120   	; 0x13c4 <mfrc522_IRQ_enable>
	mfrc522_version_check(CH1);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	cc d3       	rcall	.+1944   	; 0x1318 <mfrc522_version_check>
     b80:	81 e0       	ldi	r24, 0x01	; 1
	mfrc522_IRQ_enable(CH1);
     b82:	20 d4       	rcall	.+2112   	; 0x13c4 <mfrc522_IRQ_enable>
     b84:	29 e7       	ldi	r18, 0x79	; 121
     b86:	32 e0       	ldi	r19, 0x02	; 2
	
	
	esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
     b88:	4c e7       	ldi	r20, 0x7C	; 124
     b8a:	52 e0       	ldi	r21, 0x02	; 2
     b8c:	68 e8       	ldi	r22, 0x88	; 136
     b8e:	72 e0       	ldi	r23, 0x02	; 2
     b90:	85 e9       	ldi	r24, 0x95	; 149
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	14 dd       	rcall	.-1496   	; 0x5be <esp8266_init>
     b96:	96 db       	rcall	.-2260   	; 0x2c4 <rfid_user_uid_buffer_init>
     b98:	ef ef       	ldi	r30, 0xFF	; 255
	rfid_user_uid_buffer_init();
     b9a:	f9 ef       	ldi	r31, 0xF9	; 249
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	e1 50       	subi	r30, 0x01	; 1
     ba0:	f0 40       	sbci	r31, 0x00	; 0
     ba2:	20 40       	sbci	r18, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <main+0xa8>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <main+0xb2>
     ba8:	00 00       	nop
     baa:	4b e3       	ldi	r20, 0x3B	; 59
	
	//여기서 워치독 타이머 활성화 시켜야 함??? > ㄴㄴㄴ 워치독타이머 안씀
	_delay_ms(20);
	
	
		i2c_lcd_string(0,0,"====================");
     bac:	52 e0       	ldi	r21, 0x02	; 2
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	97 d2       	rcall	.+1326   	; 0x10e2 <i2c_lcd_string>
		i2c_lcd_string(1,0," Firmware Ver 1.85  ");
     bb4:	4c e9       	ldi	r20, 0x9C	; 156
     bb6:	52 e0       	ldi	r21, 0x02	; 2
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	92 d2       	rcall	.+1316   	; 0x10e2 <i2c_lcd_string>
     bbe:	41 eb       	ldi	r20, 0xB1	; 177
		i2c_lcd_string(2,0,"     Welcome :^)    ");
     bc0:	52 e0       	ldi	r21, 0x02	; 2
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	8d d2       	rcall	.+1306   	; 0x10e2 <i2c_lcd_string>
     bc8:	4b e3       	ldi	r20, 0x3B	; 59
		i2c_lcd_string(3,0,"====================");
     bca:	52 e0       	ldi	r21, 0x02	; 2
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	88 d2       	rcall	.+1296   	; 0x10e2 <i2c_lcd_string>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
	setSoundClip(BUZZ_ESP8266_CONNECTED);
     bd4:	93 dd       	rcall	.-1242   	; 0x6fc <setSoundClip>
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	97 ea       	ldi	r25, 0xA7	; 167
     bda:	e1 e6       	ldi	r30, 0x61	; 97
     bdc:	81 50       	subi	r24, 0x01	; 1
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e0 40       	sbci	r30, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <main+0xe6>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <main+0xf0>
     be6:	00 00       	nop
     be8:	8b d2       	rcall	.+1302   	; 0x1100 <i2c_lcd_clear>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
	//main loop start.
	_delay_ms(2000);
	i2c_lcd_clear();
     bec:	9c e9       	ldi	r25, 0x9C	; 156
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <main+0xf8>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0xfe>
     bf4:	00 00       	nop
     bf6:	8b d1       	rcall	.+790    	; 0xf0e <i2c_lcd_noBacklight>
     bf8:	0f 2e       	mov	r0, r31
     bfa:	f6 ef       	ldi	r31, 0xF6	; 246
    _delay_ms(10);
	i2c_lcd_noBacklight();
     bfc:	ef 2e       	mov	r14, r31
     bfe:	f5 e0       	ldi	r31, 0x05	; 5
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		
		//every 100ms, return RFID Reader state
		if((TICK.tick_1ms % 100) ==0) {
     c00:	ff 2e       	mov	r15, r31
     c02:	f0 2d       	mov	r31, r0
     c04:	99 24       	eor	r9, r9
     c06:	93 94       	inc	r9
     c08:	0f 2e       	mov	r0, r31
     c0a:	f4 ee       	ldi	r31, 0xE4	; 228
			
				//toggle = 0 : entrance gate
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
     c0c:	6f 2e       	mov	r6, r31
     c0e:	f5 e0       	ldi	r31, 0x05	; 5
				received_state = mfrc_check_and_data_receive_ch0();
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
			}//RFID check and receive UID data per 100ms
			else {
				received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
				rfid_uid_ch1[4]=0;
     c10:	7f 2e       	mov	r7, r31
     c12:	f0 2d       	mov	r31, r0
     c14:	0f 2e       	mov	r0, r31
     c16:	f2 ed       	ldi	r31, 0xD2	; 210
     c18:	4f 2e       	mov	r4, r31
     c1a:	f5 e0       	ldi	r31, 0x05	; 5
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
		
			if(toggle==0){
				received_state = mfrc_check_and_data_receive_ch0();
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
     c1c:	5f 2e       	mov	r5, r31
     c1e:	f0 2d       	mov	r31, r0
     c20:	0f 2e       	mov	r0, r31
     c22:	f2 e5       	ldi	r31, 0x52	; 82
     c24:	cf 2e       	mov	r12, r31
     c26:	f4 e0       	ldi	r31, 0x04	; 4
     c28:	df 2e       	mov	r13, r31
     c2a:	f0 2d       	mov	r31, r0
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f6 ed       	ldi	r31, 0xD6	; 214
     c30:	2f 2e       	mov	r2, r31
     c32:	f5 e0       	ldi	r31, 0x05	; 5
     c34:	3f 2e       	mov	r3, r31
     c36:	f0 2d       	mov	r31, r0
     c38:	f7 01       	movw	r30, r14
     c3a:	60 81       	ld	r22, Z
		//uart0_tx_string(send_SSID_TEST(SSID,PASSWORD)); //31ms나 소요됨.
		//PORTA^=0x01;
		static char toggle=0;
		
		//every 100ms, return RFID Reader state
		if((TICK.tick_1ms % 100) ==0) {
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	24 e6       	ldi	r18, 0x64	; 100
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	20 d7       	rcall	.+3648   	; 0x1a8c <__udivmodsi4>
     c4c:	67 2b       	or	r22, r23
     c4e:	68 2b       	or	r22, r24
     c50:	69 2b       	or	r22, r25
     c52:	91 f4       	brne	.+36     	; 0xc78 <main+0x182>
     c54:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <toggle.2433>
			
				//toggle = 0 : entrance gate
				//toggle = 1 : exit gate
			toggle^=0x01; //start toggling :
     c58:	89 25       	eor	r24, r9
     c5a:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <toggle.2433>
     c5e:	81 11       	cpse	r24, r1
		
			if(toggle==0){
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <main+0x178>
     c62:	e7 db       	rcall	.-2098   	; 0x432 <mfrc_check_and_data_receive_ch0>
				received_state = mfrc_check_and_data_receive_ch0();
     c64:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <received_state>
     c68:	f2 01       	movw	r30, r4
     c6a:	14 82       	std	Z+4, r1	; 0x04
				rfid_uid_ch0[4]=0; //문자 끝에 null을 넣어주기 위함. "abcd" 
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <main+0x182>
     c6e:	44 dc       	rcall	.-1912   	; 0x4f8 <mfrc_check_and_data_receive_ch1>
			}//RFID check and receive UID data per 100ms
			else {
				received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
     c70:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <received_state>
     c74:	f3 01       	movw	r30, r6
				rfid_uid_ch1[4]=0;
     c76:	14 82       	std	Z+4, r1	; 0x04
     c78:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <received_state>
			}
		}
		if(received_state==RECEIVE_NONE); //do nothing
		else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <main+0x18c>
     c80:	13 c1       	rjmp	.+550    	; 0xea8 <main+0x3b2>
			//send to esp8266 and receive result data.
			if(toggle==ENTRANCE_GATE){
     c82:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <toggle.2433>
     c86:	81 11       	cpse	r24, r1
     c88:	d5 c0       	rjmp	.+426    	; 0xe34 <main+0x33e>
				//esp8266에 uid와 입구게이트 정보 전송 함수
				//while(전송 완료될 때 까지 대기)???
				
				
				/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
				uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     c8a:	86 ec       	ldi	r24, 0xC6	; 198
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	eb d5       	rcall	.+3030   	; 0x1866 <uart1_tx_string>
     c90:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <esp8266_send_ready_flag>
				//_delay_ms(20); //위 데이터 다 보낼때 까지 대기해야 하는데, 사실 없어도 되는 라인
				// '>' 문자가 확인될 때까지 대기
				while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     c94:	88 23       	and	r24, r24
     c96:	e1 f3       	breq	.-8      	; 0xc90 <main+0x19a>
				esp8266_send_ready_flag=0;
     c98:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <esp8266_send_ready_flag>
     c9c:	c2 ed       	ldi	r28, 0xD2	; 210
     c9e:	d5 e0       	ldi	r29, 0x05	; 5
				 
				//esp8266으로 uid데이터 전송
				for(int i=0; i<4; i++)
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     ca0:	89 91       	ld	r24, Y+
     ca2:	1e d6       	rcall	.+3132   	; 0x18e0 <HexToString>
     ca4:	e0 d5       	rcall	.+3008   	; 0x1866 <uart1_tx_string>
     ca6:	80 e2       	ldi	r24, 0x20	; 32
     ca8:	d6 d5       	rcall	.+2988   	; 0x1856 <uart1_tx_char>
					uart1_tx_char(' ');
     caa:	c2 15       	cp	r28, r2
     cac:	d3 05       	cpc	r29, r3
				// '>' 문자가 확인될 때까지 대기
				while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
				esp8266_send_ready_flag=0;
				 
				//esp8266으로 uid데이터 전송
				for(int i=0; i<4; i++)
     cae:	c1 f7       	brne	.-16     	; 0xca0 <main+0x1aa>
     cb0:	86 e3       	ldi	r24, 0x36	; 54
     cb2:	93 e0       	ldi	r25, 0x03	; 3
				{
					uart1_tx_string(HexToString(rfid_uid_ch0[i]));
					uart1_tx_char(' ');
				}
				uart1_tx_string("\r\n");
     cb4:	d8 d5       	rcall	.+2992   	; 0x1866 <uart1_tx_string>
     cb6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <esp8266_receiving_flag>
     cba:	88 23       	and	r24, r24

				//uart0_tx_string("\nline:304\n");
				/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
				//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
				while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     cbc:	e1 f3       	breq	.-8      	; 0xcb6 <main+0x1c0>
     cbe:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <esp8266_receiving_flag>
     cc2:	ea eb       	ldi	r30, 0xBA	; 186
				esp8266_receiving_flag=0;
     cc4:	f4 e0       	ldi	r31, 0x04	; 4
     cc6:	80 81       	ld	r24, Z
				//uart0_tx_string("\nline:309\n");
				//esp8266_receive_complete_flag=0;
				if(esp8266_received_data[0]=='O'){
     cc8:	8f 34       	cpi	r24, 0x4F	; 79
     cca:	09 f0       	breq	.+2      	; 0xcce <main+0x1d8>
     ccc:	7b c0       	rjmp	.+246    	; 0xdc4 <main+0x2ce>
     cce:	0f df       	rcall	.-482    	; 0xaee <logojector_ON>
     cd0:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
					//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
					//uart0_tx_string("\nline:313\n");
					logojector_ON();
     cd4:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
					//현재 입장객 버퍼 비어있는 인덱스 체크
					rfid_user_flag=0;
     cd8:	c9 e3       	ldi	r28, 0x39	; 57
     cda:	d4 e0       	ldi	r29, 0x04	; 4
     cdc:	00 e0       	ldi	r16, 0x00	; 0
     cde:	10 e0       	ldi	r17, 0x00	; 0
     ce0:	60 e9       	ldi	r22, 0x90	; 144
					for(int i=0; i<MAX_USER_COUNT;i++)
     ce2:	72 e0       	ldi	r23, 0x02	; 2
     ce4:	ce 01       	movw	r24, r28
					{
						
						//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
						// 다시 카드 인식시키지 않도록 구현
						
						if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     ce6:	1c d7       	rcall	.+3640   	; 0x1b20 <strcmp>
     ce8:	89 2b       	or	r24, r25
     cea:	59 f4       	brne	.+22     	; 0xd02 <main+0x20c>
     cec:	10 93 38 04 	sts	0x0438, r17	; 0x800438 <rfid_user_count_pointer+0x1>
     cf0:	00 93 37 04 	sts	0x0437, r16	; 0x800437 <rfid_user_count_pointer>
							//해당 위치의 버퍼가 비어있는 것이 확인된다면
							rfid_user_count_pointer=i;
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <rfid_user_flag+0x1>
							rfid_user_flag=1;
     cfc:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <rfid_user_flag>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <main+0x220>
     d02:	b2 01       	movw	r22, r4
     d04:	ce 01       	movw	r24, r28
     d06:	0c d7       	rcall	.+3608   	; 0x1b20 <strcmp>
     d08:	89 2b       	or	r24, r25
							//i=MAX_USER_COUNT;//루프를 나오기 위함
						}else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0){ 
     d0a:	29 f4       	brne	.+10     	; 0xd16 <main+0x220>
     d0c:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
							//만일 버퍼 안에 기존 유저가 들어있다면
							i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
							rfid_user_flag=0;
     d10:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
     d14:	3d c0       	rjmp	.+122    	; 0xd90 <main+0x29a>
     d16:	0f 5f       	subi	r16, 0xFF	; 255
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
					//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
					//uart0_tx_string("\nline:313\n");
					logojector_ON();
					//현재 입장객 버퍼 비어있는 인덱스 체크
					rfid_user_flag=0;
					for(int i=0; i<MAX_USER_COUNT;i++)
     d1a:	25 96       	adiw	r28, 0x05	; 5
     d1c:	05 30       	cpi	r16, 0x05	; 5
     d1e:	11 05       	cpc	r17, r1
     d20:	f9 f6       	brne	.-66     	; 0xce0 <main+0x1ea>
     d22:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <rfid_user_flag>
						}
						//else rfid_user_flag=0;//모두 꽉 차 있음. 
						
					}
					//uart0_tx_string("\nline:336\n");
					if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     d26:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <rfid_user_flag+0x1>
     d2a:	89 2b       	or	r24, r25
     d2c:	89 f1       	breq	.+98     	; 0xd90 <main+0x29a>
						strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0); 
     d2e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rfid_user_count_pointer>
     d32:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rfid_user_count_pointer+0x1>
     d36:	9c 01       	movw	r18, r24
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	b2 01       	movw	r22, r4
						//LCD ON
				
						
						start_timer(); //ticktim을 0으로 클리어시킴.
     d46:	87 5c       	subi	r24, 0xC7	; 199
     d48:	9b 4f       	sbci	r25, 0xFB	; 251
						
						//uart0_tx_string("\nline:344\n");
						i2c_lcd_clear();
     d4a:	f3 d6       	rcall	.+3558   	; 0x1b32 <strcpy>
     d4c:	c1 de       	rcall	.-638    	; 0xad0 <start_timer>
     d4e:	d8 d1       	rcall	.+944    	; 0x1100 <i2c_lcd_clear>
     d50:	9f ef       	ldi	r25, 0xFF	; 255
     d52:	e9 ef       	ldi	r30, 0xF9	; 249
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	e0 40       	sbci	r30, 0x00	; 0
     d5a:	f0 40       	sbci	r31, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <main+0x260>
						
						//uart0_tx_string("\nline:347\n");
						_delay_ms(20);
						i2c_lcd_string(0,0,"Welcome,");
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <main+0x26a>
     d60:	00 00       	nop
     d62:	46 ed       	ldi	r20, 0xD6	; 214
     d64:	52 e0       	ldi	r21, 0x02	; 2
     d66:	60 e0       	ldi	r22, 0x00	; 0
						i2c_lcd_string(1,2,(char*)esp8266_received_data);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	bb d1       	rcall	.+886    	; 0x10e2 <i2c_lcd_string>
     d6c:	4a eb       	ldi	r20, 0xBA	; 186
     d6e:	54 e0       	ldi	r21, 0x04	; 4
						//uart0_tx_string("\nline:351\n");
						i2c_lcd_string(2,0,"Empty Space=[00 /42]");
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	89 2d       	mov	r24, r9
     d74:	b6 d1       	rcall	.+876    	; 0x10e2 <i2c_lcd_string>
     d76:	4f ed       	ldi	r20, 0xDF	; 223
     d78:	52 e0       	ldi	r21, 0x02	; 2
     d7a:	60 e0       	ldi	r22, 0x00	; 0
						i2c_lcd_string(2,13,"40");
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	b1 d1       	rcall	.+866    	; 0x10e2 <i2c_lcd_string>
     d80:	44 ef       	ldi	r20, 0xF4	; 244
     d82:	52 e0       	ldi	r21, 0x02	; 2
     d84:	6d e0       	ldi	r22, 0x0D	; 13
						setSoundClip(BUZZ_SUCCESS);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	ac d1       	rcall	.+856    	; 0x10e2 <i2c_lcd_string>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
						//uart0_tx_string("\nline:355\n");
					}
					else {//한 번 초과로 인식시켰을 때 지나는 구문
						i2c_lcd_clear();
     d8c:	b7 dc       	rcall	.-1682   	; 0x6fc <setSoundClip>
     d8e:	1c c0       	rjmp	.+56     	; 0xdc8 <main+0x2d2>
     d90:	b7 d1       	rcall	.+878    	; 0x1100 <i2c_lcd_clear>
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	89 ef       	ldi	r24, 0xF9	; 249
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	21 50       	subi	r18, 0x01	; 1
     d9a:	80 40       	sbci	r24, 0x00	; 0
     d9c:	90 40       	sbci	r25, 0x00	; 0
						_delay_ms(20);
						i2c_lcd_string(0,0,"Welcome,");
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <main+0x2a2>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <main+0x2ac>
     da2:	00 00       	nop
     da4:	46 ed       	ldi	r20, 0xD6	; 214
						i2c_lcd_string(1,2,(char*)esp8266_received_data);
     da6:	52 e0       	ldi	r21, 0x02	; 2
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	9a d1       	rcall	.+820    	; 0x10e2 <i2c_lcd_string>
						i2c_lcd_string(2,0,"Already Recognized");
     dae:	4a eb       	ldi	r20, 0xBA	; 186
     db0:	54 e0       	ldi	r21, 0x04	; 4
     db2:	62 e0       	ldi	r22, 0x02	; 2
     db4:	89 2d       	mov	r24, r9
     db6:	95 d1       	rcall	.+810    	; 0x10e2 <i2c_lcd_string>
     db8:	47 ef       	ldi	r20, 0xF7	; 247
						
					}
				}//if(esp8266_received_data[0]=='O') end
				else if(esp8266_received_data[0]!='O') setSoundClip(BUZZ_FAIL);
     dba:	52 e0       	ldi	r21, 0x02	; 2
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 d1       	rcall	.+800    	; 0x10e2 <i2c_lcd_string>
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <main+0x2d2>
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	9a dc       	rcall	.-1740   	; 0x6fc <setSoundClip>
     dc8:	ef ef       	ldi	r30, 0xFF	; 255
     dca:	f9 ef       	ldi	r31, 0xF9	; 249
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	e1 50       	subi	r30, 0x01	; 1
     dd0:	f0 40       	sbci	r31, 0x00	; 0
				
				_delay_ms(20);
				//dummy test code (서버로부터 결과 값 수신 결과 확인)
				uart0_tx_char('\n');
     dd2:	20 40       	sbci	r18, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <main+0x2d8>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <main+0x2e2>
				uart0_tx_string("From server : ");
     dd8:	00 00       	nop
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	2a d5       	rcall	.+2644   	; 0x1832 <uart0_tx_char>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
				uart0_tx_string((char*)esp8266_received_data);
     de0:	93 e0       	ldi	r25, 0x03	; 3
     de2:	2b d5       	rcall	.+2646   	; 0x183a <uart0_tx_string>
     de4:	8a eb       	ldi	r24, 0xBA	; 186
				uart0_tx_char('\n');
     de6:	94 e0       	ldi	r25, 0x04	; 4
     de8:	28 d5       	rcall	.+2640   	; 0x183a <uart0_tx_string>
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	22 d5       	rcall	.+2628   	; 0x1832 <uart0_tx_char>
     dee:	0f 2e       	mov	r0, r31
     df0:	f9 e3       	ldi	r31, 0x39	; 57
     df2:	af 2e       	mov	r10, r31
     df4:	f4 e0       	ldi	r31, 0x04	; 4
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
     df6:	bf 2e       	mov	r11, r31
     df8:	f0 2d       	mov	r31, r0
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     dfa:	8b e5       	ldi	r24, 0x5B	; 91
     dfc:	1a d5       	rcall	.+2612   	; 0x1832 <uart0_tx_char>
     dfe:	e5 01       	movw	r28, r10
     e00:	89 91       	ld	r24, Y+
     e02:	6e d5       	rcall	.+2780   	; 0x18e0 <HexToString>
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
     e04:	1a d5       	rcall	.+2612   	; 0x183a <uart0_tx_string>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	80 e2       	ldi	r24, 0x20	; 32
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
     e0c:	12 d5       	rcall	.+2596   	; 0x1832 <uart0_tx_char>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	89 91       	ld	r24, Y+
						if(j!=3)uart0_tx_char(' ');
     e14:	65 d5       	rcall	.+2762   	; 0x18e0 <HexToString>
     e16:	11 d5       	rcall	.+2594   	; 0x183a <uart0_tx_string>
     e18:	03 30       	cpi	r16, 0x03	; 3
						//_delay_ms(10);
					}
					
					
					uart0_tx_char(']');
     e1a:	11 05       	cpc	r17, r1
     e1c:	b1 f7       	brne	.-20     	; 0xe0a <main+0x314>
					uart0_tx_char('\n');
     e1e:	8d e5       	ldi	r24, 0x5D	; 93
     e20:	08 d5       	rcall	.+2576   	; 0x1832 <uart0_tx_char>
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	06 d5       	rcall	.+2572   	; 0x1832 <uart0_tx_char>
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	a8 0e       	add	r10, r24
				uart0_tx_string("From server : ");
				uart0_tx_string((char*)esp8266_received_data);
				uart0_tx_char('\n');
				
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
     e2a:	b1 1c       	adc	r11, r1
     e2c:	ca 14       	cp	r12, r10
     e2e:	db 04       	cpc	r13, r11
     e30:	21 f7       	brne	.-56     	; 0xdfa <main+0x304>
				
				//LCD 뷰어 및 5초 카운트 후 다시 리셋
				
			}//if(toggle==ENTRANCE_GATE) end
			
			else if(toggle==EXIT_GATE){
     e32:	3a c0       	rjmp	.+116    	; 0xea8 <main+0x3b2>
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	09 f0       	breq	.+2      	; 0xe3a <main+0x344>
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <main+0x3b2>
     e3a:	0f 2e       	mov	r0, r31
     e3c:	f9 e3       	ldi	r31, 0x39	; 57
     e3e:	af 2e       	mov	r10, r31
     e40:	f4 e0       	ldi	r31, 0x04	; 4
     e42:	bf 2e       	mov	r11, r31
     e44:	f0 2d       	mov	r31, r0
				
				//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
				//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
     e46:	e5 01       	movw	r28, r10
     e48:	b3 01       	movw	r22, r6
     e4a:	ce 01       	movw	r24, r28
     e4c:	69 d6       	rcall	.+3282   	; 0x1b20 <strcmp>
     e4e:	89 2b       	or	r24, r25
     e50:	59 f4       	brne	.+22     	; 0xe68 <main+0x372>
						strcpy((char*)rfid_user_uid_buffer[i],"0000");
     e52:	85 e0       	ldi	r24, 0x05	; 5
     e54:	e0 e9       	ldi	r30, 0x90	; 144
     e56:	f2 e0       	ldi	r31, 0x02	; 2
     e58:	de 01       	movw	r26, r28
     e5a:	01 90       	ld	r0, Z+
     e5c:	0d 92       	st	X+, r0
     e5e:	8a 95       	dec	r24
						//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
						start_timer(); //ticktim을 0으로 클리어시킴. 
     e60:	e1 f7       	brne	.-8      	; 0xe5a <main+0x364>
     e62:	36 de       	rcall	.-916    	; 0xad0 <start_timer>
						setSoundClip(BUZZ_SUCCESS);
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	4a dc       	rcall	.-1900   	; 0x6fc <setSoundClip>
     e68:	25 96       	adiw	r28, 0x05	; 5
				// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
				
				
				//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
				//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
				for(int i=0; i<MAX_USER_COUNT;i++)
     e6a:	cc 15       	cp	r28, r12
     e6c:	dd 05       	cpc	r29, r13
     e6e:	61 f7       	brne	.-40     	; 0xe48 <main+0x352>
					
				}
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
					
					uart0_tx_char('[');
     e70:	8b e5       	ldi	r24, 0x5B	; 91
     e72:	df d4       	rcall	.+2494   	; 0x1832 <uart0_tx_char>
     e74:	e5 01       	movw	r28, r10
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     e76:	89 91       	ld	r24, Y+
     e78:	33 d5       	rcall	.+2662   	; 0x18e0 <HexToString>
     e7a:	df d4       	rcall	.+2494   	; 0x183a <uart0_tx_string>
     e7c:	00 e0       	ldi	r16, 0x00	; 0
     e7e:	10 e0       	ldi	r17, 0x00	; 0
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
					
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	d7 d4       	rcall	.+2478   	; 0x1832 <uart0_tx_char>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	89 91       	ld	r24, Y+
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
					
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
     e8a:	2a d5       	rcall	.+2644   	; 0x18e0 <HexToString>
     e8c:	d6 d4       	rcall	.+2476   	; 0x183a <uart0_tx_string>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     e8e:	03 30       	cpi	r16, 0x03	; 3
     e90:	11 05       	cpc	r17, r1
     e92:	b1 f7       	brne	.-20     	; 0xe80 <main+0x38a>
     e94:	8d e5       	ldi	r24, 0x5D	; 93
     e96:	cd d4       	rcall	.+2458   	; 0x1832 <uart0_tx_char>
						if(j!=3)uart0_tx_char(' ');
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	cb d4       	rcall	.+2454   	; 0x1832 <uart0_tx_char>
     e9c:	95 e0       	ldi	r25, 0x05	; 5
						//_delay_ms(10);
					}
					uart0_tx_char(']');
     e9e:	a9 0e       	add	r10, r25
     ea0:	b1 1c       	adc	r11, r1
     ea2:	ac 14       	cp	r10, r12
					uart0_tx_char('\n');
     ea4:	bd 04       	cpc	r11, r13
     ea6:	21 f7       	brne	.-56     	; 0xe70 <main+0x37a>
     ea8:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <received_state>
     eac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
						setSoundClip(BUZZ_SUCCESS);
					}//그곳 버퍼를 비움
					
				}
				//dummy test code
				for(int i=0;i<MAX_USER_COUNT;i++){
     eb0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     eb4:	01 97       	sbiw	r24, 0x01	; 1
			//i2c_lcd_string(1,2,esp8266_received_data);
			i2c_lcd_string(2,0,"Plz, Re-tagging. ");
			
		}
		
		received_state=RECEIVE_NONE;
     eb6:	09 f0       	breq	.+2      	; 0xeba <main+0x3c4>
     eb8:	bf ce       	rjmp	.-642    	; 0xc38 <main+0x142>
		
		if(start_timer_flag==1)
     eba:	f7 01       	movw	r30, r14
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	a2 81       	ldd	r26, Z+2	; 0x02
     ec2:	b3 81       	ldd	r27, Z+3	; 0x03
     ec4:	88 38       	cpi	r24, 0x88	; 136
     ec6:	93 41       	sbci	r25, 0x13	; 19
		{
			if(TICK.tick_1ms==5000)//5초
     ec8:	a1 05       	cpc	r26, r1
     eca:	b1 05       	cpc	r27, r1
     ecc:	19 f4       	brne	.+6      	; 0xed4 <main+0x3de>
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	15 dc       	rcall	.-2006   	; 0x6fc <setSoundClip>
     ed2:	b2 ce       	rjmp	.-668    	; 0xc38 <main+0x142>
     ed4:	f7 01       	movw	r30, r14
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	a2 81       	ldd	r26, Z+2	; 0x02
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				setSoundClip(BUZZ_FAIL);
     edc:	b3 81       	ldd	r27, Z+3	; 0x03
     ede:	80 31       	cpi	r24, 0x10	; 16
     ee0:	97 42       	sbci	r25, 0x27	; 39
     ee2:	a1 05       	cpc	r26, r1
				
			}
			else if(TICK.tick_1ms==10000){//10초
     ee4:	b1 05       	cpc	r27, r1
     ee6:	11 f4       	brne	.+4      	; 0xeec <main+0x3f6>
     ee8:	12 d0       	rcall	.+36     	; 0xf0e <i2c_lcd_noBacklight>
     eea:	a6 ce       	rjmp	.-692    	; 0xc38 <main+0x142>
     eec:	f7 01       	movw	r30, r14
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	a2 81       	ldd	r26, Z+2	; 0x02
     ef4:	b3 81       	ldd	r27, Z+3	; 0x03
     ef6:	80 3e       	cpi	r24, 0xE0	; 224
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
     ef8:	9e 42       	sbci	r25, 0x2E	; 46
     efa:	a1 05       	cpc	r26, r1
     efc:	b1 05       	cpc	r27, r1
			}
			else if(TICK.tick_1ms==12000)
     efe:	09 f0       	breq	.+2      	; 0xf02 <main+0x40c>
     f00:	9b ce       	rjmp	.-714    	; 0xc38 <main+0x142>
     f02:	f7 dd       	rcall	.-1042   	; 0xaf2 <logojector_OFF>
     f04:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f08:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     f0c:	95 ce       	rjmp	.-726    	; 0xc38 <main+0x142>

00000f0e <i2c_lcd_noBacklight>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	00 d0       	rcall	.+0      	; 0xf14 <i2c_lcd_noBacklight+0x6>
			{
				//로고젝터 오프 
				logojector_OFF();
     f14:	00 d0       	rcall	.+0      	; 0xf16 <i2c_lcd_noBacklight+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
				start_timer_flag=0;
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	1a 82       	std	Y+2, r1	; 0x02
     f20:	84 e1       	ldi	r24, 0x14	; 20
			c_buf[0] = (0&0xF0) | RS0_EN1 | 0;
			c_buf[1] = (0&0xF0) | RS0_EN0 | 0;
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	80 e1       	ldi	r24, 0x10	; 16
     f26:	8c 83       	std	Y+4, r24	; 0x04
     f28:	44 e0       	ldi	r20, 0x04	; 4
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	be 01       	movw	r22, r28
     f2e:	6f 5f       	subi	r22, 0xFF	; 255
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     f36:	3e d1       	rcall	.+636    	; 0x11b4 <i2c_transmit>
     f38:	81 11       	cpse	r24, r1
     f3a:	f6 cf       	rjmp	.-20     	; 0xf28 <i2c_lcd_noBacklight+0x1a>
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <i2c_lcd_command_8>:
void i2c_lcd_command_8(uint8_t command)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <i2c_lcd_command_8+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
     f54:	80 7f       	andi	r24, 0xF0	; 240
     f56:	98 2f       	mov	r25, r24
     f58:	9c 60       	ori	r25, 0x0C	; 12
     f5a:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
     f60:	42 e0       	ldi	r20, 0x02	; 2
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	be 01       	movw	r22, r28
     f66:	6f 5f       	subi	r22, 0xFF	; 255
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     f6e:	22 d1       	rcall	.+580    	; 0x11b4 <i2c_transmit>
     f70:	81 11       	cpse	r24, r1
     f72:	f6 cf       	rjmp	.-20     	; 0xf60 <i2c_lcd_command_8+0x16>
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <i2c_lcd_command+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <i2c_lcd_command+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
     f8a:	98 2f       	mov	r25, r24
     f8c:	90 7f       	andi	r25, 0xF0	; 240
     f8e:	29 2f       	mov	r18, r25
     f90:	2c 60       	ori	r18, 0x0C	; 12
     f92:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
     f94:	98 60       	ori	r25, 0x08	; 8
     f96:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	82 9f       	mul	r24, r18
     f9c:	c0 01       	movw	r24, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	98 2f       	mov	r25, r24
     fa2:	9c 60       	ori	r25, 0x0C	; 12
     fa4:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
     faa:	44 e0       	ldi	r20, 0x04	; 4
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	be 01       	movw	r22, r28
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
     fb8:	fd d0       	rcall	.+506    	; 0x11b4 <i2c_transmit>
     fba:	81 11       	cpse	r24, r1
     fbc:	f6 cf       	rjmp	.-20     	; 0xfaa <i2c_lcd_command+0x2c>
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
     fcc:	b8 d0       	rcall	.+368    	; 0x113e <i2c_init>
     fce:	2f ef       	ldi	r18, 0xFF	; 255
     fd0:	89 e6       	ldi	r24, 0x69	; 105
     fd2:	98 e1       	ldi	r25, 0x18	; 24
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	80 40       	sbci	r24, 0x00	; 0
     fd8:	90 40       	sbci	r25, 0x00	; 0
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <i2c_lcd_init+0x8>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <i2c_lcd_init+0x12>
     fde:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
     fe0:	89 e1       	ldi	r24, 0x19	; 25
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	2a d4       	rcall	.+2132   	; 0x183a <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	b0 df       	rcall	.-160    	; 0xf4a <i2c_lcd_command_8>
     fea:	8f e1       	ldi	r24, 0x1F	; 31
     fec:	9e e4       	ldi	r25, 0x4E	; 78
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <i2c_lcd_init+0x22>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <i2c_lcd_init+0x28>
     ff4:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	a8 df       	rcall	.-176    	; 0xf4a <i2c_lcd_command_8>
     ffa:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <i2c_lcd_init+0x32>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    1004:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1006:	80 e3       	ldi	r24, 0x30	; 48
    1008:	a0 df       	rcall	.-192    	; 0xf4a <i2c_lcd_command_8>
    100a:	8f e8       	ldi	r24, 0x8F	; 143
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1014:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    1016:	80 e2       	ldi	r24, 0x20	; 32
    1018:	98 df       	rcall	.-208    	; 0xf4a <i2c_lcd_command_8>
    101a:	8f e8       	ldi	r24, 0x8F	; 143
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    1024:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    1026:	88 e2       	ldi	r24, 0x28	; 40
    1028:	aa df       	rcall	.-172    	; 0xf7e <i2c_lcd_command>
    102a:	87 ec       	ldi	r24, 0xC7	; 199
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1034:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	a2 df       	rcall	.-188    	; 0xf7e <i2c_lcd_command>
    103a:	87 ec       	ldi	r24, 0xC7	; 199
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1042:	00 c0       	rjmp	.+0      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1044:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	9a df       	rcall	.-204    	; 0xf7e <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104a:	8f ed       	ldi	r24, 0xDF	; 223
    104c:	9e e2       	ldi	r25, 0x2E	; 46
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <__DATA_REGION_LENGTH__+0x54>
    1054:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    1056:	86 e0       	ldi	r24, 0x06	; 6
    1058:	92 df       	rcall	.-220    	; 0xf7e <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105a:	87 ec       	ldi	r24, 0xC7	; 199
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <__DATA_REGION_LENGTH__+0x64>
    1064:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    1066:	8c e0       	ldi	r24, 0x0C	; 12
    1068:	8a df       	rcall	.-236    	; 0xf7e <i2c_lcd_command>
    106a:	87 ec       	ldi	r24, 0xC7	; 199
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    1074:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    1076:	89 e3       	ldi	r24, 0x39	; 57
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	df c3       	rjmp	.+1982   	; 0x183a <uart0_tx_string>
    107c:	08 95       	ret

0000107e <i2c_lcd_data>:
    107e:	cf 93       	push	r28
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
    1080:	df 93       	push	r29
    1082:	00 d0       	rcall	.+0      	; 0x1084 <i2c_lcd_data+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <i2c_lcd_data+0x8>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
    108a:	98 2f       	mov	r25, r24
    108c:	90 7f       	andi	r25, 0xF0	; 240
    108e:	29 2f       	mov	r18, r25
    1090:	2d 60       	ori	r18, 0x0D	; 13
    1092:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
    1094:	99 60       	ori	r25, 0x09	; 9
    1096:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    1098:	20 e1       	ldi	r18, 0x10	; 16
    109a:	82 9f       	mul	r24, r18
    109c:	c0 01       	movw	r24, r0
    109e:	11 24       	eor	r1, r1
    10a0:	98 2f       	mov	r25, r24
    10a2:	9d 60       	ori	r25, 0x0D	; 13
    10a4:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
    10a6:	89 60       	ori	r24, 0x09	; 9
    10a8:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    10aa:	44 e0       	ldi	r20, 0x04	; 4
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	be 01       	movw	r22, r28
    10b0:	6f 5f       	subi	r22, 0xFF	; 255
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    10b8:	7d d0       	rcall	.+250    	; 0x11b4 <i2c_transmit>
    10ba:	81 11       	cpse	r24, r1
    10bc:	f6 cf       	rjmp	.-20     	; 0x10aa <i2c_lcd_data+0x2c>
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <i2c_lcd_goto_XY>:

void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
    10cc:	e8 2f       	mov	r30, r24
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	e1 5b       	subi	r30, 0xB1	; 177
    10d6:	fc 4f       	sbci	r31, 0xFC	; 252
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
    10d8:	80 81       	ld	r24, Z
    10da:	86 0f       	add	r24, r22
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	4f cf       	rjmp	.-354    	; 0xf7e <i2c_lcd_command>
    10e0:	08 95       	ret

000010e2 <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
    10e8:	f1 df       	rcall	.-30     	; 0x10cc <i2c_lcd_goto_XY>
	while(*string) {
    10ea:	88 81       	ld	r24, Y
    10ec:	88 23       	and	r24, r24
    10ee:	29 f0       	breq	.+10     	; 0x10fa <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
    10f0:	21 96       	adiw	r28, 0x01	; 1
    10f2:	c5 df       	rcall	.-118    	; 0x107e <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    10f4:	89 91       	ld	r24, Y+
    10f6:	81 11       	cpse	r24, r1
    10f8:	fc cf       	rjmp	.-8      	; 0x10f2 <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <i2c_lcd_clear>:
void i2c_lcd_clear()
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <i2c_lcd_clear+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <i2c_lcd_clear+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
		uint8_t c_buf[4];
		
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
    110c:	8c e0       	ldi	r24, 0x0C	; 12
    110e:	89 83       	std	Y+1, r24	; 0x01
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	8a 83       	std	Y+2, r24	; 0x02
		
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1114:	8c e1       	ldi	r24, 0x1C	; 28
    1116:	8b 83       	std	Y+3, r24	; 0x03
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
    1118:	88 e1       	ldi	r24, 0x18	; 24
    111a:	8c 83       	std	Y+4, r24	; 0x04
		
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    111c:	44 e0       	ldi	r20, 0x04	; 4
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	be 01       	movw	r22, r28
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    112a:	44 d0       	rcall	.+136    	; 0x11b4 <i2c_transmit>
    112c:	81 11       	cpse	r24, r1
    112e:	f6 cf       	rjmp	.-20     	; 0x111c <i2c_lcd_clear+0x1c>
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    113e:	88 e4       	ldi	r24, 0x48	; 72
    1140:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1144:	08 95       	ret

00001146 <i2c_start>:
    1146:	e4 e7       	ldi	r30, 0x74	; 116
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	10 82       	st	Z, r1
    114c:	94 ea       	ldi	r25, 0xA4	; 164
    114e:	90 83       	st	Z, r25
    1150:	90 81       	ld	r25, Z
    1152:	99 23       	and	r25, r25
    1154:	ec f7       	brge	.-6      	; 0x1150 <i2c_start+0xa>
    1156:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    115a:	98 7f       	andi	r25, 0xF8	; 248
    115c:	98 30       	cpi	r25, 0x08	; 8
    115e:	a1 f4       	brne	.+40     	; 0x1188 <i2c_start+0x42>
    1160:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1164:	84 e8       	ldi	r24, 0x84	; 132
    1166:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    116a:	e4 e7       	ldi	r30, 0x74	; 116
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	ec f7       	brge	.-6      	; 0x116e <i2c_start+0x28>
    1174:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1178:	98 7f       	andi	r25, 0xF8	; 248
    117a:	98 31       	cpi	r25, 0x18	; 24
    117c:	39 f0       	breq	.+14     	; 0x118c <i2c_start+0x46>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 34       	cpi	r25, 0x40	; 64
    1182:	29 f4       	brne	.+10     	; 0x118e <i2c_start+0x48>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	08 95       	ret
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	08 95       	ret

00001190 <i2c_write>:
    1190:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1194:	84 e8       	ldi	r24, 0x84	; 132
    1196:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    119a:	e4 e7       	ldi	r30, 0x74	; 116
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	88 23       	and	r24, r24
    11a2:	ec f7       	brge	.-6      	; 0x119e <i2c_write+0xe>
    11a4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    11a8:	98 7f       	andi	r25, 0xF8	; 248
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	98 32       	cpi	r25, 0x28	; 40
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <i2c_write+0x22>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	08 95       	ret

000011b4 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	6b 01       	movw	r12, r22
    11c4:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    11c6:	bf df       	rcall	.-130    	; 0x1146 <i2c_start>
    11c8:	f8 2e       	mov	r15, r24
    11ca:	81 11       	cpse	r24, r1
    11cc:	17 c0       	rjmp	.+46     	; 0x11fc <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    11ce:	01 15       	cp	r16, r1
    11d0:	11 05       	cpc	r17, r1
    11d2:	81 f0       	breq	.+32     	; 0x11f4 <i2c_transmit+0x40>
    11d4:	e6 01       	movw	r28, r12
    11d6:	0c 0d       	add	r16, r12
    11d8:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    11da:	89 91       	ld	r24, Y+
    11dc:	d9 df       	rcall	.-78     	; 0x1190 <i2c_write>
    11de:	81 11       	cpse	r24, r1
    11e0:	10 c0       	rjmp	.+32     	; 0x1202 <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11e2:	8f e9       	ldi	r24, 0x9F	; 159
    11e4:	9f e0       	ldi	r25, 0x0F	; 15
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <i2c_transmit+0x32>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <i2c_transmit+0x38>
    11ec:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    11ee:	0c 17       	cp	r16, r28
    11f0:	1d 07       	cpc	r17, r29
    11f2:	99 f7       	brne	.-26     	; 0x11da <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    11f4:	84 e9       	ldi	r24, 0x94	; 148
    11f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    11fc:	ff 24       	eor	r15, r15
    11fe:	f3 94       	inc	r15
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1202:	ff 24       	eor	r15, r15
    1204:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1206:	8f 2d       	mov	r24, r15
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	08 95       	ret

00001218 <mfrc522_write>:

}


void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	16 2f       	mov	r17, r22
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1220:	95 b3       	in	r25, 0x15	; 21
    1222:	c1 e0       	ldi	r28, 0x01	; 1
    1224:	d0 e0       	ldi	r29, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <mfrc522_write+0x14>
    1228:	cc 0f       	add	r28, r28
    122a:	dd 1f       	adc	r29, r29
    122c:	4a 95       	dec	r20
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <mfrc522_write+0x10>
    1230:	2c 2f       	mov	r18, r28
    1232:	20 95       	com	r18
    1234:	92 23       	and	r25, r18
    1236:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    1238:	88 0f       	add	r24, r24
    123a:	8e 77       	andi	r24, 0x7E	; 126
    123c:	a6 d2       	rcall	.+1356   	; 0x178a <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    123e:	81 2f       	mov	r24, r17
    1240:	a4 d2       	rcall	.+1352   	; 0x178a <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1242:	85 b3       	in	r24, 0x15	; 21
    1244:	c8 2b       	or	r28, r24
    1246:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	08 95       	ret

00001250 <mfrc522_reset>:


void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	
    1250:	48 2f       	mov	r20, r24
    1252:	6f e0       	ldi	r22, 0x0F	; 15
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	e0 cf       	rjmp	.-64     	; 0x1218 <mfrc522_write>
    1258:	08 95       	ret

0000125a <mfrc522_read>:
			
		
}


unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    125e:	95 b3       	in	r25, 0x15	; 21
    1260:	c1 e0       	ldi	r28, 0x01	; 1
    1262:	d0 e0       	ldi	r29, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <mfrc522_read+0x10>
    1266:	cc 0f       	add	r28, r28
    1268:	dd 1f       	adc	r29, r29
    126a:	6a 95       	dec	r22
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <mfrc522_read+0xc>
    126e:	2c 2f       	mov	r18, r28
    1270:	20 95       	com	r18
    1272:	92 23       	and	r25, r18
    1274:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    1276:	88 0f       	add	r24, r24
    1278:	8e 77       	andi	r24, 0x7E	; 126
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	86 d2       	rcall	.+1292   	; 0x178a <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    127e:	89 d2       	rcall	.+1298   	; 0x1792 <spi_master_rx>
    1280:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1282:	c9 2b       	or	r28, r25
    1284:	c5 bb       	out	0x15, r28	; 21
    1286:	df 91       	pop	r29
	
	return value;
}
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <mfrc522_init>:
    128c:	cf 93       	push	r28
#include "clcd_i2c.h"
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>
void mfrc522_init(unsigned char ch)
{
    128e:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    1290:	1f 92       	push	r1
    1292:	1f 92       	push	r1
    1294:	1f 92       	push	r1
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	8f 93       	push	r24
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	8f 93       	push	r24
    129e:	32 d2       	rcall	.+1124   	; 0x1704 <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    12a0:	84 b3       	in	r24, 0x14	; 20
    12a2:	83 60       	ori	r24, 0x03	; 3
    12a4:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    12a6:	15 ba       	out	0x15, r1	; 21
    12a8:	2f ef       	ldi	r18, 0xFF	; 255
    12aa:	89 ef       	ldi	r24, 0xF9	; 249
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	21 50       	subi	r18, 0x01	; 1
    12b0:	80 40       	sbci	r24, 0x00	; 0
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <mfrc522_init+0x22>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <mfrc522_init+0x2c>
    12b8:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    12ba:	85 b3       	in	r24, 0x15	; 21
    12bc:	83 60       	ori	r24, 0x03	; 3
    12be:	85 bb       	out	0x15, r24	; 21
	mfrc522_reset(ch);
    12c0:	8c 2f       	mov	r24, r28
    12c2:	c6 df       	rcall	.-116    	; 0x1250 <mfrc522_reset>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    12c4:	4c 2f       	mov	r20, r28
    12c6:	6d e8       	ldi	r22, 0x8D	; 141
    12c8:	8a e2       	ldi	r24, 0x2A	; 42
    12ca:	a6 df       	rcall	.-180    	; 0x1218 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    12cc:	4c 2f       	mov	r20, r28
    12ce:	6e e3       	ldi	r22, 0x3E	; 62
    12d0:	8b e2       	ldi	r24, 0x2B	; 43
    12d2:	a2 df       	rcall	.-188    	; 0x1218 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    12d4:	4c 2f       	mov	r20, r28
    12d6:	6e e1       	ldi	r22, 0x1E	; 30
    12d8:	8c e2       	ldi	r24, 0x2C	; 44
    12da:	9e df       	rcall	.-196    	; 0x1218 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    12dc:	4c 2f       	mov	r20, r28
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	8d e2       	ldi	r24, 0x2D	; 45
    12e2:	9a df       	rcall	.-204    	; 0x1218 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    12e4:	4c 2f       	mov	r20, r28
    12e6:	60 e4       	ldi	r22, 0x40	; 64
    12e8:	85 e1       	ldi	r24, 0x15	; 21
    12ea:	96 df       	rcall	.-212    	; 0x1218 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    12ec:	4c 2f       	mov	r20, r28
    12ee:	6d e3       	ldi	r22, 0x3D	; 61
    12f0:	81 e1       	ldi	r24, 0x11	; 17
    12f2:	92 df       	rcall	.-220    	; 0x1218 <mfrc522_write>
    12f4:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    12f6:	84 e1       	ldi	r24, 0x14	; 20
    12f8:	b0 df       	rcall	.-160    	; 0x125a <mfrc522_read>
    12fa:	98 2f       	mov	r25, r24
    12fc:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	29 f4       	brne	.+10     	; 0x1314 <mfrc522_init+0x88>
    130a:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    130c:	63 60       	ori	r22, 0x03	; 3
    130e:	4c 2f       	mov	r20, r28
    1310:	84 e1       	ldi	r24, 0x14	; 20
    1312:	82 df       	rcall	.-252    	; 0x1218 <mfrc522_write>
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <mfrc522_version_check>:
	}
}
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
	SS_PORT |= (1<<channel);
	
	return value;
}

void mfrc522_version_check(unsigned char ch){
    131c:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    131e:	68 2f       	mov	r22, r24
    1320:	87 e3       	ldi	r24, 0x37	; 55
    1322:	9b df       	rcall	.-202    	; 0x125a <mfrc522_read>
    1324:	c8 2f       	mov	r28, r24
    1326:	2f ef       	ldi	r18, 0xFF	; 255
    1328:	89 ef       	ldi	r24, 0xF9	; 249
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	80 40       	sbci	r24, 0x00	; 0
    1330:	90 40       	sbci	r25, 0x00	; 0
    1332:	e1 f7       	brne	.-8      	; 0x132c <mfrc522_version_check+0x14>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <mfrc522_version_check+0x1e>
    1336:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1338:	d1 11       	cpse	r29, r1
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <mfrc522_version_check+0x30>
    133c:	87 e5       	ldi	r24, 0x57	; 87
    133e:	93 e0       	ldi	r25, 0x03	; 3
    1340:	7c d2       	rcall	.+1272   	; 0x183a <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    1342:	c2 39       	cpi	r28, 0x92	; 146
    1344:	59 f5       	brne	.+86     	; 0x139c <mfrc522_version_check+0x84>
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    1348:	83 e6       	ldi	r24, 0x63	; 99
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	76 d2       	rcall	.+1260   	; 0x183a <uart0_tx_string>
	
	if(byte == 0x92)
    134e:	c2 39       	cpi	r28, 0x92	; 146
    1350:	91 f5       	brne	.+100    	; 0x13b6 <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1352:	12 c0       	rjmp	.+36     	; 0x1378 <mfrc522_version_check+0x60>
    1354:	8f e6       	ldi	r24, 0x6F	; 111
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	70 d2       	rcall	.+1248   	; 0x183a <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    135a:	42 e8       	ldi	r20, 0x82	; 130
    135c:	53 e0       	ldi	r21, 0x03	; 3
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	bf de       	rcall	.-642    	; 0x10e2 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1364:	ff cf       	rjmp	.-2      	; 0x1364 <mfrc522_version_check+0x4c>
    1366:	86 e9       	ldi	r24, 0x96	; 150
    1368:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    136a:	67 d2       	rcall	.+1230   	; 0x183a <uart0_tx_string>
    136c:	4a eb       	ldi	r20, 0xBA	; 186
    136e:	53 e0       	ldi	r21, 0x03	; 3
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	b6 de       	rcall	.-660    	; 0x10e2 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1376:	23 c0       	rjmp	.+70     	; 0x13be <mfrc522_version_check+0xa6>
    1378:	86 e9       	ldi	r24, 0x96	; 150
    137a:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    137c:	5e d2       	rcall	.+1212   	; 0x183a <uart0_tx_string>
    137e:	4f ec       	ldi	r20, 0xCF	; 207
    1380:	53 e0       	ldi	r21, 0x03	; 3
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1386:	ad de       	rcall	.-678    	; 0x10e2 <i2c_lcd_string>
    1388:	1a c0       	rjmp	.+52     	; 0x13be <mfrc522_version_check+0xa6>
    138a:	84 ee       	ldi	r24, 0xE4	; 228
    138c:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    138e:	55 d2       	rcall	.+1194   	; 0x183a <uart0_tx_string>
    1390:	4a eb       	ldi	r20, 0xBA	; 186
    1392:	53 e0       	ldi	r21, 0x03	; 3
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	a4 de       	rcall	.-696    	; 0x10e2 <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    139a:	11 c0       	rjmp	.+34     	; 0x13be <mfrc522_version_check+0xa6>
    139c:	c0 59       	subi	r28, 0x90	; 144
    139e:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    13a0:	c8 f6       	brcc	.-78     	; 0x1354 <mfrc522_version_check+0x3c>
    13a2:	f3 cf       	rjmp	.-26     	; 0x138a <mfrc522_version_check+0x72>
    13a4:	84 ee       	ldi	r24, 0xE4	; 228
    13a6:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    13a8:	48 d2       	rcall	.+1168   	; 0x183a <uart0_tx_string>
    13aa:	4f ec       	ldi	r20, 0xCF	; 207
    13ac:	53 e0       	ldi	r21, 0x03	; 3
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	97 de       	rcall	.-722    	; 0x10e2 <i2c_lcd_string>
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    13b6:	c0 59       	subi	r28, 0x90	; 144
    13b8:	c2 30       	cpi	r28, 0x02	; 2
    13ba:	60 f6       	brcc	.-104    	; 0x1354 <mfrc522_version_check+0x3c>
    13bc:	f3 cf       	rjmp	.-26     	; 0x13a4 <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    13c4:	cf 93       	push	r28
    13c6:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    13c8:	68 2f       	mov	r22, r24
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	46 df       	rcall	.-372    	; 0x125a <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    13ce:	68 2f       	mov	r22, r24
    13d0:	60 62       	ori	r22, 0x20	; 32
    13d2:	4c 2f       	mov	r20, r28
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	20 df       	rcall	.-448    	; 0x1218 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    13d8:	6c 2f       	mov	r22, r28
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	3e df       	rcall	.-388    	; 0x125a <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    13de:	68 2f       	mov	r22, r24
    13e0:	60 68       	ori	r22, 0x80	; 128
    13e2:	4c 2f       	mov	r20, r28
    13e4:	83 e0       	ldi	r24, 0x03	; 3
    13e6:	18 df       	rcall	.-464    	; 0x1218 <mfrc522_write>
}
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <mfrc522_to_card>:
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    13ec:	2f 92       	push	r2
    13ee:	3f 92       	push	r3
    13f0:	4f 92       	push	r4
    13f2:	5f 92       	push	r5
    13f4:	6f 92       	push	r6
    13f6:	7f 92       	push	r7
    13f8:	8f 92       	push	r8
    13fa:	9f 92       	push	r9
    13fc:	af 92       	push	r10
    13fe:	bf 92       	push	r11
    1400:	cf 92       	push	r12
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
    1408:	0f 93       	push	r16
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	f8 2e       	mov	r15, r24
    1412:	a6 2e       	mov	r10, r22
    1414:	b7 2e       	mov	r11, r23
    1416:	44 2e       	mov	r4, r20
    1418:	22 2e       	mov	r2, r18
    141a:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    141c:	8c e0       	ldi	r24, 0x0C	; 12
    141e:	f8 16       	cp	r15, r24
    1420:	59 f0       	breq	.+22     	; 0x1438 <mfrc522_to_card+0x4c>
    1422:	ee e0       	ldi	r30, 0x0E	; 14
    1424:	fe 12       	cpse	r15, r30
    1426:	11 c0       	rjmp	.+34     	; 0x144a <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    1428:	68 94       	set
    142a:	cc 24       	eor	r12, r12
    142c:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    142e:	0f 2e       	mov	r0, r31
    1430:	f2 e1       	ldi	r31, 0x12	; 18
    1432:	3f 2e       	mov	r3, r31
    1434:	f0 2d       	mov	r31, r0
    1436:	0b c0       	rjmp	.+22     	; 0x144e <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    1438:	0f 2e       	mov	r0, r31
    143a:	f0 e3       	ldi	r31, 0x30	; 48
    143c:	cf 2e       	mov	r12, r31
    143e:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    1440:	0f 2e       	mov	r0, r31
    1442:	f7 e7       	ldi	r31, 0x77	; 119
    1444:	3f 2e       	mov	r3, r31
    1446:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    1448:	02 c0       	rjmp	.+4      	; 0x144e <mfrc522_to_card+0x62>

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    144a:	c1 2c       	mov	r12, r1
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    144c:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    144e:	4e 2d       	mov	r20, r14
    1450:	63 2d       	mov	r22, r3
    1452:	60 68       	ori	r22, 0x80	; 128
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	e0 de       	rcall	.-576    	; 0x1218 <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    1458:	6e 2d       	mov	r22, r14
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	fe de       	rcall	.-516    	; 0x125a <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    145e:	68 2f       	mov	r22, r24
    1460:	6f 77       	andi	r22, 0x7F	; 127
    1462:	4e 2d       	mov	r20, r14
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	d8 de       	rcall	.-592    	; 0x1218 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    1468:	6e 2d       	mov	r22, r14
    146a:	8a e0       	ldi	r24, 0x0A	; 10
    146c:	f6 de       	rcall	.-532    	; 0x125a <mfrc522_read>
    146e:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    1470:	60 68       	ori	r22, 0x80	; 128
    1472:	4e 2d       	mov	r20, r14
    1474:	8a e0       	ldi	r24, 0x0A	; 10
    1476:	d0 de       	rcall	.-608    	; 0x1218 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    1478:	4e 2d       	mov	r20, r14
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	cc de       	rcall	.-616    	; 0x1218 <mfrc522_write>
    1480:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1482:	61 2c       	mov	r6, r1
    1484:	71 2c       	mov	r7, r1
    1486:	41 14       	cp	r4, r1
    1488:	51 04       	cpc	r5, r1
    148a:	61 04       	cpc	r6, r1
    148c:	71 04       	cpc	r7, r1
    148e:	99 f0       	breq	.+38     	; 0x14b6 <mfrc522_to_card+0xca>
    1490:	ca 2d       	mov	r28, r10
    1492:	db 2d       	mov	r29, r11
    1494:	81 2c       	mov	r8, r1
    1496:	91 2c       	mov	r9, r1
    1498:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    149a:	69 91       	ld	r22, Y+
    149c:	4e 2d       	mov	r20, r14
    149e:	89 e0       	ldi	r24, 0x09	; 9
    14a0:	bb de       	rcall	.-650    	; 0x1218 <mfrc522_write>
    14a2:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    14a4:	8f 1a       	sub	r8, r31
    14a6:	9f 0a       	sbc	r9, r31
    14a8:	af 0a       	sbc	r10, r31
    14aa:	bf 0a       	sbc	r11, r31
    14ac:	84 14       	cp	r8, r4
    14ae:	95 04       	cpc	r9, r5
    14b0:	a6 04       	cpc	r10, r6
    14b2:	b7 04       	cpc	r11, r7
    14b4:	90 f3       	brcs	.-28     	; 0x149a <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    14b6:	4e 2d       	mov	r20, r14
    14b8:	6f 2d       	mov	r22, r15
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	ad de       	rcall	.-678    	; 0x1218 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    14be:	8c e0       	ldi	r24, 0x0C	; 12
    14c0:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <mfrc522_to_card+0xe8>
    14c4:	6e 2d       	mov	r22, r14
    14c6:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    14c8:	c8 de       	rcall	.-624    	; 0x125a <mfrc522_read>
    14ca:	68 2f       	mov	r22, r24
    14cc:	60 68       	ori	r22, 0x80	; 128
    14ce:	4e 2d       	mov	r20, r14
    14d0:	8d e0       	ldi	r24, 0x0D	; 13
    14d2:	a2 de       	rcall	.-700    	; 0x1218 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    14d4:	6e 2d       	mov	r22, r14
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	c0 de       	rcall	.-640    	; 0x125a <mfrc522_read>
    14da:	b8 2e       	mov	r11, r24
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    14e0:	ec 2d       	mov	r30, r12
    14e2:	e1 60       	ori	r30, 0x01	; 1
    14e4:	ce 2e       	mov	r12, r30
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    14e8:	6e 2d       	mov	r22, r14
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	b6 de       	rcall	.-660    	; 0x125a <mfrc522_read>
    14ee:	b8 2e       	mov	r11, r24
    14f0:	21 96       	adiw	r28, 0x01	; 1
    14f2:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    14f4:	f7 e0       	ldi	r31, 0x07	; 7
    14f6:	df 07       	cpc	r29, r31
    14f8:	09 f4       	brne	.+2      	; 0x14fc <mfrc522_to_card+0x110>
    14fa:	68 c0       	rjmp	.+208    	; 0x15cc <mfrc522_to_card+0x1e0>
    14fc:	8c 2d       	mov	r24, r12
    14fe:	8b 21       	and	r24, r11
    1500:	99 f3       	breq	.-26     	; 0x14e8 <mfrc522_to_card+0xfc>
    1502:	6e c0       	rjmp	.+220    	; 0x15e0 <mfrc522_to_card+0x1f4>
    1504:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	b8 22       	and	r11, r24
    150a:	11 f0       	breq	.+4      	; 0x1510 <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    150c:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    1510:	c1 e0       	ldi	r28, 0x01	; 1
    1512:	8c e0       	ldi	r24, 0x0C	; 12
    1514:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1516:	73 c0       	rjmp	.+230    	; 0x15fe <mfrc522_to_card+0x212>
    1518:	6e 2d       	mov	r22, r14
    151a:	8a e0       	ldi	r24, 0x0A	; 10
    151c:	9e de       	rcall	.-708    	; 0x125a <mfrc522_read>
    151e:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    1520:	6e 2d       	mov	r22, r14
    1522:	8c e0       	ldi	r24, 0x0C	; 12
    1524:	9a de       	rcall	.-716    	; 0x125a <mfrc522_read>
    1526:	28 2f       	mov	r18, r24
    1528:	27 70       	andi	r18, 0x07	; 7
    152a:	a9 f0       	breq	.+42     	; 0x1556 <mfrc522_to_card+0x16a>
				if (lastBits)
    152c:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	82 0f       	add	r24, r18
    1540:	91 1d       	adc	r25, r1
    1542:	09 2e       	mov	r0, r25
    1544:	00 0c       	add	r0, r0
    1546:	aa 0b       	sbc	r26, r26
    1548:	bb 0b       	sbc	r27, r27
    154a:	f8 01       	movw	r30, r16
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <mfrc522_to_card+0x18c>
    1556:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	09 2e       	mov	r0, r25
    1568:	00 0c       	add	r0, r0
    156a:	aa 0b       	sbc	r26, r26
    156c:	bb 0b       	sbc	r27, r27
    156e:	f8 01       	movw	r30, r16
    1570:	80 83       	st	Z, r24
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	a2 83       	std	Z+2, r26	; 0x02
    1576:	b3 83       	std	Z+3, r27	; 0x03
    1578:	88 20       	and	r8, r8
				}

				if (n == 0)
    157a:	71 f0       	breq	.+28     	; 0x1598 <mfrc522_to_card+0x1ac>
    157c:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    157e:	81 31       	cpi	r24, 0x11	; 17
    1580:	08 f0       	brcs	.+2      	; 0x1584 <mfrc522_to_card+0x198>
    1582:	80 e1       	ldi	r24, 0x10	; 16
    1584:	88 2e       	mov	r8, r24
    1586:	91 2c       	mov	r9, r1
    1588:	a1 2c       	mov	r10, r1
    158a:	b1 2c       	mov	r11, r1
    158c:	81 14       	cp	r8, r1
    158e:	91 04       	cpc	r9, r1
    1590:	a1 04       	cpc	r10, r1
    1592:	b1 04       	cpc	r11, r1
    1594:	29 f4       	brne	.+10     	; 0x15a0 <mfrc522_to_card+0x1b4>
    1596:	33 c0       	rjmp	.+102    	; 0x15fe <mfrc522_to_card+0x212>
    1598:	81 2c       	mov	r8, r1
    159a:	91 2c       	mov	r9, r1
    159c:	54 01       	movw	r10, r8
    159e:	83 94       	inc	r8
    15a0:	02 2d       	mov	r16, r2
    15a2:	1d 2d       	mov	r17, r13
    15a4:	41 2c       	mov	r4, r1
    15a6:	51 2c       	mov	r5, r1
    15a8:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    15aa:	6e 2d       	mov	r22, r14
    15ac:	89 e0       	ldi	r24, 0x09	; 9
    15ae:	55 de       	rcall	.-854    	; 0x125a <mfrc522_read>
    15b0:	f8 01       	movw	r30, r16
    15b2:	81 93       	st	Z+, r24
    15b4:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    15b6:	ff ef       	ldi	r31, 0xFF	; 255
    15b8:	4f 1a       	sub	r4, r31
    15ba:	5f 0a       	sbc	r5, r31
    15bc:	6f 0a       	sbc	r6, r31
    15be:	7f 0a       	sbc	r7, r31
    15c0:	48 14       	cp	r4, r8
    15c2:	59 04       	cpc	r5, r9
    15c4:	6a 04       	cpc	r6, r10
    15c6:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    15c8:	80 f3       	brcs	.-32     	; 0x15aa <mfrc522_to_card+0x1be>
    15ca:	19 c0       	rjmp	.+50     	; 0x15fe <mfrc522_to_card+0x212>
    15cc:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    15ce:	8d e0       	ldi	r24, 0x0D	; 13
    15d0:	44 de       	rcall	.-888    	; 0x125a <mfrc522_read>
    15d2:	68 2f       	mov	r22, r24
    15d4:	6f 77       	andi	r22, 0x7F	; 127
    15d6:	4e 2d       	mov	r20, r14
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    15d8:	8d e0       	ldi	r24, 0x0D	; 13
    15da:	1e de       	rcall	.-964    	; 0x1218 <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    15dc:	c3 e0       	ldi	r28, 0x03	; 3
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <mfrc522_to_card+0x212>
    15e0:	6e 2d       	mov	r22, r14
    15e2:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    15e4:	3a de       	rcall	.-908    	; 0x125a <mfrc522_read>
    15e6:	68 2f       	mov	r22, r24
    15e8:	6f 77       	andi	r22, 0x7F	; 127
    15ea:	4e 2d       	mov	r20, r14
    15ec:	8d e0       	ldi	r24, 0x0D	; 13
    15ee:	14 de       	rcall	.-984    	; 0x1218 <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    15f0:	6e 2d       	mov	r22, r14
    15f2:	86 e0       	ldi	r24, 0x06	; 6
    15f4:	32 de       	rcall	.-924    	; 0x125a <mfrc522_read>
    15f6:	8b 71       	andi	r24, 0x1B	; 27
    15f8:	09 f4       	brne	.+2      	; 0x15fc <mfrc522_to_card+0x210>
    15fa:	84 cf       	rjmp	.-248    	; 0x1504 <mfrc522_to_card+0x118>
    15fc:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    15fe:	8c 2f       	mov	r24, r28
	
// 	SetBitMask(ControlReg,0x80);           //timer stops
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	3f 90       	pop	r3
    1622:	2f 90       	pop	r2
    1624:	08 95       	ret

00001626 <mfrc522_request>:
    1626:	cf 92       	push	r12
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	00 d0       	rcall	.+0      	; 0x1636 <mfrc522_request+0x10>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <mfrc522_request+0x12>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	18 2f       	mov	r17, r24
    163e:	6b 01       	movw	r12, r22
    1640:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    1642:	67 e0       	ldi	r22, 0x07	; 7
    1644:	8d e0       	ldi	r24, 0x0D	; 13
    1646:	e8 dd       	rcall	.-1072   	; 0x1218 <mfrc522_write>
	
	tag_type[0] = req_mode;
    1648:	f6 01       	movw	r30, r12
    164a:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    164c:	8e 01       	movw	r16, r28
    164e:	0f 5f       	subi	r16, 0xFF	; 255
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	96 01       	movw	r18, r12
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	b6 01       	movw	r22, r12
    1658:	8c e0       	ldi	r24, 0x0C	; 12
    165a:	c8 de       	rcall	.-624    	; 0x13ec <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	59 f4       	brne	.+22     	; 0x1676 <mfrc522_request+0x50>
    1660:	49 81       	ldd	r20, Y+1	; 0x01
    1662:	5a 81       	ldd	r21, Y+2	; 0x02
    1664:	6b 81       	ldd	r22, Y+3	; 0x03
    1666:	7c 81       	ldd	r23, Y+4	; 0x04
    1668:	40 31       	cpi	r20, 0x10	; 16
    166a:	51 05       	cpc	r21, r1
    166c:	61 05       	cpc	r22, r1
    166e:	71 05       	cpc	r23, r1
    1670:	19 f0       	breq	.+6      	; 0x1678 <mfrc522_request+0x52>
	{
		status = ERROR;
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <mfrc522_request+0x52>
    1676:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	08 95       	ret

00001690 <mfrc522_get_card_serial>:
	return status;
}


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <mfrc522_get_card_serial+0x10>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <mfrc522_get_card_serial+0x12>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	6c 01       	movw	r12, r24
    16a8:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    16aa:	46 2f       	mov	r20, r22
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	8d e0       	ldi	r24, 0x0D	; 13
    16b0:	b3 dd       	rcall	.-1178   	; 0x1218 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    16b2:	83 e9       	ldi	r24, 0x93	; 147
    16b4:	f6 01       	movw	r30, r12
    16b6:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    16bc:	8e 01       	movw	r16, r28
    16be:	0f 5f       	subi	r16, 0xFF	; 255
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	96 01       	movw	r18, r12
    16c4:	42 e0       	ldi	r20, 0x02	; 2
    16c6:	b6 01       	movw	r22, r12
    16c8:	8c e0       	ldi	r24, 0x0C	; 12
    16ca:	90 de       	rcall	.-736    	; 0x13ec <mfrc522_to_card>

	if (status == CARD_FOUND)
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	71 f4       	brne	.+28     	; 0x16ec <mfrc522_get_card_serial+0x5c>
    16d0:	f6 01       	movw	r30, r12
    16d2:	a6 01       	movw	r20, r12
    16d4:	4c 5f       	subi	r20, 0xFC	; 252
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    16da:	21 91       	ld	r18, Z+
    16dc:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    16de:	4e 17       	cp	r20, r30
    16e0:	5f 07       	cpc	r21, r31
    16e2:	d9 f7       	brne	.-10     	; 0x16da <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    16e4:	f6 01       	movw	r30, r12
    16e6:	24 81       	ldd	r18, Z+4	; 0x04
    16e8:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    16ea:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	cf 90       	pop	r12
    1702:	08 95       	ret

00001704 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <spi_init+0x6>
    170a:	1f 92       	push	r1
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	21 f1       	breq	.+72     	; 0x175e <spi_init+0x5a>
    1716:	81 11       	cpse	r24, r1
    1718:	32 c0       	rjmp	.+100    	; 0x177e <spi_init+0x7a>
    171a:	29 c0       	rjmp	.+82     	; 0x176e <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    171c:	9c 91       	ld	r25, X
    171e:	12 96       	adiw	r26, 0x02	; 2
    1720:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1722:	e2 17       	cp	r30, r18
    1724:	f3 07       	cpc	r31, r19
    1726:	d1 f7       	brne	.-12     	; 0x171c <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	92 30       	cpi	r25, 0x02	; 2
    172c:	20 f1       	brcs	.+72     	; 0x1776 <spi_init+0x72>
    172e:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1730:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1732:	83 30       	cpi	r24, 0x03	; 3
    1734:	71 f4       	brne	.+28     	; 0x1752 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1736:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1738:	87 b3       	in	r24, 0x17	; 23
    173a:	87 60       	ori	r24, 0x07	; 7
    173c:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    173e:	99 81       	ldd	r25, Y+1	; 0x01
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	89 2b       	or	r24, r25
    1744:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1746:	2e b1       	in	r18, 0x0e	; 14
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	92 2b       	or	r25, r18
    174c:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    174e:	8d b9       	out	0x0d, r24	; 13
    1750:	16 c0       	rjmp	.+44     	; 0x177e <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1752:	81 11       	cpse	r24, r1
    1754:	14 c0       	rjmp	.+40     	; 0x177e <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1756:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1758:	80 e4       	ldi	r24, 0x40	; 64
    175a:	8d b9       	out	0x0d, r24	; 13
    175c:	10 c0       	rjmp	.+32     	; 0x177e <spi_init+0x7a>
    175e:	de 01       	movw	r26, r28
    1760:	19 96       	adiw	r26, 0x09	; 9
    1762:	fe 01       	movw	r30, r28
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	9e 01       	movw	r18, r28
    1768:	2c 5f       	subi	r18, 0xFC	; 252
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	d7 cf       	rjmp	.-82     	; 0x171c <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	92 30       	cpi	r25, 0x02	; 2
    1772:	e8 f6       	brcc	.-70     	; 0x172e <spi_init+0x2a>
    1774:	02 c0       	rjmp	.+4      	; 0x177a <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1776:	1d b8       	out	0x0d, r1	; 13
    1778:	de cf       	rjmp	.-68     	; 0x1736 <spi_init+0x32>
    177a:	1d b8       	out	0x0d, r1	; 13
    177c:	ec cf       	rjmp	.-40     	; 0x1756 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    178a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    178c:	77 9b       	sbis	0x0e, 7	; 14
    178e:	fe cf       	rjmp	.-4      	; 0x178c <spi_master_tx+0x2>
}
    1790:	08 95       	ret

00001792 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1792:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1794:	77 9b       	sbis	0x0e, 7	; 14
    1796:	fe cf       	rjmp	.-4      	; 0x1794 <spi_master_rx+0x2>
	
	return SPDR;
    1798:	8f b1       	in	r24, 0x0f	; 15
}
    179a:	08 95       	ret

0000179c <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    179c:	bc 9a       	sbi	0x17, 4	; 23
    179e:	8c e0       	ldi	r24, 0x0C	; 12
    17a0:	83 bf       	out	0x33, r24	; 51
    17a2:	8a ef       	ldi	r24, 0xFA	; 250
    17a4:	81 bf       	out	0x31, r24	; 49
    17a6:	87 b7       	in	r24, 0x37	; 55
    17a8:	82 60       	ori	r24, 0x02	; 2
    17aa:	87 bf       	out	0x37, r24	; 55
    17ac:	08 95       	ret

000017ae <timer3_init>:
    17ae:	13 9a       	sbi	0x02, 3	; 2
    17b0:	80 e4       	ldi	r24, 0x40	; 64
    17b2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    17b6:	8a e1       	ldi	r24, 0x1A	; 26
    17b8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    17bc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    17c0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    17c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    17c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    17cc:	08 95       	ret

000017ce <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    17ce:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    17d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    17d6:	08 95       	ret

000017d8 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	9b 01       	movw	r18, r22
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	60 e4       	ldi	r22, 0x40	; 64
    17e6:	72 e4       	ldi	r23, 0x42	; 66
    17e8:	8f e0       	ldi	r24, 0x0F	; 15
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	4f d1       	rcall	.+670    	; 0x1a8c <__udivmodsi4>
    17ee:	21 50       	subi	r18, 0x01	; 1
    17f0:	31 09       	sbc	r19, r1
    17f2:	20 97       	sbiw	r28, 0x00	; 0
    17f4:	59 f4       	brne	.+22     	; 0x180c <uart_init+0x34>
    17f6:	10 98       	cbi	0x02, 0	; 2
    17f8:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    17fc:	29 b9       	out	0x09, r18	; 9
    17fe:	88 e1       	ldi	r24, 0x18	; 24
    1800:	8a b9       	out	0x0a, r24	; 10
    1802:	57 9a       	sbi	0x0a, 7	; 10
    1804:	86 e0       	ldi	r24, 0x06	; 6
    1806:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    180a:	10 c0       	rjmp	.+32     	; 0x182c <uart_init+0x54>
    180c:	21 97       	sbiw	r28, 0x01	; 1
    180e:	71 f4       	brne	.+28     	; 0x182c <uart_init+0x54>
    1810:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1814:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1818:	ea e9       	ldi	r30, 0x9A	; 154
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	88 e1       	ldi	r24, 0x18	; 24
    181e:	80 83       	st	Z, r24
    1820:	80 81       	ld	r24, Z
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	80 83       	st	Z, r24
    1826:	86 e0       	ldi	r24, 0x06	; 6
    1828:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <uart0_tx_char>:
    1832:	5d 9b       	sbis	0x0b, 5	; 11
    1834:	fe cf       	rjmp	.-4      	; 0x1832 <uart0_tx_char>
    1836:	8c b9       	out	0x0c, r24	; 12
    1838:	08 95       	ret

0000183a <uart0_tx_string>:
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	ec 01       	movw	r28, r24
    1840:	88 81       	ld	r24, Y
    1842:	88 23       	and	r24, r24
    1844:	29 f0       	breq	.+10     	; 0x1850 <uart0_tx_string+0x16>
    1846:	21 96       	adiw	r28, 0x01	; 1
    1848:	f4 df       	rcall	.-24     	; 0x1832 <uart0_tx_char>
    184a:	89 91       	ld	r24, Y+
    184c:	81 11       	cpse	r24, r1
    184e:	fc cf       	rjmp	.-8      	; 0x1848 <uart0_tx_string+0xe>
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <uart1_tx_char>:
    1856:	eb e9       	ldi	r30, 0x9B	; 155
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	90 81       	ld	r25, Z
    185c:	95 ff       	sbrs	r25, 5
    185e:	fd cf       	rjmp	.-6      	; 0x185a <uart1_tx_char+0x4>
    1860:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1864:	08 95       	ret

00001866 <uart1_tx_string>:
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	88 81       	ld	r24, Y
    186e:	88 23       	and	r24, r24
    1870:	29 f0       	breq	.+10     	; 0x187c <uart1_tx_string+0x16>
    1872:	21 96       	adiw	r28, 0x01	; 1
    1874:	f0 df       	rcall	.-32     	; 0x1856 <uart1_tx_char>
    1876:	89 91       	ld	r24, Y+
    1878:	81 11       	cpse	r24, r1
    187a:	fc cf       	rjmp	.-8      	; 0x1874 <uart1_tx_string+0xe>
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <IntToString>:

char * IntToString(int num)
{
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	64 97       	sbiw	r28, 0x14	; 20
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d ",num); //고유 자릿값
    189a:	9f 93       	push	r25
    189c:	8f 93       	push	r24
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	94 e0       	ldi	r25, 0x04	; 4
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	8e 01       	movw	r16, r28
    18a8:	0f 5f       	subi	r16, 0xFF	; 255
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	1f 93       	push	r17
    18ae:	0f 93       	push	r16
    18b0:	4f d1       	rcall	.+670    	; 0x1b50 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    18b2:	b8 01       	movw	r22, r16
    18b4:	82 e5       	ldi	r24, 0x52	; 82
    18b6:	95 e0       	ldi	r25, 0x05	; 5
    18b8:	3c d1       	rcall	.+632    	; 0x1b32 <strcpy>
	
	return (buff.itos_buff);
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
}
    18c6:	82 e5       	ldi	r24, 0x52	; 82
    18c8:	95 e0       	ldi	r25, 0x05	; 5
    18ca:	64 96       	adiw	r28, 0x14	; 20
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	08 95       	ret

000018e0 <HexToString>:
 
 char * HexToString(char num)
 {
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	64 97       	sbiw	r28, 0x14	; 20
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    18f8:	1f 92       	push	r1
    18fa:	8f 93       	push	r24
    18fc:	8c e0       	ldi	r24, 0x0C	; 12
    18fe:	94 e0       	ldi	r25, 0x04	; 4
    1900:	9f 93       	push	r25
    1902:	8f 93       	push	r24
    1904:	8e 01       	movw	r16, r28
    1906:	0f 5f       	subi	r16, 0xFF	; 255
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	1f 93       	push	r17
    190c:	0f 93       	push	r16
    190e:	20 d1       	rcall	.+576    	; 0x1b50 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1910:	b8 01       	movw	r22, r16
    1912:	82 e5       	ldi	r24, 0x52	; 82
    1914:	95 e0       	ldi	r25, 0x05	; 5
    1916:	0d d1       	rcall	.+538    	; 0x1b32 <strcpy>
	 
	 return (buff.itos_buff);
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
 }
    1924:	82 e5       	ldi	r24, 0x52	; 82
    1926:	95 e0       	ldi	r25, 0x05	; 5
    1928:	64 96       	adiw	r28, 0x14	; 20
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	08 95       	ret

0000193e <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    193e:	cf 92       	push	r12
    1940:	df 92       	push	r13
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	c0 54       	subi	r28, 0x40	; 64
    1954:	d1 09       	sbc	r29, r1
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	6b 01       	movw	r12, r22
    1962:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1964:	20 e4       	ldi	r18, 0x40	; 64
    1966:	e2 e9       	ldi	r30, 0x92	; 146
    1968:	f5 e0       	ldi	r31, 0x05	; 5
    196a:	df 01       	movw	r26, r30
    196c:	1d 92       	st	X+, r1
    196e:	2a 95       	dec	r18
    1970:	e9 f7       	brne	.-6      	; 0x196c <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1972:	bc 01       	movw	r22, r24
    1974:	8e 01       	movw	r16, r28
    1976:	0f 5f       	subi	r16, 0xFF	; 255
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	c8 01       	movw	r24, r16
    197c:	da d0       	rcall	.+436    	; 0x1b32 <strcpy>
	strcat(buf,ssid);
    197e:	b6 01       	movw	r22, r12
    1980:	c8 01       	movw	r24, r16
    1982:	c3 d0       	rcall	.+390    	; 0x1b0a <strcat>
	strcat(buf,"\",\"");
    1984:	f8 01       	movw	r30, r16
    1986:	01 90       	ld	r0, Z+
    1988:	00 20       	and	r0, r0
    198a:	e9 f7       	brne	.-6      	; 0x1986 <connect_to_AP+0x48>
    198c:	31 97       	sbiw	r30, 0x01	; 1
    198e:	82 e2       	ldi	r24, 0x22	; 34
    1990:	9c e2       	ldi	r25, 0x2C	; 44
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	82 e2       	ldi	r24, 0x22	; 34
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	93 83       	std	Z+3, r25	; 0x03
    199c:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    199e:	b7 01       	movw	r22, r14
    19a0:	c8 01       	movw	r24, r16
    19a2:	b3 d0       	rcall	.+358    	; 0x1b0a <strcat>
	strcat(buf,"\"\r\n");
    19a4:	f8 01       	movw	r30, r16
    19a6:	01 90       	ld	r0, Z+
    19a8:	00 20       	and	r0, r0
    19aa:	e9 f7       	brne	.-6      	; 0x19a6 <connect_to_AP+0x68>
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	82 e2       	ldi	r24, 0x22	; 34
    19b0:	9d e0       	ldi	r25, 0x0D	; 13
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	8a e0       	ldi	r24, 0x0A	; 10
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	93 83       	std	Z+3, r25	; 0x03
    19bc:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    19be:	b8 01       	movw	r22, r16
    19c0:	82 e9       	ldi	r24, 0x92	; 146
    19c2:	95 e0       	ldi	r25, 0x05	; 5
    19c4:	b6 d0       	rcall	.+364    	; 0x1b32 <strcpy>
	return buff.esp_buff;
	
}
    19c6:	82 e9       	ldi	r24, 0x92	; 146
    19c8:	95 e0       	ldi	r25, 0x05	; 5
    19ca:	c0 5c       	subi	r28, 0xC0	; 192
    19cc:	df 4f       	sbci	r29, 0xFF	; 255
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	08 95       	ret

000019ea <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	c0 54       	subi	r28, 0x40	; 64
    19fc:	d1 09       	sbc	r29, r1
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	9c 01       	movw	r18, r24
    1a0a:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1a0c:	80 e4       	ldi	r24, 0x40	; 64
    1a0e:	e2 e9       	ldi	r30, 0x92	; 146
    1a10:	f5 e0       	ldi	r31, 0x05	; 5
    1a12:	df 01       	movw	r26, r30
    1a14:	1d 92       	st	X+, r1
    1a16:	8a 95       	dec	r24
    1a18:	e9 f7       	brne	.-6      	; 0x1a14 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1a1a:	94 e1       	ldi	r25, 0x14	; 20
    1a1c:	e1 e1       	ldi	r30, 0x11	; 17
    1a1e:	f4 e0       	ldi	r31, 0x04	; 4
    1a20:	8e 01       	movw	r16, r28
    1a22:	0f 5f       	subi	r16, 0xFF	; 255
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	d8 01       	movw	r26, r16
    1a28:	01 90       	ld	r0, Z+
    1a2a:	0d 92       	st	X+, r0
    1a2c:	9a 95       	dec	r25
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <TCP_connect+0x3e>
	strcat(buf,ip);
    1a30:	b9 01       	movw	r22, r18
    1a32:	c8 01       	movw	r24, r16
    1a34:	6a d0       	rcall	.+212    	; 0x1b0a <strcat>
	strcat(buf,"\",");
    1a36:	f8 01       	movw	r30, r16
    1a38:	01 90       	ld	r0, Z+
    1a3a:	00 20       	and	r0, r0
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <TCP_connect+0x4e>
    1a3e:	31 97       	sbiw	r30, 0x01	; 1
    1a40:	82 e2       	ldi	r24, 0x22	; 34
    1a42:	9c e2       	ldi	r25, 0x2C	; 44
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
    1a48:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1a4a:	b7 01       	movw	r22, r14
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	5d d0       	rcall	.+186    	; 0x1b0a <strcat>
	strcat(buf,"\r\n");
    1a50:	f8 01       	movw	r30, r16
    1a52:	01 90       	ld	r0, Z+
    1a54:	00 20       	and	r0, r0
    1a56:	e9 f7       	brne	.-6      	; 0x1a52 <TCP_connect+0x68>
    1a58:	31 97       	sbiw	r30, 0x01	; 1
    1a5a:	8d e0       	ldi	r24, 0x0D	; 13
    1a5c:	9a e0       	ldi	r25, 0x0A	; 10
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1a64:	b8 01       	movw	r22, r16
    1a66:	82 e9       	ldi	r24, 0x92	; 146
    1a68:	95 e0       	ldi	r25, 0x05	; 5
    1a6a:	63 d0       	rcall	.+198    	; 0x1b32 <strcpy>
	
	return buff.esp_buff;
	
}
    1a6c:	82 e9       	ldi	r24, 0x92	; 146
    1a6e:	95 e0       	ldi	r25, 0x05	; 5
    1a70:	c0 5c       	subi	r28, 0xC0	; 192
    1a72:	df 4f       	sbci	r29, 0xFF	; 255
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	08 95       	ret

00001a8c <__udivmodsi4>:
    1a8c:	a1 e2       	ldi	r26, 0x21	; 33
    1a8e:	1a 2e       	mov	r1, r26
    1a90:	aa 1b       	sub	r26, r26
    1a92:	bb 1b       	sub	r27, r27
    1a94:	fd 01       	movw	r30, r26
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <__udivmodsi4_ep>

00001a98 <__udivmodsi4_loop>:
    1a98:	aa 1f       	adc	r26, r26
    1a9a:	bb 1f       	adc	r27, r27
    1a9c:	ee 1f       	adc	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	a2 17       	cp	r26, r18
    1aa2:	b3 07       	cpc	r27, r19
    1aa4:	e4 07       	cpc	r30, r20
    1aa6:	f5 07       	cpc	r31, r21
    1aa8:	20 f0       	brcs	.+8      	; 0x1ab2 <__udivmodsi4_ep>
    1aaa:	a2 1b       	sub	r26, r18
    1aac:	b3 0b       	sbc	r27, r19
    1aae:	e4 0b       	sbc	r30, r20
    1ab0:	f5 0b       	sbc	r31, r21

00001ab2 <__udivmodsi4_ep>:
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	1a 94       	dec	r1
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <__udivmodsi4_loop>
    1abe:	60 95       	com	r22
    1ac0:	70 95       	com	r23
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	ac 01       	movw	r20, r24
    1aca:	bd 01       	movw	r22, r26
    1acc:	cf 01       	movw	r24, r30
    1ace:	08 95       	ret

00001ad0 <atoi>:
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	88 27       	eor	r24, r24
    1ad4:	99 27       	eor	r25, r25
    1ad6:	e8 94       	clt
    1ad8:	21 91       	ld	r18, Z+
    1ada:	20 32       	cpi	r18, 0x20	; 32
    1adc:	e9 f3       	breq	.-6      	; 0x1ad8 <atoi+0x8>
    1ade:	29 30       	cpi	r18, 0x09	; 9
    1ae0:	10 f0       	brcs	.+4      	; 0x1ae6 <atoi+0x16>
    1ae2:	2e 30       	cpi	r18, 0x0E	; 14
    1ae4:	c8 f3       	brcs	.-14     	; 0x1ad8 <atoi+0x8>
    1ae6:	2b 32       	cpi	r18, 0x2B	; 43
    1ae8:	39 f0       	breq	.+14     	; 0x1af8 <atoi+0x28>
    1aea:	2d 32       	cpi	r18, 0x2D	; 45
    1aec:	31 f4       	brne	.+12     	; 0x1afa <atoi+0x2a>
    1aee:	68 94       	set
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <atoi+0x28>
    1af2:	26 d0       	rcall	.+76     	; 0x1b40 <__mulhi_const_10>
    1af4:	82 0f       	add	r24, r18
    1af6:	91 1d       	adc	r25, r1
    1af8:	21 91       	ld	r18, Z+
    1afa:	20 53       	subi	r18, 0x30	; 48
    1afc:	2a 30       	cpi	r18, 0x0A	; 10
    1afe:	c8 f3       	brcs	.-14     	; 0x1af2 <atoi+0x22>
    1b00:	1e f4       	brtc	.+6      	; 0x1b08 <atoi+0x38>
    1b02:	90 95       	com	r25
    1b04:	81 95       	neg	r24
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <strcat>:
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	0d 90       	ld	r0, X+
    1b10:	00 20       	and	r0, r0
    1b12:	e9 f7       	brne	.-6      	; 0x1b0e <strcat+0x4>
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	01 90       	ld	r0, Z+
    1b18:	0d 92       	st	X+, r0
    1b1a:	00 20       	and	r0, r0
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <strcat+0xc>
    1b1e:	08 95       	ret

00001b20 <strcmp>:
    1b20:	fb 01       	movw	r30, r22
    1b22:	dc 01       	movw	r26, r24
    1b24:	8d 91       	ld	r24, X+
    1b26:	01 90       	ld	r0, Z+
    1b28:	80 19       	sub	r24, r0
    1b2a:	01 10       	cpse	r0, r1
    1b2c:	d9 f3       	breq	.-10     	; 0x1b24 <strcmp+0x4>
    1b2e:	99 0b       	sbc	r25, r25
    1b30:	08 95       	ret

00001b32 <strcpy>:
    1b32:	fb 01       	movw	r30, r22
    1b34:	dc 01       	movw	r26, r24
    1b36:	01 90       	ld	r0, Z+
    1b38:	0d 92       	st	X+, r0
    1b3a:	00 20       	and	r0, r0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <strcpy+0x4>
    1b3e:	08 95       	ret

00001b40 <__mulhi_const_10>:
    1b40:	7a e0       	ldi	r23, 0x0A	; 10
    1b42:	97 9f       	mul	r25, r23
    1b44:	90 2d       	mov	r25, r0
    1b46:	87 9f       	mul	r24, r23
    1b48:	80 2d       	mov	r24, r0
    1b4a:	91 0d       	add	r25, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	08 95       	ret

00001b50 <sprintf>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	0d 89       	ldd	r16, Y+21	; 0x15
    1b6a:	1e 89       	ldd	r17, Y+22	; 0x16
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	8c 83       	std	Y+4, r24	; 0x04
    1b70:	1a 83       	std	Y+2, r17	; 0x02
    1b72:	09 83       	std	Y+1, r16	; 0x01
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	9f e7       	ldi	r25, 0x7F	; 127
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	ae 01       	movw	r20, r28
    1b7e:	47 5e       	subi	r20, 0xE7	; 231
    1b80:	5f 4f       	sbci	r21, 0xFF	; 255
    1b82:	6f 89       	ldd	r22, Y+23	; 0x17
    1b84:	78 8d       	ldd	r23, Y+24	; 0x18
    1b86:	ce 01       	movw	r24, r28
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	10 d0       	rcall	.+32     	; 0x1bac <vfprintf>
    1b8c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b8e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b90:	e0 0f       	add	r30, r16
    1b92:	f1 1f       	adc	r31, r17
    1b94:	10 82       	st	Z, r1
    1b96:	2e 96       	adiw	r28, 0x0e	; 14
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <vfprintf>:
    1bac:	2f 92       	push	r2
    1bae:	3f 92       	push	r3
    1bb0:	4f 92       	push	r4
    1bb2:	5f 92       	push	r5
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	8f 92       	push	r8
    1bba:	9f 92       	push	r9
    1bbc:	af 92       	push	r10
    1bbe:	bf 92       	push	r11
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	2b 97       	sbiw	r28, 0x0b	; 11
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	6c 01       	movw	r12, r24
    1be2:	7b 01       	movw	r14, r22
    1be4:	8a 01       	movw	r16, r20
    1be6:	fc 01       	movw	r30, r24
    1be8:	17 82       	std	Z+7, r1	; 0x07
    1bea:	16 82       	std	Z+6, r1	; 0x06
    1bec:	83 81       	ldd	r24, Z+3	; 0x03
    1bee:	81 ff       	sbrs	r24, 1
    1bf0:	bf c1       	rjmp	.+894    	; 0x1f70 <vfprintf+0x3c4>
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	3c 01       	movw	r6, r24
    1bf8:	f6 01       	movw	r30, r12
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	93 fd       	sbrc	r25, 3
    1c00:	85 91       	lpm	r24, Z+
    1c02:	93 ff       	sbrs	r25, 3
    1c04:	81 91       	ld	r24, Z+
    1c06:	7f 01       	movw	r14, r30
    1c08:	88 23       	and	r24, r24
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <vfprintf+0x62>
    1c0c:	ad c1       	rjmp	.+858    	; 0x1f68 <vfprintf+0x3bc>
    1c0e:	85 32       	cpi	r24, 0x25	; 37
    1c10:	39 f4       	brne	.+14     	; 0x1c20 <vfprintf+0x74>
    1c12:	93 fd       	sbrc	r25, 3
    1c14:	85 91       	lpm	r24, Z+
    1c16:	93 ff       	sbrs	r25, 3
    1c18:	81 91       	ld	r24, Z+
    1c1a:	7f 01       	movw	r14, r30
    1c1c:	85 32       	cpi	r24, 0x25	; 37
    1c1e:	21 f4       	brne	.+8      	; 0x1c28 <vfprintf+0x7c>
    1c20:	b6 01       	movw	r22, r12
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	d6 d1       	rcall	.+940    	; 0x1fd2 <fputc>
    1c26:	e8 cf       	rjmp	.-48     	; 0x1bf8 <vfprintf+0x4c>
    1c28:	91 2c       	mov	r9, r1
    1c2a:	21 2c       	mov	r2, r1
    1c2c:	31 2c       	mov	r3, r1
    1c2e:	ff e1       	ldi	r31, 0x1F	; 31
    1c30:	f3 15       	cp	r31, r3
    1c32:	d8 f0       	brcs	.+54     	; 0x1c6a <vfprintf+0xbe>
    1c34:	8b 32       	cpi	r24, 0x2B	; 43
    1c36:	79 f0       	breq	.+30     	; 0x1c56 <vfprintf+0xaa>
    1c38:	38 f4       	brcc	.+14     	; 0x1c48 <vfprintf+0x9c>
    1c3a:	80 32       	cpi	r24, 0x20	; 32
    1c3c:	79 f0       	breq	.+30     	; 0x1c5c <vfprintf+0xb0>
    1c3e:	83 32       	cpi	r24, 0x23	; 35
    1c40:	a1 f4       	brne	.+40     	; 0x1c6a <vfprintf+0xbe>
    1c42:	23 2d       	mov	r18, r3
    1c44:	20 61       	ori	r18, 0x10	; 16
    1c46:	1d c0       	rjmp	.+58     	; 0x1c82 <vfprintf+0xd6>
    1c48:	8d 32       	cpi	r24, 0x2D	; 45
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <vfprintf+0xb8>
    1c4c:	80 33       	cpi	r24, 0x30	; 48
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <vfprintf+0xbe>
    1c50:	23 2d       	mov	r18, r3
    1c52:	21 60       	ori	r18, 0x01	; 1
    1c54:	16 c0       	rjmp	.+44     	; 0x1c82 <vfprintf+0xd6>
    1c56:	83 2d       	mov	r24, r3
    1c58:	82 60       	ori	r24, 0x02	; 2
    1c5a:	38 2e       	mov	r3, r24
    1c5c:	e3 2d       	mov	r30, r3
    1c5e:	e4 60       	ori	r30, 0x04	; 4
    1c60:	3e 2e       	mov	r3, r30
    1c62:	2a c0       	rjmp	.+84     	; 0x1cb8 <vfprintf+0x10c>
    1c64:	f3 2d       	mov	r31, r3
    1c66:	f8 60       	ori	r31, 0x08	; 8
    1c68:	1d c0       	rjmp	.+58     	; 0x1ca4 <vfprintf+0xf8>
    1c6a:	37 fc       	sbrc	r3, 7
    1c6c:	2d c0       	rjmp	.+90     	; 0x1cc8 <vfprintf+0x11c>
    1c6e:	20 ed       	ldi	r18, 0xD0	; 208
    1c70:	28 0f       	add	r18, r24
    1c72:	2a 30       	cpi	r18, 0x0A	; 10
    1c74:	40 f0       	brcs	.+16     	; 0x1c86 <vfprintf+0xda>
    1c76:	8e 32       	cpi	r24, 0x2E	; 46
    1c78:	b9 f4       	brne	.+46     	; 0x1ca8 <vfprintf+0xfc>
    1c7a:	36 fc       	sbrc	r3, 6
    1c7c:	75 c1       	rjmp	.+746    	; 0x1f68 <vfprintf+0x3bc>
    1c7e:	23 2d       	mov	r18, r3
    1c80:	20 64       	ori	r18, 0x40	; 64
    1c82:	32 2e       	mov	r3, r18
    1c84:	19 c0       	rjmp	.+50     	; 0x1cb8 <vfprintf+0x10c>
    1c86:	36 fe       	sbrs	r3, 6
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <vfprintf+0xea>
    1c8a:	8a e0       	ldi	r24, 0x0A	; 10
    1c8c:	98 9e       	mul	r9, r24
    1c8e:	20 0d       	add	r18, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	92 2e       	mov	r9, r18
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <vfprintf+0x10c>
    1c96:	ea e0       	ldi	r30, 0x0A	; 10
    1c98:	2e 9e       	mul	r2, r30
    1c9a:	20 0d       	add	r18, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	22 2e       	mov	r2, r18
    1ca0:	f3 2d       	mov	r31, r3
    1ca2:	f0 62       	ori	r31, 0x20	; 32
    1ca4:	3f 2e       	mov	r3, r31
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <vfprintf+0x10c>
    1ca8:	8c 36       	cpi	r24, 0x6C	; 108
    1caa:	21 f4       	brne	.+8      	; 0x1cb4 <vfprintf+0x108>
    1cac:	83 2d       	mov	r24, r3
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	38 2e       	mov	r3, r24
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <vfprintf+0x10c>
    1cb4:	88 36       	cpi	r24, 0x68	; 104
    1cb6:	41 f4       	brne	.+16     	; 0x1cc8 <vfprintf+0x11c>
    1cb8:	f7 01       	movw	r30, r14
    1cba:	93 fd       	sbrc	r25, 3
    1cbc:	85 91       	lpm	r24, Z+
    1cbe:	93 ff       	sbrs	r25, 3
    1cc0:	81 91       	ld	r24, Z+
    1cc2:	7f 01       	movw	r14, r30
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	b3 cf       	rjmp	.-154    	; 0x1c2e <vfprintf+0x82>
    1cc8:	98 2f       	mov	r25, r24
    1cca:	9f 7d       	andi	r25, 0xDF	; 223
    1ccc:	95 54       	subi	r25, 0x45	; 69
    1cce:	93 30       	cpi	r25, 0x03	; 3
    1cd0:	28 f4       	brcc	.+10     	; 0x1cdc <vfprintf+0x130>
    1cd2:	0c 5f       	subi	r16, 0xFC	; 252
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	9f e3       	ldi	r25, 0x3F	; 63
    1cd8:	99 83       	std	Y+1, r25	; 0x01
    1cda:	0d c0       	rjmp	.+26     	; 0x1cf6 <vfprintf+0x14a>
    1cdc:	83 36       	cpi	r24, 0x63	; 99
    1cde:	31 f0       	breq	.+12     	; 0x1cec <vfprintf+0x140>
    1ce0:	83 37       	cpi	r24, 0x73	; 115
    1ce2:	71 f0       	breq	.+28     	; 0x1d00 <vfprintf+0x154>
    1ce4:	83 35       	cpi	r24, 0x53	; 83
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <vfprintf+0x13e>
    1ce8:	55 c0       	rjmp	.+170    	; 0x1d94 <vfprintf+0x1e8>
    1cea:	20 c0       	rjmp	.+64     	; 0x1d2c <vfprintf+0x180>
    1cec:	f8 01       	movw	r30, r16
    1cee:	80 81       	ld	r24, Z
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	0e 5f       	subi	r16, 0xFE	; 254
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	88 24       	eor	r8, r8
    1cf8:	83 94       	inc	r8
    1cfa:	91 2c       	mov	r9, r1
    1cfc:	53 01       	movw	r10, r6
    1cfe:	12 c0       	rjmp	.+36     	; 0x1d24 <vfprintf+0x178>
    1d00:	28 01       	movw	r4, r16
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	4f 0e       	add	r4, r31
    1d06:	51 1c       	adc	r5, r1
    1d08:	f8 01       	movw	r30, r16
    1d0a:	a0 80       	ld	r10, Z
    1d0c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d0e:	36 fe       	sbrs	r3, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x16c>
    1d12:	69 2d       	mov	r22, r9
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x170>
    1d18:	6f ef       	ldi	r22, 0xFF	; 255
    1d1a:	7f ef       	ldi	r23, 0xFF	; 255
    1d1c:	c5 01       	movw	r24, r10
    1d1e:	4e d1       	rcall	.+668    	; 0x1fbc <strnlen>
    1d20:	4c 01       	movw	r8, r24
    1d22:	82 01       	movw	r16, r4
    1d24:	f3 2d       	mov	r31, r3
    1d26:	ff 77       	andi	r31, 0x7F	; 127
    1d28:	3f 2e       	mov	r3, r31
    1d2a:	15 c0       	rjmp	.+42     	; 0x1d56 <vfprintf+0x1aa>
    1d2c:	28 01       	movw	r4, r16
    1d2e:	22 e0       	ldi	r18, 0x02	; 2
    1d30:	42 0e       	add	r4, r18
    1d32:	51 1c       	adc	r5, r1
    1d34:	f8 01       	movw	r30, r16
    1d36:	a0 80       	ld	r10, Z
    1d38:	b1 80       	ldd	r11, Z+1	; 0x01
    1d3a:	36 fe       	sbrs	r3, 6
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x198>
    1d3e:	69 2d       	mov	r22, r9
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x19c>
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	7f ef       	ldi	r23, 0xFF	; 255
    1d48:	c5 01       	movw	r24, r10
    1d4a:	2d d1       	rcall	.+602    	; 0x1fa6 <strnlen_P>
    1d4c:	4c 01       	movw	r8, r24
    1d4e:	f3 2d       	mov	r31, r3
    1d50:	f0 68       	ori	r31, 0x80	; 128
    1d52:	3f 2e       	mov	r3, r31
    1d54:	82 01       	movw	r16, r4
    1d56:	33 fc       	sbrc	r3, 3
    1d58:	19 c0       	rjmp	.+50     	; 0x1d8c <vfprintf+0x1e0>
    1d5a:	82 2d       	mov	r24, r2
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 16       	cp	r8, r24
    1d60:	99 06       	cpc	r9, r25
    1d62:	a0 f4       	brcc	.+40     	; 0x1d8c <vfprintf+0x1e0>
    1d64:	b6 01       	movw	r22, r12
    1d66:	80 e2       	ldi	r24, 0x20	; 32
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	33 d1       	rcall	.+614    	; 0x1fd2 <fputc>
    1d6c:	2a 94       	dec	r2
    1d6e:	f5 cf       	rjmp	.-22     	; 0x1d5a <vfprintf+0x1ae>
    1d70:	f5 01       	movw	r30, r10
    1d72:	37 fc       	sbrc	r3, 7
    1d74:	85 91       	lpm	r24, Z+
    1d76:	37 fe       	sbrs	r3, 7
    1d78:	81 91       	ld	r24, Z+
    1d7a:	5f 01       	movw	r10, r30
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	28 d1       	rcall	.+592    	; 0x1fd2 <fputc>
    1d82:	21 10       	cpse	r2, r1
    1d84:	2a 94       	dec	r2
    1d86:	21 e0       	ldi	r18, 0x01	; 1
    1d88:	82 1a       	sub	r8, r18
    1d8a:	91 08       	sbc	r9, r1
    1d8c:	81 14       	cp	r8, r1
    1d8e:	91 04       	cpc	r9, r1
    1d90:	79 f7       	brne	.-34     	; 0x1d70 <vfprintf+0x1c4>
    1d92:	e1 c0       	rjmp	.+450    	; 0x1f56 <vfprintf+0x3aa>
    1d94:	84 36       	cpi	r24, 0x64	; 100
    1d96:	11 f0       	breq	.+4      	; 0x1d9c <vfprintf+0x1f0>
    1d98:	89 36       	cpi	r24, 0x69	; 105
    1d9a:	39 f5       	brne	.+78     	; 0x1dea <vfprintf+0x23e>
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	37 fe       	sbrs	r3, 7
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <vfprintf+0x204>
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	0c 5f       	subi	r16, 0xFC	; 252
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <vfprintf+0x214>
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	07 2e       	mov	r0, r23
    1db6:	00 0c       	add	r0, r0
    1db8:	88 0b       	sbc	r24, r24
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	0e 5f       	subi	r16, 0xFE	; 254
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	f3 2d       	mov	r31, r3
    1dc2:	ff 76       	andi	r31, 0x6F	; 111
    1dc4:	3f 2e       	mov	r3, r31
    1dc6:	97 ff       	sbrs	r25, 7
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <vfprintf+0x230>
    1dca:	90 95       	com	r25
    1dcc:	80 95       	com	r24
    1dce:	70 95       	com	r23
    1dd0:	61 95       	neg	r22
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	f0 68       	ori	r31, 0x80	; 128
    1dda:	3f 2e       	mov	r3, r31
    1ddc:	2a e0       	ldi	r18, 0x0A	; 10
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	a3 01       	movw	r20, r6
    1de2:	33 d1       	rcall	.+614    	; 0x204a <__ultoa_invert>
    1de4:	88 2e       	mov	r8, r24
    1de6:	86 18       	sub	r8, r6
    1de8:	44 c0       	rjmp	.+136    	; 0x1e72 <vfprintf+0x2c6>
    1dea:	85 37       	cpi	r24, 0x75	; 117
    1dec:	31 f4       	brne	.+12     	; 0x1dfa <vfprintf+0x24e>
    1dee:	23 2d       	mov	r18, r3
    1df0:	2f 7e       	andi	r18, 0xEF	; 239
    1df2:	b2 2e       	mov	r11, r18
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	25 c0       	rjmp	.+74     	; 0x1e44 <vfprintf+0x298>
    1dfa:	93 2d       	mov	r25, r3
    1dfc:	99 7f       	andi	r25, 0xF9	; 249
    1dfe:	b9 2e       	mov	r11, r25
    1e00:	8f 36       	cpi	r24, 0x6F	; 111
    1e02:	c1 f0       	breq	.+48     	; 0x1e34 <vfprintf+0x288>
    1e04:	18 f4       	brcc	.+6      	; 0x1e0c <vfprintf+0x260>
    1e06:	88 35       	cpi	r24, 0x58	; 88
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <vfprintf+0x27c>
    1e0a:	ae c0       	rjmp	.+348    	; 0x1f68 <vfprintf+0x3bc>
    1e0c:	80 37       	cpi	r24, 0x70	; 112
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <vfprintf+0x26a>
    1e10:	88 37       	cpi	r24, 0x78	; 120
    1e12:	21 f0       	breq	.+8      	; 0x1e1c <vfprintf+0x270>
    1e14:	a9 c0       	rjmp	.+338    	; 0x1f68 <vfprintf+0x3bc>
    1e16:	e9 2f       	mov	r30, r25
    1e18:	e0 61       	ori	r30, 0x10	; 16
    1e1a:	be 2e       	mov	r11, r30
    1e1c:	b4 fe       	sbrs	r11, 4
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <vfprintf+0x28e>
    1e20:	fb 2d       	mov	r31, r11
    1e22:	f4 60       	ori	r31, 0x04	; 4
    1e24:	bf 2e       	mov	r11, r31
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <vfprintf+0x28e>
    1e28:	34 fe       	sbrs	r3, 4
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <vfprintf+0x294>
    1e2c:	29 2f       	mov	r18, r25
    1e2e:	26 60       	ori	r18, 0x06	; 6
    1e30:	b2 2e       	mov	r11, r18
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <vfprintf+0x294>
    1e34:	28 e0       	ldi	r18, 0x08	; 8
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <vfprintf+0x298>
    1e3a:	20 e1       	ldi	r18, 0x10	; 16
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x298>
    1e40:	20 e1       	ldi	r18, 0x10	; 16
    1e42:	32 e0       	ldi	r19, 0x02	; 2
    1e44:	f8 01       	movw	r30, r16
    1e46:	b7 fe       	sbrs	r11, 7
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <vfprintf+0x2ac>
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	0c 5f       	subi	r16, 0xFC	; 252
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <vfprintf+0x2b8>
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 5f       	subi	r16, 0xFE	; 254
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	a3 01       	movw	r20, r6
    1e66:	f1 d0       	rcall	.+482    	; 0x204a <__ultoa_invert>
    1e68:	88 2e       	mov	r8, r24
    1e6a:	86 18       	sub	r8, r6
    1e6c:	fb 2d       	mov	r31, r11
    1e6e:	ff 77       	andi	r31, 0x7F	; 127
    1e70:	3f 2e       	mov	r3, r31
    1e72:	36 fe       	sbrs	r3, 6
    1e74:	0d c0       	rjmp	.+26     	; 0x1e90 <vfprintf+0x2e4>
    1e76:	23 2d       	mov	r18, r3
    1e78:	2e 7f       	andi	r18, 0xFE	; 254
    1e7a:	a2 2e       	mov	r10, r18
    1e7c:	89 14       	cp	r8, r9
    1e7e:	58 f4       	brcc	.+22     	; 0x1e96 <vfprintf+0x2ea>
    1e80:	34 fe       	sbrs	r3, 4
    1e82:	0b c0       	rjmp	.+22     	; 0x1e9a <vfprintf+0x2ee>
    1e84:	32 fc       	sbrc	r3, 2
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <vfprintf+0x2ee>
    1e88:	83 2d       	mov	r24, r3
    1e8a:	8e 7e       	andi	r24, 0xEE	; 238
    1e8c:	a8 2e       	mov	r10, r24
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <vfprintf+0x2ee>
    1e90:	b8 2c       	mov	r11, r8
    1e92:	a3 2c       	mov	r10, r3
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <vfprintf+0x2f0>
    1e96:	b8 2c       	mov	r11, r8
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <vfprintf+0x2f0>
    1e9a:	b9 2c       	mov	r11, r9
    1e9c:	a4 fe       	sbrs	r10, 4
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <vfprintf+0x312>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e8 0d       	add	r30, r8
    1ea4:	f1 1d       	adc	r31, r1
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 33       	cpi	r24, 0x30	; 48
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <vfprintf+0x308>
    1eac:	9a 2d       	mov	r25, r10
    1eae:	99 7e       	andi	r25, 0xE9	; 233
    1eb0:	a9 2e       	mov	r10, r25
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <vfprintf+0x31a>
    1eb4:	a2 fe       	sbrs	r10, 2
    1eb6:	06 c0       	rjmp	.+12     	; 0x1ec4 <vfprintf+0x318>
    1eb8:	b3 94       	inc	r11
    1eba:	b3 94       	inc	r11
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <vfprintf+0x31a>
    1ebe:	8a 2d       	mov	r24, r10
    1ec0:	86 78       	andi	r24, 0x86	; 134
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <vfprintf+0x31a>
    1ec4:	b3 94       	inc	r11
    1ec6:	a3 fc       	sbrc	r10, 3
    1ec8:	10 c0       	rjmp	.+32     	; 0x1eea <vfprintf+0x33e>
    1eca:	a0 fe       	sbrs	r10, 0
    1ecc:	06 c0       	rjmp	.+12     	; 0x1eda <vfprintf+0x32e>
    1ece:	b2 14       	cp	r11, r2
    1ed0:	80 f4       	brcc	.+32     	; 0x1ef2 <vfprintf+0x346>
    1ed2:	28 0c       	add	r2, r8
    1ed4:	92 2c       	mov	r9, r2
    1ed6:	9b 18       	sub	r9, r11
    1ed8:	0d c0       	rjmp	.+26     	; 0x1ef4 <vfprintf+0x348>
    1eda:	b2 14       	cp	r11, r2
    1edc:	58 f4       	brcc	.+22     	; 0x1ef4 <vfprintf+0x348>
    1ede:	b6 01       	movw	r22, r12
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	76 d0       	rcall	.+236    	; 0x1fd2 <fputc>
    1ee6:	b3 94       	inc	r11
    1ee8:	f8 cf       	rjmp	.-16     	; 0x1eda <vfprintf+0x32e>
    1eea:	b2 14       	cp	r11, r2
    1eec:	18 f4       	brcc	.+6      	; 0x1ef4 <vfprintf+0x348>
    1eee:	2b 18       	sub	r2, r11
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x34a>
    1ef2:	98 2c       	mov	r9, r8
    1ef4:	21 2c       	mov	r2, r1
    1ef6:	a4 fe       	sbrs	r10, 4
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <vfprintf+0x36c>
    1efa:	b6 01       	movw	r22, r12
    1efc:	80 e3       	ldi	r24, 0x30	; 48
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	68 d0       	rcall	.+208    	; 0x1fd2 <fputc>
    1f02:	a2 fe       	sbrs	r10, 2
    1f04:	16 c0       	rjmp	.+44     	; 0x1f32 <vfprintf+0x386>
    1f06:	a1 fc       	sbrc	r10, 1
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <vfprintf+0x364>
    1f0a:	88 e7       	ldi	r24, 0x78	; 120
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <vfprintf+0x368>
    1f10:	88 e5       	ldi	r24, 0x58	; 88
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	b6 01       	movw	r22, r12
    1f16:	0c c0       	rjmp	.+24     	; 0x1f30 <vfprintf+0x384>
    1f18:	8a 2d       	mov	r24, r10
    1f1a:	86 78       	andi	r24, 0x86	; 134
    1f1c:	51 f0       	breq	.+20     	; 0x1f32 <vfprintf+0x386>
    1f1e:	a1 fe       	sbrs	r10, 1
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <vfprintf+0x37a>
    1f22:	8b e2       	ldi	r24, 0x2B	; 43
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <vfprintf+0x37c>
    1f26:	80 e2       	ldi	r24, 0x20	; 32
    1f28:	a7 fc       	sbrc	r10, 7
    1f2a:	8d e2       	ldi	r24, 0x2D	; 45
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	50 d0       	rcall	.+160    	; 0x1fd2 <fputc>
    1f32:	89 14       	cp	r8, r9
    1f34:	30 f4       	brcc	.+12     	; 0x1f42 <vfprintf+0x396>
    1f36:	b6 01       	movw	r22, r12
    1f38:	80 e3       	ldi	r24, 0x30	; 48
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	4a d0       	rcall	.+148    	; 0x1fd2 <fputc>
    1f3e:	9a 94       	dec	r9
    1f40:	f8 cf       	rjmp	.-16     	; 0x1f32 <vfprintf+0x386>
    1f42:	8a 94       	dec	r8
    1f44:	f3 01       	movw	r30, r6
    1f46:	e8 0d       	add	r30, r8
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	40 d0       	rcall	.+128    	; 0x1fd2 <fputc>
    1f52:	81 10       	cpse	r8, r1
    1f54:	f6 cf       	rjmp	.-20     	; 0x1f42 <vfprintf+0x396>
    1f56:	22 20       	and	r2, r2
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <vfprintf+0x3b0>
    1f5a:	4e ce       	rjmp	.-868    	; 0x1bf8 <vfprintf+0x4c>
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	80 e2       	ldi	r24, 0x20	; 32
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	37 d0       	rcall	.+110    	; 0x1fd2 <fputc>
    1f64:	2a 94       	dec	r2
    1f66:	f7 cf       	rjmp	.-18     	; 0x1f56 <vfprintf+0x3aa>
    1f68:	f6 01       	movw	r30, r12
    1f6a:	86 81       	ldd	r24, Z+6	; 0x06
    1f6c:	97 81       	ldd	r25, Z+7	; 0x07
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <vfprintf+0x3c8>
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	9f ef       	ldi	r25, 0xFF	; 255
    1f74:	2b 96       	adiw	r28, 0x0b	; 11
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	bf 90       	pop	r11
    1f92:	af 90       	pop	r10
    1f94:	9f 90       	pop	r9
    1f96:	8f 90       	pop	r8
    1f98:	7f 90       	pop	r7
    1f9a:	6f 90       	pop	r6
    1f9c:	5f 90       	pop	r5
    1f9e:	4f 90       	pop	r4
    1fa0:	3f 90       	pop	r3
    1fa2:	2f 90       	pop	r2
    1fa4:	08 95       	ret

00001fa6 <strnlen_P>:
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	05 90       	lpm	r0, Z+
    1faa:	61 50       	subi	r22, 0x01	; 1
    1fac:	70 40       	sbci	r23, 0x00	; 0
    1fae:	01 10       	cpse	r0, r1
    1fb0:	d8 f7       	brcc	.-10     	; 0x1fa8 <strnlen_P+0x2>
    1fb2:	80 95       	com	r24
    1fb4:	90 95       	com	r25
    1fb6:	8e 0f       	add	r24, r30
    1fb8:	9f 1f       	adc	r25, r31
    1fba:	08 95       	ret

00001fbc <strnlen>:
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	61 50       	subi	r22, 0x01	; 1
    1fc0:	70 40       	sbci	r23, 0x00	; 0
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	01 10       	cpse	r0, r1
    1fc6:	d8 f7       	brcc	.-10     	; 0x1fbe <strnlen+0x2>
    1fc8:	80 95       	com	r24
    1fca:	90 95       	com	r25
    1fcc:	8e 0f       	add	r24, r30
    1fce:	9f 1f       	adc	r25, r31
    1fd0:	08 95       	ret

00001fd2 <fputc>:
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	fb 01       	movw	r30, r22
    1fdc:	23 81       	ldd	r18, Z+3	; 0x03
    1fde:	21 fd       	sbrc	r18, 1
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <fputc+0x16>
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	9f ef       	ldi	r25, 0xFF	; 255
    1fe6:	2c c0       	rjmp	.+88     	; 0x2040 <fputc+0x6e>
    1fe8:	22 ff       	sbrs	r18, 2
    1fea:	16 c0       	rjmp	.+44     	; 0x2018 <fputc+0x46>
    1fec:	46 81       	ldd	r20, Z+6	; 0x06
    1fee:	57 81       	ldd	r21, Z+7	; 0x07
    1ff0:	24 81       	ldd	r18, Z+4	; 0x04
    1ff2:	35 81       	ldd	r19, Z+5	; 0x05
    1ff4:	42 17       	cp	r20, r18
    1ff6:	53 07       	cpc	r21, r19
    1ff8:	44 f4       	brge	.+16     	; 0x200a <fputc+0x38>
    1ffa:	a0 81       	ld	r26, Z
    1ffc:	b1 81       	ldd	r27, Z+1	; 0x01
    1ffe:	9d 01       	movw	r18, r26
    2000:	2f 5f       	subi	r18, 0xFF	; 255
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	31 83       	std	Z+1, r19	; 0x01
    2006:	20 83       	st	Z, r18
    2008:	8c 93       	st	X, r24
    200a:	26 81       	ldd	r18, Z+6	; 0x06
    200c:	37 81       	ldd	r19, Z+7	; 0x07
    200e:	2f 5f       	subi	r18, 0xFF	; 255
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	37 83       	std	Z+7, r19	; 0x07
    2014:	26 83       	std	Z+6, r18	; 0x06
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <fputc+0x6e>
    2018:	8b 01       	movw	r16, r22
    201a:	ec 01       	movw	r28, r24
    201c:	fb 01       	movw	r30, r22
    201e:	00 84       	ldd	r0, Z+8	; 0x08
    2020:	f1 85       	ldd	r31, Z+9	; 0x09
    2022:	e0 2d       	mov	r30, r0
    2024:	09 95       	icall
    2026:	89 2b       	or	r24, r25
    2028:	e1 f6       	brne	.-72     	; 0x1fe2 <fputc+0x10>
    202a:	d8 01       	movw	r26, r16
    202c:	16 96       	adiw	r26, 0x06	; 6
    202e:	8d 91       	ld	r24, X+
    2030:	9c 91       	ld	r25, X
    2032:	17 97       	sbiw	r26, 0x07	; 7
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	17 96       	adiw	r26, 0x07	; 7
    2038:	9c 93       	st	X, r25
    203a:	8e 93       	st	-X, r24
    203c:	16 97       	sbiw	r26, 0x06	; 6
    203e:	ce 01       	movw	r24, r28
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	08 95       	ret

0000204a <__ultoa_invert>:
    204a:	fa 01       	movw	r30, r20
    204c:	aa 27       	eor	r26, r26
    204e:	28 30       	cpi	r18, 0x08	; 8
    2050:	51 f1       	breq	.+84     	; 0x20a6 <__ultoa_invert+0x5c>
    2052:	20 31       	cpi	r18, 0x10	; 16
    2054:	81 f1       	breq	.+96     	; 0x20b6 <__ultoa_invert+0x6c>
    2056:	e8 94       	clt
    2058:	6f 93       	push	r22
    205a:	6e 7f       	andi	r22, 0xFE	; 254
    205c:	6e 5f       	subi	r22, 0xFE	; 254
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	8f 4f       	sbci	r24, 0xFF	; 255
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	af 4f       	sbci	r26, 0xFF	; 255
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	3e d0       	rcall	.+124    	; 0x20e6 <__ultoa_invert+0x9c>
    206a:	b4 e0       	ldi	r27, 0x04	; 4
    206c:	3c d0       	rcall	.+120    	; 0x20e6 <__ultoa_invert+0x9c>
    206e:	67 0f       	add	r22, r23
    2070:	78 1f       	adc	r23, r24
    2072:	89 1f       	adc	r24, r25
    2074:	9a 1f       	adc	r25, r26
    2076:	a1 1d       	adc	r26, r1
    2078:	68 0f       	add	r22, r24
    207a:	79 1f       	adc	r23, r25
    207c:	8a 1f       	adc	r24, r26
    207e:	91 1d       	adc	r25, r1
    2080:	a1 1d       	adc	r26, r1
    2082:	6a 0f       	add	r22, r26
    2084:	71 1d       	adc	r23, r1
    2086:	81 1d       	adc	r24, r1
    2088:	91 1d       	adc	r25, r1
    208a:	a1 1d       	adc	r26, r1
    208c:	20 d0       	rcall	.+64     	; 0x20ce <__ultoa_invert+0x84>
    208e:	09 f4       	brne	.+2      	; 0x2092 <__ultoa_invert+0x48>
    2090:	68 94       	set
    2092:	3f 91       	pop	r19
    2094:	2a e0       	ldi	r18, 0x0A	; 10
    2096:	26 9f       	mul	r18, r22
    2098:	11 24       	eor	r1, r1
    209a:	30 19       	sub	r19, r0
    209c:	30 5d       	subi	r19, 0xD0	; 208
    209e:	31 93       	st	Z+, r19
    20a0:	de f6       	brtc	.-74     	; 0x2058 <__ultoa_invert+0xe>
    20a2:	cf 01       	movw	r24, r30
    20a4:	08 95       	ret
    20a6:	46 2f       	mov	r20, r22
    20a8:	47 70       	andi	r20, 0x07	; 7
    20aa:	40 5d       	subi	r20, 0xD0	; 208
    20ac:	41 93       	st	Z+, r20
    20ae:	b3 e0       	ldi	r27, 0x03	; 3
    20b0:	0f d0       	rcall	.+30     	; 0x20d0 <__ultoa_invert+0x86>
    20b2:	c9 f7       	brne	.-14     	; 0x20a6 <__ultoa_invert+0x5c>
    20b4:	f6 cf       	rjmp	.-20     	; 0x20a2 <__ultoa_invert+0x58>
    20b6:	46 2f       	mov	r20, r22
    20b8:	4f 70       	andi	r20, 0x0F	; 15
    20ba:	40 5d       	subi	r20, 0xD0	; 208
    20bc:	4a 33       	cpi	r20, 0x3A	; 58
    20be:	18 f0       	brcs	.+6      	; 0x20c6 <__ultoa_invert+0x7c>
    20c0:	49 5d       	subi	r20, 0xD9	; 217
    20c2:	31 fd       	sbrc	r19, 1
    20c4:	40 52       	subi	r20, 0x20	; 32
    20c6:	41 93       	st	Z+, r20
    20c8:	02 d0       	rcall	.+4      	; 0x20ce <__ultoa_invert+0x84>
    20ca:	a9 f7       	brne	.-22     	; 0x20b6 <__ultoa_invert+0x6c>
    20cc:	ea cf       	rjmp	.-44     	; 0x20a2 <__ultoa_invert+0x58>
    20ce:	b4 e0       	ldi	r27, 0x04	; 4
    20d0:	a6 95       	lsr	r26
    20d2:	97 95       	ror	r25
    20d4:	87 95       	ror	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	ba 95       	dec	r27
    20dc:	c9 f7       	brne	.-14     	; 0x20d0 <__ultoa_invert+0x86>
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	61 05       	cpc	r22, r1
    20e2:	71 05       	cpc	r23, r1
    20e4:	08 95       	ret
    20e6:	9b 01       	movw	r18, r22
    20e8:	ac 01       	movw	r20, r24
    20ea:	0a 2e       	mov	r0, r26
    20ec:	06 94       	lsr	r0
    20ee:	57 95       	ror	r21
    20f0:	47 95       	ror	r20
    20f2:	37 95       	ror	r19
    20f4:	27 95       	ror	r18
    20f6:	ba 95       	dec	r27
    20f8:	c9 f7       	brne	.-14     	; 0x20ec <__ultoa_invert+0xa2>
    20fa:	62 0f       	add	r22, r18
    20fc:	73 1f       	adc	r23, r19
    20fe:	84 1f       	adc	r24, r20
    2100:	95 1f       	adc	r25, r21
    2102:	a0 1d       	adc	r26, r0
    2104:	08 95       	ret

00002106 <_exit>:
    2106:	f8 94       	cli

00002108 <__stop_program>:
    2108:	ff cf       	rjmp	.-2      	; 0x2108 <__stop_program>
