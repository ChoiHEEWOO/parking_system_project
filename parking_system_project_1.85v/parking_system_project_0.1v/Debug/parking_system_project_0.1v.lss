
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000326  00800100  000021ea  0000227e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d8  00800426  00800426  000025a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043bd  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001323  00000000  00000000  00006cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002096  00000000  00000000  00007fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000904  00000000  00000000  0000a070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf7  00000000  00000000  0000a974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b8f  00000000  00000000  0000b56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000e0fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c5       	rjmp	.+2878   	; 0xb7c <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ee       	ldi	r30, 0xEA	; 234
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3f       	cpi	r26, 0xFE	; 254
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	dd d6       	rcall	.+3514   	; 0xe7e <main>
      c4:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_18>:
	TICK.tick_1ms++;
	buzz_play(); //
}

ISR(USART0_RX_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	uint8_t buff=UDR0;
      f0:	8c b1       	in	r24, 0x0c	; 12
	uart0.buf=buff;
      f2:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <uart0+0x66>
	
	uart1_tx_char(buff);
      f6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uart1_tx_char>
}
      fa:	ff 91       	pop	r31
      fc:	ef 91       	pop	r30
      fe:	bf 91       	pop	r27
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0b be       	out	0x3b, r0	; 59
     116:	0f 90       	pop	r0
     118:	0f be       	out	0x3f, r0	; 63
     11a:	0f 90       	pop	r0
     11c:	1f 90       	pop	r1
     11e:	18 95       	reti

00000120 <__vector_30>:

//여기에 들어가있는 코드는 완전 뒤죽박죽임. 수정해야할 상황이 생긴다면, 차라리 새로짜는게 더 낫습니다.
ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
     120:	1f 92       	push	r1
     122:	0f 92       	push	r0
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	0f 92       	push	r0
     128:	11 24       	eor	r1, r1
     12a:	0b b6       	in	r0, 0x3b	; 59
     12c:	0f 92       	push	r0
     12e:	1f 93       	push	r17
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	bf 93       	push	r27
     144:	ef 93       	push	r30
     146:	ff 93       	push	r31
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	00 d0       	rcall	.+0      	; 0x14e <__vector_30+0x2e>
     14e:	1f 92       	push	r1
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cnt=0;
	//static uint8_t receive_length=0;
	static uint8_t parse_cnt=0;
	static uint8_t data_cnt=0;
	static uint8_t parse_data_flag=0;
	uint8_t buff=UDR1;
     154:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
     158:	1e 33       	cpi	r17, 0x3E	; 62
     15a:	21 f4       	brne	.+8      	; 0x164 <__vector_30+0x44>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <esp8266_send_ready_flag>
     162:	42 c0       	rjmp	.+132    	; 0x1e8 <__vector_30+0xc8>
	
	else if(buff=='O') cnt=1;
     164:	1f 34       	cpi	r17, 0x4F	; 79
     166:	21 f4       	brne	.+8      	; 0x170 <__vector_30+0x50>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <cnt.2411>
     16e:	3c c0       	rjmp	.+120    	; 0x1e8 <__vector_30+0xc8>
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
     170:	1b 34       	cpi	r17, 0x4B	; 75
     172:	51 f4       	brne	.+20     	; 0x188 <__vector_30+0x68>
     174:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <cnt.2411>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <__vector_30+0x5e>
     17c:	87 c0       	rjmp	.+270    	; 0x28c <__vector_30+0x16c>
     17e:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <esp8266_return_result_flag>
     182:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2411>
     186:	30 c0       	rjmp	.+96     	; 0x1e8 <__vector_30+0xc8>
	else cnt=0;
     188:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2411>
// 	else if(buff=='}')esp8266_receiving_flag=0;
// 	else if(buff=='{')esp8266_receiving_flag=1;
	
	if(buff=='+')parse_cnt=1;//
     18c:	1b 32       	cpi	r17, 0x2B	; 43
     18e:	21 f4       	brne	.+8      	; 0x198 <__vector_30+0x78>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
     196:	76 c0       	rjmp	.+236    	; 0x284 <__vector_30+0x164>
	else if(buff=='I'&&parse_cnt==1)parse_cnt++; //cnt=2
     198:	19 34       	cpi	r17, 0x49	; 73
     19a:	41 f4       	brne	.+16     	; 0x1ac <__vector_30+0x8c>
     19c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2412>
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	11 f5       	brne	.+68     	; 0x1e8 <__vector_30+0xc8>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
     1aa:	6c c0       	rjmp	.+216    	; 0x284 <__vector_30+0x164>
	else if(buff=='P'&&parse_cnt==2)parse_cnt++; //cnt=3
     1ac:	10 35       	cpi	r17, 0x50	; 80
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <__vector_30+0xa0>
     1b0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2412>
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	c1 f4       	brne	.+48     	; 0x1e8 <__vector_30+0xc8>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
     1be:	62 c0       	rjmp	.+196    	; 0x284 <__vector_30+0x164>
	else if(buff=='D'&&parse_cnt==3)parse_cnt++; //cnt=4
     1c0:	14 34       	cpi	r17, 0x44	; 68
     1c2:	41 f4       	brne	.+16     	; 0x1d4 <__vector_30+0xb4>
     1c4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2412>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_30+0xc8>
     1cc:	84 e0       	ldi	r24, 0x04	; 4
     1ce:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
     1d2:	58 c0       	rjmp	.+176    	; 0x284 <__vector_30+0x164>
	else if(buff==','&&parse_cnt==4)parse_cnt++;	
     1d4:	1c 32       	cpi	r17, 0x2C	; 44
     1d6:	41 f4       	brne	.+16     	; 0x1e8 <__vector_30+0xc8>
     1d8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2412>
     1dc:	84 30       	cpi	r24, 0x04	; 4
     1de:	21 f4       	brne	.+8      	; 0x1e8 <__vector_30+0xc8>
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
     1e6:	4e c0       	rjmp	.+156    	; 0x284 <__vector_30+0x164>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
     1e8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <parse_cnt.2412>
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	91 f4       	brne	.+36     	; 0x214 <__vector_30+0xf4>
	{
		receive_length=buff; parse_cnt++; //
     1f0:	10 93 31 04 	sts	0x0431, r17	; 0x800431 <receive_length>
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <parse_cnt.2412>
		char buf_1[2]= {receive_length,0};
     1fa:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <receive_length>
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	1a 82       	std	Y+2, r1	; 0x02
		receive_length_int=atoi((char*)buf_1);
     202:	ce 01       	movw	r24, r28
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <atoi>
     20a:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <receive_length_int+0x1>
     20e:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <receive_length_int>
     212:	38 c0       	rjmp	.+112    	; 0x284 <__vector_30+0x164>
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
     214:	86 30       	cpi	r24, 0x06	; 6
     216:	c1 f4       	brne	.+48     	; 0x248 <__vector_30+0x128>
     218:	1a 33       	cpi	r17, 0x3A	; 58
     21a:	71 f0       	breq	.+28     	; 0x238 <__vector_30+0x118>
	{
		char buf_2[3]={receive_length,buff,0};
     21c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <receive_length>
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	1a 83       	std	Y+2, r17	; 0x02
     224:	1b 82       	std	Y+3, r1	; 0x03
		receive_length_int = atoi((char*)buf_2);
     226:	ce 01       	movw	r24, r28
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <atoi>
     22e:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <receive_length_int+0x1>
     232:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <receive_length_int>
		receive_length_int=atoi((char*)buf_1);
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
	{
     236:	26 c0       	rjmp	.+76     	; 0x284 <__vector_30+0x164>
		memset(buf_2,0,sizeof(buf_2));
	}
	else if(parse_cnt==6) //:가 들어왔을 때 
	{
		//esp8266_receiving_flag=1;
		parse_cnt=0; data_cnt=0; parse_data_flag=1;
     238:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2412>
     23c:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <data_cnt.2413>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <parse_data_flag.2414>
     246:	1e c0       	rjmp	.+60     	; 0x284 <__vector_30+0x164>
	}
	else if(parse_data_flag){ //길이가 4인 데이터
     248:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <parse_data_flag.2414>
     24c:	88 23       	and	r24, r24
     24e:	c1 f0       	breq	.+48     	; 0x280 <__vector_30+0x160>
		esp8266_received_data[data_cnt]=buff;
     250:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <data_cnt.2413>
     254:	e8 2f       	mov	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e6 54       	subi	r30, 0x46	; 70
     25a:	fb 4f       	sbci	r31, 0xFB	; 251
     25c:	10 83       	st	Z, r17
		data_cnt++;
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <data_cnt.2413>
		if(data_cnt==receive_length_int) {esp8266_receiving_flag=1; parse_data_flag=0; }
     264:	20 91 f4 05 	lds	r18, 0x05F4	; 0x8005f4 <receive_length_int>
     268:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <receive_length_int+0x1>
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	82 17       	cp	r24, r18
     270:	93 07       	cpc	r25, r19
     272:	41 f4       	brne	.+16     	; 0x284 <__vector_30+0x164>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <esp8266_receiving_flag>
     27a:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <parse_data_flag.2414>
     27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_30+0x164>
	}
	else parse_cnt=0;
     280:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <parse_cnt.2412>
	//if(buff=='{')esp8266_receiving_flag=1;
	
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
     284:	81 2f       	mov	r24, r17
     286:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
	
}
     28a:	03 c0       	rjmp	.+6      	; 0x292 <__vector_30+0x172>
	uint8_t buff=UDR1;
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
	
	else if(buff=='O') cnt=1;
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
	else cnt=0;
     28c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <cnt.2411>
     290:	ab cf       	rjmp	.-170    	; 0x1e8 <__vector_30+0xc8>
	//esp8266_received_data
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
	
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	1f 91       	pop	r17
     2b6:	0f 90       	pop	r0
     2b8:	0b be       	out	0x3b, r0	; 59
     2ba:	0f 90       	pop	r0
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	0f 90       	pop	r0
     2c0:	1f 90       	pop	r1
     2c2:	18 95       	reti

000002c4 <rfid_user_uid_buffer_init>:
	received_state=RECEIVE_NONE;
}


void rfid_user_uid_buffer_init(void)
{
     2c4:	89 e3       	ldi	r24, 0x39	; 57
     2c6:	94 e0       	ldi	r25, 0x04	; 4
     2c8:	42 e5       	ldi	r20, 0x52	; 82
     2ca:	54 e0       	ldi	r21, 0x04	; 4
	for(int i=0; i<MAX_USER_COUNT;i++)
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	e3 ee       	ldi	r30, 0xE3	; 227
     2d0:	f2 e0       	ldi	r31, 0x02	; 2
     2d2:	dc 01       	movw	r26, r24
     2d4:	01 90       	ld	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	2a 95       	dec	r18
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <rfid_user_uid_buffer_init+0x10>
     2dc:	05 96       	adiw	r24, 0x05	; 5
}


void rfid_user_uid_buffer_init(void)
{
	for(int i=0; i<MAX_USER_COUNT;i++)
     2de:	84 17       	cp	r24, r20
     2e0:	95 07       	cpc	r25, r21
     2e2:	a1 f7       	brne	.-24     	; 0x2cc <rfid_user_uid_buffer_init+0x8>
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
	}
	i2c_lcd_string(2,0,"     OOOOOOOOOO     ");
     2e4:	45 e0       	ldi	r20, 0x05	; 5
     2e6:	51 e0       	ldi	r21, 0x01	; 1
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	67 d7       	rcall	.+3790   	; 0x11bc <i2c_lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	89 e6       	ldi	r24, 0x69	; 105
     2f2:	98 e1       	ldi	r25, 0x18	; 24
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	90 40       	sbci	r25, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <rfid_user_uid_buffer_init+0x30>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <rfid_user_uid_buffer_init+0x3a>
     2fe:	00 00       	nop
     300:	08 95       	ret

00000302 <mfrc_print_serial>:
	_delay_ms(500);
}

void mfrc_print_serial(int _type, unsigned char ch)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	c6 2f       	mov	r28, r22
	switch(_type)
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	69 f1       	breq	.+90     	; 0x372 <mfrc_print_serial+0x70>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 05       	cpc	r25, r1
     31c:	09 f4       	brne	.+2      	; 0x320 <mfrc_print_serial+0x1e>
     31e:	55 c0       	rjmp	.+170    	; 0x3ca <mfrc_print_serial+0xc8>
     320:	89 2b       	or	r24, r25
     322:	09 f0       	breq	.+2      	; 0x326 <mfrc_print_serial+0x24>
     324:	7e c0       	rjmp	.+252    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     326:	8a e1       	ldi	r24, 0x1A	; 26
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     32e:	02 ed       	ldi	r16, 0xD2	; 210
     330:	15 e0       	ldi	r17, 0x05	; 5
     332:	0f 2e       	mov	r0, r31
     334:	f4 ee       	ldi	r31, 0xE4	; 228
     336:	ef 2e       	mov	r14, r31
     338:	f5 e0       	ldi	r31, 0x05	; 5
     33a:	ff 2e       	mov	r15, r31
     33c:	f0 2d       	mov	r31, r0
     33e:	0f 2e       	mov	r0, r31
     340:	f6 ed       	ldi	r31, 0xD6	; 214
     342:	cf 2e       	mov	r12, r31
     344:	f5 e0       	ldi	r31, 0x05	; 5
     346:	df 2e       	mov	r13, r31
     348:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     34a:	c1 11       	cpse	r28, r1
     34c:	05 c0       	rjmp	.+10     	; 0x358 <mfrc_print_serial+0x56>
     34e:	f8 01       	movw	r30, r16
     350:	80 81       	ld	r24, Z
     352:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
     356:	04 c0       	rjmp	.+8      	; 0x360 <mfrc_print_serial+0x5e>
			else uart0_tx_char(rfid_uid_ch1[i]);
     358:	f7 01       	movw	r30, r14
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	ff ef       	ldi	r31, 0xFF	; 255
     366:	ef 1a       	sub	r14, r31
     368:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     36a:	0c 15       	cp	r16, r12
     36c:	1d 05       	cpc	r17, r13
     36e:	69 f7       	brne	.-38     	; 0x34a <mfrc_print_serial+0x48>
     370:	58 c0       	rjmp	.+176    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     372:	84 e2       	ldi	r24, 0x24	; 36
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     37a:	02 ed       	ldi	r16, 0xD2	; 210
     37c:	15 e0       	ldi	r17, 0x05	; 5
     37e:	0f 2e       	mov	r0, r31
     380:	f4 ee       	ldi	r31, 0xE4	; 228
     382:	ef 2e       	mov	r14, r31
     384:	f5 e0       	ldi	r31, 0x05	; 5
     386:	ff 2e       	mov	r15, r31
     388:	f0 2d       	mov	r31, r0
     38a:	0f 2e       	mov	r0, r31
     38c:	f6 ed       	ldi	r31, 0xD6	; 214
     38e:	cf 2e       	mov	r12, r31
     390:	f5 e0       	ldi	r31, 0x05	; 5
     392:	df 2e       	mov	r13, r31
     394:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     396:	c1 11       	cpse	r28, r1
     398:	08 c0       	rjmp	.+16     	; 0x3aa <mfrc_print_serial+0xa8>
     39a:	f8 01       	movw	r30, r16
     39c:	80 81       	ld	r24, Z
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <IntToString>
     3a4:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <mfrc_print_serial+0xb6>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     3aa:	f7 01       	movw	r30, r14
     3ac:	80 81       	ld	r24, Z
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <IntToString>
     3b4:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	ff ef       	ldi	r31, 0xFF	; 255
     3be:	ef 1a       	sub	r14, r31
     3c0:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     3c2:	0c 15       	cp	r16, r12
     3c4:	1d 05       	cpc	r17, r13
     3c6:	39 f7       	brne	.-50     	; 0x396 <mfrc_print_serial+0x94>
     3c8:	2c c0       	rjmp	.+88     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     3ca:	8c e2       	ldi	r24, 0x2C	; 44
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     3d2:	02 ed       	ldi	r16, 0xD2	; 210
     3d4:	15 e0       	ldi	r17, 0x05	; 5
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f4 ee       	ldi	r31, 0xE4	; 228
     3da:	ef 2e       	mov	r14, r31
     3dc:	f5 e0       	ldi	r31, 0x05	; 5
     3de:	ff 2e       	mov	r15, r31
     3e0:	f0 2d       	mov	r31, r0
     3e2:	0f 2e       	mov	r0, r31
     3e4:	f6 ed       	ldi	r31, 0xD6	; 214
     3e6:	cf 2e       	mov	r12, r31
     3e8:	f5 e0       	ldi	r31, 0x05	; 5
     3ea:	df 2e       	mov	r13, r31
     3ec:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     3ee:	c1 11       	cpse	r28, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f2:	f8 01       	movw	r30, r16
     3f4:	80 81       	ld	r24, Z
     3f6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <HexToString>
     3fa:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     400:	f7 01       	movw	r30, r14
     402:	80 81       	ld	r24, Z
     404:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <HexToString>
     408:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
			uart0_tx_char(' ');
     40c:	80 e2       	ldi	r24, 0x20	; 32
     40e:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
     412:	0f 5f       	subi	r16, 0xFF	; 255
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	ff ef       	ldi	r31, 0xFF	; 255
     418:	ef 1a       	sub	r14, r31
     41a:	ff 0a       	sbc	r15, r31
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     41c:	0c 15       	cp	r16, r12
     41e:	1d 05       	cpc	r17, r13
     420:	31 f7       	brne	.-52     	; 0x3ee <mfrc_print_serial+0xec>
		
		break;
		
	}
	
}
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <mfrc_check_and_data_receive_ch0>:
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
}

char mfrc_check_and_data_receive_ch0(void){ 
     432:	cf 93       	push	r28
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     434:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <noise_flag.2426>
     438:	81 11       	cpse	r24, r1
     43a:	09 c0       	rjmp	.+18     	; 0x44e <mfrc_check_and_data_receive_ch0+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	62 ed       	ldi	r22, 0xD2	; 210
     440:	75 e0       	ldi	r23, 0x05	; 5
     442:	82 e5       	ldi	r24, 0x52	; 82
     444:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     448:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2428>
     44c:	1d c0       	rjmp	.+58     	; 0x488 <mfrc_check_and_data_receive_ch0+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     44e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <toggle_flag.2427>
     452:	88 23       	and	r24, r24
     454:	39 f0       	breq	.+14     	; 0x464 <mfrc_check_and_data_receive_ch0+0x32>
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	62 ed       	ldi	r22, 0xD2	; 210
     45a:	75 e0       	ldi	r23, 0x05	; 5
     45c:	82 e5       	ldi	r24, 0x52	; 82
     45e:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     462:	0c c0       	rjmp	.+24     	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	62 ed       	ldi	r22, 0xD2	; 210
     468:	75 e0       	ldi	r23, 0x05	; 5
     46a:	82 e5       	ldi	r24, 0x52	; 82
     46c:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     470:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2428>
			if(_byte==ERROR) noise_flag=0;
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	11 f4       	brne	.+4      	; 0x47c <mfrc_check_and_data_receive_ch0+0x4a>
     478:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <noise_flag.2426>
		}
			
		toggle_flag^=0x01;
     47c:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <toggle_flag.2427>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	89 27       	eor	r24, r25
     484:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2427>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     488:	c0 91 2a 04 	lds	r28, 0x042A	; 0x80042a <_byte.2428>
     48c:	c1 30       	cpi	r28, 0x01	; 1
     48e:	29 f0       	breq	.+10     	; 0x49a <mfrc_check_and_data_receive_ch0+0x68>
	{
		detected_flag_ch0=NON_DETECTED;  
     490:	88 e5       	ldi	r24, 0x58	; 88
     492:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		return RECEIVE_NONE;
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     49a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     49e:	88 35       	cpi	r24, 0x58	; 88
     4a0:	29 f5       	brne	.+74     	; 0x4ec <mfrc_check_and_data_receive_ch0+0xba>
	{
		detected_flag_ch0=DETECED;
     4a2:	8f e4       	ldi	r24, 0x4F	; 79
     4a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <noise_flag.2426>
		toggle_flag=1;
     4ae:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <toggle_flag.2427>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	82 ed       	ldi	r24, 0xD2	; 210
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <mfrc522_get_card_serial>
     4bc:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <_byte.2428>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	b1 f4       	brne	.+44     	; 0x4f0 <mfrc_check_and_data_receive_ch0+0xbe>

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			if(DUMMY_TEST_SERIAL){
				uart0_tx_string("[CHECK UID(CH0)]: ");
     4c4:	84 e3       	ldi	r24, 0x34	; 52
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
				mfrc_print_serial(ASCII_TYPE,CH0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	17 df       	rcall	.-466    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(DECIMAL_TYPE,CH0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	13 df       	rcall	.-474    	; 0x302 <mfrc_print_serial>
				mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0f df       	rcall	.-482    	; 0x302 <mfrc_print_serial>
				uart0_tx_char('\n');
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
			}
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <mfrc_check_and_data_receive_ch0+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     4f0:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     4f2:	8c 2f       	mov	r24, r28
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     4f8:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     4fa:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <noise_flag.2432>
     4fe:	81 11       	cpse	r24, r1
     500:	09 c0       	rjmp	.+18     	; 0x514 <mfrc_check_and_data_receive_ch1+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	64 ee       	ldi	r22, 0xE4	; 228
     506:	75 e0       	ldi	r23, 0x05	; 5
     508:	82 e5       	ldi	r24, 0x52	; 82
     50a:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     50e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2434>
     512:	1d c0       	rjmp	.+58     	; 0x54e <mfrc_check_and_data_receive_ch1+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     514:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <__data_end>
     518:	88 23       	and	r24, r24
     51a:	39 f0       	breq	.+14     	; 0x52a <mfrc_check_and_data_receive_ch1+0x32>
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	64 ee       	ldi	r22, 0xE4	; 228
     520:	75 e0       	ldi	r23, 0x05	; 5
     522:	82 e5       	ldi	r24, 0x52	; 82
     524:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     528:	0c c0       	rjmp	.+24     	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	64 ee       	ldi	r22, 0xE4	; 228
     52e:	75 e0       	ldi	r23, 0x05	; 5
     530:	82 e5       	ldi	r24, 0x52	; 82
     532:	0e 94 83 0b 	call	0x1706	; 0x1706 <mfrc522_request>
     536:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2434>
			if(_byte==ERROR) noise_flag=0;
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	11 f4       	brne	.+4      	; 0x542 <mfrc_check_and_data_receive_ch1+0x4a>
     53e:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <noise_flag.2432>
		}
		toggle_flag^=0x01;
     542:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <__data_end>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	89 27       	eor	r24, r25
     54a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     54e:	c0 91 27 04 	lds	r28, 0x0427	; 0x800427 <_byte.2434>
     552:	c1 30       	cpi	r28, 0x01	; 1
     554:	29 f0       	breq	.+10     	; 0x560 <mfrc_check_and_data_receive_ch1+0x68>
	{
		detected_flag_ch1=NON_DETECTED;  
     556:	88 e5       	ldi	r24, 0x58	; 88
     558:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		return RECEIVE_NONE;
     55c:	c0 e0       	ldi	r28, 0x00	; 0
     55e:	2c c0       	rjmp	.+88     	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     560:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     564:	88 35       	cpi	r24, 0x58	; 88
     566:	29 f5       	brne	.+74     	; 0x5b2 <mfrc_check_and_data_receive_ch1+0xba>
	{
		detected_flag_ch1=DETECED;
     568:	8f e4       	ldi	r24, 0x4F	; 79
     56a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
		noise_flag=1; //얘가 첫 순간임.
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <noise_flag.2432>
		toggle_flag=1;
     574:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	84 ee       	ldi	r24, 0xE4	; 228
     57c:	95 e0       	ldi	r25, 0x05	; 5
     57e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <mfrc522_get_card_serial>
     582:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_byte.2434>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	b1 f4       	brne	.+44     	; 0x5b6 <mfrc_check_and_data_receive_ch1+0xbe>
			if(DUMMY_TEST_SERIAL){
						uart0_tx_string("[CHECK UID(CH1)]: ");
     58a:	87 e4       	ldi	r24, 0x47	; 71
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 8d 0c 	call	0x191a	; 0x191a <uart0_tx_string>
						mfrc_print_serial(ASCII_TYPE,CH1);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	b4 de       	rcall	.-664    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	b0 de       	rcall	.-672    	; 0x302 <mfrc_print_serial>
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	ac de       	rcall	.-680    	; 0x302 <mfrc_print_serial>
						uart0_tx_char('\n');
     5aa:	8a e0       	ldi	r24, 0x0A	; 10
     5ac:	0e 94 89 0c 	call	0x1912	; 0x1912 <uart0_tx_char>
			}
			return RECEIVE_SUCCESS;
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <mfrc_check_and_data_receive_ch1+0xc0>
						uart0_tx_char('\n');
			}
			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     5b6:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     5b8:	8c 2f       	mov	r24, r28
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <RC522_data_request_per_100ms>:


void RC522_data_request_per_100ms(char* tggl){
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	ec 01       	movw	r28, r24
	
	if((TICK.tick_1ms % 100) ==0) {
     5c4:	60 91 f6 05 	lds	r22, 0x05F6	; 0x8005f6 <TICK>
     5c8:	70 91 f7 05 	lds	r23, 0x05F7	; 0x8005f7 <TICK+0x1>
     5cc:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <TICK+0x2>
     5d0:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <TICK+0x3>
     5d4:	24 e6       	ldi	r18, 0x64	; 100
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__udivmodsi4>
     5e0:	67 2b       	or	r22, r23
     5e2:	68 2b       	or	r22, r24
     5e4:	69 2b       	or	r22, r25
     5e6:	89 f4       	brne	.+34     	; 0x60a <RC522_data_request_per_100ms+0x4c>
		
		//toggle = 0 : entrance gate
		//toggle = 1 : exit gate
		(*tggl)^=0x01; //start toggling :
     5e8:	98 81       	ld	r25, Y
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	89 27       	eor	r24, r25
     5ee:	88 83       	st	Y, r24
		
		if((*tggl)==0){
     5f0:	81 11       	cpse	r24, r1
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <RC522_data_request_per_100ms+0x42>
			received_state = mfrc_check_and_data_receive_ch0();
     5f4:	1e df       	rcall	.-452    	; 0x432 <mfrc_check_and_data_receive_ch0>
     5f6:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <received_state>
			rfid_uid_ch0[4]=0; //배열을 문자열처럼 사용하기 위해 (문자 끝에 null을 넣어주기 위함. "abcd")
     5fa:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <rfid_uid_ch0+0x4>
		}//RFID check and receive UID data per 100ms
		else {
			received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <RC522_data_request_per_100ms+0x4c>
     600:	7b df       	rcall	.-266    	; 0x4f8 <mfrc_check_and_data_receive_ch1>
     602:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <received_state>
			rfid_uid_ch1[4]=0;
     606:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <rfid_uid_ch1+0x4>
		}
	}
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <esp8266_init>:

//AP 끊는함수하고, TCP끊는거, 다시연결하는거 등등 > 터미널환경에서 가능케 할수도 있어야함
//리셋, 실패시 ssid, passward 묻고, 마찬가지로 TCP연결 실패시 또한 다시 ip, port 묻는다

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port)
{
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	7c 01       	movw	r14, r24
     622:	6b 01       	movw	r12, r22
     624:	ea 01       	movw	r28, r20
     626:	89 01       	movw	r16, r18
	uart1_tx_string("AT+RST\r\n");	 //리셋 신호 이후 추가 데이터가 들어와서, 딜레이로 강제 정지 시켜줘야 함
     628:	8a e5       	ldi	r24, 0x5A	; 90
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	81 e1       	ldi	r24, 0x11	; 17
     634:	9a e7       	ldi	r25, 0x7A	; 122
     636:	21 50       	subi	r18, 0x01	; 1
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	90 40       	sbci	r25, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <esp8266_init+0x26>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <esp8266_init+0x30>
     640:	00 00       	nop
	_delay_ms(2500);
	i2c_lcd_string(2,0,"     OOO_______     ");
     642:	43 e6       	ldi	r20, 0x63	; 99
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	b8 d5       	rcall	.+2928   	; 0x11bc <i2c_lcd_string>
	
	uart1_tx_string("AT+GMR\r\n");
     64c:	88 e7       	ldi	r24, 0x78	; 120
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     654:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     658:	88 23       	and	r24, r24
     65a:	e1 f3       	breq	.-8      	; 0x654 <esp8266_init+0x44>
	esp8266_return_result_flag=0;
     65c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWMODE=1\r\n"); // OK sign 말고도 다른 신호도 들어오기 때문에 걸어놓음
     660:	81 e8       	ldi	r24, 0x81	; 129
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	87 ea       	ldi	r24, 0xA7	; 167
     66c:	91 e6       	ldi	r25, 0x61	; 97
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <esp8266_init+0x5e>
     676:	00 c0       	rjmp	.+0      	; 0x678 <esp8266_init+0x68>
     678:	00 00       	nop
	_delay_ms(2000);
	esp8266_return_result_flag=0;
     67a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOO______     ");
     67e:	4f e8       	ldi	r20, 0x8F	; 143
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	9a d5       	rcall	.+2868   	; 0x11bc <i2c_lcd_string>
	
	//
	uart1_tx_string("AT+CWMODE?\r\n");
     688:	84 ea       	ldi	r24, 0xA4	; 164
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     690:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     694:	88 23       	and	r24, r24
     696:	e1 f3       	breq	.-8      	; 0x690 <esp8266_init+0x80>
	esp8266_return_result_flag=0;
     698:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	uart1_tx_string("AT+CWLAP\r\n");
     69c:	81 eb       	ldi	r24, 0xB1	; 177
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     6a4:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     6a8:	88 23       	and	r24, r24
     6aa:	e1 f3       	breq	.-8      	; 0x6a4 <esp8266_init+0x94>
	esp8266_return_result_flag=0;
     6ac:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOO_____     ");
     6b0:	4c eb       	ldi	r20, 0xBC	; 188
     6b2:	51 e0       	ldi	r21, 0x01	; 1
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	81 d5       	rcall	.+2818   	; 0x11bc <i2c_lcd_string>
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
     6ba:	a6 01       	movw	r20, r12
     6bc:	b7 01       	movw	r22, r14
     6be:	81 ed       	ldi	r24, 0xD1	; 209
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <connect_to_AP>
     6c6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     6ca:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     6ce:	88 23       	and	r24, r24
     6d0:	e1 f3       	breq	.-8      	; 0x6ca <esp8266_init+0xba>
	esp8266_return_result_flag=0;
     6d2:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOO____     ");
     6d6:	4c ed       	ldi	r20, 0xDC	; 220
     6d8:	51 e0       	ldi	r21, 0x01	; 1
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	6e d5       	rcall	.+2780   	; 0x11bc <i2c_lcd_string>
	//AT+SWQAP  AP 접속 끊기
	uart1_tx_string("AT+CIFSR\r\n");
     6e0:	81 ef       	ldi	r24, 0xF1	; 241
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     6e8:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     6ec:	88 23       	and	r24, r24
     6ee:	e1 f3       	breq	.-8      	; 0x6e8 <esp8266_init+0xd8>
	esp8266_return_result_flag=0;
     6f0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOO___     ");
     6f4:	4c ef       	ldi	r20, 0xFC	; 252
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	5f d5       	rcall	.+2750   	; 0x11bc <i2c_lcd_string>
	
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
     6fe:	b8 01       	movw	r22, r16
     700:	ce 01       	movw	r24, r28
     702:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TCP_connect>
     706:	0e 94 a3 0c 	call	0x1946	; 0x1946 <uart1_tx_string>
	//AT+CIPCLOSE 
	//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
	while(!esp8266_return_result_flag); //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
     70a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <esp8266_return_result_flag>
     70e:	88 23       	and	r24, r24
     710:	e1 f3       	breq	.-8      	; 0x70a <esp8266_init+0xfa>
	esp8266_return_result_flag=0;
     712:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOOOOO__     ");
     716:	41 e1       	ldi	r20, 0x11	; 17
     718:	52 e0       	ldi	r21, 0x02	; 2
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	4e d5       	rcall	.+2716   	; 0x11bc <i2c_lcd_string>
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	81 ee       	ldi	r24, 0xE1	; 225
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	21 50       	subi	r18, 0x01	; 1
     728:	80 40       	sbci	r24, 0x00	; 0
     72a:	90 40       	sbci	r25, 0x00	; 0
     72c:	e1 f7       	brne	.-8      	; 0x726 <esp8266_init+0x116>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <esp8266_init+0x120>
	//1byte당 해봐야 1ms 정도밖에 소요되지 않는다.
	_delay_ms(100);// OK sign 말고도 Linked sign까지 들어온다. 이 문자까지 잡아내려면 또 구문을 추가해야되는데, 번거로워서 일단 딜레이로 처리함.

	i2c_lcd_string(2,0,"     OOOOOOOOO_     ");
     730:	00 00       	nop
     732:	46 e2       	ldi	r20, 0x26	; 38
     734:	52 e0       	ldi	r21, 0x02	; 2
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	40 d5       	rcall	.+2688   	; 0x11bc <i2c_lcd_string>
	
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	08 95       	ret

0000074e <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 TICK.buzz_1ms=0;
     74e:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <TICK+0x4>
     752:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <TICK+0x5>
     756:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <TICK+0x6>
     75a:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <TICK+0x7>
	 switch(clip)
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	99 f0       	breq	.+38     	; 0x788 <setSoundClip+0x3a>
     762:	28 f4       	brcc	.+10     	; 0x76e <setSoundClip+0x20>
     764:	88 23       	and	r24, r24
     766:	49 f0       	breq	.+18     	; 0x77a <setSoundClip+0x2c>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	51 f0       	breq	.+20     	; 0x780 <setSoundClip+0x32>
     76c:	1c c0       	rjmp	.+56     	; 0x7a6 <setSoundClip+0x58>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	99 f0       	breq	.+38     	; 0x798 <setSoundClip+0x4a>
     772:	70 f0       	brcs	.+28     	; 0x790 <setSoundClip+0x42>
     774:	85 30       	cpi	r24, 0x05	; 5
     776:	a1 f0       	breq	.+40     	; 0x7a0 <setSoundClip+0x52>
     778:	16 c0       	rjmp	.+44     	; 0x7a6 <setSoundClip+0x58>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     77a:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <music_flag>
     77e:	13 c0       	rjmp	.+38     	; 0x7a6 <setSoundClip+0x58>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     786:	0f c0       	rjmp	.+30     	; 0x7a6 <setSoundClip+0x58>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     78e:	0b c0       	rjmp	.+22     	; 0x7a6 <setSoundClip+0x58>
		   case BUZZ_UNENROLLED: music_flag=BUZZ_UNENROLLED; break;
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <setSoundClip+0x58>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <setSoundClip+0x58>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <music_flag>
		   
	 }
	 TICK.buzz_1ms=0;
     7a6:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <TICK+0x4>
     7aa:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <TICK+0x5>
     7ae:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <TICK+0x6>
     7b2:	10 92 fd 05 	sts	0x05FD, r1	; 0x8005fd <TICK+0x7>
     7b6:	08 95       	ret

000007b8 <buzz_MUTE>:
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     7b8:	eb e8       	ldi	r30, 0x8B	; 139
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8f 7b       	andi	r24, 0xBF	; 191
     7c0:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     7c2:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <music_flag>
     7c6:	08 95       	ret

000007c8 <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	41 f0       	breq	.+16     	; 0x7dc <setSoundNote+0x14>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     7cc:	eb e8       	ldi	r30, 0x8B	; 139
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	20 81       	ld	r18, Z
     7d2:	20 64       	ori	r18, 0x40	; 64
     7d4:	20 83       	st	Z, r18
     7d6:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <setICR3>
     7da:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     7dc:	eb e8       	ldi	r30, 0x8B	; 139
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8f 7b       	andi	r24, 0xBF	; 191
     7e4:	80 83       	st	Z, r24
     7e6:	08 95       	ret

000007e8 <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     7e8:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <music_flag>
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <buzz_play+0xa>
     7f0:	76 c0       	rjmp	.+236    	; 0x8de <buzz_play+0xf6>
     7f2:	28 f4       	brcc	.+10     	; 0x7fe <buzz_play+0x16>
     7f4:	88 23       	and	r24, r24
     7f6:	61 f0       	breq	.+24     	; 0x810 <buzz_play+0x28>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	61 f0       	breq	.+24     	; 0x814 <buzz_play+0x2c>
     7fc:	08 95       	ret
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	09 f4       	brne	.+2      	; 0x804 <buzz_play+0x1c>
     802:	37 c1       	rjmp	.+622    	; 0xa72 <buzz_play+0x28a>
     804:	08 f4       	brcc	.+2      	; 0x808 <buzz_play+0x20>
     806:	d0 c0       	rjmp	.+416    	; 0x9a8 <buzz_play+0x1c0>
     808:	85 30       	cpi	r24, 0x05	; 5
     80a:	09 f4       	brne	.+2      	; 0x80e <buzz_play+0x26>
     80c:	75 c1       	rjmp	.+746    	; 0xaf8 <buzz_play+0x310>
     80e:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     810:	d3 cf       	rjmp	.-90     	; 0x7b8 <buzz_MUTE>
     812:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     814:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     818:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     81c:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     820:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     824:	88 3c       	cpi	r24, 0xC8	; 200
     826:	91 05       	cpc	r25, r1
     828:	a1 05       	cpc	r26, r1
     82a:	b1 05       	cpc	r27, r1
     82c:	20 f4       	brcc	.+8      	; 0x836 <buzz_play+0x4e>
     82e:	8b e9       	ldi	r24, 0x9B	; 155
     830:	96 e0       	ldi	r25, 0x06	; 6
     832:	ca cf       	rjmp	.-108    	; 0x7c8 <setSoundNote>
     834:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     836:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     83a:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     83e:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     842:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     846:	88 3c       	cpi	r24, 0xC8	; 200
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	21 f4       	brne	.+8      	; 0x858 <buzz_play+0x70>
     850:	87 ee       	ldi	r24, 0xE7	; 231
     852:	95 e0       	ldi	r25, 0x05	; 5
     854:	b9 cf       	rjmp	.-142    	; 0x7c8 <setSoundNote>
     856:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     858:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     85c:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     860:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     864:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     868:	80 39       	cpi	r24, 0x90	; 144
     86a:	91 40       	sbci	r25, 0x01	; 1
     86c:	a1 05       	cpc	r26, r1
     86e:	b1 05       	cpc	r27, r1
     870:	21 f4       	brne	.+8      	; 0x87a <buzz_play+0x92>
     872:	85 e6       	ldi	r24, 0x65	; 101
     874:	94 e0       	ldi	r25, 0x04	; 4
     876:	a8 cf       	rjmp	.-176    	; 0x7c8 <setSoundNote>
     878:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     87a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     87e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     882:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     886:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     88a:	88 35       	cpi	r24, 0x58	; 88
     88c:	92 40       	sbci	r25, 0x02	; 2
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	21 f4       	brne	.+8      	; 0x89c <buzz_play+0xb4>
     894:	8d ef       	ldi	r24, 0xFD	; 253
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	97 cf       	rjmp	.-210    	; 0x7c8 <setSoundNote>
     89a:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     89c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8a0:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8a4:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8a8:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8ac:	80 32       	cpi	r24, 0x20	; 32
     8ae:	93 40       	sbci	r25, 0x03	; 3
     8b0:	a1 05       	cpc	r26, r1
     8b2:	b1 05       	cpc	r27, r1
     8b4:	21 f4       	brne	.+8      	; 0x8be <buzz_play+0xd6>
     8b6:	88 ef       	ldi	r24, 0xF8	; 248
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	86 cf       	rjmp	.-244    	; 0x7c8 <setSoundNote>
     8bc:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     8be:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8c2:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8c6:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8ca:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8ce:	80 3b       	cpi	r24, 0xB0	; 176
     8d0:	94 40       	sbci	r25, 0x04	; 4
     8d2:	a1 05       	cpc	r26, r1
     8d4:	b1 05       	cpc	r27, r1
     8d6:	09 f0       	breq	.+2      	; 0x8da <buzz_play+0xf2>
     8d8:	50 c1       	rjmp	.+672    	; 0xb7a <buzz_play+0x392>
     8da:	6e cf       	rjmp	.-292    	; 0x7b8 <buzz_MUTE>
     8dc:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     8de:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     8e2:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     8e6:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     8ea:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     8ee:	88 3c       	cpi	r24, 0xC8	; 200
     8f0:	91 05       	cpc	r25, r1
     8f2:	a1 05       	cpc	r26, r1
     8f4:	b1 05       	cpc	r27, r1
     8f6:	20 f4       	brcc	.+8      	; 0x900 <buzz_play+0x118>
     8f8:	8b e9       	ldi	r24, 0x9B	; 155
     8fa:	96 e0       	ldi	r25, 0x06	; 6
     8fc:	65 cf       	rjmp	.-310    	; 0x7c8 <setSoundNote>
     8fe:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     900:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     904:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     908:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     90c:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     910:	82 3d       	cpi	r24, 0xD2	; 210
     912:	91 05       	cpc	r25, r1
     914:	a1 05       	cpc	r26, r1
     916:	b1 05       	cpc	r27, r1
     918:	21 f4       	brne	.+8      	; 0x922 <buzz_play+0x13a>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	54 cf       	rjmp	.-344    	; 0x7c8 <setSoundNote>
     920:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     922:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     926:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     92a:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     92e:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     932:	8c 3d       	cpi	r24, 0xDC	; 220
     934:	91 05       	cpc	r25, r1
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	21 f4       	brne	.+8      	; 0x944 <buzz_play+0x15c>
     93c:	87 ee       	ldi	r24, 0xE7	; 231
     93e:	95 e0       	ldi	r25, 0x05	; 5
     940:	43 cf       	rjmp	.-378    	; 0x7c8 <setSoundNote>
     942:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     944:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     948:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     94c:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     950:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     954:	80 39       	cpi	r24, 0x90	; 144
     956:	91 40       	sbci	r25, 0x01	; 1
     958:	a1 05       	cpc	r26, r1
     95a:	b1 05       	cpc	r27, r1
     95c:	21 f4       	brne	.+8      	; 0x966 <buzz_play+0x17e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	32 cf       	rjmp	.-412    	; 0x7c8 <setSoundNote>
     964:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     966:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     96a:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     96e:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     972:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     976:	8e 3a       	cpi	r24, 0xAE	; 174
     978:	91 40       	sbci	r25, 0x01	; 1
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f4       	brne	.+8      	; 0x988 <buzz_play+0x1a0>
     980:	85 e6       	ldi	r24, 0x65	; 101
     982:	94 e0       	ldi	r25, 0x04	; 4
     984:	21 cf       	rjmp	.-446    	; 0x7c8 <setSoundNote>
     986:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     988:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     98c:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     990:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     994:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     998:	88 35       	cpi	r24, 0x58	; 88
     99a:	92 40       	sbci	r25, 0x02	; 2
     99c:	a1 05       	cpc	r26, r1
     99e:	b1 05       	cpc	r27, r1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <buzz_play+0x1bc>
     9a2:	eb c0       	rjmp	.+470    	; 0xb7a <buzz_play+0x392>
     9a4:	09 cf       	rjmp	.-494    	; 0x7b8 <buzz_MUTE>
     9a6:	08 95       	ret
		  break;
		  case BUZZ_UNENROLLED:
		  		  if(TICK.buzz_1ms<75)setSoundNote(_960Hz);
     9a8:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9ac:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9b0:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9b4:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     9b8:	8b 34       	cpi	r24, 0x4B	; 75
     9ba:	91 05       	cpc	r25, r1
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	20 f4       	brcc	.+8      	; 0x9ca <buzz_play+0x1e2>
     9c2:	82 e1       	ldi	r24, 0x12	; 18
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	00 cf       	rjmp	.-512    	; 0x7c8 <setSoundNote>
     9c8:	08 95       	ret
		  		  else if(TICK.buzz_1ms<150)setSoundNote(BUZZ_MUTE);
     9ca:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9ce:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9d2:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9d6:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     9da:	86 39       	cpi	r24, 0x96	; 150
     9dc:	91 05       	cpc	r25, r1
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	20 f4       	brcc	.+8      	; 0x9ec <buzz_play+0x204>
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	ef ce       	rjmp	.-546    	; 0x7c8 <setSoundNote>
     9ea:	08 95       	ret
		  		  else if(TICK.buzz_1ms<225)setSoundNote(_960Hz);
     9ec:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     9f0:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     9f4:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     9f8:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     9fc:	81 3e       	cpi	r24, 0xE1	; 225
     9fe:	91 05       	cpc	r25, r1
     a00:	a1 05       	cpc	r26, r1
     a02:	b1 05       	cpc	r27, r1
     a04:	20 f4       	brcc	.+8      	; 0xa0e <buzz_play+0x226>
     a06:	82 e1       	ldi	r24, 0x12	; 18
     a08:	94 e0       	ldi	r25, 0x04	; 4
     a0a:	de ce       	rjmp	.-580    	; 0x7c8 <setSoundNote>
		  		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_MUTE);
     a0c:	08 95       	ret
     a0e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a12:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a16:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a1a:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a1e:	8c 32       	cpi	r24, 0x2C	; 44
     a20:	91 40       	sbci	r25, 0x01	; 1
     a22:	a1 05       	cpc	r26, r1
     a24:	b1 05       	cpc	r27, r1
     a26:	20 f4       	brcc	.+8      	; 0xa30 <buzz_play+0x248>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	cd ce       	rjmp	.-614    	; 0x7c8 <setSoundNote>
		  		  else if(TICK.buzz_1ms<375)setSoundNote(_960Hz);
     a2e:	08 95       	ret
     a30:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a34:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a38:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a3c:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a40:	87 37       	cpi	r24, 0x77	; 119
     a42:	91 40       	sbci	r25, 0x01	; 1
     a44:	a1 05       	cpc	r26, r1
     a46:	b1 05       	cpc	r27, r1
     a48:	20 f4       	brcc	.+8      	; 0xa52 <buzz_play+0x26a>
     a4a:	82 e1       	ldi	r24, 0x12	; 18
     a4c:	94 e0       	ldi	r25, 0x04	; 4
     a4e:	bc ce       	rjmp	.-648    	; 0x7c8 <setSoundNote>
		  		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     a50:	08 95       	ret
     a52:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a56:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a5a:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a5e:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a62:	82 3c       	cpi	r24, 0xC2	; 194
     a64:	91 40       	sbci	r25, 0x01	; 1
     a66:	a1 05       	cpc	r26, r1
     a68:	b1 05       	cpc	r27, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <buzz_play+0x286>
     a6c:	86 c0       	rjmp	.+268    	; 0xb7a <buzz_play+0x392>
     a6e:	a4 ce       	rjmp	.-696    	; 0x7b8 <buzz_MUTE>
		  		  break;
		  break;
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     a70:	08 95       	ret
     a72:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a76:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a7a:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     a7e:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     a82:	84 36       	cpi	r24, 0x64	; 100
     a84:	91 05       	cpc	r25, r1
     a86:	a1 05       	cpc	r26, r1
     a88:	b1 05       	cpc	r27, r1
     a8a:	20 f4       	brcc	.+8      	; 0xa94 <buzz_play+0x2ac>
     a8c:	82 e1       	ldi	r24, 0x12	; 18
     a8e:	94 e0       	ldi	r25, 0x04	; 4
     a90:	9b ce       	rjmp	.-714    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     a92:	08 95       	ret
     a94:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     a98:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     a9c:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     aa0:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     aa4:	88 3c       	cpi	r24, 0xC8	; 200
     aa6:	91 05       	cpc	r25, r1
     aa8:	a1 05       	cpc	r26, r1
     aaa:	b1 05       	cpc	r27, r1
     aac:	20 f4       	brcc	.+8      	; 0xab6 <buzz_play+0x2ce>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	8a ce       	rjmp	.-748    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     ab4:	08 95       	ret
     ab6:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     aba:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     abe:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     ac2:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     ac6:	8c 32       	cpi	r24, 0x2C	; 44
     ac8:	91 40       	sbci	r25, 0x01	; 1
     aca:	a1 05       	cpc	r26, r1
     acc:	b1 05       	cpc	r27, r1
     ace:	20 f4       	brcc	.+8      	; 0xad8 <buzz_play+0x2f0>
     ad0:	82 e1       	ldi	r24, 0x12	; 18
     ad2:	94 e0       	ldi	r25, 0x04	; 4
     ad4:	79 ce       	rjmp	.-782    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     ad6:	08 95       	ret
     ad8:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     adc:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     ae0:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     ae4:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     ae8:	82 3c       	cpi	r24, 0xC2	; 194
     aea:	91 40       	sbci	r25, 0x01	; 1
     aec:	a1 05       	cpc	r26, r1
     aee:	b1 05       	cpc	r27, r1
     af0:	09 f0       	breq	.+2      	; 0xaf4 <buzz_play+0x30c>
     af2:	43 c0       	rjmp	.+134    	; 0xb7a <buzz_play+0x392>
     af4:	61 ce       	rjmp	.-830    	; 0x7b8 <buzz_MUTE>
		  break;
		  case BUZZ_ESP8266_CONNECTED:
		  if(TICK.buzz_1ms<100)setSoundNote(BUZZ_240Hz);
     af6:	08 95       	ret
     af8:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     afc:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     b00:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     b04:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     b08:	84 36       	cpi	r24, 0x64	; 100
     b0a:	91 05       	cpc	r25, r1
     b0c:	a1 05       	cpc	r26, r1
     b0e:	b1 05       	cpc	r27, r1
     b10:	20 f4       	brcc	.+8      	; 0xb1a <buzz_play+0x332>
     b12:	87 e4       	ldi	r24, 0x47	; 71
     b14:	90 e1       	ldi	r25, 0x10	; 16
     b16:	58 ce       	rjmp	.-848    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     b18:	08 95       	ret
     b1a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     b1e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     b22:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     b26:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     b2a:	88 3c       	cpi	r24, 0xC8	; 200
     b2c:	91 05       	cpc	r25, r1
     b2e:	a1 05       	cpc	r26, r1
     b30:	b1 05       	cpc	r27, r1
     b32:	20 f4       	brcc	.+8      	; 0xb3c <buzz_play+0x354>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	47 ce       	rjmp	.-882    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_480Hz);
     b3a:	08 95       	ret
     b3c:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     b40:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     b44:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     b48:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     b4c:	8c 32       	cpi	r24, 0x2C	; 44
     b4e:	91 40       	sbci	r25, 0x01	; 1
     b50:	a1 05       	cpc	r26, r1
     b52:	b1 05       	cpc	r27, r1
     b54:	20 f4       	brcc	.+8      	; 0xb5e <buzz_play+0x376>
     b56:	84 e2       	ldi	r24, 0x24	; 36
     b58:	98 e0       	ldi	r25, 0x08	; 8
     b5a:	36 ce       	rjmp	.-916    	; 0x7c8 <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     b5c:	08 95       	ret
     b5e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <TICK+0x4>
     b62:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <TICK+0x5>
     b66:	a0 91 fc 05 	lds	r26, 0x05FC	; 0x8005fc <TICK+0x6>
     b6a:	b0 91 fd 05 	lds	r27, 0x05FD	; 0x8005fd <TICK+0x7>
     b6e:	82 3c       	cpi	r24, 0xC2	; 194
     b70:	91 40       	sbci	r25, 0x01	; 1
     b72:	a1 05       	cpc	r26, r1
     b74:	b1 05       	cpc	r27, r1
     b76:	09 f4       	brne	.+2      	; 0xb7a <buzz_play+0x392>
     b78:	1f ce       	rjmp	.-962    	; 0x7b8 <buzz_MUTE>
     b7a:	08 95       	ret

00000b7c <__vector_15>:
void logojector_ON();
void logojector_OFF();

int start_timer_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     b7c:	1f 92       	push	r1
     b7e:	0f 92       	push	r0
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	0f 92       	push	r0
     b84:	11 24       	eor	r1, r1
     b86:	0b b6       	in	r0, 0x3b	; 59
     b88:	0f 92       	push	r0
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     ba2:	e6 ef       	ldi	r30, 0xF6	; 246
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	84 81       	ldd	r24, Z+4	; 0x04
     ba8:	95 81       	ldd	r25, Z+5	; 0x05
     baa:	a6 81       	ldd	r26, Z+6	; 0x06
     bac:	b7 81       	ldd	r27, Z+7	; 0x07
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	a1 1d       	adc	r26, r1
     bb2:	b1 1d       	adc	r27, r1
     bb4:	84 83       	std	Z+4, r24	; 0x04
     bb6:	95 83       	std	Z+5, r25	; 0x05
     bb8:	a6 83       	std	Z+6, r26	; 0x06
     bba:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	a2 81       	ldd	r26, Z+2	; 0x02
     bc2:	b3 81       	ldd	r27, Z+3	; 0x03
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	a1 1d       	adc	r26, r1
     bc8:	b1 1d       	adc	r27, r1
     bca:	80 83       	st	Z, r24
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	a2 83       	std	Z+2, r26	; 0x02
     bd0:	b3 83       	std	Z+3, r27	; 0x03
	buzz_play(); //
     bd2:	0a de       	rcall	.-1004   	; 0x7e8 <buzz_play>
}
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0b be       	out	0x3b, r0	; 59
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <start_timer>:
	 
}

void start_timer()
{
	TICK.tick_1ms=0;
     bfa:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <TICK>
     bfe:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <TICK+0x1>
     c02:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <TICK+0x2>
     c06:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <TICK+0x3>
	start_timer_flag=1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c16:	08 95       	ret

00000c18 <logojector_ON>:
}


void logojector_ON(){
	PORTA|=0x80;	
     c18:	df 9a       	sbi	0x1b, 7	; 27
     c1a:	08 95       	ret

00000c1c <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     c2e:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <received_state>
     c32:	91 30       	cpi	r25, 0x01	; 1
     c34:	09 f0       	breq	.+2      	; 0xc38 <RC522_data_state_check_and_actuate+0x1c>
     c36:	16 c1       	rjmp	.+556    	; 0xe64 <RC522_data_state_check_and_actuate+0x248>
     c38:	f9 01       	movw	r30, r18
		//send to esp8266 and receive result data.
		if((*tggl)==ENTRANCE_GATE){
     c3a:	80 81       	ld	r24, Z
     c3c:	81 11       	cpse	r24, r1
     c3e:	cf c0       	rjmp	.+414    	; 0xdde <RC522_data_state_check_and_actuate+0x1c2>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     c40:	8b e3       	ldi	r24, 0x3B	; 59
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	80 d6       	rcall	.+3328   	; 0x1946 <uart1_tx_string>
			//_delay_ms(20); //위 데이터 다 보낼때 까지 대기해야 하는데, 사실 없어도 되는 라인
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     c46:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <esp8266_send_ready_flag>
     c4a:	88 23       	and	r24, r24
     c4c:	e1 f3       	breq	.-8      	; 0xc46 <RC522_data_state_check_and_actuate+0x2a>
			esp8266_send_ready_flag=0;
     c4e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <esp8266_send_ready_flag>
     c52:	c2 ed       	ldi	r28, 0xD2	; 210
     c54:	d5 e0       	ldi	r29, 0x05	; 5
     c56:	06 ed       	ldi	r16, 0xD6	; 214
     c58:	15 e0       	ldi	r17, 0x05	; 5
			
			//esp8266으로 uid데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     c5a:	89 91       	ld	r24, Y+
     c5c:	b1 d6       	rcall	.+3426   	; 0x19c0 <HexToString>
     c5e:	73 d6       	rcall	.+3302   	; 0x1946 <uart1_tx_string>
				uart1_tx_char(' ');
     c60:	80 e2       	ldi	r24, 0x20	; 32
     c62:	69 d6       	rcall	.+3282   	; 0x1936 <uart1_tx_char>
     c64:	c0 17       	cp	r28, r16
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
			esp8266_send_ready_flag=0;
			
			//esp8266으로 uid데이터 전송
			for(int i=0; i<4; i++)
     c66:	d1 07       	cpc	r29, r17
     c68:	c1 f7       	brne	.-16     	; 0xc5a <RC522_data_state_check_and_actuate+0x3e>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
     c6a:	86 e3       	ldi	r24, 0x36	; 54
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	6b d6       	rcall	.+3286   	; 0x1946 <uart1_tx_string>
     c70:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <esp8266_receiving_flag>

			//uart0_tx_string("\nline:304\n");
			/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
			//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     c74:	88 23       	and	r24, r24
     c76:	e1 f3       	breq	.-8      	; 0xc70 <RC522_data_state_check_and_actuate+0x54>
     c78:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
     c7c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <esp8266_received_data>
			//uart0_tx_string("\nline:309\n");
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
     c80:	8f 34       	cpi	r24, 0x4F	; 79
     c82:	09 f0       	breq	.+2      	; 0xc86 <RC522_data_state_check_and_actuate+0x6a>
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
				//uart0_tx_string("\nline:313\n");
				logojector_ON();
     c84:	6c c0       	rjmp	.+216    	; 0xd5e <RC522_data_state_check_and_actuate+0x142>
     c86:	c8 df       	rcall	.-112    	; 0xc18 <logojector_ON>
				start_timer(); //ticktim을 0으로 클리어시킴.
     c88:	b8 df       	rcall	.-144    	; 0xbfa <start_timer>
     c8a:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
     c8e:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
     c92:	c9 e3       	ldi	r28, 0x39	; 57
     c94:	d4 e0       	ldi	r29, 0x04	; 4
     c96:	00 e0       	ldi	r16, 0x00	; 0
				for(int i=0; i<MAX_USER_COUNT;i++)
     c98:	10 e0       	ldi	r17, 0x00	; 0
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
     c9a:	ee 24       	eor	r14, r14
     c9c:	e3 94       	inc	r14
     c9e:	f1 2c       	mov	r15, r1
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     ca0:	63 ee       	ldi	r22, 0xE3	; 227
     ca2:	72 e0       	ldi	r23, 0x02	; 2
     ca4:	ce 01       	movw	r24, r28
     ca6:	ac d7       	rcall	.+3928   	; 0x1c00 <strcmp>
     ca8:	89 2b       	or	r24, r25
     caa:	49 f4       	brne	.+18     	; 0xcbe <RC522_data_state_check_and_actuate+0xa2>
     cac:	10 93 38 04 	sts	0x0438, r17	; 0x800438 <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
     cb0:	00 93 37 04 	sts	0x0437, r16	; 0x800437 <rfid_user_count_pointer>
     cb4:	f0 92 36 04 	sts	0x0436, r15	; 0x800436 <rfid_user_flag+0x1>
						rfid_user_flag=1;
     cb8:	e0 92 35 04 	sts	0x0435, r14	; 0x800435 <rfid_user_flag>
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <RC522_data_state_check_and_actuate+0xb8>
						//i=MAX_USER_COUNT;//루프를 나오기 위함
						}else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0){
     cbe:	62 ed       	ldi	r22, 0xD2	; 210
     cc0:	75 e0       	ldi	r23, 0x05	; 5
     cc2:	ce 01       	movw	r24, r28
     cc4:	9d d7       	rcall	.+3898   	; 0x1c00 <strcmp>
     cc6:	89 2b       	or	r24, r25
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <RC522_data_state_check_and_actuate+0xb8>
     cca:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <rfid_user_flag+0x1>
						//만일 버퍼 안에 기존 유저가 들어있다면
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
     cce:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <rfid_user_flag>
     cd2:	34 c0       	rjmp	.+104    	; 0xd3c <RC522_data_state_check_and_actuate+0x120>
     cd4:	0f 5f       	subi	r16, 0xFF	; 255
				//uart0_tx_string("\nline:313\n");
				logojector_ON();
				start_timer(); //ticktim을 0으로 클리어시킴.
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	25 96       	adiw	r28, 0x05	; 5
     cda:	05 30       	cpi	r16, 0x05	; 5
     cdc:	11 05       	cpc	r17, r1
     cde:	01 f7       	brne	.-64     	; 0xca0 <RC522_data_state_check_and_actuate+0x84>
     ce0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <rfid_user_flag>
					}
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				//uart0_tx_string("\nline:336\n");
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     ce4:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <rfid_user_flag+0x1>
     ce8:	89 2b       	or	r24, r25
     cea:	41 f1       	breq	.+80     	; 0xd3c <RC522_data_state_check_and_actuate+0x120>
     cec:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
     cf0:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <rfid_user_count_pointer+0x1>
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	62 ed       	ldi	r22, 0xD2	; 210
     d04:	75 e0       	ldi	r23, 0x05	; 5
     d06:	87 5c       	subi	r24, 0xC7	; 199
     d08:	9b 4f       	sbci	r25, 0xFB	; 251
					
					
					//start_timer(); //ticktim을 0으로 클리어시킴.
					
					//uart0_tx_string("\nline:344\n");
					i2c_lcd_clear();
     d0a:	83 d7       	rcall	.+3846   	; 0x1c12 <strcpy>
     d0c:	66 d2       	rcall	.+1228   	; 0x11da <i2c_lcd_clear>
					i2c_lcd_string(0,0,"Welcome,");
     d0e:	4b e4       	ldi	r20, 0x4B	; 75
     d10:	52 e0       	ldi	r21, 0x02	; 2
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	52 d2       	rcall	.+1188   	; 0x11bc <i2c_lcd_string>
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
     d18:	4a eb       	ldi	r20, 0xBA	; 186
     d1a:	54 e0       	ldi	r21, 0x04	; 4
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	4d d2       	rcall	.+1178   	; 0x11bc <i2c_lcd_string>
					i2c_lcd_string(2,0,"Empty Space=[00 /42]");
     d22:	44 e5       	ldi	r20, 0x54	; 84
     d24:	52 e0       	ldi	r21, 0x02	; 2
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	82 e0       	ldi	r24, 0x02	; 2
					i2c_lcd_string(2,13,"40");
     d2a:	48 d2       	rcall	.+1168   	; 0x11bc <i2c_lcd_string>
     d2c:	49 e6       	ldi	r20, 0x69	; 105
     d2e:	52 e0       	ldi	r21, 0x02	; 2
     d30:	6d e0       	ldi	r22, 0x0D	; 13
     d32:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
     d34:	43 d2       	rcall	.+1158   	; 0x11bc <i2c_lcd_string>
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	0a dd       	rcall	.-1516   	; 0x74e <setSoundClip>
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					i2c_lcd_clear();
     d3a:	13 c0       	rjmp	.+38     	; 0xd62 <RC522_data_state_check_and_actuate+0x146>
     d3c:	4e d2       	rcall	.+1180   	; 0x11da <i2c_lcd_clear>
					i2c_lcd_string(0,0,"Welcome,");
     d3e:	4b e4       	ldi	r20, 0x4B	; 75
     d40:	52 e0       	ldi	r21, 0x02	; 2
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	80 e0       	ldi	r24, 0x00	; 0
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
     d46:	3a d2       	rcall	.+1140   	; 0x11bc <i2c_lcd_string>
     d48:	4a eb       	ldi	r20, 0xBA	; 186
     d4a:	54 e0       	ldi	r21, 0x04	; 4
     d4c:	62 e0       	ldi	r22, 0x02	; 2
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	35 d2       	rcall	.+1130   	; 0x11bc <i2c_lcd_string>
					i2c_lcd_string(2,0,"Already Recognized");
     d52:	4c e6       	ldi	r20, 0x6C	; 108
     d54:	52 e0       	ldi	r21, 0x02	; 2
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	30 d2       	rcall	.+1120   	; 0x11bc <i2c_lcd_string>
					
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') setSoundClip(BUZZ_FAIL);
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <RC522_data_state_check_and_actuate+0x146>
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	f6 dc       	rcall	.-1556   	; 0x74e <setSoundClip>
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	89 ef       	ldi	r24, 0xF9	; 249
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	90 40       	sbci	r25, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <RC522_data_state_check_and_actuate+0x14c>
			
			_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			uart0_tx_char('\n');
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <RC522_data_state_check_and_actuate+0x156>
     d72:	00 00       	nop
     d74:	8a e0       	ldi	r24, 0x0A	; 10
			uart0_tx_string("From server : ");
     d76:	cd d5       	rcall	.+2970   	; 0x1912 <uart0_tx_char>
     d78:	8f e7       	ldi	r24, 0x7F	; 127
     d7a:	92 e0       	ldi	r25, 0x02	; 2
			uart0_tx_string((char*)esp8266_received_data);
     d7c:	ce d5       	rcall	.+2972   	; 0x191a <uart0_tx_string>
     d7e:	8a eb       	ldi	r24, 0xBA	; 186
     d80:	94 e0       	ldi	r25, 0x04	; 4
			uart0_tx_char('\n');
     d82:	cb d5       	rcall	.+2966   	; 0x191a <uart0_tx_string>
     d84:	8a e0       	ldi	r24, 0x0A	; 10
     d86:	c5 d5       	rcall	.+2954   	; 0x1912 <uart0_tx_char>
     d88:	0f 2e       	mov	r0, r31
     d8a:	f9 e3       	ldi	r31, 0x39	; 57
     d8c:	ef 2e       	mov	r14, r31
     d8e:	f4 e0       	ldi	r31, 0x04	; 4
     d90:	ff 2e       	mov	r15, r31
     d92:	f0 2d       	mov	r31, r0
     d94:	0f 2e       	mov	r0, r31
     d96:	f2 e5       	ldi	r31, 0x52	; 82
     d98:	cf 2e       	mov	r12, r31
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
     d9a:	f4 e0       	ldi	r31, 0x04	; 4
     d9c:	df 2e       	mov	r13, r31
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     d9e:	f0 2d       	mov	r31, r0
     da0:	8b e5       	ldi	r24, 0x5B	; 91
     da2:	b7 d5       	rcall	.+2926   	; 0x1912 <uart0_tx_char>
     da4:	f7 01       	movw	r30, r14
     da6:	81 91       	ld	r24, Z+
     da8:	8f 01       	movw	r16, r30
     daa:	0a d6       	rcall	.+3092   	; 0x19c0 <HexToString>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     dac:	b6 d5       	rcall	.+2924   	; 0x191a <uart0_tx_string>
     dae:	c0 e0       	ldi	r28, 0x00	; 0
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
     db0:	d0 e0       	ldi	r29, 0x00	; 0
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	ae d5       	rcall	.+2908   	; 0x1912 <uart0_tx_char>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     db6:	21 96       	adiw	r28, 0x01	; 1
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     db8:	f8 01       	movw	r30, r16
     dba:	81 91       	ld	r24, Z+
     dbc:	8f 01       	movw	r16, r30
     dbe:	00 d6       	rcall	.+3072   	; 0x19c0 <HexToString>
     dc0:	ac d5       	rcall	.+2904   	; 0x191a <uart0_tx_string>
     dc2:	c3 30       	cpi	r28, 0x03	; 3
     dc4:	d1 05       	cpc	r29, r1
					if(j!=3)uart0_tx_char(' ');
     dc6:	a9 f7       	brne	.-22     	; 0xdb2 <RC522_data_state_check_and_actuate+0x196>
     dc8:	8d e5       	ldi	r24, 0x5D	; 93
     dca:	a3 d5       	rcall	.+2886   	; 0x1912 <uart0_tx_char>
					//_delay_ms(10);
				}
				
				
				uart0_tx_char(']');
     dcc:	8a e0       	ldi	r24, 0x0A	; 10
     dce:	a1 d5       	rcall	.+2882   	; 0x1912 <uart0_tx_char>
				uart0_tx_char('\n');
     dd0:	f5 e0       	ldi	r31, 0x05	; 5
     dd2:	ef 0e       	add	r14, r31
     dd4:	f1 1c       	adc	r15, r1
     dd6:	ce 14       	cp	r12, r14
     dd8:	df 04       	cpc	r13, r15
     dda:	11 f7       	brne	.-60     	; 0xda0 <RC522_data_state_check_and_actuate+0x184>
			uart0_tx_string("From server : ");
			uart0_tx_string((char*)esp8266_received_data);
			uart0_tx_char('\n');
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
     ddc:	43 c0       	rjmp	.+134    	; 0xe64 <RC522_data_state_check_and_actuate+0x248>
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	09 f0       	breq	.+2      	; 0xde4 <RC522_data_state_check_and_actuate+0x1c8>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <RC522_data_state_check_and_actuate+0x248>
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE){
     de4:	0f 2e       	mov	r0, r31
     de6:	f9 e3       	ldi	r31, 0x39	; 57
     de8:	ef 2e       	mov	r14, r31
     dea:	f4 e0       	ldi	r31, 0x04	; 4
     dec:	ff 2e       	mov	r15, r31
     dee:	f0 2d       	mov	r31, r0
     df0:	0f 2e       	mov	r0, r31
     df2:	f2 e5       	ldi	r31, 0x52	; 82
     df4:	cf 2e       	mov	r12, r31
     df6:	f4 e0       	ldi	r31, 0x04	; 4
     df8:	df 2e       	mov	r13, r31
     dfa:	f0 2d       	mov	r31, r0
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
     dfc:	e7 01       	movw	r28, r14
     dfe:	64 ee       	ldi	r22, 0xE4	; 228
     e00:	75 e0       	ldi	r23, 0x05	; 5
     e02:	ce 01       	movw	r24, r28
     e04:	fd d6       	rcall	.+3578   	; 0x1c00 <strcmp>
     e06:	89 2b       	or	r24, r25
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
     e08:	59 f4       	brne	.+22     	; 0xe20 <RC522_data_state_check_and_actuate+0x204>
     e0a:	85 e0       	ldi	r24, 0x05	; 5
     e0c:	e3 ee       	ldi	r30, 0xE3	; 227
     e0e:	f2 e0       	ldi	r31, 0x02	; 2
     e10:	de 01       	movw	r26, r28
     e12:	01 90       	ld	r0, Z+
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					start_timer(); //ticktim을 0으로 클리어시킴.
     e14:	0d 92       	st	X+, r0
     e16:	8a 95       	dec	r24
					setSoundClip(BUZZ_SUCCESS);
     e18:	e1 f7       	brne	.-8      	; 0xe12 <RC522_data_state_check_and_actuate+0x1f6>
     e1a:	ef de       	rcall	.-546    	; 0xbfa <start_timer>
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	97 dc       	rcall	.-1746   	; 0x74e <setSoundClip>
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
     e20:	25 96       	adiw	r28, 0x05	; 5
     e22:	cc 15       	cp	r28, r12
     e24:	dd 05       	cpc	r29, r13
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
     e26:	59 f7       	brne	.-42     	; 0xdfe <RC522_data_state_check_and_actuate+0x1e2>
     e28:	8b e5       	ldi	r24, 0x5B	; 91
     e2a:	73 d5       	rcall	.+2790   	; 0x1912 <uart0_tx_char>
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     e2c:	f7 01       	movw	r30, r14
     e2e:	81 91       	ld	r24, Z+
     e30:	8f 01       	movw	r16, r30
     e32:	c6 d5       	rcall	.+2956   	; 0x19c0 <HexToString>
     e34:	72 d5       	rcall	.+2788   	; 0x191a <uart0_tx_string>
     e36:	c0 e0       	ldi	r28, 0x00	; 0
     e38:	d0 e0       	ldi	r29, 0x00	; 0
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	6a d5       	rcall	.+2772   	; 0x1912 <uart0_tx_char>
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
     e3e:	21 96       	adiw	r28, 0x01	; 1
     e40:	f8 01       	movw	r30, r16
     e42:	81 91       	ld	r24, Z+
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     e44:	8f 01       	movw	r16, r30
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     e46:	bc d5       	rcall	.+2936   	; 0x19c0 <HexToString>
     e48:	68 d5       	rcall	.+2768   	; 0x191a <uart0_tx_string>
     e4a:	c3 30       	cpi	r28, 0x03	; 3
     e4c:	d1 05       	cpc	r29, r1
     e4e:	a9 f7       	brne	.-22     	; 0xe3a <RC522_data_state_check_and_actuate+0x21e>
     e50:	8d e5       	ldi	r24, 0x5D	; 93
     e52:	5f d5       	rcall	.+2750   	; 0x1912 <uart0_tx_char>
					if(j!=3)uart0_tx_char(' ');
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	5d d5       	rcall	.+2746   	; 0x1912 <uart0_tx_char>
     e58:	f5 e0       	ldi	r31, 0x05	; 5
					//_delay_ms(10);
				}
				uart0_tx_char(']');
     e5a:	ef 0e       	add	r14, r31
     e5c:	f1 1c       	adc	r15, r1
     e5e:	ec 14       	cp	r14, r12
				uart0_tx_char('\n');
     e60:	fd 04       	cpc	r15, r13
     e62:	11 f7       	brne	.-60     	; 0xe28 <RC522_data_state_check_and_actuate+0x20c>
     e64:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <received_state>
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
					setSoundClip(BUZZ_SUCCESS);
				}//그곳 버퍼를 비움
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
}
     e76:	cf 90       	pop	r12
     e78:	08 95       	ret

00000e7a <logojector_OFF>:
     e7a:	df 98       	cbi	0x1b, 7	; 27
     e7c:	08 95       	ret

00000e7e <main>:
     e7e:	78 94       	sei
     e80:	8a b3       	in	r24, 0x1a	; 26
     e82:	8f 68       	ori	r24, 0x8F	; 143
     e84:	8a bb       	out	0x1a, r24	; 26
     e86:	f9 df       	rcall	.-14     	; 0xe7a <logojector_OFF>
	DDRA|=0x8f; 
	
	//사용하는 기능들 초기화 작업
	logojector_OFF();
	
	mfrc522_init(CH0);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	8b d3       	rcall	.+1814   	; 0x15a2 <mfrc522_init>
	mfrc522_init(CH1);
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 d3       	rcall	.+1810   	; 0x15a2 <mfrc522_init>
     e90:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(0,BAUD_9600); //debug channel
     e92:	75 e2       	ldi	r23, 0x25	; 37
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0f d5       	rcall	.+2590   	; 0x18b8 <uart_init>
     e9a:	60 e8       	ldi	r22, 0x80	; 128
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
     e9c:	75 e2       	ldi	r23, 0x25	; 37
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
	i2c_lcd_init();
     ea2:	0a d5       	rcall	.+2580   	; 0x18b8 <uart_init>
     ea4:	00 d1       	rcall	.+512    	; 0x10a6 <i2c_lcd_init>
	cli(); //전역 인터럽트 해제
     ea6:	f8 94       	cli
	
	timer0_init();
     ea8:	e9 d4       	rcall	.+2514   	; 0x187c <timer0_init>
     eaa:	f1 d4       	rcall	.+2530   	; 0x188e <timer3_init>
	timer3_init();
     eac:	78 94       	sei
     eae:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <TICK>
	sei(); //전역 인터럽트 허용
	TICK.tick_1ms=0;
     eb2:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <TICK+0x1>
     eb6:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <TICK+0x2>
     eba:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <TICK+0x3>
     ebe:	4e e8       	ldi	r20, 0x8E	; 142
	
	i2c_lcd_string(0,0,"====================");
     ec0:	52 e0       	ldi	r21, 0x02	; 2
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	7a d1       	rcall	.+756    	; 0x11bc <i2c_lcd_string>
     ec8:	43 ea       	ldi	r20, 0xA3	; 163
	i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
     eca:	52 e0       	ldi	r21, 0x02	; 2
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	75 d1       	rcall	.+746    	; 0x11bc <i2c_lcd_string>
     ed2:	47 eb       	ldi	r20, 0xB7	; 183
	i2c_lcd_string(2,0,"     __________     ");
     ed4:	52 e0       	ldi	r21, 0x02	; 2
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	70 d1       	rcall	.+736    	; 0x11bc <i2c_lcd_string>
     edc:	4e e8       	ldi	r20, 0x8E	; 142
	i2c_lcd_string(3,0,"====================");
     ede:	52 e0       	ldi	r21, 0x02	; 2
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	6b d1       	rcall	.+726    	; 0x11bc <i2c_lcd_string>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	32 dc       	rcall	.-1948   	; 0x74e <setSoundClip>
	setSoundClip(BUZZ_ON);
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	81 e1       	ldi	r24, 0x11	; 17
     eee:	9a e7       	ldi	r25, 0x7A	; 122
     ef0:	21 50       	subi	r18, 0x01	; 1
     ef2:	80 40       	sbci	r24, 0x00	; 0
     ef4:	90 40       	sbci	r25, 0x00	; 0
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <main+0x72>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <main+0x7c>
     efa:	00 00       	nop
	_delay_ms(2500);
	
	//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
	mfrc522_version_check(CH0);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	99 d3       	rcall	.+1842   	; 0x1632 <mfrc522_version_check>
     f00:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
     f02:	ed d3       	rcall	.+2010   	; 0x16de <mfrc522_IRQ_enable>
	mfrc522_version_check(CH1);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	95 d3       	rcall	.+1834   	; 0x1632 <mfrc522_version_check>
     f08:	81 e0       	ldi	r24, 0x01	; 1
	mfrc522_IRQ_enable(CH1);
     f0a:	e9 d3       	rcall	.+2002   	; 0x16de <mfrc522_IRQ_enable>
     f0c:	2c ec       	ldi	r18, 0xCC	; 204
     f0e:	32 e0       	ldi	r19, 0x02	; 2
	
	
	esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
     f10:	4f ec       	ldi	r20, 0xCF	; 207
     f12:	52 e0       	ldi	r21, 0x02	; 2
     f14:	6b ed       	ldi	r22, 0xDB	; 219
     f16:	72 e0       	ldi	r23, 0x02	; 2
     f18:	88 ee       	ldi	r24, 0xE8	; 232
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	79 db       	rcall	.-2318   	; 0x610 <esp8266_init>
     f1e:	d2 d9       	rcall	.-3164   	; 0x2c4 <rfid_user_uid_buffer_init>
     f20:	2f ef       	ldi	r18, 0xFF	; 255
	rfid_user_uid_buffer_init();
     f22:	89 ef       	ldi	r24, 0xF9	; 249
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	80 40       	sbci	r24, 0x00	; 0
     f2a:	90 40       	sbci	r25, 0x00	; 0
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <main+0xa8>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <main+0xb2>
     f30:	00 00       	nop
     f32:	4e e8       	ldi	r20, 0x8E	; 142
	
	//여기서 워치독 타이머 활성화 시켜야 함??? > ㄴㄴㄴ 워치독타이머 안씀
	_delay_ms(20);
	
	
		i2c_lcd_string(0,0,"====================");
     f34:	52 e0       	ldi	r21, 0x02	; 2
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	40 d1       	rcall	.+640    	; 0x11bc <i2c_lcd_string>
		i2c_lcd_string(1,0," Firmware Ver 1.85  ");
     f3c:	4f ee       	ldi	r20, 0xEF	; 239
     f3e:	52 e0       	ldi	r21, 0x02	; 2
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	3b d1       	rcall	.+630    	; 0x11bc <i2c_lcd_string>
     f46:	44 e0       	ldi	r20, 0x04	; 4
		i2c_lcd_string(2,0,"     Welcome        ");
     f48:	53 e0       	ldi	r21, 0x03	; 3
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	36 d1       	rcall	.+620    	; 0x11bc <i2c_lcd_string>
		i2c_lcd_string(3,0,"====================");
     f50:	4e e8       	ldi	r20, 0x8E	; 142
     f52:	52 e0       	ldi	r21, 0x02	; 2
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	83 e0       	ldi	r24, 0x03	; 3
	setSoundClip(BUZZ_ESP8266_CONNECTED);
     f58:	31 d1       	rcall	.+610    	; 0x11bc <i2c_lcd_string>
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	f8 db       	rcall	.-2064   	; 0x74e <setSoundClip>
     f5e:	2f ef       	ldi	r18, 0xFF	; 255
     f60:	87 ea       	ldi	r24, 0xA7	; 167
     f62:	91 e6       	ldi	r25, 0x61	; 97
     f64:	21 50       	subi	r18, 0x01	; 1
     f66:	80 40       	sbci	r24, 0x00	; 0
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <main+0xe6>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <main+0xf0>
     f6e:	00 00       	nop
	//main loop start.
	_delay_ms(2000);
	i2c_lcd_clear();
     f70:	34 d1       	rcall	.+616    	; 0x11da <i2c_lcd_clear>
     f72:	34 d0       	rcall	.+104    	; 0xfdc <i2c_lcd_noBacklight>
	i2c_lcd_noBacklight();
     f74:	c6 ef       	ldi	r28, 0xF6	; 246
		
		
		
		if(start_timer_flag==1)
		{
			if(TICK.tick_1ms==5000)//5초
     f76:	d5 e0       	ldi	r29, 0x05	; 5
     f78:	8c e2       	ldi	r24, 0x2C	; 44
		//dummy code
		//PORTA^=0x01;
		
		static char toggle=0;
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	20 db       	rcall	.-2496   	; 0x5be <RC522_data_request_per_100ms>
     f7e:	8c e2       	ldi	r24, 0x2C	; 44
     f80:	94 e0       	ldi	r25, 0x04	; 4
		RC522_data_state_check_and_actuate(&toggle);
     f82:	4c de       	rcall	.-872    	; 0xc1c <RC522_data_state_check_and_actuate>
     f84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		
		
		if(start_timer_flag==1)
     f88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	a1 f7       	brne	.-24     	; 0xf78 <main+0xfa>
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
		{
			if(TICK.tick_1ms==5000)//5초
     f94:	aa 81       	ldd	r26, Y+2	; 0x02
     f96:	bb 81       	ldd	r27, Y+3	; 0x03
     f98:	88 38       	cpi	r24, 0x88	; 136
     f9a:	93 41       	sbci	r25, 0x13	; 19
     f9c:	a1 05       	cpc	r26, r1
     f9e:	b1 05       	cpc	r27, r1
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <main+0x12a>
     fa2:	84 e0       	ldi	r24, 0x04	; 4
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				setSoundClip(BUZZ_FAIL);
     fa4:	d4 db       	rcall	.-2136   	; 0x74e <setSoundClip>
     fa6:	e8 cf       	rjmp	.-48     	; 0xf78 <main+0xfa>
     fa8:	88 81       	ld	r24, Y
     faa:	99 81       	ldd	r25, Y+1	; 0x01
				
			}
			else if(TICK.tick_1ms==10000){//10초
     fac:	aa 81       	ldd	r26, Y+2	; 0x02
     fae:	bb 81       	ldd	r27, Y+3	; 0x03
     fb0:	80 31       	cpi	r24, 0x10	; 16
     fb2:	97 42       	sbci	r25, 0x27	; 39
     fb4:	a1 05       	cpc	r26, r1
     fb6:	b1 05       	cpc	r27, r1
     fb8:	11 f4       	brne	.+4      	; 0xfbe <main+0x140>
     fba:	10 d0       	rcall	.+32     	; 0xfdc <i2c_lcd_noBacklight>
     fbc:	dd cf       	rjmp	.-70     	; 0xf78 <main+0xfa>
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
     fbe:	88 81       	ld	r24, Y
     fc0:	99 81       	ldd	r25, Y+1	; 0x01
     fc2:	aa 81       	ldd	r26, Y+2	; 0x02
			}
			else if(TICK.tick_1ms==12000)
     fc4:	bb 81       	ldd	r27, Y+3	; 0x03
     fc6:	80 3e       	cpi	r24, 0xE0	; 224
     fc8:	9e 42       	sbci	r25, 0x2E	; 46
     fca:	a1 05       	cpc	r26, r1
     fcc:	b1 05       	cpc	r27, r1
     fce:	a1 f6       	brne	.-88     	; 0xf78 <main+0xfa>
     fd0:	54 df       	rcall	.-344    	; 0xe7a <logojector_OFF>
     fd2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			{
				//로고젝터 오프 
				logojector_OFF();
     fd6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				start_timer_flag=0;
     fda:	ce cf       	rjmp	.-100    	; 0xf78 <main+0xfa>

00000fdc <i2c_lcd_noBacklight>:
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <i2c_lcd_noBacklight+0x6>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <i2c_lcd_noBacklight+0x8>
			c_buf[1] = (0&0xF0) | RS0_EN0 | 0;
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
	_delay_ms(10);
}
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	1a 82       	std	Y+2, r1	; 0x02
     fee:	84 e1       	ldi	r24, 0x14	; 20
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	80 e1       	ldi	r24, 0x10	; 16
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	44 e0       	ldi	r20, 0x04	; 4
     ff8:	50 e0       	ldi	r21, 0x00	; 0
     ffa:	be 01       	movw	r22, r28
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1004:	4a d1       	rcall	.+660    	; 0x129a <i2c_transmit>
    1006:	81 11       	cpse	r24, r1
    1008:	f6 cf       	rjmp	.-20     	; 0xff6 <i2c_lcd_noBacklight+0x1a>
    100a:	8f e3       	ldi	r24, 0x3F	; 63
    100c:	9c e9       	ldi	r25, 0x9C	; 156
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <__DATA_REGION_LENGTH__+0xe>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1014:	00 00       	nop
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <i2c_lcd_command_8>:
void i2c_lcd_command_8(uint8_t command)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	00 d0       	rcall	.+0      	; 0x102a <i2c_lcd_command_8+0x6>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
    102e:	80 7f       	andi	r24, 0xF0	; 240
    1030:	98 2f       	mov	r25, r24
    1032:	9c 60       	ori	r25, 0x0C	; 12
    1034:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    103a:	42 e0       	ldi	r20, 0x02	; 2
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	be 01       	movw	r22, r28
    1040:	6f 5f       	subi	r22, 0xFF	; 255
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1048:	28 d1       	rcall	.+592    	; 0x129a <i2c_transmit>
    104a:	81 11       	cpse	r24, r1
    104c:	f6 cf       	rjmp	.-20     	; 0x103a <i2c_lcd_command_8+0x16>
}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	00 d0       	rcall	.+0      	; 0x105e <i2c_lcd_command+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <i2c_lcd_command+0x8>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
    1064:	98 2f       	mov	r25, r24
    1066:	90 7f       	andi	r25, 0xF0	; 240
    1068:	29 2f       	mov	r18, r25
    106a:	2c 60       	ori	r18, 0x0C	; 12
    106c:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
    106e:	98 60       	ori	r25, 0x08	; 8
    1070:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    1072:	20 e1       	ldi	r18, 0x10	; 16
    1074:	82 9f       	mul	r24, r18
    1076:	c0 01       	movw	r24, r0
    1078:	11 24       	eor	r1, r1
    107a:	98 2f       	mov	r25, r24
    107c:	9c 60       	ori	r25, 0x0C	; 12
    107e:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    1084:	44 e0       	ldi	r20, 0x04	; 4
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	be 01       	movw	r22, r28
    108a:	6f 5f       	subi	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1092:	03 d1       	rcall	.+518    	; 0x129a <i2c_transmit>
    1094:	81 11       	cpse	r24, r1
    1096:	f6 cf       	rjmp	.-20     	; 0x1084 <i2c_lcd_command+0x2c>
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    10a6:	be d0       	rcall	.+380    	; 0x1224 <i2c_init>
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	89 e6       	ldi	r24, 0x69	; 105
    10ac:	98 e1       	ldi	r25, 0x18	; 24
    10ae:	21 50       	subi	r18, 0x01	; 1
    10b0:	80 40       	sbci	r24, 0x00	; 0
    10b2:	90 40       	sbci	r25, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <i2c_lcd_init+0x8>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <i2c_lcd_init+0x12>
    10b8:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    10ba:	89 e1       	ldi	r24, 0x19	; 25
    10bc:	93 e0       	ldi	r25, 0x03	; 3
    10be:	2d d4       	rcall	.+2138   	; 0x191a <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    10c0:	80 e3       	ldi	r24, 0x30	; 48
    10c2:	b0 df       	rcall	.-160    	; 0x1024 <i2c_lcd_command_8>
    10c4:	8f e1       	ldi	r24, 0x1F	; 31
    10c6:	9e e4       	ldi	r25, 0x4E	; 78
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <i2c_lcd_init+0x22>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <i2c_lcd_init+0x28>
    10ce:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    10d0:	80 e3       	ldi	r24, 0x30	; 48
    10d2:	a8 df       	rcall	.-176    	; 0x1024 <i2c_lcd_command_8>
    10d4:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <i2c_lcd_init+0x32>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <i2c_lcd_init+0x38>
    10de:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	a0 df       	rcall	.-192    	; 0x1024 <i2c_lcd_command_8>
    10e4:	8f e8       	ldi	r24, 0x8F	; 143
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <i2c_lcd_init+0x42>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <i2c_lcd_init+0x48>
    10ee:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	98 df       	rcall	.-208    	; 0x1024 <i2c_lcd_command_8>
    10f4:	8f e8       	ldi	r24, 0x8F	; 143
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <i2c_lcd_init+0x52>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <i2c_lcd_init+0x58>
    10fe:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    1100:	88 e2       	ldi	r24, 0x28	; 40
    1102:	aa df       	rcall	.-172    	; 0x1058 <i2c_lcd_command>
    1104:	87 ec       	ldi	r24, 0xC7	; 199
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <__stack+0x9>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <__stack+0xf>
    110e:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    1110:	88 e0       	ldi	r24, 0x08	; 8
    1112:	a2 df       	rcall	.-188    	; 0x1058 <i2c_lcd_command>
    1114:	87 ec       	ldi	r24, 0xC7	; 199
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <__stack+0x19>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <__stack+0x1f>
    111e:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	9a df       	rcall	.-204    	; 0x1058 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	8f ed       	ldi	r24, 0xDF	; 223
    1126:	9e e2       	ldi	r25, 0x2E	; 46
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <__stack+0x29>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <__stack+0x2f>
    112e:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    1130:	86 e0       	ldi	r24, 0x06	; 6
    1132:	92 df       	rcall	.-220    	; 0x1058 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1134:	87 ec       	ldi	r24, 0xC7	; 199
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <__stack+0x39>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <__stack+0x3f>
    113e:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    1140:	8c e0       	ldi	r24, 0x0C	; 12
    1142:	8a df       	rcall	.-236    	; 0x1058 <i2c_lcd_command>
    1144:	87 ec       	ldi	r24, 0xC7	; 199
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <__stack+0x49>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <__stack+0x4f>
    114e:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    1150:	89 e3       	ldi	r24, 0x39	; 57
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	e2 c3       	rjmp	.+1988   	; 0x191a <uart0_tx_string>
    1156:	08 95       	ret

00001158 <i2c_lcd_data>:
    1158:	cf 93       	push	r28
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
    115a:	df 93       	push	r29
    115c:	00 d0       	rcall	.+0      	; 0x115e <i2c_lcd_data+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <i2c_lcd_data+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
    1164:	98 2f       	mov	r25, r24
    1166:	90 7f       	andi	r25, 0xF0	; 240
    1168:	29 2f       	mov	r18, r25
    116a:	2d 60       	ori	r18, 0x0D	; 13
    116c:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
    116e:	99 60       	ori	r25, 0x09	; 9
    1170:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    1172:	20 e1       	ldi	r18, 0x10	; 16
    1174:	82 9f       	mul	r24, r18
    1176:	c0 01       	movw	r24, r0
    1178:	11 24       	eor	r1, r1
    117a:	98 2f       	mov	r25, r24
    117c:	9d 60       	ori	r25, 0x0D	; 13
    117e:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
    1180:	89 60       	ori	r24, 0x09	; 9
    1182:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    1184:	44 e0       	ldi	r20, 0x04	; 4
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	be 01       	movw	r22, r28
    118a:	6f 5f       	subi	r22, 0xFF	; 255
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1192:	83 d0       	rcall	.+262    	; 0x129a <i2c_transmit>
    1194:	81 11       	cpse	r24, r1
    1196:	f6 cf       	rjmp	.-20     	; 0x1184 <i2c_lcd_data+0x2c>
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <i2c_lcd_goto_XY>:

void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
    11a6:	e8 2f       	mov	r30, r24
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	e1 5b       	subi	r30, 0xB1	; 177
    11b0:	fc 4f       	sbci	r31, 0xFC	; 252
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
    11b2:	80 81       	ld	r24, Z
    11b4:	86 0f       	add	r24, r22
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	4f cf       	rjmp	.-354    	; 0x1058 <i2c_lcd_command>
    11ba:	08 95       	ret

000011bc <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
    11c2:	f1 df       	rcall	.-30     	; 0x11a6 <i2c_lcd_goto_XY>
	while(*string) {
    11c4:	88 81       	ld	r24, Y
    11c6:	88 23       	and	r24, r24
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
    11ca:	21 96       	adiw	r28, 0x01	; 1
    11cc:	c5 df       	rcall	.-118    	; 0x1158 <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    11ce:	89 91       	ld	r24, Y+
    11d0:	81 11       	cpse	r24, r1
    11d2:	fc cf       	rjmp	.-8      	; 0x11cc <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
}
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <i2c_lcd_clear>:
void i2c_lcd_clear()
{
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <i2c_lcd_clear+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <i2c_lcd_clear+0x8>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
		uint8_t c_buf[4];
		
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
    11e6:	8c e0       	ldi	r24, 0x0C	; 12
    11e8:	89 83       	std	Y+1, r24	; 0x01
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
    11ea:	88 e0       	ldi	r24, 0x08	; 8
    11ec:	8a 83       	std	Y+2, r24	; 0x02
		
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    11ee:	8c e1       	ldi	r24, 0x1C	; 28
    11f0:	8b 83       	std	Y+3, r24	; 0x03
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
    11f2:	88 e1       	ldi	r24, 0x18	; 24
    11f4:	8c 83       	std	Y+4, r24	; 0x04
		
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    11f6:	44 e0       	ldi	r20, 0x04	; 4
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1204:	4a d0       	rcall	.+148    	; 0x129a <i2c_transmit>
    1206:	81 11       	cpse	r24, r1
    1208:	f6 cf       	rjmp	.-20     	; 0x11f6 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120a:	8f e3       	ldi	r24, 0x3F	; 63
    120c:	9c e9       	ldi	r25, 0x9C	; 156
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <i2c_lcd_clear+0x34>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <i2c_lcd_clear+0x3a>
    1214:	00 00       	nop
		
		_delay_ms(10);
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    1224:	88 e4       	ldi	r24, 0x48	; 72
    1226:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    122a:	08 95       	ret

0000122c <i2c_start>:
    122c:	e4 e7       	ldi	r30, 0x74	; 116
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	10 82       	st	Z, r1
    1232:	94 ea       	ldi	r25, 0xA4	; 164
    1234:	90 83       	st	Z, r25
    1236:	90 81       	ld	r25, Z
    1238:	99 23       	and	r25, r25
    123a:	ec f7       	brge	.-6      	; 0x1236 <i2c_start+0xa>
    123c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1240:	98 7f       	andi	r25, 0xF8	; 248
    1242:	98 30       	cpi	r25, 0x08	; 8
    1244:	a1 f4       	brne	.+40     	; 0x126e <i2c_start+0x42>
    1246:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    124a:	84 e8       	ldi	r24, 0x84	; 132
    124c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1250:	e4 e7       	ldi	r30, 0x74	; 116
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	ec f7       	brge	.-6      	; 0x1254 <i2c_start+0x28>
    125a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    125e:	98 7f       	andi	r25, 0xF8	; 248
    1260:	98 31       	cpi	r25, 0x18	; 24
    1262:	39 f0       	breq	.+14     	; 0x1272 <i2c_start+0x46>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 34       	cpi	r25, 0x40	; 64
    1268:	29 f4       	brne	.+10     	; 0x1274 <i2c_start+0x48>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	08 95       	ret
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <i2c_write>:
    1276:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    127a:	84 e8       	ldi	r24, 0x84	; 132
    127c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1280:	e4 e7       	ldi	r30, 0x74	; 116
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	88 23       	and	r24, r24
    1288:	ec f7       	brge	.-6      	; 0x1284 <i2c_write+0xe>
    128a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    128e:	98 7f       	andi	r25, 0xF8	; 248
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	98 32       	cpi	r25, 0x28	; 40
    1294:	09 f4       	brne	.+2      	; 0x1298 <i2c_write+0x22>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret

0000129a <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	6b 01       	movw	r12, r22
    12aa:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    12ac:	bf df       	rcall	.-130    	; 0x122c <i2c_start>
    12ae:	f8 2e       	mov	r15, r24
    12b0:	81 11       	cpse	r24, r1
    12b2:	17 c0       	rjmp	.+46     	; 0x12e2 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    12b4:	01 15       	cp	r16, r1
    12b6:	11 05       	cpc	r17, r1
    12b8:	81 f0       	breq	.+32     	; 0x12da <i2c_transmit+0x40>
    12ba:	e6 01       	movw	r28, r12
    12bc:	0c 0d       	add	r16, r12
    12be:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    12c0:	89 91       	ld	r24, Y+
    12c2:	d9 df       	rcall	.-78     	; 0x1276 <i2c_write>
    12c4:	81 11       	cpse	r24, r1
    12c6:	10 c0       	rjmp	.+32     	; 0x12e8 <i2c_transmit+0x4e>
    12c8:	8f e9       	ldi	r24, 0x9F	; 159
    12ca:	9f e0       	ldi	r25, 0x0F	; 15
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <i2c_transmit+0x32>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <i2c_transmit+0x38>
    12d2:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    12d4:	0c 17       	cp	r16, r28
    12d6:	1d 07       	cpc	r17, r29
    12d8:	99 f7       	brne	.-26     	; 0x12c0 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    12da:	84 e9       	ldi	r24, 0x94	; 148
    12dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    12e2:	ff 24       	eor	r15, r15
    12e4:	f3 94       	inc	r15
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    12e8:	ff 24       	eor	r15, r15
    12ea:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    12ec:	8f 2d       	mov	r24, r15
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	08 95       	ret

000012fe <mfrc522_write>:




static void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	16 2f       	mov	r17, r22
	
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1306:	95 b3       	in	r25, 0x15	; 21
    1308:	c1 e0       	ldi	r28, 0x01	; 1
    130a:	d0 e0       	ldi	r29, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <mfrc522_write+0x14>
    130e:	cc 0f       	add	r28, r28
    1310:	dd 1f       	adc	r29, r29
    1312:	4a 95       	dec	r20
    1314:	e2 f7       	brpl	.-8      	; 0x130e <mfrc522_write+0x10>
    1316:	2c 2f       	mov	r18, r28
    1318:	20 95       	com	r18
    131a:	92 23       	and	r25, r18
    131c:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    131e:	88 0f       	add	r24, r24
    1320:	8e 77       	andi	r24, 0x7E	; 126
    1322:	a3 d2       	rcall	.+1350   	; 0x186a <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    1324:	81 2f       	mov	r24, r17
    1326:	a1 d2       	rcall	.+1346   	; 0x186a <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1328:	85 b3       	in	r24, 0x15	; 21
    132a:	c8 2b       	or	r28, r24
    132c:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
	
	
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	08 95       	ret

00001336 <mfrc522_read>:
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F

}

static unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    133a:	95 b3       	in	r25, 0x15	; 21
    133c:	c1 e0       	ldi	r28, 0x01	; 1
    133e:	d0 e0       	ldi	r29, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <mfrc522_read+0x10>
    1342:	cc 0f       	add	r28, r28
    1344:	dd 1f       	adc	r29, r29
    1346:	6a 95       	dec	r22
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <mfrc522_read+0xc>
    134a:	2c 2f       	mov	r18, r28
    134c:	20 95       	com	r18
    134e:	92 23       	and	r25, r18
    1350:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    1352:	88 0f       	add	r24, r24
    1354:	8e 77       	andi	r24, 0x7E	; 126
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	88 d2       	rcall	.+1296   	; 0x186a <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    135a:	8b d2       	rcall	.+1302   	; 0x1872 <spi_master_rx>
    135c:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    135e:	c9 2b       	or	r28, r25
    1360:	c5 bb       	out	0x15, r28	; 21
    1362:	df 91       	pop	r29
	
	return value;
}
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <mfrc522_to_card>:
    1368:	2f 92       	push	r2

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    136a:	3f 92       	push	r3
    136c:	4f 92       	push	r4
    136e:	5f 92       	push	r5
    1370:	6f 92       	push	r6
    1372:	7f 92       	push	r7
    1374:	8f 92       	push	r8
    1376:	9f 92       	push	r9
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	f8 2e       	mov	r15, r24
    138e:	a6 2e       	mov	r10, r22
    1390:	b7 2e       	mov	r11, r23
    1392:	44 2e       	mov	r4, r20
    1394:	22 2e       	mov	r2, r18
    1396:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    1398:	8c e0       	ldi	r24, 0x0C	; 12
    139a:	f8 16       	cp	r15, r24
    139c:	59 f0       	breq	.+22     	; 0x13b4 <mfrc522_to_card+0x4c>
    139e:	ee e0       	ldi	r30, 0x0E	; 14
    13a0:	fe 12       	cpse	r15, r30
    13a2:	11 c0       	rjmp	.+34     	; 0x13c6 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    13a4:	68 94       	set
    13a6:	cc 24       	eor	r12, r12
    13a8:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    13aa:	0f 2e       	mov	r0, r31
    13ac:	f2 e1       	ldi	r31, 0x12	; 18
    13ae:	3f 2e       	mov	r3, r31
    13b0:	f0 2d       	mov	r31, r0
    13b2:	0b c0       	rjmp	.+22     	; 0x13ca <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    13b4:	0f 2e       	mov	r0, r31
    13b6:	f0 e3       	ldi	r31, 0x30	; 48
    13b8:	cf 2e       	mov	r12, r31
    13ba:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    13bc:	0f 2e       	mov	r0, r31
    13be:	f7 e7       	ldi	r31, 0x77	; 119
    13c0:	3f 2e       	mov	r3, r31
    13c2:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <mfrc522_to_card+0x62>

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    13c6:	c1 2c       	mov	r12, r1
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    13c8:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    13ca:	4e 2d       	mov	r20, r14
    13cc:	63 2d       	mov	r22, r3
    13ce:	60 68       	ori	r22, 0x80	; 128
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	95 df       	rcall	.-214    	; 0x12fe <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    13d4:	6e 2d       	mov	r22, r14
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	ae df       	rcall	.-164    	; 0x1336 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    13da:	68 2f       	mov	r22, r24
    13dc:	6f 77       	andi	r22, 0x7F	; 127
    13de:	4e 2d       	mov	r20, r14
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	8d df       	rcall	.-230    	; 0x12fe <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    13e4:	6e 2d       	mov	r22, r14
    13e6:	8a e0       	ldi	r24, 0x0A	; 10
    13e8:	a6 df       	rcall	.-180    	; 0x1336 <mfrc522_read>
    13ea:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    13ec:	60 68       	ori	r22, 0x80	; 128
    13ee:	4e 2d       	mov	r20, r14
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	85 df       	rcall	.-246    	; 0x12fe <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    13f4:	4e 2d       	mov	r20, r14
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	81 df       	rcall	.-254    	; 0x12fe <mfrc522_write>
    13fc:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    13fe:	61 2c       	mov	r6, r1
    1400:	71 2c       	mov	r7, r1
    1402:	41 14       	cp	r4, r1
    1404:	51 04       	cpc	r5, r1
    1406:	61 04       	cpc	r6, r1
    1408:	71 04       	cpc	r7, r1
    140a:	99 f0       	breq	.+38     	; 0x1432 <mfrc522_to_card+0xca>
    140c:	ca 2d       	mov	r28, r10
    140e:	db 2d       	mov	r29, r11
    1410:	81 2c       	mov	r8, r1
    1412:	91 2c       	mov	r9, r1
    1414:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1416:	69 91       	ld	r22, Y+
    1418:	4e 2d       	mov	r20, r14
    141a:	89 e0       	ldi	r24, 0x09	; 9
    141c:	70 df       	rcall	.-288    	; 0x12fe <mfrc522_write>
    141e:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1420:	8f 1a       	sub	r8, r31
    1422:	9f 0a       	sbc	r9, r31
    1424:	af 0a       	sbc	r10, r31
    1426:	bf 0a       	sbc	r11, r31
    1428:	84 14       	cp	r8, r4
    142a:	95 04       	cpc	r9, r5
    142c:	a6 04       	cpc	r10, r6
    142e:	b7 04       	cpc	r11, r7
    1430:	90 f3       	brcs	.-28     	; 0x1416 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    1432:	4e 2d       	mov	r20, r14
    1434:	6f 2d       	mov	r22, r15
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	62 df       	rcall	.-316    	; 0x12fe <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    143a:	8c e0       	ldi	r24, 0x0C	; 12
    143c:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    143e:	08 c0       	rjmp	.+16     	; 0x1450 <mfrc522_to_card+0xe8>
    1440:	6e 2d       	mov	r22, r14
    1442:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    1444:	78 df       	rcall	.-272    	; 0x1336 <mfrc522_read>
    1446:	68 2f       	mov	r22, r24
    1448:	60 68       	ori	r22, 0x80	; 128
    144a:	4e 2d       	mov	r20, r14
    144c:	8d e0       	ldi	r24, 0x0D	; 13
    144e:	57 df       	rcall	.-338    	; 0x12fe <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1450:	6e 2d       	mov	r22, r14
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	70 df       	rcall	.-288    	; 0x1336 <mfrc522_read>
    1456:	b8 2e       	mov	r11, r24
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    145c:	ec 2d       	mov	r30, r12
    145e:	e1 60       	ori	r30, 0x01	; 1
    1460:	ce 2e       	mov	r12, r30
    1462:	0a c0       	rjmp	.+20     	; 0x1478 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1464:	6e 2d       	mov	r22, r14
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	66 df       	rcall	.-308    	; 0x1336 <mfrc522_read>
    146a:	b8 2e       	mov	r11, r24
    146c:	21 96       	adiw	r28, 0x01	; 1
    146e:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1470:	f7 e0       	ldi	r31, 0x07	; 7
    1472:	df 07       	cpc	r29, r31
    1474:	09 f4       	brne	.+2      	; 0x1478 <mfrc522_to_card+0x110>
    1476:	68 c0       	rjmp	.+208    	; 0x1548 <mfrc522_to_card+0x1e0>
    1478:	8c 2d       	mov	r24, r12
    147a:	8b 21       	and	r24, r11
    147c:	99 f3       	breq	.-26     	; 0x1464 <mfrc522_to_card+0xfc>
    147e:	6e c0       	rjmp	.+220    	; 0x155c <mfrc522_to_card+0x1f4>
    1480:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	b8 22       	and	r11, r24
    1486:	11 f0       	breq	.+4      	; 0x148c <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    1488:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    148a:	01 c0       	rjmp	.+2      	; 0x148e <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    148c:	c1 e0       	ldi	r28, 0x01	; 1
    148e:	8c e0       	ldi	r24, 0x0C	; 12
    1490:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1492:	73 c0       	rjmp	.+230    	; 0x157a <mfrc522_to_card+0x212>
    1494:	6e 2d       	mov	r22, r14
    1496:	8a e0       	ldi	r24, 0x0A	; 10
    1498:	4e df       	rcall	.-356    	; 0x1336 <mfrc522_read>
    149a:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    149c:	6e 2d       	mov	r22, r14
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	4a df       	rcall	.-364    	; 0x1336 <mfrc522_read>
    14a2:	28 2f       	mov	r18, r24
    14a4:	27 70       	andi	r18, 0x07	; 7
    14a6:	a9 f0       	breq	.+42     	; 0x14d2 <mfrc522_to_card+0x16a>
				if (lastBits)
    14a8:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	91 1d       	adc	r25, r1
    14be:	09 2e       	mov	r0, r25
    14c0:	00 0c       	add	r0, r0
    14c2:	aa 0b       	sbc	r26, r26
    14c4:	bb 0b       	sbc	r27, r27
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 83       	st	Z, r24
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	a2 83       	std	Z+2, r26	; 0x02
    14ce:	b3 83       	std	Z+3, r27	; 0x03
    14d0:	11 c0       	rjmp	.+34     	; 0x14f4 <mfrc522_to_card+0x18c>
    14d2:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	09 2e       	mov	r0, r25
    14e4:	00 0c       	add	r0, r0
    14e6:	aa 0b       	sbc	r26, r26
    14e8:	bb 0b       	sbc	r27, r27
    14ea:	f8 01       	movw	r30, r16
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03
    14f4:	88 20       	and	r8, r8
				}

				if (n == 0)
    14f6:	71 f0       	breq	.+28     	; 0x1514 <mfrc522_to_card+0x1ac>
    14f8:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    14fa:	81 31       	cpi	r24, 0x11	; 17
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <mfrc522_to_card+0x198>
    14fe:	80 e1       	ldi	r24, 0x10	; 16
    1500:	88 2e       	mov	r8, r24
    1502:	91 2c       	mov	r9, r1
    1504:	a1 2c       	mov	r10, r1
    1506:	b1 2c       	mov	r11, r1
    1508:	81 14       	cp	r8, r1
    150a:	91 04       	cpc	r9, r1
    150c:	a1 04       	cpc	r10, r1
    150e:	b1 04       	cpc	r11, r1
    1510:	29 f4       	brne	.+10     	; 0x151c <mfrc522_to_card+0x1b4>
    1512:	33 c0       	rjmp	.+102    	; 0x157a <mfrc522_to_card+0x212>
    1514:	81 2c       	mov	r8, r1
    1516:	91 2c       	mov	r9, r1
    1518:	54 01       	movw	r10, r8
    151a:	83 94       	inc	r8
    151c:	02 2d       	mov	r16, r2
    151e:	1d 2d       	mov	r17, r13
    1520:	41 2c       	mov	r4, r1
    1522:	51 2c       	mov	r5, r1
    1524:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    1526:	6e 2d       	mov	r22, r14
    1528:	89 e0       	ldi	r24, 0x09	; 9
    152a:	05 df       	rcall	.-502    	; 0x1336 <mfrc522_read>
    152c:	f8 01       	movw	r30, r16
    152e:	81 93       	st	Z+, r24
    1530:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1532:	ff ef       	ldi	r31, 0xFF	; 255
    1534:	4f 1a       	sub	r4, r31
    1536:	5f 0a       	sbc	r5, r31
    1538:	6f 0a       	sbc	r6, r31
    153a:	7f 0a       	sbc	r7, r31
    153c:	48 14       	cp	r4, r8
    153e:	59 04       	cpc	r5, r9
    1540:	6a 04       	cpc	r6, r10
    1542:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1544:	80 f3       	brcs	.-32     	; 0x1526 <mfrc522_to_card+0x1be>
    1546:	19 c0       	rjmp	.+50     	; 0x157a <mfrc522_to_card+0x212>
    1548:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    154a:	8d e0       	ldi	r24, 0x0D	; 13
    154c:	f4 de       	rcall	.-536    	; 0x1336 <mfrc522_read>
    154e:	68 2f       	mov	r22, r24
    1550:	6f 77       	andi	r22, 0x7F	; 127
    1552:	4e 2d       	mov	r20, r14
	return value;
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    1554:	8d e0       	ldi	r24, 0x0D	; 13
    1556:	d3 de       	rcall	.-602    	; 0x12fe <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1558:	c3 e0       	ldi	r28, 0x03	; 3
    155a:	0f c0       	rjmp	.+30     	; 0x157a <mfrc522_to_card+0x212>
    155c:	6e 2d       	mov	r22, r14
    155e:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1560:	ea de       	rcall	.-556    	; 0x1336 <mfrc522_read>
    1562:	68 2f       	mov	r22, r24
    1564:	6f 77       	andi	r22, 0x7F	; 127
    1566:	4e 2d       	mov	r20, r14
    1568:	8d e0       	ldi	r24, 0x0D	; 13
    156a:	c9 de       	rcall	.-622    	; 0x12fe <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    156c:	6e 2d       	mov	r22, r14
    156e:	86 e0       	ldi	r24, 0x06	; 6
    1570:	e2 de       	rcall	.-572    	; 0x1336 <mfrc522_read>
    1572:	8b 71       	andi	r24, 0x1B	; 27
    1574:	09 f4       	brne	.+2      	; 0x1578 <mfrc522_to_card+0x210>
    1576:	84 cf       	rjmp	.-248    	; 0x1480 <mfrc522_to_card+0x118>
    1578:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    157a:	8c 2f       	mov	r24, r28
	
	// 	SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	3f 90       	pop	r3
    159e:	2f 90       	pop	r2
    15a0:	08 95       	ret

000015a2 <mfrc522_init>:
    15a2:	cf 93       	push	r28

void mfrc522_init(unsigned char ch)
{
    15a4:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    15a6:	1f 92       	push	r1
    15a8:	1f 92       	push	r1
    15aa:	1f 92       	push	r1
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	8f 93       	push	r24
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	8f 93       	push	r24
    15b4:	17 d1       	rcall	.+558    	; 0x17e4 <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    15b6:	84 b3       	in	r24, 0x14	; 20
    15b8:	83 60       	ori	r24, 0x03	; 3
    15ba:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    15bc:	15 ba       	out	0x15, r1	; 21
    15be:	2f ef       	ldi	r18, 0xFF	; 255
    15c0:	89 ef       	ldi	r24, 0xF9	; 249
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	21 50       	subi	r18, 0x01	; 1
    15c6:	80 40       	sbci	r24, 0x00	; 0
    15c8:	90 40       	sbci	r25, 0x00	; 0
    15ca:	e1 f7       	brne	.-8      	; 0x15c4 <mfrc522_init+0x22>
    15cc:	00 c0       	rjmp	.+0      	; 0x15ce <mfrc522_init+0x2c>
    15ce:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    15d0:	85 b3       	in	r24, 0x15	; 21
    15d2:	83 60       	ori	r24, 0x03	; 3
    15d4:	85 bb       	out	0x15, r24	; 21
}

static void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴.
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F
    15d6:	4c 2f       	mov	r20, r28
    15d8:	6f e0       	ldi	r22, 0x0F	; 15
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 de       	rcall	.-736    	; 0x12fe <mfrc522_write>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    15de:	4c 2f       	mov	r20, r28
    15e0:	6d e8       	ldi	r22, 0x8D	; 141
    15e2:	8a e2       	ldi	r24, 0x2A	; 42
    15e4:	8c de       	rcall	.-744    	; 0x12fe <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    15e6:	4c 2f       	mov	r20, r28
    15e8:	6e e3       	ldi	r22, 0x3E	; 62
    15ea:	8b e2       	ldi	r24, 0x2B	; 43
    15ec:	88 de       	rcall	.-752    	; 0x12fe <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    15ee:	4c 2f       	mov	r20, r28
    15f0:	6e e1       	ldi	r22, 0x1E	; 30
    15f2:	8c e2       	ldi	r24, 0x2C	; 44
    15f4:	84 de       	rcall	.-760    	; 0x12fe <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    15f6:	4c 2f       	mov	r20, r28
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	8d e2       	ldi	r24, 0x2D	; 45
    15fc:	80 de       	rcall	.-768    	; 0x12fe <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    15fe:	4c 2f       	mov	r20, r28
    1600:	60 e4       	ldi	r22, 0x40	; 64
    1602:	85 e1       	ldi	r24, 0x15	; 21
    1604:	7c de       	rcall	.-776    	; 0x12fe <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    1606:	4c 2f       	mov	r20, r28
    1608:	6d e3       	ldi	r22, 0x3D	; 61
    160a:	81 e1       	ldi	r24, 0x11	; 17
    160c:	78 de       	rcall	.-784    	; 0x12fe <mfrc522_write>
    160e:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    1610:	84 e1       	ldi	r24, 0x14	; 20
    1612:	91 de       	rcall	.-734    	; 0x1336 <mfrc522_read>
    1614:	98 2f       	mov	r25, r24
    1616:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	29 f4       	brne	.+10     	; 0x162e <mfrc522_init+0x8c>
    1624:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    1626:	63 60       	ori	r22, 0x03	; 3
    1628:	4c 2f       	mov	r20, r28
    162a:	84 e1       	ldi	r24, 0x14	; 20
    162c:	68 de       	rcall	.-816    	; 0x12fe <mfrc522_write>
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <mfrc522_version_check>:
	}
}
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29




void mfrc522_version_check(unsigned char ch){
    1636:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    1638:	68 2f       	mov	r22, r24
    163a:	87 e3       	ldi	r24, 0x37	; 55
    163c:	7c de       	rcall	.-776    	; 0x1336 <mfrc522_read>
    163e:	c8 2f       	mov	r28, r24
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	89 ef       	ldi	r24, 0xF9	; 249
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	21 50       	subi	r18, 0x01	; 1
    1648:	80 40       	sbci	r24, 0x00	; 0
    164a:	90 40       	sbci	r25, 0x00	; 0
    164c:	e1 f7       	brne	.-8      	; 0x1646 <mfrc522_version_check+0x14>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <mfrc522_version_check+0x1e>
    1650:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1652:	d1 11       	cpse	r29, r1
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <mfrc522_version_check+0x30>
    1656:	87 e5       	ldi	r24, 0x57	; 87
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	5f d1       	rcall	.+702    	; 0x191a <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    165c:	c2 39       	cpi	r28, 0x92	; 146
    165e:	59 f5       	brne	.+86     	; 0x16b6 <mfrc522_version_check+0x84>
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    1662:	83 e6       	ldi	r24, 0x63	; 99
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	59 d1       	rcall	.+690    	; 0x191a <uart0_tx_string>
	
	if(byte == 0x92)
    1668:	c2 39       	cpi	r28, 0x92	; 146
    166a:	91 f5       	brne	.+100    	; 0x16d0 <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <mfrc522_version_check+0x60>
    166e:	8f e6       	ldi	r24, 0x6F	; 111
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	53 d1       	rcall	.+678    	; 0x191a <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    1674:	42 e8       	ldi	r20, 0x82	; 130
    1676:	53 e0       	ldi	r21, 0x03	; 3
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	9f dd       	rcall	.-1218   	; 0x11bc <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    167e:	ff cf       	rjmp	.-2      	; 0x167e <mfrc522_version_check+0x4c>
    1680:	86 e9       	ldi	r24, 0x96	; 150
    1682:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1684:	4a d1       	rcall	.+660    	; 0x191a <uart0_tx_string>
    1686:	4a eb       	ldi	r20, 0xBA	; 186
    1688:	53 e0       	ldi	r21, 0x03	; 3
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	96 dd       	rcall	.-1236   	; 0x11bc <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1690:	23 c0       	rjmp	.+70     	; 0x16d8 <mfrc522_version_check+0xa6>
    1692:	86 e9       	ldi	r24, 0x96	; 150
    1694:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1696:	41 d1       	rcall	.+642    	; 0x191a <uart0_tx_string>
    1698:	4f ec       	ldi	r20, 0xCF	; 207
    169a:	53 e0       	ldi	r21, 0x03	; 3
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    16a0:	8d dd       	rcall	.-1254   	; 0x11bc <i2c_lcd_string>
    16a2:	1a c0       	rjmp	.+52     	; 0x16d8 <mfrc522_version_check+0xa6>
    16a4:	84 ee       	ldi	r24, 0xE4	; 228
    16a6:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    16a8:	38 d1       	rcall	.+624    	; 0x191a <uart0_tx_string>
    16aa:	4a eb       	ldi	r20, 0xBA	; 186
    16ac:	53 e0       	ldi	r21, 0x03	; 3
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	84 dd       	rcall	.-1272   	; 0x11bc <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <mfrc522_version_check+0xa6>
    16b6:	c0 59       	subi	r28, 0x90	; 144
    16b8:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    16ba:	c8 f6       	brcc	.-78     	; 0x166e <mfrc522_version_check+0x3c>
    16bc:	f3 cf       	rjmp	.-26     	; 0x16a4 <mfrc522_version_check+0x72>
    16be:	84 ee       	ldi	r24, 0xE4	; 228
    16c0:	93 e0       	ldi	r25, 0x03	; 3
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    16c2:	2b d1       	rcall	.+598    	; 0x191a <uart0_tx_string>
    16c4:	4f ec       	ldi	r20, 0xCF	; 207
    16c6:	53 e0       	ldi	r21, 0x03	; 3
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	77 dd       	rcall	.-1298   	; 0x11bc <i2c_lcd_string>
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    16d0:	c0 59       	subi	r28, 0x90	; 144
    16d2:	c2 30       	cpi	r28, 0x02	; 2
    16d4:	60 f6       	brcc	.-104    	; 0x166e <mfrc522_version_check+0x3c>
    16d6:	f3 cf       	rjmp	.-26     	; 0x16be <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    16de:	cf 93       	push	r28
    16e0:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    16e2:	68 2f       	mov	r22, r24
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	27 de       	rcall	.-946    	; 0x1336 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    16e8:	68 2f       	mov	r22, r24
    16ea:	60 62       	ori	r22, 0x20	; 32
    16ec:	4c 2f       	mov	r20, r28
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	06 de       	rcall	.-1012   	; 0x12fe <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    16f2:	6c 2f       	mov	r22, r28
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	1f de       	rcall	.-962    	; 0x1336 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    16f8:	68 2f       	mov	r22, r24
    16fa:	60 68       	ori	r22, 0x80	; 128
    16fc:	4c 2f       	mov	r20, r28
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	fe dd       	rcall	.-1028   	; 0x12fe <mfrc522_write>
}
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <mfrc522_request>:


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	00 d0       	rcall	.+0      	; 0x1716 <mfrc522_request+0x10>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <mfrc522_request+0x12>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	18 2f       	mov	r17, r24
    171e:	6b 01       	movw	r12, r22
    1720:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    1722:	67 e0       	ldi	r22, 0x07	; 7
    1724:	8d e0       	ldi	r24, 0x0D	; 13
    1726:	eb dd       	rcall	.-1066   	; 0x12fe <mfrc522_write>
	
	tag_type[0] = req_mode;
    1728:	f6 01       	movw	r30, r12
    172a:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    172c:	8e 01       	movw	r16, r28
    172e:	0f 5f       	subi	r16, 0xFF	; 255
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	96 01       	movw	r18, r12
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	b6 01       	movw	r22, r12
    1738:	8c e0       	ldi	r24, 0x0C	; 12
    173a:	16 de       	rcall	.-980    	; 0x1368 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	59 f4       	brne	.+22     	; 0x1756 <mfrc522_request+0x50>
    1740:	49 81       	ldd	r20, Y+1	; 0x01
    1742:	5a 81       	ldd	r21, Y+2	; 0x02
    1744:	6b 81       	ldd	r22, Y+3	; 0x03
    1746:	7c 81       	ldd	r23, Y+4	; 0x04
    1748:	40 31       	cpi	r20, 0x10	; 16
    174a:	51 05       	cpc	r21, r1
    174c:	61 05       	cpc	r22, r1
    174e:	71 05       	cpc	r23, r1
    1750:	19 f0       	breq	.+6      	; 0x1758 <mfrc522_request+0x52>
	{
		status = ERROR;
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <mfrc522_request+0x52>
    1756:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	08 95       	ret

00001770 <mfrc522_get_card_serial>:



unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	00 d0       	rcall	.+0      	; 0x1780 <mfrc522_get_card_serial+0x10>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <mfrc522_get_card_serial+0x12>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	6c 01       	movw	r12, r24
    1788:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    178a:	46 2f       	mov	r20, r22
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	8d e0       	ldi	r24, 0x0D	; 13
    1790:	b6 dd       	rcall	.-1172   	; 0x12fe <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    1792:	83 e9       	ldi	r24, 0x93	; 147
    1794:	f6 01       	movw	r30, r12
    1796:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    179c:	8e 01       	movw	r16, r28
    179e:	0f 5f       	subi	r16, 0xFF	; 255
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	96 01       	movw	r18, r12
    17a4:	42 e0       	ldi	r20, 0x02	; 2
    17a6:	b6 01       	movw	r22, r12
    17a8:	8c e0       	ldi	r24, 0x0C	; 12
    17aa:	de dd       	rcall	.-1092   	; 0x1368 <mfrc522_to_card>

	if (status == CARD_FOUND)
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	71 f4       	brne	.+28     	; 0x17cc <mfrc522_get_card_serial+0x5c>
    17b0:	f6 01       	movw	r30, r12
    17b2:	a6 01       	movw	r20, r12
    17b4:	4c 5f       	subi	r20, 0xFC	; 252
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    17ba:	21 91       	ld	r18, Z+
    17bc:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    17be:	4e 17       	cp	r20, r30
    17c0:	5f 07       	cpc	r21, r31
    17c2:	d9 f7       	brne	.-10     	; 0x17ba <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    17c4:	f6 01       	movw	r30, r12
    17c6:	24 81       	ldd	r18, Z+4	; 0x04
    17c8:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    17ca:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	08 95       	ret

000017e4 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <spi_init+0x6>
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	21 f1       	breq	.+72     	; 0x183e <spi_init+0x5a>
    17f6:	81 11       	cpse	r24, r1
    17f8:	32 c0       	rjmp	.+100    	; 0x185e <spi_init+0x7a>
    17fa:	29 c0       	rjmp	.+82     	; 0x184e <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    17fc:	9c 91       	ld	r25, X
    17fe:	12 96       	adiw	r26, 0x02	; 2
    1800:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1802:	e2 17       	cp	r30, r18
    1804:	f3 07       	cpc	r31, r19
    1806:	d1 f7       	brne	.-12     	; 0x17fc <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	92 30       	cpi	r25, 0x02	; 2
    180c:	20 f1       	brcs	.+72     	; 0x1856 <spi_init+0x72>
    180e:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1810:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	71 f4       	brne	.+28     	; 0x1832 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1816:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1818:	87 b3       	in	r24, 0x17	; 23
    181a:	87 60       	ori	r24, 0x07	; 7
    181c:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	89 2b       	or	r24, r25
    1824:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1826:	2e b1       	in	r18, 0x0e	; 14
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	92 2b       	or	r25, r18
    182c:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    182e:	8d b9       	out	0x0d, r24	; 13
    1830:	16 c0       	rjmp	.+44     	; 0x185e <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1832:	81 11       	cpse	r24, r1
    1834:	14 c0       	rjmp	.+40     	; 0x185e <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1836:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1838:	80 e4       	ldi	r24, 0x40	; 64
    183a:	8d b9       	out	0x0d, r24	; 13
    183c:	10 c0       	rjmp	.+32     	; 0x185e <spi_init+0x7a>
    183e:	de 01       	movw	r26, r28
    1840:	19 96       	adiw	r26, 0x09	; 9
    1842:	fe 01       	movw	r30, r28
    1844:	31 96       	adiw	r30, 0x01	; 1
    1846:	9e 01       	movw	r18, r28
    1848:	2c 5f       	subi	r18, 0xFC	; 252
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	d7 cf       	rjmp	.-82     	; 0x17fc <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	92 30       	cpi	r25, 0x02	; 2
    1852:	e8 f6       	brcc	.-70     	; 0x180e <spi_init+0x2a>
    1854:	02 c0       	rjmp	.+4      	; 0x185a <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1856:	1d b8       	out	0x0d, r1	; 13
    1858:	de cf       	rjmp	.-68     	; 0x1816 <spi_init+0x32>
    185a:	1d b8       	out	0x0d, r1	; 13
    185c:	ec cf       	rjmp	.-40     	; 0x1836 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    186a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    186c:	77 9b       	sbis	0x0e, 7	; 14
    186e:	fe cf       	rjmp	.-4      	; 0x186c <spi_master_tx+0x2>
}
    1870:	08 95       	ret

00001872 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1872:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1874:	77 9b       	sbis	0x0e, 7	; 14
    1876:	fe cf       	rjmp	.-4      	; 0x1874 <spi_master_rx+0x2>
	
	return SPDR;
    1878:	8f b1       	in	r24, 0x0f	; 15
}
    187a:	08 95       	ret

0000187c <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    187c:	bc 9a       	sbi	0x17, 4	; 23
    187e:	8c e0       	ldi	r24, 0x0C	; 12
    1880:	83 bf       	out	0x33, r24	; 51
    1882:	8a ef       	ldi	r24, 0xFA	; 250
    1884:	81 bf       	out	0x31, r24	; 49
    1886:	87 b7       	in	r24, 0x37	; 55
    1888:	82 60       	ori	r24, 0x02	; 2
    188a:	87 bf       	out	0x37, r24	; 55
    188c:	08 95       	ret

0000188e <timer3_init>:
    188e:	13 9a       	sbi	0x02, 3	; 2
    1890:	80 e4       	ldi	r24, 0x40	; 64
    1892:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1896:	8a e1       	ldi	r24, 0x1A	; 26
    1898:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    189c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    18a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    18a4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    18a8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    18ac:	08 95       	ret

000018ae <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    18ae:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    18b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    18b6:	08 95       	ret

000018b8 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	ec 01       	movw	r28, r24
    18be:	9b 01       	movw	r18, r22
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	60 e4       	ldi	r22, 0x40	; 64
    18c6:	72 e4       	ldi	r23, 0x42	; 66
    18c8:	8f e0       	ldi	r24, 0x0F	; 15
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	4f d1       	rcall	.+670    	; 0x1b6c <__udivmodsi4>
    18ce:	21 50       	subi	r18, 0x01	; 1
    18d0:	31 09       	sbc	r19, r1
    18d2:	20 97       	sbiw	r28, 0x00	; 0
    18d4:	59 f4       	brne	.+22     	; 0x18ec <uart_init+0x34>
    18d6:	10 98       	cbi	0x02, 0	; 2
    18d8:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    18dc:	29 b9       	out	0x09, r18	; 9
    18de:	88 e1       	ldi	r24, 0x18	; 24
    18e0:	8a b9       	out	0x0a, r24	; 10
    18e2:	57 9a       	sbi	0x0a, 7	; 10
    18e4:	86 e0       	ldi	r24, 0x06	; 6
    18e6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    18ea:	10 c0       	rjmp	.+32     	; 0x190c <uart_init+0x54>
    18ec:	21 97       	sbiw	r28, 0x01	; 1
    18ee:	71 f4       	brne	.+28     	; 0x190c <uart_init+0x54>
    18f0:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    18f4:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    18f8:	ea e9       	ldi	r30, 0x9A	; 154
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	88 e1       	ldi	r24, 0x18	; 24
    18fe:	80 83       	st	Z, r24
    1900:	80 81       	ld	r24, Z
    1902:	80 68       	ori	r24, 0x80	; 128
    1904:	80 83       	st	Z, r24
    1906:	86 e0       	ldi	r24, 0x06	; 6
    1908:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <uart0_tx_char>:
    1912:	5d 9b       	sbis	0x0b, 5	; 11
    1914:	fe cf       	rjmp	.-4      	; 0x1912 <uart0_tx_char>
    1916:	8c b9       	out	0x0c, r24	; 12
    1918:	08 95       	ret

0000191a <uart0_tx_string>:
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	ec 01       	movw	r28, r24
    1920:	88 81       	ld	r24, Y
    1922:	88 23       	and	r24, r24
    1924:	29 f0       	breq	.+10     	; 0x1930 <uart0_tx_string+0x16>
    1926:	21 96       	adiw	r28, 0x01	; 1
    1928:	f4 df       	rcall	.-24     	; 0x1912 <uart0_tx_char>
    192a:	89 91       	ld	r24, Y+
    192c:	81 11       	cpse	r24, r1
    192e:	fc cf       	rjmp	.-8      	; 0x1928 <uart0_tx_string+0xe>
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <uart1_tx_char>:
    1936:	eb e9       	ldi	r30, 0x9B	; 155
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	90 81       	ld	r25, Z
    193c:	95 ff       	sbrs	r25, 5
    193e:	fd cf       	rjmp	.-6      	; 0x193a <uart1_tx_char+0x4>
    1940:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1944:	08 95       	ret

00001946 <uart1_tx_string>:
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ec 01       	movw	r28, r24
    194c:	88 81       	ld	r24, Y
    194e:	88 23       	and	r24, r24
    1950:	29 f0       	breq	.+10     	; 0x195c <uart1_tx_string+0x16>
    1952:	21 96       	adiw	r28, 0x01	; 1
    1954:	f0 df       	rcall	.-32     	; 0x1936 <uart1_tx_char>
    1956:	89 91       	ld	r24, Y+
    1958:	81 11       	cpse	r24, r1
    195a:	fc cf       	rjmp	.-8      	; 0x1954 <uart1_tx_string+0xe>
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <IntToString>:

char * IntToString(int num)
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	64 97       	sbiw	r28, 0x14	; 20
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%d ",num); //고유 자릿값
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	88 e0       	ldi	r24, 0x08	; 8
    1980:	94 e0       	ldi	r25, 0x04	; 4
    1982:	9f 93       	push	r25
    1984:	8f 93       	push	r24
    1986:	8e 01       	movw	r16, r28
    1988:	0f 5f       	subi	r16, 0xFF	; 255
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	1f 93       	push	r17
    198e:	0f 93       	push	r16
    1990:	4f d1       	rcall	.+670    	; 0x1c30 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1992:	b8 01       	movw	r22, r16
    1994:	82 e5       	ldi	r24, 0x52	; 82
    1996:	95 e0       	ldi	r25, 0x05	; 5
    1998:	3c d1       	rcall	.+632    	; 0x1c12 <strcpy>
	
	return (buff.itos_buff);
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
}
    19a6:	82 e5       	ldi	r24, 0x52	; 82
    19a8:	95 e0       	ldi	r25, 0x05	; 5
    19aa:	64 96       	adiw	r28, 0x14	; 20
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <HexToString>:
 
 char * HexToString(char num)
 {
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	64 97       	sbiw	r28, 0x14	; 20
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    19d8:	1f 92       	push	r1
    19da:	8f 93       	push	r24
    19dc:	8c e0       	ldi	r24, 0x0C	; 12
    19de:	94 e0       	ldi	r25, 0x04	; 4
    19e0:	9f 93       	push	r25
    19e2:	8f 93       	push	r24
    19e4:	8e 01       	movw	r16, r28
    19e6:	0f 5f       	subi	r16, 0xFF	; 255
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	1f 93       	push	r17
    19ec:	0f 93       	push	r16
    19ee:	20 d1       	rcall	.+576    	; 0x1c30 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    19f0:	b8 01       	movw	r22, r16
    19f2:	82 e5       	ldi	r24, 0x52	; 82
    19f4:	95 e0       	ldi	r25, 0x05	; 5
    19f6:	0d d1       	rcall	.+538    	; 0x1c12 <strcpy>
	 
	 return (buff.itos_buff);
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
 }
    1a04:	82 e5       	ldi	r24, 0x52	; 82
    1a06:	95 e0       	ldi	r25, 0x05	; 5
    1a08:	64 96       	adiw	r28, 0x14	; 20
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	c0 54       	subi	r28, 0x40	; 64
    1a34:	d1 09       	sbc	r29, r1
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	6b 01       	movw	r12, r22
    1a42:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1a44:	20 e4       	ldi	r18, 0x40	; 64
    1a46:	e2 e9       	ldi	r30, 0x92	; 146
    1a48:	f5 e0       	ldi	r31, 0x05	; 5
    1a4a:	df 01       	movw	r26, r30
    1a4c:	1d 92       	st	X+, r1
    1a4e:	2a 95       	dec	r18
    1a50:	e9 f7       	brne	.-6      	; 0x1a4c <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1a52:	bc 01       	movw	r22, r24
    1a54:	8e 01       	movw	r16, r28
    1a56:	0f 5f       	subi	r16, 0xFF	; 255
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	da d0       	rcall	.+436    	; 0x1c12 <strcpy>
	strcat(buf,ssid);
    1a5e:	b6 01       	movw	r22, r12
    1a60:	c8 01       	movw	r24, r16
    1a62:	c3 d0       	rcall	.+390    	; 0x1bea <strcat>
	strcat(buf,"\",\"");
    1a64:	f8 01       	movw	r30, r16
    1a66:	01 90       	ld	r0, Z+
    1a68:	00 20       	and	r0, r0
    1a6a:	e9 f7       	brne	.-6      	; 0x1a66 <connect_to_AP+0x48>
    1a6c:	31 97       	sbiw	r30, 0x01	; 1
    1a6e:	82 e2       	ldi	r24, 0x22	; 34
    1a70:	9c e2       	ldi	r25, 0x2C	; 44
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	82 e2       	ldi	r24, 0x22	; 34
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	93 83       	std	Z+3, r25	; 0x03
    1a7c:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1a7e:	b7 01       	movw	r22, r14
    1a80:	c8 01       	movw	r24, r16
    1a82:	b3 d0       	rcall	.+358    	; 0x1bea <strcat>
	strcat(buf,"\"\r\n");
    1a84:	f8 01       	movw	r30, r16
    1a86:	01 90       	ld	r0, Z+
    1a88:	00 20       	and	r0, r0
    1a8a:	e9 f7       	brne	.-6      	; 0x1a86 <connect_to_AP+0x68>
    1a8c:	31 97       	sbiw	r30, 0x01	; 1
    1a8e:	82 e2       	ldi	r24, 0x22	; 34
    1a90:	9d e0       	ldi	r25, 0x0D	; 13
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	8a e0       	ldi	r24, 0x0A	; 10
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	93 83       	std	Z+3, r25	; 0x03
    1a9c:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1a9e:	b8 01       	movw	r22, r16
    1aa0:	82 e9       	ldi	r24, 0x92	; 146
    1aa2:	95 e0       	ldi	r25, 0x05	; 5
    1aa4:	b6 d0       	rcall	.+364    	; 0x1c12 <strcpy>
	return buff.esp_buff;
	
}
    1aa6:	82 e9       	ldi	r24, 0x92	; 146
    1aa8:	95 e0       	ldi	r25, 0x05	; 5
    1aaa:	c0 5c       	subi	r28, 0xC0	; 192
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	08 95       	ret

00001aca <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	c0 54       	subi	r28, 0x40	; 64
    1adc:	d1 09       	sbc	r29, r1
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	9c 01       	movw	r18, r24
    1aea:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1aec:	80 e4       	ldi	r24, 0x40	; 64
    1aee:	e2 e9       	ldi	r30, 0x92	; 146
    1af0:	f5 e0       	ldi	r31, 0x05	; 5
    1af2:	df 01       	movw	r26, r30
    1af4:	1d 92       	st	X+, r1
    1af6:	8a 95       	dec	r24
    1af8:	e9 f7       	brne	.-6      	; 0x1af4 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1afa:	94 e1       	ldi	r25, 0x14	; 20
    1afc:	e1 e1       	ldi	r30, 0x11	; 17
    1afe:	f4 e0       	ldi	r31, 0x04	; 4
    1b00:	8e 01       	movw	r16, r28
    1b02:	0f 5f       	subi	r16, 0xFF	; 255
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	d8 01       	movw	r26, r16
    1b08:	01 90       	ld	r0, Z+
    1b0a:	0d 92       	st	X+, r0
    1b0c:	9a 95       	dec	r25
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <TCP_connect+0x3e>
	strcat(buf,ip);
    1b10:	b9 01       	movw	r22, r18
    1b12:	c8 01       	movw	r24, r16
    1b14:	6a d0       	rcall	.+212    	; 0x1bea <strcat>
	strcat(buf,"\",");
    1b16:	f8 01       	movw	r30, r16
    1b18:	01 90       	ld	r0, Z+
    1b1a:	00 20       	and	r0, r0
    1b1c:	e9 f7       	brne	.-6      	; 0x1b18 <TCP_connect+0x4e>
    1b1e:	31 97       	sbiw	r30, 0x01	; 1
    1b20:	82 e2       	ldi	r24, 0x22	; 34
    1b22:	9c e2       	ldi	r25, 0x2C	; 44
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1b2a:	b7 01       	movw	r22, r14
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	5d d0       	rcall	.+186    	; 0x1bea <strcat>
	strcat(buf,"\r\n");
    1b30:	f8 01       	movw	r30, r16
    1b32:	01 90       	ld	r0, Z+
    1b34:	00 20       	and	r0, r0
    1b36:	e9 f7       	brne	.-6      	; 0x1b32 <TCP_connect+0x68>
    1b38:	31 97       	sbiw	r30, 0x01	; 1
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	9a e0       	ldi	r25, 0x0A	; 10
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
    1b42:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1b44:	b8 01       	movw	r22, r16
    1b46:	82 e9       	ldi	r24, 0x92	; 146
    1b48:	95 e0       	ldi	r25, 0x05	; 5
    1b4a:	63 d0       	rcall	.+198    	; 0x1c12 <strcpy>
	
	return buff.esp_buff;
	
}
    1b4c:	82 e9       	ldi	r24, 0x92	; 146
    1b4e:	95 e0       	ldi	r25, 0x05	; 5
    1b50:	c0 5c       	subi	r28, 0xC0	; 192
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	08 95       	ret

00001b6c <__udivmodsi4>:
    1b6c:	a1 e2       	ldi	r26, 0x21	; 33
    1b6e:	1a 2e       	mov	r1, r26
    1b70:	aa 1b       	sub	r26, r26
    1b72:	bb 1b       	sub	r27, r27
    1b74:	fd 01       	movw	r30, r26
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <__udivmodsi4_ep>

00001b78 <__udivmodsi4_loop>:
    1b78:	aa 1f       	adc	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	ee 1f       	adc	r30, r30
    1b7e:	ff 1f       	adc	r31, r31
    1b80:	a2 17       	cp	r26, r18
    1b82:	b3 07       	cpc	r27, r19
    1b84:	e4 07       	cpc	r30, r20
    1b86:	f5 07       	cpc	r31, r21
    1b88:	20 f0       	brcs	.+8      	; 0x1b92 <__udivmodsi4_ep>
    1b8a:	a2 1b       	sub	r26, r18
    1b8c:	b3 0b       	sbc	r27, r19
    1b8e:	e4 0b       	sbc	r30, r20
    1b90:	f5 0b       	sbc	r31, r21

00001b92 <__udivmodsi4_ep>:
    1b92:	66 1f       	adc	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	88 1f       	adc	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	1a 94       	dec	r1
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <__udivmodsi4_loop>
    1b9e:	60 95       	com	r22
    1ba0:	70 95       	com	r23
    1ba2:	80 95       	com	r24
    1ba4:	90 95       	com	r25
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	bd 01       	movw	r22, r26
    1bac:	cf 01       	movw	r24, r30
    1bae:	08 95       	ret

00001bb0 <atoi>:
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	88 27       	eor	r24, r24
    1bb4:	99 27       	eor	r25, r25
    1bb6:	e8 94       	clt
    1bb8:	21 91       	ld	r18, Z+
    1bba:	20 32       	cpi	r18, 0x20	; 32
    1bbc:	e9 f3       	breq	.-6      	; 0x1bb8 <atoi+0x8>
    1bbe:	29 30       	cpi	r18, 0x09	; 9
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <atoi+0x16>
    1bc2:	2e 30       	cpi	r18, 0x0E	; 14
    1bc4:	c8 f3       	brcs	.-14     	; 0x1bb8 <atoi+0x8>
    1bc6:	2b 32       	cpi	r18, 0x2B	; 43
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <atoi+0x28>
    1bca:	2d 32       	cpi	r18, 0x2D	; 45
    1bcc:	31 f4       	brne	.+12     	; 0x1bda <atoi+0x2a>
    1bce:	68 94       	set
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <atoi+0x28>
    1bd2:	26 d0       	rcall	.+76     	; 0x1c20 <__mulhi_const_10>
    1bd4:	82 0f       	add	r24, r18
    1bd6:	91 1d       	adc	r25, r1
    1bd8:	21 91       	ld	r18, Z+
    1bda:	20 53       	subi	r18, 0x30	; 48
    1bdc:	2a 30       	cpi	r18, 0x0A	; 10
    1bde:	c8 f3       	brcs	.-14     	; 0x1bd2 <atoi+0x22>
    1be0:	1e f4       	brtc	.+6      	; 0x1be8 <atoi+0x38>
    1be2:	90 95       	com	r25
    1be4:	81 95       	neg	r24
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	08 95       	ret

00001bea <strcat>:
    1bea:	fb 01       	movw	r30, r22
    1bec:	dc 01       	movw	r26, r24
    1bee:	0d 90       	ld	r0, X+
    1bf0:	00 20       	and	r0, r0
    1bf2:	e9 f7       	brne	.-6      	; 0x1bee <strcat+0x4>
    1bf4:	11 97       	sbiw	r26, 0x01	; 1
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	0d 92       	st	X+, r0
    1bfa:	00 20       	and	r0, r0
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <strcat+0xc>
    1bfe:	08 95       	ret

00001c00 <strcmp>:
    1c00:	fb 01       	movw	r30, r22
    1c02:	dc 01       	movw	r26, r24
    1c04:	8d 91       	ld	r24, X+
    1c06:	01 90       	ld	r0, Z+
    1c08:	80 19       	sub	r24, r0
    1c0a:	01 10       	cpse	r0, r1
    1c0c:	d9 f3       	breq	.-10     	; 0x1c04 <strcmp+0x4>
    1c0e:	99 0b       	sbc	r25, r25
    1c10:	08 95       	ret

00001c12 <strcpy>:
    1c12:	fb 01       	movw	r30, r22
    1c14:	dc 01       	movw	r26, r24
    1c16:	01 90       	ld	r0, Z+
    1c18:	0d 92       	st	X+, r0
    1c1a:	00 20       	and	r0, r0
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <strcpy+0x4>
    1c1e:	08 95       	ret

00001c20 <__mulhi_const_10>:
    1c20:	7a e0       	ldi	r23, 0x0A	; 10
    1c22:	97 9f       	mul	r25, r23
    1c24:	90 2d       	mov	r25, r0
    1c26:	87 9f       	mul	r24, r23
    1c28:	80 2d       	mov	r24, r0
    1c2a:	91 0d       	add	r25, r1
    1c2c:	11 24       	eor	r1, r1
    1c2e:	08 95       	ret

00001c30 <sprintf>:
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	0d 89       	ldd	r16, Y+21	; 0x15
    1c4a:	1e 89       	ldd	r17, Y+22	; 0x16
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	8c 83       	std	Y+4, r24	; 0x04
    1c50:	1a 83       	std	Y+2, r17	; 0x02
    1c52:	09 83       	std	Y+1, r16	; 0x01
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	9f e7       	ldi	r25, 0x7F	; 127
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	ae 01       	movw	r20, r28
    1c5e:	47 5e       	subi	r20, 0xE7	; 231
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	6f 89       	ldd	r22, Y+23	; 0x17
    1c64:	78 8d       	ldd	r23, Y+24	; 0x18
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	10 d0       	rcall	.+32     	; 0x1c8c <vfprintf>
    1c6c:	ef 81       	ldd	r30, Y+7	; 0x07
    1c6e:	f8 85       	ldd	r31, Y+8	; 0x08
    1c70:	e0 0f       	add	r30, r16
    1c72:	f1 1f       	adc	r31, r17
    1c74:	10 82       	st	Z, r1
    1c76:	2e 96       	adiw	r28, 0x0e	; 14
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <vfprintf>:
    1c8c:	2f 92       	push	r2
    1c8e:	3f 92       	push	r3
    1c90:	4f 92       	push	r4
    1c92:	5f 92       	push	r5
    1c94:	6f 92       	push	r6
    1c96:	7f 92       	push	r7
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	2b 97       	sbiw	r28, 0x0b	; 11
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	6c 01       	movw	r12, r24
    1cc2:	7b 01       	movw	r14, r22
    1cc4:	8a 01       	movw	r16, r20
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	17 82       	std	Z+7, r1	; 0x07
    1cca:	16 82       	std	Z+6, r1	; 0x06
    1ccc:	83 81       	ldd	r24, Z+3	; 0x03
    1cce:	81 ff       	sbrs	r24, 1
    1cd0:	bf c1       	rjmp	.+894    	; 0x2050 <vfprintf+0x3c4>
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	3c 01       	movw	r6, r24
    1cd8:	f6 01       	movw	r30, r12
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	f7 01       	movw	r30, r14
    1cde:	93 fd       	sbrc	r25, 3
    1ce0:	85 91       	lpm	r24, Z+
    1ce2:	93 ff       	sbrs	r25, 3
    1ce4:	81 91       	ld	r24, Z+
    1ce6:	7f 01       	movw	r14, r30
    1ce8:	88 23       	and	r24, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <vfprintf+0x62>
    1cec:	ad c1       	rjmp	.+858    	; 0x2048 <vfprintf+0x3bc>
    1cee:	85 32       	cpi	r24, 0x25	; 37
    1cf0:	39 f4       	brne	.+14     	; 0x1d00 <vfprintf+0x74>
    1cf2:	93 fd       	sbrc	r25, 3
    1cf4:	85 91       	lpm	r24, Z+
    1cf6:	93 ff       	sbrs	r25, 3
    1cf8:	81 91       	ld	r24, Z+
    1cfa:	7f 01       	movw	r14, r30
    1cfc:	85 32       	cpi	r24, 0x25	; 37
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <vfprintf+0x7c>
    1d00:	b6 01       	movw	r22, r12
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	d6 d1       	rcall	.+940    	; 0x20b2 <fputc>
    1d06:	e8 cf       	rjmp	.-48     	; 0x1cd8 <vfprintf+0x4c>
    1d08:	91 2c       	mov	r9, r1
    1d0a:	21 2c       	mov	r2, r1
    1d0c:	31 2c       	mov	r3, r1
    1d0e:	ff e1       	ldi	r31, 0x1F	; 31
    1d10:	f3 15       	cp	r31, r3
    1d12:	d8 f0       	brcs	.+54     	; 0x1d4a <vfprintf+0xbe>
    1d14:	8b 32       	cpi	r24, 0x2B	; 43
    1d16:	79 f0       	breq	.+30     	; 0x1d36 <vfprintf+0xaa>
    1d18:	38 f4       	brcc	.+14     	; 0x1d28 <vfprintf+0x9c>
    1d1a:	80 32       	cpi	r24, 0x20	; 32
    1d1c:	79 f0       	breq	.+30     	; 0x1d3c <vfprintf+0xb0>
    1d1e:	83 32       	cpi	r24, 0x23	; 35
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <vfprintf+0xbe>
    1d22:	23 2d       	mov	r18, r3
    1d24:	20 61       	ori	r18, 0x10	; 16
    1d26:	1d c0       	rjmp	.+58     	; 0x1d62 <vfprintf+0xd6>
    1d28:	8d 32       	cpi	r24, 0x2D	; 45
    1d2a:	61 f0       	breq	.+24     	; 0x1d44 <vfprintf+0xb8>
    1d2c:	80 33       	cpi	r24, 0x30	; 48
    1d2e:	69 f4       	brne	.+26     	; 0x1d4a <vfprintf+0xbe>
    1d30:	23 2d       	mov	r18, r3
    1d32:	21 60       	ori	r18, 0x01	; 1
    1d34:	16 c0       	rjmp	.+44     	; 0x1d62 <vfprintf+0xd6>
    1d36:	83 2d       	mov	r24, r3
    1d38:	82 60       	ori	r24, 0x02	; 2
    1d3a:	38 2e       	mov	r3, r24
    1d3c:	e3 2d       	mov	r30, r3
    1d3e:	e4 60       	ori	r30, 0x04	; 4
    1d40:	3e 2e       	mov	r3, r30
    1d42:	2a c0       	rjmp	.+84     	; 0x1d98 <vfprintf+0x10c>
    1d44:	f3 2d       	mov	r31, r3
    1d46:	f8 60       	ori	r31, 0x08	; 8
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <vfprintf+0xf8>
    1d4a:	37 fc       	sbrc	r3, 7
    1d4c:	2d c0       	rjmp	.+90     	; 0x1da8 <vfprintf+0x11c>
    1d4e:	20 ed       	ldi	r18, 0xD0	; 208
    1d50:	28 0f       	add	r18, r24
    1d52:	2a 30       	cpi	r18, 0x0A	; 10
    1d54:	40 f0       	brcs	.+16     	; 0x1d66 <vfprintf+0xda>
    1d56:	8e 32       	cpi	r24, 0x2E	; 46
    1d58:	b9 f4       	brne	.+46     	; 0x1d88 <vfprintf+0xfc>
    1d5a:	36 fc       	sbrc	r3, 6
    1d5c:	75 c1       	rjmp	.+746    	; 0x2048 <vfprintf+0x3bc>
    1d5e:	23 2d       	mov	r18, r3
    1d60:	20 64       	ori	r18, 0x40	; 64
    1d62:	32 2e       	mov	r3, r18
    1d64:	19 c0       	rjmp	.+50     	; 0x1d98 <vfprintf+0x10c>
    1d66:	36 fe       	sbrs	r3, 6
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <vfprintf+0xea>
    1d6a:	8a e0       	ldi	r24, 0x0A	; 10
    1d6c:	98 9e       	mul	r9, r24
    1d6e:	20 0d       	add	r18, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	92 2e       	mov	r9, r18
    1d74:	11 c0       	rjmp	.+34     	; 0x1d98 <vfprintf+0x10c>
    1d76:	ea e0       	ldi	r30, 0x0A	; 10
    1d78:	2e 9e       	mul	r2, r30
    1d7a:	20 0d       	add	r18, r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	22 2e       	mov	r2, r18
    1d80:	f3 2d       	mov	r31, r3
    1d82:	f0 62       	ori	r31, 0x20	; 32
    1d84:	3f 2e       	mov	r3, r31
    1d86:	08 c0       	rjmp	.+16     	; 0x1d98 <vfprintf+0x10c>
    1d88:	8c 36       	cpi	r24, 0x6C	; 108
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <vfprintf+0x108>
    1d8c:	83 2d       	mov	r24, r3
    1d8e:	80 68       	ori	r24, 0x80	; 128
    1d90:	38 2e       	mov	r3, r24
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <vfprintf+0x10c>
    1d94:	88 36       	cpi	r24, 0x68	; 104
    1d96:	41 f4       	brne	.+16     	; 0x1da8 <vfprintf+0x11c>
    1d98:	f7 01       	movw	r30, r14
    1d9a:	93 fd       	sbrc	r25, 3
    1d9c:	85 91       	lpm	r24, Z+
    1d9e:	93 ff       	sbrs	r25, 3
    1da0:	81 91       	ld	r24, Z+
    1da2:	7f 01       	movw	r14, r30
    1da4:	81 11       	cpse	r24, r1
    1da6:	b3 cf       	rjmp	.-154    	; 0x1d0e <vfprintf+0x82>
    1da8:	98 2f       	mov	r25, r24
    1daa:	9f 7d       	andi	r25, 0xDF	; 223
    1dac:	95 54       	subi	r25, 0x45	; 69
    1dae:	93 30       	cpi	r25, 0x03	; 3
    1db0:	28 f4       	brcc	.+10     	; 0x1dbc <vfprintf+0x130>
    1db2:	0c 5f       	subi	r16, 0xFC	; 252
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	9f e3       	ldi	r25, 0x3F	; 63
    1db8:	99 83       	std	Y+1, r25	; 0x01
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <vfprintf+0x14a>
    1dbc:	83 36       	cpi	r24, 0x63	; 99
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <vfprintf+0x140>
    1dc0:	83 37       	cpi	r24, 0x73	; 115
    1dc2:	71 f0       	breq	.+28     	; 0x1de0 <vfprintf+0x154>
    1dc4:	83 35       	cpi	r24, 0x53	; 83
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <vfprintf+0x13e>
    1dc8:	55 c0       	rjmp	.+170    	; 0x1e74 <vfprintf+0x1e8>
    1dca:	20 c0       	rjmp	.+64     	; 0x1e0c <vfprintf+0x180>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	80 81       	ld	r24, Z
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	0e 5f       	subi	r16, 0xFE	; 254
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	88 24       	eor	r8, r8
    1dd8:	83 94       	inc	r8
    1dda:	91 2c       	mov	r9, r1
    1ddc:	53 01       	movw	r10, r6
    1dde:	12 c0       	rjmp	.+36     	; 0x1e04 <vfprintf+0x178>
    1de0:	28 01       	movw	r4, r16
    1de2:	f2 e0       	ldi	r31, 0x02	; 2
    1de4:	4f 0e       	add	r4, r31
    1de6:	51 1c       	adc	r5, r1
    1de8:	f8 01       	movw	r30, r16
    1dea:	a0 80       	ld	r10, Z
    1dec:	b1 80       	ldd	r11, Z+1	; 0x01
    1dee:	36 fe       	sbrs	r3, 6
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <vfprintf+0x16c>
    1df2:	69 2d       	mov	r22, r9
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <vfprintf+0x170>
    1df8:	6f ef       	ldi	r22, 0xFF	; 255
    1dfa:	7f ef       	ldi	r23, 0xFF	; 255
    1dfc:	c5 01       	movw	r24, r10
    1dfe:	4e d1       	rcall	.+668    	; 0x209c <strnlen>
    1e00:	4c 01       	movw	r8, r24
    1e02:	82 01       	movw	r16, r4
    1e04:	f3 2d       	mov	r31, r3
    1e06:	ff 77       	andi	r31, 0x7F	; 127
    1e08:	3f 2e       	mov	r3, r31
    1e0a:	15 c0       	rjmp	.+42     	; 0x1e36 <vfprintf+0x1aa>
    1e0c:	28 01       	movw	r4, r16
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	42 0e       	add	r4, r18
    1e12:	51 1c       	adc	r5, r1
    1e14:	f8 01       	movw	r30, r16
    1e16:	a0 80       	ld	r10, Z
    1e18:	b1 80       	ldd	r11, Z+1	; 0x01
    1e1a:	36 fe       	sbrs	r3, 6
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <vfprintf+0x198>
    1e1e:	69 2d       	mov	r22, r9
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <vfprintf+0x19c>
    1e24:	6f ef       	ldi	r22, 0xFF	; 255
    1e26:	7f ef       	ldi	r23, 0xFF	; 255
    1e28:	c5 01       	movw	r24, r10
    1e2a:	2d d1       	rcall	.+602    	; 0x2086 <strnlen_P>
    1e2c:	4c 01       	movw	r8, r24
    1e2e:	f3 2d       	mov	r31, r3
    1e30:	f0 68       	ori	r31, 0x80	; 128
    1e32:	3f 2e       	mov	r3, r31
    1e34:	82 01       	movw	r16, r4
    1e36:	33 fc       	sbrc	r3, 3
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <vfprintf+0x1e0>
    1e3a:	82 2d       	mov	r24, r2
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	88 16       	cp	r8, r24
    1e40:	99 06       	cpc	r9, r25
    1e42:	a0 f4       	brcc	.+40     	; 0x1e6c <vfprintf+0x1e0>
    1e44:	b6 01       	movw	r22, r12
    1e46:	80 e2       	ldi	r24, 0x20	; 32
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	33 d1       	rcall	.+614    	; 0x20b2 <fputc>
    1e4c:	2a 94       	dec	r2
    1e4e:	f5 cf       	rjmp	.-22     	; 0x1e3a <vfprintf+0x1ae>
    1e50:	f5 01       	movw	r30, r10
    1e52:	37 fc       	sbrc	r3, 7
    1e54:	85 91       	lpm	r24, Z+
    1e56:	37 fe       	sbrs	r3, 7
    1e58:	81 91       	ld	r24, Z+
    1e5a:	5f 01       	movw	r10, r30
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	28 d1       	rcall	.+592    	; 0x20b2 <fputc>
    1e62:	21 10       	cpse	r2, r1
    1e64:	2a 94       	dec	r2
    1e66:	21 e0       	ldi	r18, 0x01	; 1
    1e68:	82 1a       	sub	r8, r18
    1e6a:	91 08       	sbc	r9, r1
    1e6c:	81 14       	cp	r8, r1
    1e6e:	91 04       	cpc	r9, r1
    1e70:	79 f7       	brne	.-34     	; 0x1e50 <vfprintf+0x1c4>
    1e72:	e1 c0       	rjmp	.+450    	; 0x2036 <vfprintf+0x3aa>
    1e74:	84 36       	cpi	r24, 0x64	; 100
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <vfprintf+0x1f0>
    1e78:	89 36       	cpi	r24, 0x69	; 105
    1e7a:	39 f5       	brne	.+78     	; 0x1eca <vfprintf+0x23e>
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	37 fe       	sbrs	r3, 7
    1e80:	07 c0       	rjmp	.+14     	; 0x1e90 <vfprintf+0x204>
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	0c 5f       	subi	r16, 0xFC	; 252
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	08 c0       	rjmp	.+16     	; 0x1ea0 <vfprintf+0x214>
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	07 2e       	mov	r0, r23
    1e96:	00 0c       	add	r0, r0
    1e98:	88 0b       	sbc	r24, r24
    1e9a:	99 0b       	sbc	r25, r25
    1e9c:	0e 5f       	subi	r16, 0xFE	; 254
    1e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea0:	f3 2d       	mov	r31, r3
    1ea2:	ff 76       	andi	r31, 0x6F	; 111
    1ea4:	3f 2e       	mov	r3, r31
    1ea6:	97 ff       	sbrs	r25, 7
    1ea8:	09 c0       	rjmp	.+18     	; 0x1ebc <vfprintf+0x230>
    1eaa:	90 95       	com	r25
    1eac:	80 95       	com	r24
    1eae:	70 95       	com	r23
    1eb0:	61 95       	neg	r22
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	f0 68       	ori	r31, 0x80	; 128
    1eba:	3f 2e       	mov	r3, r31
    1ebc:	2a e0       	ldi	r18, 0x0A	; 10
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	a3 01       	movw	r20, r6
    1ec2:	33 d1       	rcall	.+614    	; 0x212a <__ultoa_invert>
    1ec4:	88 2e       	mov	r8, r24
    1ec6:	86 18       	sub	r8, r6
    1ec8:	44 c0       	rjmp	.+136    	; 0x1f52 <vfprintf+0x2c6>
    1eca:	85 37       	cpi	r24, 0x75	; 117
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <vfprintf+0x24e>
    1ece:	23 2d       	mov	r18, r3
    1ed0:	2f 7e       	andi	r18, 0xEF	; 239
    1ed2:	b2 2e       	mov	r11, r18
    1ed4:	2a e0       	ldi	r18, 0x0A	; 10
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	25 c0       	rjmp	.+74     	; 0x1f24 <vfprintf+0x298>
    1eda:	93 2d       	mov	r25, r3
    1edc:	99 7f       	andi	r25, 0xF9	; 249
    1ede:	b9 2e       	mov	r11, r25
    1ee0:	8f 36       	cpi	r24, 0x6F	; 111
    1ee2:	c1 f0       	breq	.+48     	; 0x1f14 <vfprintf+0x288>
    1ee4:	18 f4       	brcc	.+6      	; 0x1eec <vfprintf+0x260>
    1ee6:	88 35       	cpi	r24, 0x58	; 88
    1ee8:	79 f0       	breq	.+30     	; 0x1f08 <vfprintf+0x27c>
    1eea:	ae c0       	rjmp	.+348    	; 0x2048 <vfprintf+0x3bc>
    1eec:	80 37       	cpi	r24, 0x70	; 112
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <vfprintf+0x26a>
    1ef0:	88 37       	cpi	r24, 0x78	; 120
    1ef2:	21 f0       	breq	.+8      	; 0x1efc <vfprintf+0x270>
    1ef4:	a9 c0       	rjmp	.+338    	; 0x2048 <vfprintf+0x3bc>
    1ef6:	e9 2f       	mov	r30, r25
    1ef8:	e0 61       	ori	r30, 0x10	; 16
    1efa:	be 2e       	mov	r11, r30
    1efc:	b4 fe       	sbrs	r11, 4
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <vfprintf+0x28e>
    1f00:	fb 2d       	mov	r31, r11
    1f02:	f4 60       	ori	r31, 0x04	; 4
    1f04:	bf 2e       	mov	r11, r31
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <vfprintf+0x28e>
    1f08:	34 fe       	sbrs	r3, 4
    1f0a:	0a c0       	rjmp	.+20     	; 0x1f20 <vfprintf+0x294>
    1f0c:	29 2f       	mov	r18, r25
    1f0e:	26 60       	ori	r18, 0x06	; 6
    1f10:	b2 2e       	mov	r11, r18
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0x294>
    1f14:	28 e0       	ldi	r18, 0x08	; 8
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <vfprintf+0x298>
    1f1a:	20 e1       	ldi	r18, 0x10	; 16
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <vfprintf+0x298>
    1f20:	20 e1       	ldi	r18, 0x10	; 16
    1f22:	32 e0       	ldi	r19, 0x02	; 2
    1f24:	f8 01       	movw	r30, r16
    1f26:	b7 fe       	sbrs	r11, 7
    1f28:	07 c0       	rjmp	.+14     	; 0x1f38 <vfprintf+0x2ac>
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	0c 5f       	subi	r16, 0xFC	; 252
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <vfprintf+0x2b8>
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 5f       	subi	r16, 0xFE	; 254
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	a3 01       	movw	r20, r6
    1f46:	f1 d0       	rcall	.+482    	; 0x212a <__ultoa_invert>
    1f48:	88 2e       	mov	r8, r24
    1f4a:	86 18       	sub	r8, r6
    1f4c:	fb 2d       	mov	r31, r11
    1f4e:	ff 77       	andi	r31, 0x7F	; 127
    1f50:	3f 2e       	mov	r3, r31
    1f52:	36 fe       	sbrs	r3, 6
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <vfprintf+0x2e4>
    1f56:	23 2d       	mov	r18, r3
    1f58:	2e 7f       	andi	r18, 0xFE	; 254
    1f5a:	a2 2e       	mov	r10, r18
    1f5c:	89 14       	cp	r8, r9
    1f5e:	58 f4       	brcc	.+22     	; 0x1f76 <vfprintf+0x2ea>
    1f60:	34 fe       	sbrs	r3, 4
    1f62:	0b c0       	rjmp	.+22     	; 0x1f7a <vfprintf+0x2ee>
    1f64:	32 fc       	sbrc	r3, 2
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <vfprintf+0x2ee>
    1f68:	83 2d       	mov	r24, r3
    1f6a:	8e 7e       	andi	r24, 0xEE	; 238
    1f6c:	a8 2e       	mov	r10, r24
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <vfprintf+0x2ee>
    1f70:	b8 2c       	mov	r11, r8
    1f72:	a3 2c       	mov	r10, r3
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <vfprintf+0x2f0>
    1f76:	b8 2c       	mov	r11, r8
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <vfprintf+0x2f0>
    1f7a:	b9 2c       	mov	r11, r9
    1f7c:	a4 fe       	sbrs	r10, 4
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <vfprintf+0x312>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e8 0d       	add	r30, r8
    1f84:	f1 1d       	adc	r31, r1
    1f86:	80 81       	ld	r24, Z
    1f88:	80 33       	cpi	r24, 0x30	; 48
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <vfprintf+0x308>
    1f8c:	9a 2d       	mov	r25, r10
    1f8e:	99 7e       	andi	r25, 0xE9	; 233
    1f90:	a9 2e       	mov	r10, r25
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <vfprintf+0x31a>
    1f94:	a2 fe       	sbrs	r10, 2
    1f96:	06 c0       	rjmp	.+12     	; 0x1fa4 <vfprintf+0x318>
    1f98:	b3 94       	inc	r11
    1f9a:	b3 94       	inc	r11
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <vfprintf+0x31a>
    1f9e:	8a 2d       	mov	r24, r10
    1fa0:	86 78       	andi	r24, 0x86	; 134
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <vfprintf+0x31a>
    1fa4:	b3 94       	inc	r11
    1fa6:	a3 fc       	sbrc	r10, 3
    1fa8:	10 c0       	rjmp	.+32     	; 0x1fca <vfprintf+0x33e>
    1faa:	a0 fe       	sbrs	r10, 0
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0x32e>
    1fae:	b2 14       	cp	r11, r2
    1fb0:	80 f4       	brcc	.+32     	; 0x1fd2 <vfprintf+0x346>
    1fb2:	28 0c       	add	r2, r8
    1fb4:	92 2c       	mov	r9, r2
    1fb6:	9b 18       	sub	r9, r11
    1fb8:	0d c0       	rjmp	.+26     	; 0x1fd4 <vfprintf+0x348>
    1fba:	b2 14       	cp	r11, r2
    1fbc:	58 f4       	brcc	.+22     	; 0x1fd4 <vfprintf+0x348>
    1fbe:	b6 01       	movw	r22, r12
    1fc0:	80 e2       	ldi	r24, 0x20	; 32
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	76 d0       	rcall	.+236    	; 0x20b2 <fputc>
    1fc6:	b3 94       	inc	r11
    1fc8:	f8 cf       	rjmp	.-16     	; 0x1fba <vfprintf+0x32e>
    1fca:	b2 14       	cp	r11, r2
    1fcc:	18 f4       	brcc	.+6      	; 0x1fd4 <vfprintf+0x348>
    1fce:	2b 18       	sub	r2, r11
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x34a>
    1fd2:	98 2c       	mov	r9, r8
    1fd4:	21 2c       	mov	r2, r1
    1fd6:	a4 fe       	sbrs	r10, 4
    1fd8:	0f c0       	rjmp	.+30     	; 0x1ff8 <vfprintf+0x36c>
    1fda:	b6 01       	movw	r22, r12
    1fdc:	80 e3       	ldi	r24, 0x30	; 48
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	68 d0       	rcall	.+208    	; 0x20b2 <fputc>
    1fe2:	a2 fe       	sbrs	r10, 2
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <vfprintf+0x386>
    1fe6:	a1 fc       	sbrc	r10, 1
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <vfprintf+0x364>
    1fea:	88 e7       	ldi	r24, 0x78	; 120
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <vfprintf+0x368>
    1ff0:	88 e5       	ldi	r24, 0x58	; 88
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	0c c0       	rjmp	.+24     	; 0x2010 <vfprintf+0x384>
    1ff8:	8a 2d       	mov	r24, r10
    1ffa:	86 78       	andi	r24, 0x86	; 134
    1ffc:	51 f0       	breq	.+20     	; 0x2012 <vfprintf+0x386>
    1ffe:	a1 fe       	sbrs	r10, 1
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <vfprintf+0x37a>
    2002:	8b e2       	ldi	r24, 0x2B	; 43
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <vfprintf+0x37c>
    2006:	80 e2       	ldi	r24, 0x20	; 32
    2008:	a7 fc       	sbrc	r10, 7
    200a:	8d e2       	ldi	r24, 0x2D	; 45
    200c:	b6 01       	movw	r22, r12
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	50 d0       	rcall	.+160    	; 0x20b2 <fputc>
    2012:	89 14       	cp	r8, r9
    2014:	30 f4       	brcc	.+12     	; 0x2022 <vfprintf+0x396>
    2016:	b6 01       	movw	r22, r12
    2018:	80 e3       	ldi	r24, 0x30	; 48
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	4a d0       	rcall	.+148    	; 0x20b2 <fputc>
    201e:	9a 94       	dec	r9
    2020:	f8 cf       	rjmp	.-16     	; 0x2012 <vfprintf+0x386>
    2022:	8a 94       	dec	r8
    2024:	f3 01       	movw	r30, r6
    2026:	e8 0d       	add	r30, r8
    2028:	f1 1d       	adc	r31, r1
    202a:	80 81       	ld	r24, Z
    202c:	b6 01       	movw	r22, r12
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	40 d0       	rcall	.+128    	; 0x20b2 <fputc>
    2032:	81 10       	cpse	r8, r1
    2034:	f6 cf       	rjmp	.-20     	; 0x2022 <vfprintf+0x396>
    2036:	22 20       	and	r2, r2
    2038:	09 f4       	brne	.+2      	; 0x203c <vfprintf+0x3b0>
    203a:	4e ce       	rjmp	.-868    	; 0x1cd8 <vfprintf+0x4c>
    203c:	b6 01       	movw	r22, r12
    203e:	80 e2       	ldi	r24, 0x20	; 32
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	37 d0       	rcall	.+110    	; 0x20b2 <fputc>
    2044:	2a 94       	dec	r2
    2046:	f7 cf       	rjmp	.-18     	; 0x2036 <vfprintf+0x3aa>
    2048:	f6 01       	movw	r30, r12
    204a:	86 81       	ldd	r24, Z+6	; 0x06
    204c:	97 81       	ldd	r25, Z+7	; 0x07
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x3c8>
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	2b 96       	adiw	r28, 0x0b	; 11
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	7f 90       	pop	r7
    207a:	6f 90       	pop	r6
    207c:	5f 90       	pop	r5
    207e:	4f 90       	pop	r4
    2080:	3f 90       	pop	r3
    2082:	2f 90       	pop	r2
    2084:	08 95       	ret

00002086 <strnlen_P>:
    2086:	fc 01       	movw	r30, r24
    2088:	05 90       	lpm	r0, Z+
    208a:	61 50       	subi	r22, 0x01	; 1
    208c:	70 40       	sbci	r23, 0x00	; 0
    208e:	01 10       	cpse	r0, r1
    2090:	d8 f7       	brcc	.-10     	; 0x2088 <strnlen_P+0x2>
    2092:	80 95       	com	r24
    2094:	90 95       	com	r25
    2096:	8e 0f       	add	r24, r30
    2098:	9f 1f       	adc	r25, r31
    209a:	08 95       	ret

0000209c <strnlen>:
    209c:	fc 01       	movw	r30, r24
    209e:	61 50       	subi	r22, 0x01	; 1
    20a0:	70 40       	sbci	r23, 0x00	; 0
    20a2:	01 90       	ld	r0, Z+
    20a4:	01 10       	cpse	r0, r1
    20a6:	d8 f7       	brcc	.-10     	; 0x209e <strnlen+0x2>
    20a8:	80 95       	com	r24
    20aa:	90 95       	com	r25
    20ac:	8e 0f       	add	r24, r30
    20ae:	9f 1f       	adc	r25, r31
    20b0:	08 95       	ret

000020b2 <fputc>:
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	fb 01       	movw	r30, r22
    20bc:	23 81       	ldd	r18, Z+3	; 0x03
    20be:	21 fd       	sbrc	r18, 1
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <fputc+0x16>
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f ef       	ldi	r25, 0xFF	; 255
    20c6:	2c c0       	rjmp	.+88     	; 0x2120 <fputc+0x6e>
    20c8:	22 ff       	sbrs	r18, 2
    20ca:	16 c0       	rjmp	.+44     	; 0x20f8 <fputc+0x46>
    20cc:	46 81       	ldd	r20, Z+6	; 0x06
    20ce:	57 81       	ldd	r21, Z+7	; 0x07
    20d0:	24 81       	ldd	r18, Z+4	; 0x04
    20d2:	35 81       	ldd	r19, Z+5	; 0x05
    20d4:	42 17       	cp	r20, r18
    20d6:	53 07       	cpc	r21, r19
    20d8:	44 f4       	brge	.+16     	; 0x20ea <fputc+0x38>
    20da:	a0 81       	ld	r26, Z
    20dc:	b1 81       	ldd	r27, Z+1	; 0x01
    20de:	9d 01       	movw	r18, r26
    20e0:	2f 5f       	subi	r18, 0xFF	; 255
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	31 83       	std	Z+1, r19	; 0x01
    20e6:	20 83       	st	Z, r18
    20e8:	8c 93       	st	X, r24
    20ea:	26 81       	ldd	r18, Z+6	; 0x06
    20ec:	37 81       	ldd	r19, Z+7	; 0x07
    20ee:	2f 5f       	subi	r18, 0xFF	; 255
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
    20f2:	37 83       	std	Z+7, r19	; 0x07
    20f4:	26 83       	std	Z+6, r18	; 0x06
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <fputc+0x6e>
    20f8:	8b 01       	movw	r16, r22
    20fa:	ec 01       	movw	r28, r24
    20fc:	fb 01       	movw	r30, r22
    20fe:	00 84       	ldd	r0, Z+8	; 0x08
    2100:	f1 85       	ldd	r31, Z+9	; 0x09
    2102:	e0 2d       	mov	r30, r0
    2104:	09 95       	icall
    2106:	89 2b       	or	r24, r25
    2108:	e1 f6       	brne	.-72     	; 0x20c2 <fputc+0x10>
    210a:	d8 01       	movw	r26, r16
    210c:	16 96       	adiw	r26, 0x06	; 6
    210e:	8d 91       	ld	r24, X+
    2110:	9c 91       	ld	r25, X
    2112:	17 97       	sbiw	r26, 0x07	; 7
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	17 96       	adiw	r26, 0x07	; 7
    2118:	9c 93       	st	X, r25
    211a:	8e 93       	st	-X, r24
    211c:	16 97       	sbiw	r26, 0x06	; 6
    211e:	ce 01       	movw	r24, r28
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	08 95       	ret

0000212a <__ultoa_invert>:
    212a:	fa 01       	movw	r30, r20
    212c:	aa 27       	eor	r26, r26
    212e:	28 30       	cpi	r18, 0x08	; 8
    2130:	51 f1       	breq	.+84     	; 0x2186 <__ultoa_invert+0x5c>
    2132:	20 31       	cpi	r18, 0x10	; 16
    2134:	81 f1       	breq	.+96     	; 0x2196 <__ultoa_invert+0x6c>
    2136:	e8 94       	clt
    2138:	6f 93       	push	r22
    213a:	6e 7f       	andi	r22, 0xFE	; 254
    213c:	6e 5f       	subi	r22, 0xFE	; 254
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	8f 4f       	sbci	r24, 0xFF	; 255
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	af 4f       	sbci	r26, 0xFF	; 255
    2146:	b1 e0       	ldi	r27, 0x01	; 1
    2148:	3e d0       	rcall	.+124    	; 0x21c6 <__ultoa_invert+0x9c>
    214a:	b4 e0       	ldi	r27, 0x04	; 4
    214c:	3c d0       	rcall	.+120    	; 0x21c6 <__ultoa_invert+0x9c>
    214e:	67 0f       	add	r22, r23
    2150:	78 1f       	adc	r23, r24
    2152:	89 1f       	adc	r24, r25
    2154:	9a 1f       	adc	r25, r26
    2156:	a1 1d       	adc	r26, r1
    2158:	68 0f       	add	r22, r24
    215a:	79 1f       	adc	r23, r25
    215c:	8a 1f       	adc	r24, r26
    215e:	91 1d       	adc	r25, r1
    2160:	a1 1d       	adc	r26, r1
    2162:	6a 0f       	add	r22, r26
    2164:	71 1d       	adc	r23, r1
    2166:	81 1d       	adc	r24, r1
    2168:	91 1d       	adc	r25, r1
    216a:	a1 1d       	adc	r26, r1
    216c:	20 d0       	rcall	.+64     	; 0x21ae <__ultoa_invert+0x84>
    216e:	09 f4       	brne	.+2      	; 0x2172 <__ultoa_invert+0x48>
    2170:	68 94       	set
    2172:	3f 91       	pop	r19
    2174:	2a e0       	ldi	r18, 0x0A	; 10
    2176:	26 9f       	mul	r18, r22
    2178:	11 24       	eor	r1, r1
    217a:	30 19       	sub	r19, r0
    217c:	30 5d       	subi	r19, 0xD0	; 208
    217e:	31 93       	st	Z+, r19
    2180:	de f6       	brtc	.-74     	; 0x2138 <__ultoa_invert+0xe>
    2182:	cf 01       	movw	r24, r30
    2184:	08 95       	ret
    2186:	46 2f       	mov	r20, r22
    2188:	47 70       	andi	r20, 0x07	; 7
    218a:	40 5d       	subi	r20, 0xD0	; 208
    218c:	41 93       	st	Z+, r20
    218e:	b3 e0       	ldi	r27, 0x03	; 3
    2190:	0f d0       	rcall	.+30     	; 0x21b0 <__ultoa_invert+0x86>
    2192:	c9 f7       	brne	.-14     	; 0x2186 <__ultoa_invert+0x5c>
    2194:	f6 cf       	rjmp	.-20     	; 0x2182 <__ultoa_invert+0x58>
    2196:	46 2f       	mov	r20, r22
    2198:	4f 70       	andi	r20, 0x0F	; 15
    219a:	40 5d       	subi	r20, 0xD0	; 208
    219c:	4a 33       	cpi	r20, 0x3A	; 58
    219e:	18 f0       	brcs	.+6      	; 0x21a6 <__ultoa_invert+0x7c>
    21a0:	49 5d       	subi	r20, 0xD9	; 217
    21a2:	31 fd       	sbrc	r19, 1
    21a4:	40 52       	subi	r20, 0x20	; 32
    21a6:	41 93       	st	Z+, r20
    21a8:	02 d0       	rcall	.+4      	; 0x21ae <__ultoa_invert+0x84>
    21aa:	a9 f7       	brne	.-22     	; 0x2196 <__ultoa_invert+0x6c>
    21ac:	ea cf       	rjmp	.-44     	; 0x2182 <__ultoa_invert+0x58>
    21ae:	b4 e0       	ldi	r27, 0x04	; 4
    21b0:	a6 95       	lsr	r26
    21b2:	97 95       	ror	r25
    21b4:	87 95       	ror	r24
    21b6:	77 95       	ror	r23
    21b8:	67 95       	ror	r22
    21ba:	ba 95       	dec	r27
    21bc:	c9 f7       	brne	.-14     	; 0x21b0 <__ultoa_invert+0x86>
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	61 05       	cpc	r22, r1
    21c2:	71 05       	cpc	r23, r1
    21c4:	08 95       	ret
    21c6:	9b 01       	movw	r18, r22
    21c8:	ac 01       	movw	r20, r24
    21ca:	0a 2e       	mov	r0, r26
    21cc:	06 94       	lsr	r0
    21ce:	57 95       	ror	r21
    21d0:	47 95       	ror	r20
    21d2:	37 95       	ror	r19
    21d4:	27 95       	ror	r18
    21d6:	ba 95       	dec	r27
    21d8:	c9 f7       	brne	.-14     	; 0x21cc <__ultoa_invert+0xa2>
    21da:	62 0f       	add	r22, r18
    21dc:	73 1f       	adc	r23, r19
    21de:	84 1f       	adc	r24, r20
    21e0:	95 1f       	adc	r25, r21
    21e2:	a0 1d       	adc	r26, r0
    21e4:	08 95       	ret

000021e6 <_exit>:
    21e6:	f8 94       	cli

000021e8 <__stop_program>:
    21e8:	ff cf       	rjmp	.-2      	; 0x21e8 <__stop_program>
